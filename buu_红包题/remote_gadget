


Gadgets
=======


0x00000000000802ca: adc ah, byte ptr [rcx + 0x63480012]; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000018c4ed: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000009710a: adc ah, cl; clc; dec dword ptr [rax - 0x77]; shr ecx, 0x5c; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000008f121: adc al, 0; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000017dd1f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017dd89: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000989ca: adc al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000101bef: adc al, 0; add byte ptr [rax], al; add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x000000000013cc34: adc al, 0; add byte ptr [rax], al; add edx, 1; syscall; 
0x0000000000120054: adc al, 0; add byte ptr [rax], al; mov dword ptr [r13 + 0x20], 0; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x0000000000113220: adc al, 0; add byte ptr [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000001134ee: adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000009a1db: adc al, 0; add dword ptr [rax - 0x77], ecx; ret 0x4574; 
0x000000000009b5cb: adc al, 0; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x00000000000437fa: adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x00000000000436cc: adc al, 0; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000004396c: adc al, 0; add rsp, 0x20; pop rbx; ret; 
0x000000000009d4f8: adc al, 0; add rsp, 8; ret; 
0x000000000009c1b5: adc al, 0; call qword ptr [rax]; 
0x00000000000780e3: adc al, 0; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da7: adc al, 0; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000009d4d0: adc al, 0; lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d725: adc al, 0; lea rdx, [rip + 0xe3d72]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d485: adc al, 0; lea rdx, [rip + 0xe3ed2]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009cea5: adc al, 0; lea rdx, [rip + 0xe4332]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000009d55b: adc al, 0; lea rsi, [rip - 0xc4]; lea rdi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000999dd: adc al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009c605: adc al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009d69f: adc al, 0; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000098a39: adc al, 0; mov qword ptr [rax], rdi; ret; 
0x0000000000098a2f: adc al, 0; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x14b4a5]; mov qword ptr [rax], rdi; ret; 
0x000000000009d4f1: adc al, 0; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000009d4af: adc al, 0; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x0000000000096286: adc al, 0; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x0000000000096520: adc al, 0; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x000000000009d6e7: adc al, 0; mov rsi, rbp; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006406b: adc al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000064d5a: adc al, 0; movzx eax, al; mov rcx, qword ptr [rbp - 0x620]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064bd2: adc al, 0; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000065ce8: adc al, 0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000009d4b6: adc al, 0; ret; 
0x000000000009d4d7: adc al, 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000095d04: adc al, 0; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000009890f: adc al, 0; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000009d51e: adc al, 0; xor esi, esi; add rsp, 8; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000097995: adc al, 0; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x00000000000e2984: adc al, 0x10; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000d2994: adc al, 0x11; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000163a15: adc al, 0x13; jmp rdx; 
0x00000000000b991c: adc al, 0x16; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a8a45: adc al, 0x16; sub eax, edx; ret; 
0x000000000018160c: adc al, 0x16; sub eax, edx; vzeroupper; ret; 
0x000000000008e832: adc al, 0x24; call 0x8cf60; mov rdx, qword ptr [rsp]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000001555a6: adc al, 0x24; call qword ptr [rax + 0x48]; 
0x000000000010d4c3: adc al, 0x24; mov esi, dword ptr [rsp + 0xc]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000008e83b: adc al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000472e1: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x00000000000472a0: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000b96b3: adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000008c190: adc al, 0x31; ror byte ptr [rax - 0x7d], 0x7f; sbb byte ptr [rax], al; setne al; ret; 
0x0000000000181c2d: adc al, 0x3a; sub eax, edx; vzeroupper; ret; 
0x00000000001505fb: adc al, 0x41; call qword ptr [rdx]; 
0x0000000000044f9e: adc al, 0x44; mov edi, esp; mov eax, 0x81; syscall; 
0x00000000000b6c20: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x00000000000b7a83: adc al, 0x48; lea eax, [rdi + 0x15]; ret; 
0x00000000000aad0b: adc al, 0x48; lea eax, [rdi + rax + 0x30]; ret; 
0x0000000000084d0b: adc al, 0x48; lea ecx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000146247: adc al, 0x48; mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000090bfb: adc al, 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000026b60: adc al, 0x48; mov edx, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000008e655: adc al, 0x4c; mov edx, ebp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000000a707d: adc al, 0x66; mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x000000000012c883: adc al, 0x74; adc byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000013fe5d: adc al, 0x83; ret; 
0x00000000001825ab: adc al, 0x83; shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000147080: adc al, 0x88; add rdx, r8; jmp rdx; 
0x00000000000a7184: adc al, 0x90; add rdx, r8; jmp rdx; 
0x00000000000a70b3: adc al, 0x90; add rdx, rax; jmp rdx; 
0x0000000000087486: adc al, 0x90; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087451: adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000017f1b0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017d8de: adc al, 0x91; sub eax, edx; ret; 
0x0000000000163a11: adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000055f7c: adc al, 0x96; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x0000000000041797: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x00000000000a8bb3: adc al, 0xa; sub eax, edx; ret; 
0x000000000018178d: adc al, 0xa; sub eax, edx; vzeroupper; ret; 
0x00000000001218f7: adc al, 0xb2; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000562b1: adc al, 0xc0; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000562b5: adc al, 0xc6; xor eax, eax; ret; 
0x000000000018c628: adc al, 0xc7; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015e764: adc al, 0xc7; setne al; movzx eax, al; ret; 
0x000000000015e784: adc al, 0xc7; xor eax, eax; ret; 
0x0000000000056521: adc al, 0xc8; mov qword ptr [rax + rcx*8], rdx; xor eax, eax; ret; 
0x0000000000056525: adc al, 0xc8; xor eax, eax; ret; 
0x000000000018434a: adc al, 0xe; lea rcx, [rip + 0x1518d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000182c71: adc al, 0xe; lea rcx, [rip + 0x16866]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017d8d1: adc al, 0xe; lea rcx, [rip + 0x1bc06]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018972a: adc al, 0xe; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000017b9f1: adc al, 0xe; sub eax, edx; ret; 
0x00000000001827ba: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x00000000000baf78: adc al, 0xf1; or al, 0; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000f3d5b: adc al, 0xf3; call rcx; 
0x00000000000b7a79: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b6259: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x0000000000084eeb: adc al, 0xf6; ret 0x7420; 
0x00000000000b75f9: adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x0000000000049c17: adc al, 0xf; test ecx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000049737: adc al, 0xf; test esi, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c8688: adc al, 0xf; xchg eax, ebx; ret 0x3948; 
0x000000000012c65d: adc al, 0xfd; add al, byte ptr [rax]; add byte ptr [rax], al; mov edi, edx; syscall; 
0x000000000012ebe7: adc al, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x000000000014dd6e: adc al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x00000000000dbea2: adc al, 0xff; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x000000000004968f: adc al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000190438: adc al, 1; add byte ptr [rax], al; ret; 
0x000000000011dea1: adc al, 1; add byte ptr [rax], al; syscall; 
0x000000000010ed15: adc al, 2; call qword ptr [rbx + 0x40]; 
0x000000000007ad31: adc al, 2; lea rax, [rip + 0x12f166]; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x0000000000167b54: adc al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000052ae1: adc al, 9; ret 0x8d74; 
0x000000000006d94e: adc al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; xor eax, 0x13c004; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000082b61: adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x000000000017dec7: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017df31: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000010b3c1: adc al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000a2578: adc al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000007b425: adc al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x36], cl; mov qword ptr [rbp - 0x8e8], r9; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000006f573: adc al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x000000000008d2d9: adc al, byte ptr [rax]; call 0x34fd0; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000c8d46: adc al, byte ptr [rax]; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b96: adc al, byte ptr [rax]; lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bad85: adc al, byte ptr [rax]; lea rdx, [rip + 0xc04c2]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x000000000007ef0d: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e259: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1e9: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df81: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e107: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e299: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007de51: adc al, byte ptr [rax]; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000314ef: adc al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000007de13: adc al, byte ptr [rax]; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e160: adc al, byte ptr [rax]; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e1ad: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007ad38: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x0000000000080a3f: adc al, byte ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000802cc: adc al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000080213: adc al, byte ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000f05fd: adc al, byte ptr [rbx + 0x557403f8]; xor eax, eax; pop rbx; ret; 
0x000000000014c4d1: adc al, byte ptr [rbx - 0x7bf0fb06]; ret 0xfffe; 
0x0000000000117dfa: adc al, byte ptr [rbx]; add byte ptr [rax], al; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000168d2a: adc al, byte ptr [rbx]; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011ac2a: adc al, byte ptr [rcx]; add byte ptr [rax], al; call rax; 
0x00000000000b2097: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20b7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20d7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20f7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f54: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b2117: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2137: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2157: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4ca7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d28: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b1fa1: adc al, byte ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000187e9a: adc al, byte ptr [rdx]; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000008d2d8: adc al, byte ptr ss:[rax]; call 0x34fd0; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000141bf0: adc al, ch; and dh, byte ptr [rdi]; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x000000000009187f: adc al, ch; cmp dword ptr [rdx], -7; dec dword ptr [rax - 0x77]; ret; 
0x000000000010d686: adc al, ch; out 1, eax; add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e1307: adc al, ch; ret; 
0x000000000011618f: adc al, ch; wait; idiv r15; mov eax, 1; add rsp, 8; ret; 
0x0000000000086a6f: adc al, ch; xchg eax, ebx; call 0xffffffff89516a70; ret; 
0x0000000000153591: adc bh, al; adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000058637: adc bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000014f2f3: adc bh, byte ptr [rax + 1]; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x0000000000128e98: adc bh, dh; ret 0x8080; 
0x0000000000042ab8: adc bl, bl; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000000a00f5: adc bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000150716: adc bl, byte ptr [rdx + 0x31]; rcr byte ptr [rcx - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x000000000008cbd3: adc bl, ch; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000056fb2: adc bl, ch; jno 0x56fff; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000bccc4: adc bl, ch; or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000092730: adc bl, ch; ret; 
0x000000000014e8f3: adc bl, dh; movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f233: adc bl, dh; movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000016b250: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000ba4c6: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b79f6: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6206: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b9626: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b6bf6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a56: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c16: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5586: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b5576: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b9686: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b6c77: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c97: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5607: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b9707: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b6bb7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a17: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5547: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b9647: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b6d78: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7bd8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b56e8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b9808: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016b24f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b79f5: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6205: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b9625: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b6bf5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a55: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c15: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5585: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b5575: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b9685: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b6c76: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c96: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5606: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b9706: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b6bb6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a16: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5546: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b9646: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000001204e9: adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xc3e68], 2; ret; 
0x000000000008c772: adc byte ptr [r10 + 0x2a], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008cba2: adc byte ptr [r10 + 0x3a], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d346: adc byte ptr [r11 + 0x16], r14b; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008ea28: adc byte ptr [r11 + 0x4c], sil; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008d37d: adc byte ptr [r11 + 0xf], r14b; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008ea06: adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x000000000012be91: adc byte ptr [r13 + 0x481174c0], r8b; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000140166: adc byte ptr [r13 + 0x5b0c75c0], al; pop rbp; pop r12; ret; 
0x00000000000aa78f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000088e66: adc byte ptr [r15 + 0x48], dl; mov edi, ebp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000045f58: adc byte ptr [r15], cl; sahf; ret 0x3949; 
0x0000000000045b70: adc byte ptr [r15], cl; xchg eax, ebx; ret 0x3949; 
0x000000000010b4bb: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba1b2: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000579b6: adc byte ptr [r15], r9b; sahf; ret 0x3948; 
0x00000000000577ba: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3948; 
0x00000000000458e9: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3949; 
0x000000000013cc31: adc byte ptr [r8 + 0x14], dil; add edx, 1; syscall; 
0x000000000005636e: adc byte ptr [r8 + 0x39], cl; ret 0x8d48; 
0x000000000015da57: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000008bb50: adc byte ptr [r8 + 1], cl; ret 0x3948; 
0x00000000000e64d2: adc byte ptr [r8 + 1], r9b; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000088bc2: adc byte ptr [r8 + 1], r9b; ret; 
0x00000000000b96af: adc byte ptr [r8 - 0x12cfeba9], r9b; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000013dfc4: adc byte ptr [r8 - 0x73], r9b; add al, 0xd0; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x000000000013b97e: adc byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000012618c: adc byte ptr [r8 - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000092a6f: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x0000000000045f51: adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x00000000001195ef: adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 2; 
0x00000000000b5efc: adc byte ptr [r8 - 0x7cb6eb89], r9b; call 0x7f98a71d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000001188e6: adc byte ptr [r8 - 9], cl; ret 0xfffe; 
0x0000000000153593: adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x00000000000b962c: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b964e: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b968c: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b970e: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x0000000000088854: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000011883a: adc byte ptr [r9 + 9], cl; ror dword ptr [rcx + rcx*4 + 0x48], 1; or bl, ch; ret 0x1f0f; 
0x000000000009a5c6: adc byte ptr [r9 - 0x7d], al; ret; 
0x0000000000153385: adc byte ptr [r9], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000000cfb51: adc byte ptr [r9], r13b; ror byte ptr [rbp + 0x480f0750], 1; ret 0xfd83; 
0x000000000011dfff: adc byte ptr [rax + 0x113], bh; syscall; 
0x000000000011de9f: adc byte ptr [rax + 0x114], bh; syscall; 
0x00000000001122bf: adc byte ptr [rax + 0x115], bh; syscall; 
0x000000000011df4f: adc byte ptr [rax + 0x116], bh; syscall; 
0x000000000010b30f: adc byte ptr [rax + 0x11], bh; syscall; 
0x000000000011235f: adc byte ptr [rax + 0x11d], bh; syscall; 
0x000000000011f44f: adc byte ptr [rax + 0x120], bh; syscall; 
0x000000000010b3bf: adc byte ptr [rax + 0x12], bh; syscall; 
0x000000000011f4ef: adc byte ptr [rax + 0x12b], bh; syscall; 
0x000000000011f59f: adc byte ptr [rax + 0x133], bh; syscall; 
0x000000000013cc32: adc byte ptr [rax + 0x14], bh; add edx, 1; syscall; 
0x0000000000113fff: adc byte ptr [rax + 0x17], bh; syscall; 
0x000000000005f3cb: adc byte ptr [rax + 0x29], cl; ret 0xc148; 
0x00000000000cf400: adc byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000011efff: adc byte ptr [rax + 0x2c], bh; syscall; 
0x000000000011ed3f: adc byte ptr [rax + 0x2d], bh; syscall; 
0x00000000001493b8: adc byte ptr [rax + 0x31], cl; ret 0xb70f; 
0x00000000000c7a88: adc byte ptr [rax + 0x39], cl; fisttp word ptr [rdi]; xchg eax, ebx; ret; 
0x000000000005636f: adc byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x0000000000045b17: adc byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x00000000000fa697: adc byte ptr [rax + 0x39], cl; ret 0x974; 
0x000000000012e091: adc byte ptr [rax + 0x39], cl; ret 0x977; 
0x00000000000c6a0f: adc byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000005755d: adc byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000000f7e27: adc byte ptr [rax + 0x39], cl; ret 0xf375; 
0x000000000009d8f6: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x0000000000096a6e: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000015d94f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x000000000011f71f: adc byte ptr [rax + 0x45], bh; syscall; 
0x000000000011f7bf: adc byte ptr [rax + 0x46], bh; syscall; 
0x000000000015da58: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000141f48: adc byte ptr [rax + 0x81], bh; syscall; 
0x000000000011ddff: adc byte ptr [rax + 0xe8], bh; syscall; 
0x0000000000056456: adc byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000014f3ae: adc byte ptr [rax + 1], bh; ret; 
0x00000000000cdc8e: adc byte ptr [rax + 1], cl; clc; ret; 
0x00000000000e64d3: adc byte ptr [rax + 1], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000aad06: adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000087f95: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000008bb51: adc byte ptr [rax + 1], cl; ret 0x3948; 
0x000000000012a4d8: adc byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000005767e: adc byte ptr [rax + 1], cl; ret; 
0x000000000014f3ad: adc byte ptr [rax + 1], dil; ret; 
0x00000000000f5fcd: adc byte ptr [rax + 3], cl; add eax, dword ptr [rax + 0x75040878]; mov edi, 0xf708588b; ret; 
0x0000000000067ccf: adc byte ptr [rax + rax], 0xe8; stc; sar ah, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000062f54: adc byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000112be0: adc byte ptr [rax + rax], dl; call 0x113410; add rsp, 0x18; ret; 
0x00000000000b9834: adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b9732: adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b96b0: adc byte ptr [rax - 0x12cfeba9], cl; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000015a61b: adc byte ptr [rax - 0x39], cl; ret; 
0x00000000001218f4: adc byte ptr [rax - 0x73], cl; adc al, 0xb2; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000001188e3: adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 9], cl; ret 0xfffe; 
0x0000000000175d74: adc byte ptr [rax - 0x73], cl; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000014e36c: adc byte ptr [rax - 0x73], cl; adc eax, 0x60c4c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000121a3f: adc byte ptr [rax - 0x73], cl; add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000034dfa: adc byte ptr [rax - 0x73], cl; add al, 0xb7; mov eax, dword ptr [rax + rdx]; ret; 
0x000000000013dfc5: adc byte ptr [rax - 0x73], cl; add al, 0xd0; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x000000000009e0e4: adc byte ptr [rax - 0x73], cl; add eax, 0x1b854; cmove rax, rdx; ret; 
0x000000000009d731: adc byte ptr [rax - 0x73], cl; add eax, 0x1c7e7; cmovne rax, rdx; ret; 
0x000000000009d491: adc byte ptr [rax - 0x73], cl; add eax, 0x1c9e7; cmovne rax, rdx; ret; 
0x000000000009ceb1: adc byte ptr [rax - 0x73], cl; add eax, 0x1cf27; cmovne rax, rdx; ret; 
0x0000000000117826: adc byte ptr [rax - 0x73], cl; add eax, 0xd0802; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085897: adc byte ptr [rax - 0x73], cl; jno 0x8589d; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x0000000000121b1c: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000121a3e: adc byte ptr [rax - 0x73], r9b; add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000121b1b: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000031a0b: adc byte ptr [rax - 0x75], cl; add eax, 0x1b894d; lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015abbe: adc byte ptr [rax - 0x75], cl; add eax, 0x8a98a; lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000091377: adc byte ptr [rax - 0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000026b63: adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x000000000014dc4f: adc byte ptr [rax - 0x75], cl; and al, 0x48; call qword ptr [rax + 0x28]; 
0x000000000012110c: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012116d: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000147f13: adc byte ptr [rax - 0x75], cl; or byte ptr [r9 + r9*4 - 0x1a], cl; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000881df: adc byte ptr [rax - 0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000154e4e: adc byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000b4d9c: adc byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000031648: adc byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000080093: adc byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x75]; xor eax, 0x163eca; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f7b: adc byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x75]; xor eax, 0x169fe2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000148c94: adc byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax; 
0x000000000012618d: adc byte ptr [rax - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008748b: adc byte ptr [rax - 0x77], cl; jo 0x874d0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000109497: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000001187e1: adc byte ptr [rax - 0x77], cl; or byte ptr [r9 - 0x75], r9b; or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x00000000001457a0: adc byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 8]; 
0x000000000014646f: adc byte ptr [rax - 0x77], cl; out dx, eax; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x00000000000bc24e: adc byte ptr [rax - 0x77], cl; out dx, eax; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000086399: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000096296: adc byte ptr [rax - 0x77], cl; ret 0x4890; 
0x00000000000c3d73: adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000009266c: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000097e1e: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000012cb35: adc byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000112f2c: adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000092a70: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x0000000000126302: adc byte ptr [rax - 0x77], cl; ret 0xff41; 
0x00000000000fb245: adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000045f52: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x00000000001424c4: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000172c97: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000b0b44: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x00000000001195f0: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 2; 
0x0000000000172cd3: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000b5efd: adc byte ptr [rax - 0x7cb6eb89], cl; call 0x7f98a71d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x000000000011fc12: adc byte ptr [rax - 0x7d], cl; call 0x6621629a; ret 0x894c; 
0x00000000000939fb: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000aaa70: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000001564b8: adc byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000065861: adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a6f3f: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0xf; mov esi, 0x75c98408; in eax, dx; xor eax, eax; ret; 
0x0000000000155bf5: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x00000000001019d3: adc byte ptr [rax - 1], bh; ret; 
0x00000000001188e7: adc byte ptr [rax - 9], cl; ret 0xfffe; 
0x00000000000c742c: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000180141: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e0d1: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000f14d1: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000011fb5c: adc byte ptr [rax], al; add byte ptr [rax], al; add bh, al; test eax, esi; idiv edi; jmp qword ptr [rdi + 0x6d]; 
0x0000000000120252: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x000000000010fb94: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000153594: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000112486: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000004892c: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001470e2: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014703e: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014700e: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x00000000000834e9: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000145705: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000ba6e1: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000063ba1: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000011290b: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000f7059: adc byte ptr [rax], al; add byte ptr [rbp - 0x76df8b40], al; ret 0xe283; 
0x000000000010e046: adc byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000063199: adc byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000006f7f3: adc byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x5b], cl; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x000000000006f812: adc byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x0000000000027079: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007a885: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg edx, esp; and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000110d62: adc byte ptr [rax], al; add cl, ch; ret; 
0x00000000000e3745: adc byte ptr [rax], al; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000dc2d5: adc byte ptr [rax], al; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc28f: adc byte ptr [rax], al; lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e5: adc byte ptr [rax], al; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0b8: adc byte ptr [rax], al; lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff5: adc byte ptr [rax], al; lea rdi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfcc: adc byte ptr [rax], al; lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbafa: adc byte ptr [rax], al; lea rdi, [rip + 0x10ac1d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc87a: adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000a6fd9: adc byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x00000000000a717e: adc byte ptr [rax], al; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000e1895: adc byte ptr [rax], al; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e3685: adc byte ptr [rax], al; mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e3535: adc byte ptr [rax], al; mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000009a862: adc byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000a70af: adc byte ptr [rax], al; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x00000000000e1255: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e134d: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000dc9d5: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000287e7: adc byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x00000000000536e0: adc byte ptr [rax], al; ret; 
0x00000000000dbb01: adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000147133: adc byte ptr [rax], ch; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x00000000000b962d: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b964f: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b968d: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b970f: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9811: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b7ddc: adc byte ptr [rax], dh; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000010e045: adc byte ptr [rax], dl; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000063368: adc byte ptr [rax], dl; add byte ptr [rax], al; pop rbx; ret; 
0x000000000011fb5b: adc byte ptr [rax], r8b; add byte ptr [rax], al; add bh, al; test eax, esi; idiv edi; jmp qword ptr [rdi + 0x6d]; 
0x000000000009e4db: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x16b07]; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009ce7b: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x18087]; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009cd5b: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1b197]; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x000000000009e53b: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x8fc7]; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x000000000009d41b: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0xa147]; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009d35b: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0xa157]; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000009ce0b: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0xa7a7]; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x0000000000101723: adc byte ptr [rbp + 0x31], al; leave; push 0; call 0x101680; add rsp, 0x18; ret; 
0x0000000000115a60: adc byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; idiv byte ptr [rax + 0x118]; syscall; 
0x0000000000149295: adc byte ptr [rbp + 0x31], cl; ret 0x314d; 
0x00000000000a54b8: adc byte ptr [rbp + 0x39], cl; ror byte ptr [rbp - 0x73], 1; push rsp; adc byte ptr ss:[rcx + 0xf], al; xchg eax, ebx; ret; 
0x0000000000147f0f: adc byte ptr [rbp + 0x481074c0], al; mov eax, dword ptr [rbx + 8]; mov rsi, r12; mov rdi, rbx; call qword ptr [rax]; 
0x000000000012be92: adc byte ptr [rbp + 0x481174c0], al; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000015467a: adc byte ptr [rbp + 0x487974c0], al; mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x00000000001458fd: adc byte ptr [rbp + 0x494974c0], al; mov edi, dword ptr [rbp]; mov rsi, r12; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000140167: adc byte ptr [rbp + 0x5b0c75c0], al; pop rbp; pop r12; ret; 
0x0000000000147ac8: adc byte ptr [rbp + 0x840fc0], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x00000000000b7dd8: adc byte ptr [rbp + rcx*4 + 0x1d], cl; adc byte ptr [rax], dh; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65cd: adc byte ptr [rbp + rcx*4 + 0x1d], cl; cmp eax, dword ptr [rsi + 0xf]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69df: adc byte ptr [rbp + rcx*4 + 0x1d], cl; insd dword ptr [rdi], dx; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6599: adc byte ptr [rbp + rcx*4 + 0x1d], cl; outsd dx, dword ptr [rsi]; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65b8: adc byte ptr [rbp + rcx*4 + 0x1d], cl; push rax; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014eb60: adc byte ptr [rbp + rcx*4 + 0x60], al; dec dword ptr [rax - 0x75]; jo 0x14ebae; mov dword ptr [rbx + 0x48], esp; bswap r12d; call qword ptr [rax + 0x18]; 
0x0000000000055f45: adc byte ptr [rbp - 0x6d71f02e], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000bbfae: adc byte ptr [rbp - 0x77], cl; int1; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000038714: adc byte ptr [rbp - 0x7cfeecac], cl; ret; 
0x000000000008d347: adc byte ptr [rbx + 0x16], dh; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000063aa1: adc byte ptr [rbx + 0x1f7426fa], al; mov eax, 0xffffffff; ret; 
0x000000000012c885: adc byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000047ea2: adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000008e9c2: adc byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x000000000008ea29: adc byte ptr [rbx + 0x4c], dh; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000080529: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000031625: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000476e2: adc byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x0000000000121195: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121655: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121355: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001212c5: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121515: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001215b5: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001216e5: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121815: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001213e5: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121225: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121475: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000008d37e: adc byte ptr [rbx + 0xf], dh; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008ea07: adc byte ptr [rbx + 6], dh; movzx eax, byte ptr [rax]; ret; 
0x000000000015e61e: adc byte ptr [rbx - 0x14d3dba4], cl; int 0xe8; out 0xb, al; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000926c2: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000000a2867: adc byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x0000000000086c66: adc byte ptr [rbx - 0x3b7cb7ff], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000015591f: adc byte ptr [rbx - 0x3d], bl; nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x0000000000147e6f: adc byte ptr [rbx - 0x3d], bl; nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000010ced8: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000009cfac: adc byte ptr [rbx - 0x67ccf17], al; or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000013b14a: adc byte ptr [rbx - 0x73], al; add dword ptr [rdx], r8d; pop rbx; ret; 
0x00000000000f7263: adc byte ptr [rbx - 0x7bf00008], al; ret; 
0x00000000000bb4cf: adc byte ptr [rbx - 0x7cb703ba], cl; ret; 
0x000000000012c880: adc byte ptr [rbx], bh; push rbx; adc al, 0x74; adc byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000088855: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000001493c5: adc byte ptr [rcx + 0x31], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000a34a9: adc byte ptr [rcx + 0x39], cl; fisttp dword ptr [rdi]; xchg eax, ebx; ret; 
0x0000000000055cbd: adc byte ptr [rcx + 0x415d5bd0], cl; pop rsp; ret; 
0x00000000000e2b8f: adc byte ptr [rcx + 0x448948d0], cl; and al, 0x18; mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2aef: adc byte ptr [rcx + 0x448948d0], cl; and al, 0x18; mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000042aa7: adc byte ptr [rcx + 0x8000e2], al; add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000087080: adc byte ptr [rcx + 0xf], al; xchg eax, ebx; ret 0x394c; 
0x00000000000a2adb: adc byte ptr [rcx + 0xf], al; xchg eax, ebx; ret; 
0x000000000008707f: adc byte ptr [rcx + 0xf], r8b; xchg eax, ebx; ret 0x394c; 
0x0000000000120b90: adc byte ptr [rcx + 1], cl; ror byte ptr [rcx + rdi - 0x39], 0xf; xchg bl, dl; add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x000000000011883b: adc byte ptr [rcx + 9], cl; ror dword ptr [rcx + rcx*4 + 0x48], 1; or bl, ch; ret 0x1f0f; 
0x00000000000df48c: adc byte ptr [rcx + rcx*4 + 0x34], cl; sbb byte ptr [rax - 0x7d], cl; ret; 
0x0000000000118914: adc byte ptr [rcx + rcx*4 + 4], al; and al, 0x48; mov dword ptr [rsp + 8], ebx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000088713: adc byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x0000000000126686: adc byte ptr [rcx + rcx*4 - 0x12], cl; xor r15d, r15d; call rax; 
0x0000000000045d45: adc byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x0000000000046391: adc byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000112979: adc byte ptr [rcx + rcx*4 - 0x30], al; mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x00000000000462d4: adc byte ptr [rcx + rcx*4 - 2], cl; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000b9792: adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b9772: adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x0000000000045f4e: adc byte ptr [rcx - 0x73], cl; adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x000000000010fb57: adc byte ptr [rcx - 0x75], cl; add byte ptr [rax - 0x77], cl; ret 0xfd83; 
0x000000000012c800: adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx - 0x74f3db8c], 0x7c; and al, 8; mov eax, 0xe6; syscall; 
0x0000000000120543: adc byte ptr [rcx - 0x77], cl; add byte ptr [rax - 0x39], cl; add eax, 0xc3e0e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001204c3: adc byte ptr [rcx - 0x77], cl; add byte ptr [rax - 0x39], cl; add eax, 0xc3e8e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000041644: adc byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x000000000011872b: adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000013b13c: adc byte ptr [rcx - 0x78], al; sbb cl, byte ptr [rcx - 0x7d]; ret 0x4502; 
0x000000000009a5c7: adc byte ptr [rcx - 0x7d], al; ret; 
0x00000000000b60d1: adc byte ptr [rcx - 0x7d], cl; call 0x7f98a8f9; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x00000000000b2809: adc byte ptr [rcx - 0x7d], cl; call 0xffffffffa7913721; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000017ba73: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000017f617: adc byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000010c136: adc byte ptr [rcx - 0xa], al; ret 0x4901; 
0x000000000018d427: adc byte ptr [rcx - 1], bl; vmovups zmmword ptr [rdi], zmm0; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000153386: adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000001510ca: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000015e60a: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000011e7b1: adc byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000000c8f39: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001485e9: adc byte ptr [rcx], bh; ret; 
0x00000000000481ee: adc byte ptr [rcx], ch; ret 0xc269; 
0x00000000000cfb52: adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xfd83; 
0x0000000000152e64: adc byte ptr [rcx], cl; add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x00000000000316c5: adc byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000126407: adc byte ptr [rcx], dh; idiv byte ptr [rdi + 0x2000004]; call rcx; 
0x0000000000089540: adc byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000012c682: adc byte ptr [rcx], dh; rol bl, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xe5; syscall; 
0x0000000000091f94: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x73], cl; xor eax, 0xffffe272; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c8e: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x73], cl; xor eax, 0xffffe578; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012a503: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000001351b3: adc byte ptr [rcx], dh; shr al, 0xe5; ret 0xfff4; 
0x0000000000153381: adc byte ptr [rcx], dh; test bh, 0x43; adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000000fdaf3: adc byte ptr [rdi + 0x12], dh; movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000088e67: adc byte ptr [rdi + 0x48], dl; mov edi, ebp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000011493d: adc byte ptr [rdi + rcx + 0x43], cl; push rax; sbb byte ptr [rax - 0x77], cl; and al, 0x20; mov eax, 0x65; syscall; 
0x000000000013fa9c: adc byte ptr [rdi - 0x10], ch; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000000dbd86: adc byte ptr [rdi - 0x3a], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000077dac: adc byte ptr [rdi], bl; adc eax, dword ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000010b4bc: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2cd: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000ba1b3: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000351f5: adc byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x000000000012f332: adc byte ptr [rdi], cl; mov bh, 0xc6; or eax, edi; bswap eax; ret; 
0x0000000000135593: adc byte ptr [rdi], cl; mov bh, 0xf6; push 2; call 0x134b30; add rsp, 0x18; ret; 
0x000000000008d3d8: adc byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x00000000000579b7: adc byte ptr [rdi], cl; sahf; ret 0x3948; 
0x0000000000045f59: adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x0000000000127116: adc byte ptr [rdi], cl; test byte ptr [rbx - 0x7d000000], ch; ret 0x8801; 
0x000000000010bd28: adc byte ptr [rdi], cl; test byte ptr [rdi - 0x9fffffd], bl; ret 0xf20; 
0x000000000004b970: adc byte ptr [rdi], cl; test dh, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x0000000000175d78: adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000018e563: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000017cc61: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017cd51: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017cb71: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000018599b: adc byte ptr [rdi], cl; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018449f: adc byte ptr [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x000000000018569f: adc byte ptr [rdi], cl; xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000184d9f: adc byte ptr [rdi], cl; xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018509f: adc byte ptr [rdi], cl; xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000184797: adc byte ptr [rdi], cl; xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017d5b9: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000017d111: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017c8a1: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017d2f1: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017ca81: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017d4d1: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017d3e1: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017cd23: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ce13: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017cc33: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000184a44: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185644: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185944: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185044: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000184d44: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000018473c: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c991: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000001808bd: adc byte ptr [rdi], cl; xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001806dd: adc byte ptr [rdi], cl; xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001810b5: adc byte ptr [rdi], cl; xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017ffd5: adc byte ptr [rdi], cl; xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180ed5: adc byte ptr [rdi], cl; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017cb43: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c963: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ca53: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c873: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000005752a: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x00000000000455ff: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x000000000010307f: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x8944; 
0x0000000000057fc7: adc byte ptr [rdi], r9b; sahf; ret 0x3948; 
0x0000000000057529: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3948; 
0x00000000000455fe: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3949; 
0x00000000001204ea: adc byte ptr [rdx + 0x13], dh; mov qword ptr [rip + 0xc3e68], 2; ret; 
0x000000000008c773: adc byte ptr [rdx + 0x2a], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008cba3: adc byte ptr [rdx + 0x3a], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000010b933: adc byte ptr [rdx + 1], ch; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000bbc4c: adc byte ptr [rdx + 1], ch; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb898: adc byte ptr [rdx + 1], ch; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bbcc6: adc byte ptr [rdx + 1], ch; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000160693: adc byte ptr [rdx + 2], ch; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000135ee3: adc byte ptr [rdx + 2], ch; call 0x135940; add rsp, 0x18; ret; 
0x00000000001606a3: adc byte ptr [rdx + 3], ch; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000536cb: adc byte ptr [rdx + 6], bh; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000120852: adc byte ptr [rdx + 8], dh; seta al; movzx eax, al; neg eax; ret; 
0x00000000001019ea: adc byte ptr [rdx + 8], dh; setne al; movzx eax, al; neg eax; ret; 
0x000000000017a4fc: adc byte ptr [rdx], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000010e142: adc byte ptr [rdx], al; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; mov eax, 0x5c; syscall; 
0x000000000010b923: adc byte ptr [rdx], ch; call 0x10c120; add rsp, 0x18; ret; 
0x000000000018bacb: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000194c96: adc byte ptr [rip + 0x23de8], al; divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000112e04: adc byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000019679b: adc byte ptr [rip - 0x148a1800], al; call 0xffffffffc761c3a5; add eax, 0x510e1; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000042a93: adc byte ptr [rip - 0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x000000000018e533: adc byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x000000000018af75: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018b97a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000018af70: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a7795: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000000ab5cb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000000a77db: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x00000000000aa790: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000b575b: adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000b575a: adc byte ptr [rsi + 0xf], r12b; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000ba00b: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000ba1a9: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000018d4ca: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000b5627: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b9753: adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000ba008: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000cebda: adc byte ptr [rsp - 0x10], al; ret; 
0x0000000000043400: adc byte ptr [rsp - 4], al; mov dword ptr [rdi], edx; ret; 
0x00000000000432f0: adc byte ptr [rsp - 4], al; ret; 
0x0000000000042f24: adc byte ptr [rsp - 8], al; ret; 
0x0000000000184a47: adc byte ptr es:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a717d: adc byte ptr ss:[rax], al; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000a54bf: adc byte ptr ss:[rcx + 0xf], al; xchg eax, ebx; ret; 
0x0000000000114375: adc ch, byte ptr [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x0000000000153e52: adc ch, ch; dec dword ptr [rax - 0x2f]; call 0xffffffff895e05e5; ret; 
0x000000000018c4e6: adc cl, al; call 0x75e0fcfd; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000012f32f: adc cl, al; out 0x10, eax; movzx eax, si; or eax, edi; bswap eax; ret; 
0x00000000000cf8d8: adc cl, byte ptr [rax + 0x29]; ret 0x148; 
0x0000000000047e75: adc cl, byte ptr [rax - 0x73]; adc eax, 0x1a2293; call 0xbbb80; pop rbx; ret; 
0x000000000003524b: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003521b: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000092a85: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000003524e: adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003521e: adc cl, byte ptr [rax - 0x75]; push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000005606c: adc cl, byte ptr [rax - 0x77]; push rdi; push -0xcd17; jmp qword ptr [rsi + 0x2e]; 
0x000000000011509e: adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x000000000007e702: adc cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x00000000000c86c9: adc cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x00000000000a19ab: adc cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x0000000000038798: adc cl, byte ptr [rax - 0x7d]; ret 0x8b08; 
0x000000000008c560: adc cl, byte ptr [rax - 0x7d]; ret; 
0x000000000012b6e5: adc cl, byte ptr [rax - 0x7d]; ror byte ptr [rax + 0x48], 0x39; sal byte ptr [rdx - 0xf], 1; xor eax, eax; ret; 
0x00000000000b4fd5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000140f6a: adc cl, byte ptr [rbx + 0x39414c40]; test eax, ebx; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000000b211f: adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b213f: adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b215f: adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4caf: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d90: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b1fa5: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000fdaf5: adc cl, byte ptr [rdi]; mov dh, 0xd1; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000112c64: adc cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000dc4f2: adc cl, byte ptr [rsi - 0x76b7000c]; ret; 
0x0000000000088ce8: adc cl, ch; ret 0xfff9; 
0x0000000000181599: adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000001580bd: adc dh, byte ptr [rcx]; fisttp dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x00000000000ed2e5: adc dh, byte ptr [rcx]; rol byte ptr [rax + 0xf00657b], cl; xchg eax, ebp; ret 0xd201; 
0x000000000011f638: adc dh, byte ptr [rdi + 0xd]; movzx edi, di; lea rax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000095ff6: adc dh, dh; ret 0xf0f; 
0x000000000002fbe0: adc dh, dh; ret; 
0x0000000000113cce: adc dh, dl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000084a53: adc dl, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000082c15: adc dl, byte ptr [rsi]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000cf874: adc dword ptr [r8], r8d; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000014f2fb: adc dword ptr [rax + 0x20], edx; ret; 
0x0000000000086a1c: adc dword ptr [rax + 0x30], eax; mov dword ptr [rbx + 0x74], edx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000014f2c0: adc dword ptr [rax + 0x30], eax; ret; 
0x000000000008dc66: adc dword ptr [rax + 0x31000000], -0x40; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000082f23: adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000010b6f6: adc dword ptr [rax + 0x39], ecx; ret; 
0x00000000000871d6: adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000112975: adc dword ptr [rax + 0x44102444], ecx; mov eax, edx; mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x0000000000120396: adc dword ptr [rax + 0x63], ecx; fisttp dword ptr [rax - 0x77]; sbb eax, 0xc3fbf; pop rbx; ret; 
0x000000000014bd00: adc dword ptr [rax + 8], eax; ret; 
0x0000000000063a5b: adc dword ptr [rax + rbx], eax; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000472dd: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000004729c: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000026ea7: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; jmp rax; 
0x0000000000026b98: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000029b62: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000052e54: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055991: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba2c: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp], 0; call rax; 
0x00000000000835e3: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call rax; 
0x000000000014263a: adc dword ptr [rax + rcx*2 + 0x33], esp; cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000093289: adc dword ptr [rax - 0x3f], ecx; call 0x50967a95; add dword ptr [rax - 0x77], ecx; adc eax, 0x151037; ret; 
0x000000000012e34c: adc dword ptr [rax - 0x73], ecx; adc eax, 0xbbdbc; call 0xbbb80; add rsp, 8; ret; 
0x0000000000035529: adc dword ptr [rax - 0x75], ecx; pop rax; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000002641a: adc dword ptr [rax - 0x77], ecx; add eax, 0x1c3d26; ret; 
0x00000000000bace7: adc dword ptr [rax - 0x7d], ecx; ret 0x4504; 
0x00000000000a696b: adc dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000000a11fb: adc dword ptr [rax - 0x7d], ecx; ret 0x8301; 
0x0000000000182feb: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x000000000017e067: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ffd9: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000006dd55: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000019669b: adc dword ptr [rax], eax; add byte ptr [rax], al; nop; ret; 
0x000000000010b311: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000cea71: adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000e1703: adc dword ptr [rax], eax; and byte ptr [rcx], al; mov eax, 0x38; syscall; 
0x00000000000d333d: adc dword ptr [rax], eax; mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000ceab5: adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000cea95: adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d056c: adc dword ptr [rax], eax; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000000d0797: adc dword ptr [rax], eax; movaps xmmword ptr [rax], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000cf875: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cf795: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d04ce: adc dword ptr [rax], eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008639f: adc dword ptr [rax], eax; ret; 
0x00000000000c8b9d: adc dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d1084: adc dword ptr [rax], eax; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000ce9a5: adc dword ptr [rax], eax; xor ebx, ebx; mov dword ptr fs:[rax], 0x4b; mov rax, rbx; pop rbx; ret; 
0x00000000000cf794: adc dword ptr [rax], r8d; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000182766: adc dword ptr [rbp + 0x31000002], -0x40; vzeroupper; ret; 
0x00000000000918ca: adc dword ptr [rbp + 0x38], eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000016b916: adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x4ddde; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012ac41: adc dword ptr [rbp - 0x78], ebp; call rax; 
0x000000000012aa13: adc dword ptr [rbp - 0x78], ecx; call rax; 
0x000000000012b246: adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012ae31: adc dword ptr [rbp - 0x78], edi; call rcx; 
0x000000000012b174: adc dword ptr [rbp - 0x78], esi; call rax; 
0x000000000012acac: adc dword ptr [rbp - 0x78], esp; call rax; 
0x00000000000a082e: adc dword ptr [rbp - 0x7c], eax; rol byte ptr [rax + 0xf], 0x95; mov dword ptr [rbp + 0x38], 0x940f41d0; ret; 
0x000000000009c5aa: adc dword ptr [rbx + 0x18], eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d91f: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008d923: adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000125e0a: adc dword ptr [rbx + 0x30], eax; mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000910ef: adc dword ptr [rbx + 0x38], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009102a: adc dword ptr [rbx + 0x38], eax; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000009c138: adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rdi; call rcx; 
0x000000000009c20f: adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rsi; call rcx; 
0x000000000011e175: adc dword ptr [rbx + 0x407426fa], eax; ret; 
0x0000000000090ba2: adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000008a1fd: adc dword ptr [rbx + 0xe0], ecx; add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000008d91b: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008dc72: adc dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000014e6eb: adc dword ptr [rbx - 0x12], esi; dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x00000000000d069b: adc dword ptr [rbx - 9], esp; dec dword ptr [rax - 0x77]; ret; 
0x000000000009ca85: adc dword ptr [rbx], eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000048902: adc dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ba2d8: adc dword ptr [rbx], eax; ret; 
0x00000000000ba251: adc dword ptr [rbx], esp; ret; 
0x000000000013b445: adc dword ptr [rcx + 0x4e2c1f2], ecx; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000000044017: adc dword ptr [rcx + 0x78], esi; movups xmmword ptr [rcx + 0x88], xmm7; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000004401b: adc dword ptr [rcx + 0x88], edi; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000018d78b: adc dword ptr [rcx + 3], ebx; vmovups zmmword ptr [r9 + 0x100], zmm12; vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d792: adc dword ptr [rcx + 4], esp; vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d799: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d7a0: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d7a7: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000196929: adc dword ptr [rcx + rdi*8 - 1], 0x48; add esp, 0x80; pop rbx; ret; 
0x00000000000ba243: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba247: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba24c: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x000000000004855b: adc dword ptr [rcx - 0x389bffe7], edi; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000010410f: adc dword ptr [rcx - 0x77], ecx; ret 0xdb31; 
0x00000000000a33e9: adc dword ptr [rcx - 0x7d], ecx; ret 0x4c01; 
0x000000000018d442: adc dword ptr [rcx - 1], ebx; ret; 
0x000000000018d406: adc dword ptr [rcx - 1], edi; ret; 
0x000000000018d43b: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018d639: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3ff: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d632: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f8: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d62b: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f1: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000efcbc: adc dword ptr [rcx], eax; ret 0x428d; 
0x00000000000ba240: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000018a922: adc dword ptr [rcx], edx; adc dword ptr [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018a924: adc dword ptr [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000005633e: adc dword ptr [rcx], esi; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000010b4ba: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2cb: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000ba1b1: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000155d1d: adc dword ptr [rdi + 0x18], eax; mov dword ptr [rdi + 0x28], edx; ret; 
0x000000000010b4be: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2cf: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000448c4: adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b4c2: adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2d3: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000448c8: adc dword ptr [rdi + 0x40], eax; movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b4c6: adc dword ptr [rdi + 0x40], eax; ret; 
0x00000000000448cc: adc dword ptr [rdi + 0x50], eax; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x00000000000448d0: adc dword ptr [rdi + 0x60], eax; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b8bd: adc dword ptr [rdi + 0x68], esi; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x00000000000448d4: adc dword ptr [rdi + 0x70], eax; ret; 
0x000000000010b8c6: adc dword ptr [rdi + 0x78], edi; ret; 
0x000000000010c22f: adc dword ptr [rdi + 0xe8], esi; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c23b: adc dword ptr [rdi + 0xf8], edi; ret; 
0x000000000018d434: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018db41: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018d3ea: adc dword ptr [rdi + 3], ebx; vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018db12: adc dword ptr [rdi + 3], edx; vmovups zmmword ptr [rsi - 0x100], zmm2; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000090ad8: adc dword ptr [rdi + 8], eax; ret; 
0x000000000013b4d0: adc dword ptr [rdi + rdx + 8], eax; ret; 
0x00000000000ba013: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x00000000000ba1b5: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba188: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000ba18d: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000ba1ba: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x00000000000ba192: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000ba197: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x000000000018d8f4: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d8fb: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d902: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d909: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000042e25: adc dword ptr [rdi], eax; and rdx, rax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000005880d: adc dword ptr [rdi], eax; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000004321d: adc dword ptr [rdi], eax; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x000000000010b4b7: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba1ae: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba010: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000044c72: adc dword ptr [rdi], eax; ret; 
0x000000000018d42e: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000042e9b: adc dword ptr [rdi], ecx; subsd xmm0, xmm1; ret; 
0x0000000000043240: adc dword ptr [rdi], ecx; subss xmm0, xmm1; ret; 
0x000000000018fb60: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000a255d: adc dword ptr [rdi], ecx; xchg eax, ebx; ret; 
0x000000000018db3b: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db5c: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000150d2b: adc dword ptr [rdi], esi; add byte ptr [rax], al; call qword ptr [rax]; 
0x00000000000ba2c8: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000011321e: adc dword ptr [rdx + 0x14], edi; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x0000000000029db1: adc dword ptr [rdx + 0x48], eax; add rsp, 0x18; ret; 
0x00000000000a6cd8: adc dword ptr [rdx + rdx*8 - 0x2dce148b], eax; mov qword ptr [rdi], rdx; ret; 
0x0000000000042d2e: adc dword ptr [rdx], ebx; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000014f30c: adc dword ptr [rdx], ebx; ret; 
0x000000000014bd14: adc dword ptr [rdx], ecx; ret; 
0x000000000014e9fc: adc dword ptr [rdx], edx; ret; 
0x000000000014f2ec: adc dword ptr [rdx], esp; ret; 
0x000000000010b86d: adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1a2: adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010b876: adc dword ptr [rsi + 0x70], edi; ret; 
0x00000000001016d3: adc dword ptr [rsi + 0xe], esp; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x000000000018dc81: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dc88: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dc8f: adc dword ptr [rsi + 3], edx; ret; 
0x000000000018dd10: adc dword ptr [rsi + 3], edx; vmovups zmmword ptr [rsi + 0x100], zmm2; vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd17: adc dword ptr [rsi + 4], edx; vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd1e: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd25: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd2c: adc dword ptr [rsi + 7], edx; ret; 
0x000000000014709c: adc dword ptr [rsi + 8], eax; ret; 
0x000000000014706c: adc dword ptr [rsi + 8], ecx; ret; 
0x000000000018db2e: adc dword ptr [rsi - 1], edx; ret; 
0x000000000018db27: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db20: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db19: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000004852d: adc dword ptr [rsi], eax; lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014e8fa: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f23a: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014bc1d: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000018dc7b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000001520ff: adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x000000000015237a: adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x00000000001523ef: adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x000000000015216a: adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521da: adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x000000000015224a: adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x0000000000113a15: adc dword ptr [rsp + 0x18], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001560a3: adc dword ptr [rsp + 0x28], eax; call rdx; 
0x00000000001526b7: adc dword ptr [rsp + 0xb8], ebx; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x000000000015261d: adc dword ptr [rsp + 0xb8], edx; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x0000000000194ca6: adc dword ptr [rsp - 0x28], eax; ret; 
0x0000000000043310: adc dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f4a: adc dword ptr [rsp - 8], eax; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000017e066: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000d0796: adc dword ptr ss:[rax], eax; movaps xmmword ptr [rax], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000093608: adc eax, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000014bf18: adc eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000093535: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x150d4e; ret; 
0x0000000000093508: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x150d73; ret; 
0x00000000000934e8: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x150d8b; ret; 
0x00000000000e1692: adc eax, 0x1027d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1602: adc eax, 0x102869; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e14e2: adc eax, 0x102989; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13e2: adc eax, 0x102a89; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e134a: adc eax, 0x102b21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000fac0f: adc eax, 0x105c8d00; add dword ptr [rax + 0x63], ecx; ret; 
0x00000000000dc9d2: adc eax, 0x107499; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000009389f: adc eax, 0x10894800; ret; 
0x0000000000117822: adc eax, 0x10c48348; lea rax, [rip + 0xd0802]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150e71: adc eax, 0x10c48348; pop rbx; ret; 
0x00000000000cdc8a: adc eax, 0x10ef8348; add rax, rdi; ret; 
0x000000000009a85f: adc eax, 0x10ff3c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000d333a: adc eax, 0x110af9; mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000cf792: adc eax, 0x1146d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bc68b: adc eax, 0x11930; cmovne rax, rdx; ret; 
0x0000000000080b1e: adc eax, 0x129b01; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000802c9: adc eax, 0x12a112; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009cd6b: adc eax, 0x13800; cmovne rax, rdx; ret; 
0x0000000000185a88: adc eax, 0x13a53; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000185a63: adc eax, 0x13a78; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000065898: adc eax, 0x143c03; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064bcf: adc eax, 0x1446c0; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d36b: adc eax, 0x14e20; cmovne rax, rdx; ret; 
0x0000000000093294: adc eax, 0x151037; ret; 
0x00000000001840d8: adc eax, 0x15403; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840be: adc eax, 0x1541d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000929e3: adc eax, 0x154b80; add dword ptr [rip + 0x154b75], 1; ret; 
0x000000000008dcfb: adc eax, 0x158d4800; sbb al, 0x83; adc eax, 0xc08b8b00; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000035ae8: adc eax, 0x16f093; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002728f: adc eax, 0x170d6c; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000063a5a: adc eax, 0x180411; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a22: adc eax, 0x180449; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001811c8: adc eax, 0x18313; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001811a3: adc eax, 0x18338; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048b52: adc eax, 0x19b319; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000044e0d: adc eax, 0x19f39a; ret; 
0x00000000000441fa: adc eax, 0x19fc71; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000044192: adc eax, 0x19fcd9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000047e78: adc eax, 0x1a2293; call 0xbbb80; pop rbx; ret; 
0x000000000017f1f8: adc eax, 0x1a2e3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1de: adc eax, 0x1a2fd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000035530: adc eax, 0x1ae9f3; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000033970: adc eax, 0x1b2f28; ret; 
0x000000000009e79d: adc eax, 0x1b84e; cmove rax, rdx; ret; 
0x000000000009e44d: adc eax, 0x1bb7e; cmove rax, rdx; ret; 
0x000000000009e2ed: adc eax, 0x1bcfe; cmove rax, rdx; ret; 
0x000000000009e364: adc eax, 0x1c117; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x000000000002539f: adc eax, 0x1c4c0c; pop rax; pop rbx; pop rbp; ret; 
0x00000000000901f5: adc eax, 0x20c98300; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008926d: adc eax, 0x20ca8300; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000172aa8: adc eax, 0x26a33; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172a83: adc eax, 0x26a58; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001926f2: adc eax, 0x275c9; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000155f72: adc eax, 0x28630144; mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000170548: adc eax, 0x28f93; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017052e: adc eax, 0x28fad; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000093895: adc eax, 0x30894800; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000150d2a: adc eax, 0x3711; call qword ptr [rax]; 
0x00000000000cd9ba: adc eax, 0x3b30478b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x000000000012d2b7: adc eax, 0x3bb44; cmovne rax, rdx; ret; 
0x000000000012d137: adc eax, 0x3bce4; cmovne rax, rdx; ret; 
0x000000000012d1f7: adc eax, 0x3e6f4; cmovne rax, rdx; ret; 
0x00000000000e756a: adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000016b705: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b700: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000e3ced: adc eax, 0x48000002; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009e797: adc eax, 0x480001b9; lea edx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x00000000000de297: adc eax, 0x480004db; add esp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x0000000000031a4f: adc eax, 0x48001b89; lea edi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bb39f: adc eax, 0x4802e580; lea eax, [rip + 0x115d6]; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009e631: adc eax, 0x4802e580; lea eax, [rip + 0xcbd4]; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e1ff: adc eax, 0x4802e580; lea eax, [rip + 0xcbf6]; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009e591: adc eax, 0x4802e580; lea eax, [rip + 0xcc64]; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e681: adc eax, 0x4802e580; lea eax, [rip + 0xedc4]; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e1: adc eax, 0x4802e580; lea eax, [rip + 0xee54]; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000009d3c8: adc eax, 0x4802e680; lea eax, [rip + 0xb8dd]; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x0000000000092a1c: adc eax, 0x481a7400; lea edi, [rip + 0x154b39]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000090250: adc eax, 0x481a7400; lea edi, [rip + 0x157305]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000094e45: adc eax, 0x48927600; add esp, 8; ret; 
0x0000000000045289: adc eax, 0x48c48148; add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000018c527: adc eax, 0x490002c8; movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000075357: adc eax, 0x4c000015; mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000008e8fd: adc eax, 0x58d4800; ret 0x157d; 
0x000000000012d292: adc eax, 0x5bd59; cmove rax, rdx; ret; 
0x000000000012d1d2: adc eax, 0x5be39; cmove rax, rdx; ret; 
0x000000000012d112: adc eax, 0x5bef9; cmove rax, rdx; ret; 
0x000000000012d355: adc eax, 0x5c136; lea rax, [rip + 0x5c18f]; cmove rax, rdx; ret; 
0x000000000012d2e1: adc eax, 0x60a4a; cmove rax, rdx; ret; 
0x000000000012d221: adc eax, 0x60b2a; cmove rax, rdx; ret; 
0x000000000012d161: adc eax, 0x60bea; cmove rax, rdx; ret; 
0x000000000014e36f: adc eax, 0x60c4c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000012d3a1: adc eax, 0x60f3a; cmove rax, rdx; ret; 
0x00000000000b5f08: adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x0000000000167ab6: adc eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009450b: adc eax, 0x6c0f6600; rol byte ptr [rcx + 0xf], 0x11; xor byte ptr [rax + 8], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000005ca80: adc eax, 0x6f0f6600; ret 0x25e8; 
0x000000000005ca57: adc eax, 0x6f0f6600; ret 0x290f; 
0x000000000005f8e2: adc eax, 0x6f0f6600; ret 0xc3e8; 
0x0000000000061d9b: adc eax, 0x6f0f6600; ret; 
0x00000000000b762c: adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x000000000013b9d8: adc eax, 0x7235b; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000ff72a: adc eax, 0x74ff8548; sbb byte ptr [rax - 0x7b], cl; div byte ptr [rcx + rbx - 0x17]; not dh; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000010ca61: adc eax, 0x80ec8348; pop rbx; pop rbp; pop r12; ret; 
0x000000000017dbf1: adc eax, 0x83480000; ret 0xe910; 
0x000000000015afd0: adc eax, 0x8874b; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x00000000000d977d: adc eax, 0x89480000; ret 0x894c; 
0x0000000000077d82: adc eax, 0x89490000; ret 0x3145; 
0x000000000015afd7: adc eax, 0x8a574; add rsp, 8; ret; 
0x00000000000d6aeb: adc eax, 0x8d480000; xor eax, 0xd4c47; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000bb3a7: adc eax, 0x8d480001; adc eax, 0xd4b9f; cmovne rax, rdx; ret; 
0x0000000000151879: adc eax, 0x983c2; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000044579: adc eax, 0x98c48148; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000109822: adc eax, 0xa4081; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095f6: adc eax, 0xa41ed; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000108430: adc eax, 0xa5233; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000f3cd7: adc eax, 0xab89fff3; nop; add byte ptr [rax], al; add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x000000000015fc16: adc eax, 0xb2e80005; push rbx; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x000000000012c752: adc eax, 0xb7719; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c6a2: adc eax, 0xb77c9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012e34f: adc eax, 0xbbdbc; call 0xbbb80; add rsp, 8; ret; 
0x00000000000ee833: adc eax, 0xbde18; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000bad89: adc eax, 0xc04c2; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x000000000008dd02: adc eax, 0xc08b8b00; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000058deb: adc eax, 0xc1dee800; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000e8b6b: adc eax, 0xc3784; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x000000000009ce1b: adc eax, 0xc40b0; cmovne rax, rdx; ret; 
0x000000000011fa92: adc eax, 0xc43d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa6a: adc eax, 0xc4401; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa32: adc eax, 0xc4439; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa02: adc eax, 0xc4469; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011f9da: adc eax, 0xc4491; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f902: adc eax, 0xc4569; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d2: adc eax, 0xc4599; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8a2: adc eax, 0xc45c9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f872: adc eax, 0xc45f9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f832: adc eax, 0xc4639; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011f78a: adc eax, 0xc46e1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000094349: adc eax, 0xc4834800; sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000011f60a: adc eax, 0xc4861; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f562: adc eax, 0xc4909; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4ba: adc eax, 0xc49b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009d3d5: adc eax, 0xc4d56; cmovne rax, rdx; ret; 
0x000000000011f082: adc eax, 0xc4de9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efc2: adc eax, 0xc4ea9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ef22: adc eax, 0xc4f49; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee62: adc eax, 0xc5009; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edc2: adc eax, 0xc50a9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ed02: adc eax, 0xc5169; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000e7057: adc eax, 0xc51a8; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000011eb82: adc eax, 0xc52e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011eab2: adc eax, 0xc53b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e6a73: adc eax, 0xc570c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000011e1f2: adc eax, 0xc5c79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e191: adc eax, 0xc5cda; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e122: adc eax, 0xc5d49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e082: adc eax, 0xc5de9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011dfba: adc eax, 0xc5eb1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df0a: adc eax, 0xc5f61; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de6a: adc eax, 0xc6001; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dcf2: adc eax, 0xc6179; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dcaa: adc eax, 0xc61c1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011db92: adc eax, 0xc62d9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000008a515: adc eax, 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001205b5: adc eax, 0xc7c3e; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000e39fe: adc eax, 0xc8351; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e3d53: adc eax, 0xc83d8; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000049fe3: adc eax, 0xc8b4800; ret 0x8b49; 
0x00000000000e2ff4: adc eax, 0xc8d07; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000011ad92: adc eax, 0xc90d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009e757: adc eax, 0xca6d4; cmovne rax, rdx; ret; 
0x000000000009e407: adc eax, 0xcaa04; cmovne rax, rdx; ret; 
0x0000000000117632: adc eax, 0xcc839; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009e2a7: adc eax, 0xcd654; cmovne rax, rdx; ret; 
0x0000000000115b52: adc eax, 0xce319; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115b22: adc eax, 0xce349; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115aea: adc eax, 0xce381; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115902: adc eax, 0xce569; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bb357: adc eax, 0xce624; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad67: adc eax, 0xceee4; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf77: adc eax, 0xcf114; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f7: adc eax, 0xcf6e4; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad27: adc eax, 0xcf884; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x0000000000114392: adc eax, 0xcfad9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bae57: adc eax, 0xcfb74; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x000000000011426a: adc eax, 0xcfc01; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009e63e: adc eax, 0xcfddd; cmovne rax, rdx; ret; 
0x000000000009e59e: adc eax, 0xcfe6d; cmovne rax, rdx; ret; 
0x00000000001136b2: adc eax, 0xd07b9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113602: adc eax, 0xd0869; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113552: adc eax, 0xd0919; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134b2: adc eax, 0xd09b9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000a8a3a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000113232: adc eax, 0xd0c39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e42: adc eax, 0xd1029; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e02: adc eax, 0xd1069; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112c62: adc eax, 0xd1209; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112762: adc eax, 0xd1709; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011273a: adc eax, 0xd1731; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112702: adc eax, 0xd1769; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001126d2: adc eax, 0xd1799; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112562: adc eax, 0xd1909; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001164d9: adc eax, 0xd1a52; add rsp, 8; ret; 
0x0000000000112402: adc eax, 0xd1a69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001164aa: adc eax, 0xd1a81; ret; 
0x00000000001123c2: adc eax, 0xd1aa9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011232a: adc eax, 0xd1b41; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112212: adc eax, 0xd1c59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001121c2: adc eax, 0xd1ca9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009e68e: adc eax, 0xd1edd; cmovne rax, rdx; ret; 
0x000000000009e5ee: adc eax, 0xd1f6d; cmovne rax, rdx; ret; 
0x0000000000111752: adc eax, 0xd2719; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114ba8: adc eax, 0xd324b; mov qword ptr [rip + 0xd324c], rax; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x00000000000bb3ac: adc eax, 0xd4b9f; cmovne rax, rdx; ret; 
0x000000000009ce8b: adc eax, 0xd5c30; cmovne rax, rdx; ret; 
0x000000000010d832: adc eax, 0xd6639; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6ba: adc eax, 0xd67b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d0f2: adc eax, 0xd6d79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d0c2: adc eax, 0xd6da9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010d082: adc eax, 0xd6de9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000009d42b: adc eax, 0xd6e40; cmovne rax, rdx; ret; 
0x000000000010cfe2: adc eax, 0xd6e89; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cba2: adc eax, 0xd72c9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c97a: adc eax, 0xd74f1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c922: adc eax, 0xd7549; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c8c2: adc eax, 0xd75a9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c672: adc eax, 0xd77f9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c622: adc eax, 0xd7849; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c5d2: adc eax, 0xd7899; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009e4eb: adc eax, 0xd8900; cmovne rax, rdx; ret; 
0x000000000010b42a: adc eax, 0xd8a41; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010b37a: adc eax, 0xd8af1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000e2954: adc eax, 0xd8f70010; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000009e54b: adc eax, 0xda0b0; cmovne rax, rdx; ret; 
0x00000000000a7267: adc eax, 0xdb0c4; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x0000000000061d70: adc eax, 0xdb0f6600; fisub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ce45a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000146236: adc eax, 0xe205; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000009fd37: adc eax, 0xe24b4; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009d729: adc eax, 0xe3d72; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d489: adc eax, 0xe3ed2; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009cea9: adc eax, 0xe4332; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x00000000000fe752: adc eax, 0xe5861; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000009fd77: adc eax, 0xe5f54; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x00000000000941e4: adc eax, 0xe8834800; add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x000000000009d467: adc eax, 0xe8a54; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c7: adc eax, 0xe8dc4; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d307: adc eax, 0xe8f14; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x00000000000afa78: adc eax, 0xe9a63; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa53: adc eax, 0xe9a88; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008b35b: adc eax, 0xe9c93100; pop rsp; xchg eax, edx; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000009e732: adc eax, 0xea8e9; cmove rax, rdx; ret; 
0x000000000009e3e2: adc eax, 0xeac19; cmove rax, rdx; ret; 
0x000000000009e282: adc eax, 0xead99; cmove rax, rdx; ret; 
0x000000000009e345: adc eax, 0xeb156; lea rax, [rip + 0xeb1af]; cmove rax, rdx; ret; 
0x00000000000ad428: adc eax, 0xec0b3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad40e: adc eax, 0xec0cd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e781: adc eax, 0xef5da; cmove rax, rdx; ret; 
0x000000000009e431: adc eax, 0xef90a; cmove rax, rdx; ret; 
0x000000000009e2d1: adc eax, 0xefa8a; cmove rax, rdx; ret; 
0x000000000009e391: adc eax, 0xeff5a; cmove rax, rdx; ret; 
0x000000000009e20c: adc eax, 0xf05cf; cmovne rax, rdx; ret; 
0x000000000009cdbe: adc eax, 0xf16fd; cmovne rax, rdx; ret; 
0x00000000000ba544: adc eax, 0xf880272; ret; 
0x000000000012d2fd: adc eax, 0xfff8ccbe; cmove rax, rdx; ret; 
0x000000000012d23d: adc eax, 0xfff8cd9e; cmove rax, rdx; ret; 
0x000000000012d17d: adc eax, 0xfff8ce5e; cmove rax, rdx; ret; 
0x000000000012d374: adc eax, 0xfff8d0f7; lea rax, [rip - 0x72f90]; cmovne rax, rdx; ret; 
0x0000000000075001: adc eax, 0xfffffbb7; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007ad40: adc eax, 0xfffffbbf; add rax, rdx; jmp rax; 
0x00000000000cf828: adc eax, 0xffffff53; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x00000000000cf748: adc eax, 0xffffff73; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x000000000010c389: adc eax, 0xffffff92; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x00000000000e3519: adc eax, dword ptr [rax]; add byte ptr [rax + rdx*8 + 0x49], dh; cmp eax, 0x138f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000d99bd: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000182d4e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017fdf9: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011344e: adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000507f6: adc eax, dword ptr [rax]; add byte ptr [rbp + 0x29], cl; ret; 
0x00000000000773d2: adc eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0xbe01; 
0x00000000000e3522: adc eax, dword ptr [rax]; add byte ptr [rdx + 0x7f], bh; cmovne rax, rdx; ret; 
0x0000000000028363: adc eax, dword ptr [rax]; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x0000000000028415: adc eax, dword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x00000000000777be: adc eax, dword ptr [rax]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077dae: adc eax, dword ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000006cb30: adc eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000006d956: adc eax, dword ptr [rax]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000e137c: adc eax, dword ptr [rbp + 0x31]; sar byte ptr [rax + 0x3d], cl; syscall; 
0x00000000001811c9: adc eax, dword ptr [rbx + 0xc8b0001]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000b693d: adc eax, dword ptr [rbx + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000e7051: adc eax, dword ptr [rbx]; add byte ptr [rax], al; lea rdx, [rip + 0xc51a8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000a6e42: adc eax, dword ptr [rcx + 0x39]; rol byte ptr [rcx + 0xf], 1; xchg eax, ebp; ret 0x3941; 
0x000000000011e001: adc eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000000b209b: adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20bb: adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20db: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20fb: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f58: adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x00000000000b1faa: adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b211b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b213b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b215b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4cab: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d2c: adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x000000000018473f: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000056759: adc eax, eax; ret; 
0x000000000014caec: adc eax, edi; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000056896: adc eax, edx; pop rbp; pop rbx; ret; 
0x0000000000153fe2: adc ebp, ebp; dec dword ptr [rax - 0x2f]; call 0xffffffff895e0775; ret; 
0x00000000000dcd5d: adc ebp, ecx; int 0; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000004415b: adc ebp, edi; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004495b: adc ebp, esi; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000025399: adc ebx, dword ptr [r8 + r8]; mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x000000000002539a: adc ebx, dword ptr [rax + rax]; mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x000000000009c664: adc ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000018aee9: adc ebx, ebp; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000011e1b8: adc ebx, ebp; mov ebx, 0x1601c764; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000012fd2e: adc ebx, ebp; ret 0x8b48; 
0x00000000000e183d: adc ebx, edi; dec dword ptr [rax + 0x39]; ret; 
0x00000000000e1827: adc ebx, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000015d811: adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x000000000008886c: adc ecx, dword ptr [rax + 1]; ret; 
0x00000000001204ec: adc ecx, dword ptr [rax - 0x39]; add eax, 0xc3e68; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000007bb91: adc ecx, dword ptr [rax - 0x77]; ret 0xc148; 
0x0000000000127424: adc ecx, dword ptr [rax - 0x77]; ror dword ptr [rdi], 0x84; ret 0; 
0x00000000000c87d1: adc ecx, dword ptr [rax - 0x7d]; mov byte ptr [rcx + rcx*2], 0x83; ret; 
0x0000000000091634: adc ecx, dword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000000c6bf9: adc ecx, dword ptr [rax - 0x7d]; ret 0x4910; 
0x00000000000a1433: adc ecx, dword ptr [rax - 0x7d]; ret 0x8301; 
0x000000000002a54d: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000002a415: adc ecx, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0x83; ret; 
0x000000000012f314: adc ecx, dword ptr [rcx + 0x18e7c1f0]; and eax, 0xffffff; or eax, edi; bswap eax; ret; 
0x00000000000309fc: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x00000000000b75f1: adc ecx, dword ptr [rcx - 0x7d]; call 0x7f98be0d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x0000000000126f10: adc ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000b2124: adc ecx, dword ptr [rdx + 5]; mov rax, rdi; ret; 
0x00000000000b2144: adc ecx, dword ptr [rdx + 6]; mov rax, rdi; ret; 
0x00000000000b2164: adc ecx, dword ptr [rdx + 7]; mov rax, rdi; ret; 
0x00000000000b1fae: adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b4d95: adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x000000000011e0bc: adc edi, dword ptr [rax + 0x130]; syscall; 
0x000000000011344c: adc edi, dword ptr [rax + 0x13]; syscall; 
0x0000000000048aec: adc edi, dword ptr [rax + 0x13e]; syscall; 
0x00000000001134ec: adc edi, dword ptr [rax + 0x14]; syscall; 
0x00000000001175cc: adc edi, dword ptr [rax + 0x1a]; syscall; 
0x00000000000e15bc: adc edi, dword ptr [rax + 0x22]; syscall; 
0x00000000000e163c: adc edi, dword ptr [rax + 0x23]; syscall; 
0x000000000011eb1c: adc edi, dword ptr [rax + 0x2a]; syscall; 
0x000000000011ea4c: adc edi, dword ptr [rax + 0x2b]; syscall; 
0x000000000011ef5c: adc edi, dword ptr [rax + 0x2e]; syscall; 
0x000000000011edfc: adc edi, dword ptr [rax + 0x2f]; syscall; 
0x000000000011421c: adc edi, dword ptr [rax + 0x4a]; syscall; 
0x00000000001142cc: adc edi, dword ptr [rax + 0x4b]; syscall; 
0x000000000010d7dc: adc edi, dword ptr [rax + 0x55]; syscall; 
0x0000000000044904: adc edi, dword ptr [rax + 1]; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010d01c: adc edi, dword ptr [rax + 1]; syscall; 
0x000000000010d66c: adc edi, dword ptr [rax + 3]; syscall; 
0x00000000001116ec: adc edi, dword ptr [rax + 7]; syscall; 
0x0000000000026b91: adc edi, dword ptr [rax]; sbb al, 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014caa9: adc edi, dword ptr [rdi - 0x3f7a0001]; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x0000000000033ffa: adc edi, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000047afb: adc edi, edx; std; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x00000000000e2a74: adc edx, dword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000576ba: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000056751: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000011db15: adc esi, dword ptr [rcx + rax - 0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x0000000000049af4: adc esi, dword ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x000000000014e0ae: adc esi, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000083420: adc esi, esi; ret 0x7520; 
0x0000000000184922: adc qword ptr [r8], rax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018d78a: adc qword ptr [rcx + 3], rbx; vmovups zmmword ptr [r9 + 0x100], zmm12; vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d791: adc qword ptr [rcx + 4], rsp; vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d798: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d79f: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d7a6: adc qword ptr [rcx + 7], rdi; ret; 
0x000000000018d441: adc qword ptr [rcx - 1], rbx; ret; 
0x000000000018d405: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000018d43a: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018d638: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3fe: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d631: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f7: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d62a: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f0: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d433: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018db40: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018d3e9: adc qword ptr [rdi + 3], rbx; vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018db11: adc qword ptr [rdi + 3], rdx; vmovups zmmword ptr [rsi - 0x100], zmm2; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018d8f3: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d8fa: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d901: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d908: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000018d42d: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018db3a: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db5b: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018dc80: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dc87: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dc8e: adc qword ptr [rsi + 3], rdx; ret; 
0x000000000018dd0f: adc qword ptr [rsi + 3], rdx; vmovups zmmword ptr [rsi + 0x100], zmm2; vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd16: adc qword ptr [rsi + 4], rdx; vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd1d: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd24: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd2b: adc qword ptr [rsi + 7], rdx; ret; 
0x000000000018db2d: adc qword ptr [rsi - 1], rdx; ret; 
0x000000000018db26: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db1f: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db18: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018dc7a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000056750: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000014dd68: adc r11b, bpl; ret; 
0x000000000008cbd2: adc r11b, r13b; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009272f: adc r11b, r13b; ret; 
0x000000000014e8f2: adc r11b, r14b; movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f232: adc r11b, r14b; movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000ba4c5: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000153fe1: adc r13, rbp; dec dword ptr [rax - 0x2f]; call 0xffffffff895e0775; ret; 
0x0000000000033ff9: adc r15d, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000017ff60: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000507f5: adc r8d, dword ptr [r8]; add byte ptr [rbp + 0x29], cl; ret; 
0x00000000000b75f0: adc r9d, dword ptr [r9 - 0x7d]; call 0x7f98be0d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x0000000000092a1b: adc rax, 0x481a7400; lea edi, [rip + 0x154b39]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000056895: adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000000576b9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000ba63a: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000ba61f: add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000000f0545: add ah, bh; dec dword ptr [rcx]; ret 0x5189; 
0x00000000000ba735: add ah, bh; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000ba66a: add ah, bh; inc dword ptr [rbx]; ret; 
0x00000000000dcd60: add ah, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b211c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b213c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b215c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4cac: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b1fab: add ah, byte ptr [rsi + 0xf]; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000001784f3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b2038: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000000b1fd4: add ah, byte ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000b20bc: add ah, byte ptr [rsi - 0x75]; or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000120905: add ah, byte ptr [rsi - 0x7d]; clc; push qword ptr [rsi + rax - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x00000000000dd2dd: add al, 0; add al, ch; and eax, dword ptr [rax - 0x76b7000c]; ret 0x8948; 
0x00000000001317da: add al, 0; add al, ch; cmp ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000122995: add al, 0; add al, ch; imul ebp, dword ptr [rcx], -0x10; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000124472: add al, 0; add al, ch; mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000df975: add al, 0; add al, ch; mov ebx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000122772: add al, 0; add al, ch; mov gs, word ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000124855: add al, 0; add al, ch; stosd dword ptr [rdi], eax; or dh, al; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001328c2: add al, 0; add al, ch; sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001225c2: add al, 0; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x00000000001320d2: add al, 0; add al, ch; xor ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000002c473: add al, 0; add bh, dh; ret 0; 
0x000000000002c467: add al, 0; add bh, dh; ret 0xf800; 
0x00000000000c5bd1: add al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e8b66: add al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xc3784; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x00000000000e6a6e: add al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xc570c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004178b: add al, 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16342b; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000003798b: add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x000000000014d6e5: add al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017c1ad: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180cf9: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c1d1: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000ee134: add al, 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014bda3: add al, 0; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000001521e2: add al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x0000000000146173: add al, 0; add byte ptr [rax], al; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000001503f0: add al, 0; add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x00000000000ce4e3: add al, 0; add byte ptr [rax], al; ret; 
0x000000000010c5bf: add al, 0; add byte ptr [rax], al; syscall; 
0x000000000002c45f: add al, 0; add byte ptr [rbp + 0x36880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x000000000014e403: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000062f55: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000133c0b: add al, 0; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax; 
0x00000000001939b5: add al, 0; add byte ptr [rcx - 0x47], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x0000000000026bf4: add al, 0; add byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7b], r9b; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000001045ee: add al, 0; add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x000000000012640b: add al, 0; add byte ptr [rdx], al; call rcx; 
0x000000000008083b: add al, 0; add cl, ch; ret 0xfffc; 
0x00000000000dc99e: add al, 0; add rsp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000de299: add al, 0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de363: add al, 0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000de442: add al, 0; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbd7: add al, 0; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000dc910: add al, 0; add rsp, 0x80; pop rbx; ret; 
0x000000000012b7c5: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000000e1336: add al, 0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000000e1681: add al, 0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e15f1: add al, 0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e15d7: add al, 0; mov edi, eax; mov eax, 0x22; syscall; 
0x00000000000e165f: add al, 0; mov rsi, rbp; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x000000000007763c: add al, 0; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x0000000000169338: add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e26d9: add al, 0; nop dword ptr [rax + rax]; mov eax, 0x27; syscall; 
0x00000000000e26d9: add al, 0; nop dword ptr [rax + rax]; mov eax, 0x27; syscall; ret; 
0x00000000000e1237: add al, 0; nop dword ptr [rax]; mov eax, 0x3f; syscall; 
0x00000000000e2932: add al, 0; nop word ptr cs:[rax + rax]; nop; mov eax, 0x79; syscall; 
0x00000000000e7f9c: add al, 0; or byte ptr [rax + 0xf], 0xa3; ret 0x830f; 
0x0000000000149ca0: add al, 0x10; mov byte ptr [rdi + 7], al; ret; 
0x00000000000536ca: add al, 0x10; mov edx, 6; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000034e00: add al, 0x10; ret; 
0x0000000000121a45: add al, 0x10; shr eax, cl; and eax, 1; ret; 
0x0000000000121b22: add al, 0x11; ret; 
0x00000000000ba6b4: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000017c43b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017c02b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017bb37: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c347: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017bdbb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017c0fb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017c417: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c4e7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c29b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017ba8b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017be8b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017c36b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017bb5b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017bbfd: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017bf5b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017c1cb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017bc21: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000185a5f: add al, 0x17; lea rdx, [rip + 0x13a78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840ba: add al, 0x17; lea rdx, [rip + 0x1541d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018119f: add al, 0x17; lea rdx, [rip + 0x18338]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1da: add al, 0x17; lea rdx, [rip + 0x1a2fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172a7f: add al, 0x17; lea rdx, [rip + 0x26a58]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017052a: add al, 0x17; lea rdx, [rip + 0x28fad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa4f: add al, 0x17; lea rdx, [rip + 0xe9a88]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad40a: add al, 0x17; lea rdx, [rip + 0xec0cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a8a41: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000181608: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000a89da: add al, 0x17; sub eax, ecx; ret; 
0x00000000001885ee: add al, 0x17; vzeroupper; ret; 
0x0000000000063a24: add al, 0x18; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000115d08: add al, 0x22; or eax, 0x40c64100; inc dword ptr [rax]; ret; 
0x000000000015441b: add al, 0x24; add al, byte ptr [rax]; add byte ptr [rax], al; call rdx; 
0x0000000000146509: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000013ba38: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000043636: add al, 0x24; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043955: add al, 0x24; add rsp, 0x20; pop rbx; ret; 
0x0000000000121114: add al, 0x24; add rsp, 0x38; ret; 
0x0000000000121175: add al, 0x24; add rsp, 0x40; ret; 
0x000000000009c12e: add al, 0x24; and byte ptr [rbx + 0x50], 0xfe; movsxd rdi, esi; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x00000000000437f5: add al, 0x24; call 0x1925e0; add rsp, 0x10; pop rbx; ret; 
0x0000000000194415: add al, 0x24; call 0x194c20; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000086952: add al, 0x24; call 0x8cf60; mov rax, qword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000150556: add al, 0x24; call qword ptr [rdx + 0x20]; 
0x0000000000133c07: add al, 0x24; mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000008695b: add al, 0x24; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000001401fb: add al, 0x24; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000118917: add al, 0x24; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001552a2: add al, 0x24; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000147ea0: add al, 0x24; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000009cc6a: add al, 0x24; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x00000000000bb1b3: add al, 0x24; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e14b: add al, 0x24; mov rdi, rbx; call rax; 
0x000000000009cc6e: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbd9: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000014646a: add al, 0x24; mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000008eca4: add al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000009c208: add al, 0x24; or byte ptr [rbx + 0x50], 1; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rsi; call rcx; 
0x000000000009afda: add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x000000000012c383: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000026eca: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000026eab: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; jmp rax; 
0x0000000000026b9c: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000029b66: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000052e58: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055995: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba30: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp], 0; call rax; 
0x0000000000047bce: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000835e7: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call rax; 
0x00000000000dbb74: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; pop r13; pop r14; jmp rax; 
0x0000000000026411: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x00000000000d2d13: add al, 0x28; add byte ptr [rax - 0x77], cl; ret; 
0x000000000013b301: add al, 0x2b; pop rbx; pop rbp; ret; 
0x000000000008288e: add al, 0x2f; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000538c2: add al, 0x30; add byte ptr [rax], al; add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x77], cl; ret 0x1de8; 
0x00000000000b94e9: add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b94fb: add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b00ae: add al, 0x31; ret; 
0x00000000000affaa: add al, 0x37; ret; 
0x0000000000181c29: add al, 0x38; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000008731f: add al, 0x3a; ret; 
0x00000000000cd8c2: add al, 0x3b; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000f4dff: add al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000110f10: add al, 0x44; int1; jmp qword ptr [rsi - 0x7d]; 
0x0000000000112101: add al, 0x44; mov edx, esp; mov rsi, rbp; mov edi, ebx; mov eax, 0x146; syscall; 
0x000000000010b7ba: add al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000010b74c: add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000bb456: add al, 0x48; cmovne eax, edx; ret; 
0x00000000000b6a8b: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000000b78cb: add al, 0x48; lea eax, [rdi + 6]; ret; 
0x000000000013b5f1: add al, 0x48; lea eax, [rdi + rsi + 8]; ret; 
0x00000000001784e9: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000001784fb: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000009328d: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x0000000000084bd8: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000013cc2e: add al, 0x48; mov dword ptr [rbx + 0x10], eax; mov eax, 0x14; add edx, 1; syscall; 
0x000000000016b41a: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000008561c: add al, 0x48; mov dword ptr [rdx + 0x20], eax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x0000000000085765: add al, 0x48; mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x000000000015595b: add al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000015559c: add al, 0x48; mov eax, dword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000015575c: add al, 0x48; mov eax, dword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000000a711d: add al, 0x48; mov eax, edi; ret; 
0x00000000001480f2: add al, 0x48; mov ebp, eax; bswap edx; mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000016b413: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000155566: add al, 0x48; mov edi, ebx; call qword ptr [rax + 0x40]; 
0x00000000001555b7: add al, 0x48; mov edi, ebx; call qword ptr [rax + 0x48]; 
0x00000000000b0354: add al, 0x48; xor eax, eax; ret; 
0x00000000001493df: add al, 0x48; xor eax, edx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000001484a8: add al, 0x4c; cld; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000bbc54: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x00000000000bb8a0: add al, 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x000000000012b744: add al, 0x50; shr ax, 0xe; and eax, 1; ret; 
0x000000000010b6a9: add al, 0x5b; pop rbp; pop r12; ret; 
0x000000000013f110: add al, 0x62; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x00000000001784f7: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b203c: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000000309fa: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000018d4b7: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000034dca: add al, 0x73; and al, 0x83; ret 0x8b05; 
0x000000000018e463: add al, 0x73; xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000010c284: add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; 
0x000000000010c284: add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x000000000013accc: add al, 0x74; sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000eaac2: add al, 0x74; xchg eax, edi; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000002b1a9: add al, 0x74; xor cl, byte ptr [rcx - 0x73]; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000004817a: add al, 0x75; add eax, 0x18c48348; ret; 
0x00000000000f5fd4: add al, 0x75; mov edi, 0xf708588b; ret; 
0x00000000000420ef: add al, 0x75; out 0x41, al; mov ecx, dword ptr [rax + rax*4 + 8]; add rcx, qword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x00000000000ed62a: add al, 0x75; push rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000014cdfa: add al, 0x75; ret; 
0x000000000005de0c: add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x0000000000111572: add al, 0x77; or esp, dword ptr [rsi - 0x77]; push rsi; xor ax, ax; ret; 
0x00000000000351f0: add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351d0: add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351b0: add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000035130: add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000035170: add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350d0: add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000035150: add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000035110: add al, 0x78; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000035270: add al, 0x78; and eax, 1; ret; 
0x00000000000350f0: add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000035190: add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x00000000000350b0: add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x000000000006406f: add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000191a68: add al, 0x81; add rcx, rax; jmp rcx; 
0x000000000017d8db: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000048531: add al, 0x81; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000017f1b3: add al, 0x81; sub eax, edx; ret; 
0x0000000000027298: add al, 0x82; add rax, rdx; jmp rax; 
0x00000000001211e4: add al, 0x82; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000ad417: add al, 0x82; sub eax, ecx; ret; 
0x00000000000c8f36: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f93db: add al, 0x83; add rax, rbx; jmp rax; 
0x00000000000a430c: add al, 0x83; cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4006; 
0x000000000013b46f: add al, 0x83; ret 0x3908; 
0x0000000000060cad: add al, 0x83; ret 0x4802; 
0x000000000013b44a: add al, 0x83; ret 0x8108; 
0x000000000004464f: add al, 0x83; ret 0xf701; 
0x00000000000601c7: add al, 0x83; ret; 
0x00000000000bc6b9: add al, 0x85; sal byte ptr [rbp - 0xe], cl; ret; 
0x000000000007718c: add al, 0x86; add rax, r14; mov dword ptr [rbp - 0x4f0], 1; mov r10, rdx; xor esi, esi; jmp rax; 
0x000000000007776c: add al, 0x86; add rax, r14; mov r10, rdx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000075008: add al, 0x86; add rax, rdx; jmp rax; 
0x0000000000065cef: add al, 0x86; add rax, rsi; jmp rax; 
0x0000000000121a42: add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000006cd24: add al, 0x86; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x0000000000077640: add al, 0x87; add rax, r14; jmp rax; 
0x00000000000777fc: add al, 0x87; add rax, r14; mov dword ptr [rbp - 0x548], 0; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000077724: add al, 0x87; add rax, r14; mov r10, rdx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x0000000000080a43: add al, 0x87; add rax, rdi; jmp rax; 
0x000000000007de5f: add al, 0x87; add rax, rdx; jmp rax; 
0x000000000007d136: add al, 0x87; add rax, rdx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0ae: add al, 0x87; add rax, rdx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfc6: add al, 0x87; add rax, rdx; mov dword ptr [rbp - 0x4e8], 1; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007deb6: add al, 0x87; add rax, rdx; mov dword ptr [rbp - 0x53c], 1; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000001784e6: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000000b201b: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000777c2: add al, 0x88; add rax, r14; jmp rax; 
0x000000000007de1e: add al, 0x88; add rax, rdx; jmp rax; 
0x0000000000155957: add al, 0x89; and al, 4; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000b73a4: add al, 0x89; cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f98bbb7; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000b94f5: add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000fe6f0: add al, 0x89; ret 0xb60f; 
0x000000000010f3f0: add al, 0x89; ret; 
0x00000000000b2004: add al, 0x8b; add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x00000000000ec902: add al, 0x8b; push rbp; add al, 1; ret 0x341; 
0x000000000014bcd8: add al, 0x8f; add rax, rdi; jmp rax; 
0x0000000000077db2: add al, 0x90; add rax, r14; jmp rax; 
0x000000000007ad3c: add al, 0x90; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x00000000000dbf00: add al, 0x94; hlt; dec dword ptr [rax - 0x77]; sbb byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x00000000000ba683: add al, 0x96; add rax, rsi; jmp rax; 
0x00000000000f8a50: add al, 0x96; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000e3a05: add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000000ee747: add al, 0xa1; add rax, rcx; jmp rax; 
0x0000000000091007: add al, 0xa8; add dword ptr [rsp + rbp - 0x77], esi; ret 0x8948; 
0x000000000007e159: add al, 0xa; lea rdi, [rip + 0x12c03e]; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x00000000001218fa: add al, 0xa; ret; 
0x0000000000181333: add al, 0xa; sub rax, rdi; ret; 
0x00000000000ee83e: add al, 0xaa; add rax, rdx; jmp rax; 
0x000000000009e408: add al, 0xaa; or al, 0; cmovne rax, rdx; ret; 
0x00000000000fc7de: add al, 0xaf; add rax, rdi; jmp rax; 
0x0000000000144e97: add al, 0xb1; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000e2ffd: add al, 0xb2; add rax, rdx; jmp rax; 
0x00000000000fa0c5: add al, 0xb3; add rax, rbx; jmp rax; 
0x00000000000d8e59: add al, 0xb7; add rax, rdi; jmp rax; 
0x0000000000034dfd: add al, 0xb7; mov eax, dword ptr [rax + rdx]; ret; 
0x0000000000155ea3: add al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000035458: add al, 0xb8; ret; 
0x00000000000e8b72: add al, 0xba; add rax, rdx; jmp rax; 
0x00000000000ba5bb: add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000006d954: add al, 0xc0; adc eax, dword ptr [rax]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000013b487: add al, 0xc6; add al, byte ptr [rax]; shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x00000000000bad8b: add al, 0xc; add dh, dh; jno 0xbad94; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x000000000013dfc8: add al, 0xd0; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x00000000000dbea8: add al, 0xd0; ret; 
0x000000000005c5b9: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000015e7a7: add al, 0xd7; xor eax, eax; ret; 
0x00000000000750ea: add al, 0xd8; mov dword ptr [rbp - 0x948], r9d; mov rsi, r14; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x000000000018aff8: add al, 0xdc; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000155e47: add al, 0xe8; ret; 
0x000000000012d75f: add al, 0xe9; mov ebp, dword ptr [rdi - 0xb]; call qword ptr [rax - 0x18]; 
0x0000000000064f65: add al, 0xe9; ret; 
0x0000000000038796: add al, 0xeb; adc cl, byte ptr [rax - 0x7d]; ret 0x8b08; 
0x0000000000153d8e: add al, 0xeb; xchg eax, esp; nop dword ptr [rax]; ret; 
0x0000000000114eeb: add al, 0xf1; dec dword ptr [rax - 0x77]; add eax, 0xd566b; add rsp, 8; ret; 
0x000000000016b783: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000000350d5: add al, 0xf; mov bh, 0xc0; ret; 
0x00000000000a714e: add al, 0xf; mov dh, 0x44; and al, 0xe; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x00000000000a7081: add al, 0xf; mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7233: add al, 0xf; mov dh, 0x54; and al, 0xe; mov byte ptr [rdi + 6], dl; ret; 
0x000000000017b9ed: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000001827b6: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000006f61c: add al, 0xf; test byte ptr [rip - 0x7cfffffb], ah; ret 0x3901; 
0x00000000000cd8c5: add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x000000000017a37f: add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000b5cdb: add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x00000000000e5521: add al, 0xf; test dword ptr [rsp + rdi*8 - 0x49f00001], edx; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000009724d: add al, 0xf; test ecx, eax; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x00000000001045f5: add al, 0xf; xchg eax, esp; ret; 
0x000000000014edc2: add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x000000000014bd93: add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000013acae: add al, 1; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000cd8f8: add al, 1; add byte ptr [rax], al; ret; 
0x000000000010e1e4: add al, 1; add byte ptr [rax], al; syscall; 
0x00000000000661a8: add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000000eaa88: add al, 1; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000eaeb5: add al, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec905: add al, 1; ret 0x341; 
0x0000000000063b40: add al, 1; ret; 
0x0000000000063bb2: add al, 1; xor eax, eax; ret; 
0x0000000000074ffd: add al, 2; lea rdx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000a74ef: add al, 3; add byte ptr [rax - 0x77], cl; ret 0x96e8; 
0x000000000017a408: add al, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018c1d7: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000168b75: add al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b5e28: add al, 7; add byte ptr [rax], al; ret; 
0x00000000000afadd: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018a62e: add al, 7; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185b1e: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000afcf8: add al, 7; ret; 
0x0000000000188ca4: add al, 7; vzeroupper; ret; 
0x0000000000194418: add al, 8; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000008c1b3: add al, 8; add byte ptr [rax], al; ret; 
0x00000000000dd511: add al, 8; add byte ptr [rcx + rcx*4 - 0x10], cl; call rax; 
0x00000000001211e7: add al, 8; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000a8baf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000181789: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000fdf16: add al, al; call 0x7c93271f; and al, 8; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd020; 
0x000000000012f2f3: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012f371: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000113906: add al, bpl; ret; 
0x0000000000185822: add al, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013b32d: add al, byte ptr [rax + rax*8 - 0x3d7cf18b]; add dword ptr [rcx], edi; bnd jb 0x13b324; mov eax, 0xffffffff; ret; 
0x00000000000b4fd1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x00000000000eedf2: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000aa582: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000015d93e: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret 0x3a83; 
0x0000000000181b6a: add al, byte ptr [rax]; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000005d530: add al, byte ptr [rax]; add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000058f4b: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000e39f9: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xc8351; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000014970f: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xb45; 
0x0000000000160706: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000018de24: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000017a43b: add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000c776c: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000ef8df: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000002b4ad: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x000000000017c34d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ef71: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c371: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000eff36: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000034cd2: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000000585d1: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000587bd: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000015b568: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx - 1], bh; mov eax, edx; ret; 
0x000000000014c82f: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x10; jmp rcx; 
0x000000000014f25f: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000014e91f: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x68; jmp rcx; 
0x000000000014bc42: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0xc8; jmp rcx; 
0x000000000014785e: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; jmp rcx; 
0x000000000011bffd: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000152633: add al, byte ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000152633: add al, byte ptr [rax]; add byte ptr [rax], al; call rax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000015441d: add al, byte ptr [rax]; add byte ptr [rax], al; call rdx; 
0x0000000000101bf5: add al, byte ptr [rax]; add byte ptr [rax], al; cmove eax, edx; ret; 
0x000000000015abea: add al, byte ptr [rax]; add byte ptr [rax], al; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x0000000000043ecc: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000012c65f: add al, byte ptr [rax]; add byte ptr [rax], al; mov edi, edx; syscall; 
0x00000000001523f7: add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x0000000000055e0b: add al, byte ptr [rax]; add byte ptr [rax], al; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000587c3: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000013b089: add al, byte ptr [rax]; add byte ptr [rax], al; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000011ba4a: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000129eb9: add al, byte ptr [rax]; add byte ptr [rbp + 0x32], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000632cc: add al, byte ptr [rax]; add byte ptr [rbp + 0x480d75c0], al; mov eax, ebx; pop rbx; ret; 
0x000000000004528e: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000124119: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000010dae7: add al, byte ptr [rax]; add byte ptr [rbx + rdi + 0x34], cl; and al, 0xf; xchg eax, esp; ret 0x2044; 
0x00000000000e44f0: add al, byte ptr [rax]; add byte ptr [rbx - 0x2e74b], cl; inc dword ptr [rbx - 0x30773]; call qword ptr [rax]; 
0x000000000018fb64: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000019262c: add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0x8166; 
0x00000000000e9efe: add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000a27a2: add al, byte ptr [rax]; add byte ptr [rcx - 9], al; ret 0xf800; 
0x00000000000e16fb: add al, byte ptr [rax]; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x000000000005eeb4: add al, byte ptr [rax]; add cl, ch; stosd dword ptr [rdi], eax; in al, 0xff; jmp qword ptr [rsi + 0x44]; 
0x0000000000194c9a: add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000001885b8: add al, byte ptr [rax]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000170531: add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001376a8: add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x000000000011b68f: add al, byte ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x00000000001369c9: add al, byte ptr [rax]; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000194ca2: add al, byte ptr [rax]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000001926f5: add al, byte ptr [rax]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000191a64: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000018aeeb: add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000101b59: add al, byte ptr [rax]; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x000000000010caea: add al, byte ptr [rax]; nop dword ptr [rax]; mov eax, 0x5f; syscall; 
0x000000000010caea: add al, byte ptr [rax]; nop dword ptr [rax]; mov eax, 0x5f; syscall; ret; 
0x000000000010d508: add al, byte ptr [rax]; nop word ptr [rax + rax]; mov eax, 0x49; syscall; 
0x000000000010e143: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop; mov eax, 0x5c; syscall; 
0x000000000010e99c: add al, byte ptr [rax]; nop; mov eax, 0x56; syscall; 
0x0000000000133e7a: add al, byte ptr [rax]; pop r12; pop r13; ret; 
0x000000000013df9b: add al, byte ptr [rax]; ret; 
0x000000000013b48a: add al, byte ptr [rax]; shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x0000000000186b28: add al, byte ptr [rax]; vzeroupper; ret; 
0x000000000013b143: add al, byte ptr [rbp - 0x78]; dec dword ptr [rcx + r9*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x0000000000127c9d: add al, byte ptr [rbx + 0x194501f9]; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000000120805: add al, byte ptr [rbx + 0x574fff8]; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x000000000002a69f: add al, byte ptr [rbx + 0x941f8e0]; ret 0x8944; 
0x000000000014ea4a: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014bdca: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000ecaa2: add al, byte ptr [rbx - 0x3fe6fe06]; and eax, 2; add eax, 8; ret; 
0x00000000000e5569: add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x000000000012bdde: add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000142f2e: add al, byte ptr [rcx + 0x5e]; sub eax, 1; ret; 
0x00000000000d0aa4: add al, byte ptr [rcx + 1]; ret; 
0x000000000013b35c: add al, byte ptr [rcx - 0x77]; add byte ptr [rcx + 0x11894dd0], cl; ret; 
0x000000000005417f: add al, byte ptr [rcx - 0x77]; ret; 
0x000000000013acd8: add al, byte ptr [rcx]; add byte ptr [rax], al; cmovne eax, edx; ret; 
0x000000000010cc21: add al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001181df: add al, byte ptr [rcx]; pop rbp; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000117ca4: add al, byte ptr [rcx]; sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000586a3: add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x0000000000168de8: add al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b5f2a: add al, byte ptr [rsi]; add byte ptr [rax], al; ret; 
0x00000000000e39f8: add al, byte ptr fs:[rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xc8351; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000d0699: add al, ch; adc dword ptr [rbx - 9], esp; dec dword ptr [rax - 0x77]; ret; 
0x0000000000196927: add al, ch; adc dword ptr [rcx + rdi*8 - 1], 0x48; add esp, 0x80; pop rbx; ret; 
0x00000000000de295: add al, ch; adc eax, 0x480004db; add esp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000001407c8: add al, ch; add cl, byte ptr [rax - 0x11]; jmp qword ptr [rsi - 0x70]; 
0x00000000000dd2df: add al, ch; and eax, dword ptr [rax - 0x76b7000c]; ret 0x8948; 
0x000000000008fabb: add al, ch; andnps xmm7, xmm2; jmp qword ptr [rsi + 0x66]; 
0x0000000000113ccb: add al, ch; call qword ptr [rdx]; 
0x000000000009717e: add al, ch; cld; ret; 
0x0000000000196582: add al, ch; cmp byte ptr [rbx], ch; clc; lcall [rbx + 0x48]; mov dword ptr [rip + 0x5048c], 0; ret; 
0x000000000013adcd: add al, ch; cmp eax, 0x89fffe3e; ret; 
0x000000000013280f: add al, ch; cmp ebp, dword ptr [rax]; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012250f: add al, ch; cmp ebp, dword ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001317dc: add al, ch; cmp ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000091acf: add al, ch; cmp r9b, dil; jmp qword ptr [rsi + 0xf]; 
0x0000000000141724: add al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; cmp bh, ch; jmp qword ptr [rsi + 0xf]; 
0x00000000001226b2: add al, ch; cwde; sub eax, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000058dec: add al, ch; faddp st(1); std; jmp qword ptr [rsi + 0x66]; 
0x00000000000de35f: add al, ch; fiadd dword ptr [r8 + r8]; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x000000000011004c: add al, ch; ficom word ptr [rax - 0xf]; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x00000000001022f0: add al, ch; fisubr dword ptr [rbx + rsi*8]; jmp qword ptr [rsi + 0x2e]; 
0x00000000001409ed: add al, ch; fld qword ptr [rbp - 0x11]; jmp qword ptr [rsi + 0x66]; 
0x0000000000122997: add al, ch; imul ebp, dword ptr [rcx], -0x10; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000008a4c5: add al, ch; in eax, 0x18; or al, byte ptr [rax]; add rsp, 0x80; mov eax, edx; ret; 
0x00000000001171bd: add al, ch; in eax, dx; add qword ptr [r8], rax; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000c9d5d: add al, ch; insd dword ptr [rdi], dx; mov dl, 0xf6; jmp qword ptr [rsi + 0x66]; 
0x000000000008a2dd: add al, ch; int 0x1a; or al, byte ptr [rax]; add rsp, 0x80; ret; 
0x00000000001108c2: add al, ch; int1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000028e49: add al, ch; int1; ret 0xffff; 
0x0000000000147a19: add al, ch; int1; xlatb; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ff013: add al, ch; jmp qword ptr [rdx - 0xe]; 
0x00000000000644bb: add al, ch; jmp rdi; 
0x0000000000075d51: add al, ch; jns 0x75d47; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000008b82b: add al, ch; lahf; xchg eax, edi; cli; jmp qword ptr [rsi + 0x66]; 
0x00000000000e2dbd: add al, ch; lodsd eax, dword ptr [rsi]; and al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000012964d: add al, ch; lodsd eax, dword ptr [rsi]; ret; 
0x00000000000fee40: add al, ch; mov ah, byte ptr [rcx - 0xd]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000149cd8: add al, ch; mov al, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x00000000000fe397: add al, ch; mov bl, 0x6c; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ff08a: add al, ch; mov byte ptr [rdx - 0xe], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000124474: add al, ch; mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000043824: add al, ch; mov dh, 0xed; adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x000000000015fc18: add al, ch; mov dl, 0x53; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x00000000000e5b18: add al, ch; mov dl, 0xf4; hlt; jmp qword ptr [rsi - 0x70]; 
0x0000000000063bf2: add al, ch; mov eax, 0x48000c81; add esp, 0x80; ret; 
0x000000000015b2ef: add al, ch; mov ebx, 0x48fffd0a; add esp, 0x80; mov rax, rdx; add rsp, 8; ret; 
0x00000000000df977: add al, ch; mov ebx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001243bf: add al, ch; mov ecx, dword ptr [rax + rsi*8]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000136e56: add al, ch; mov esi, 0x85480000; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0xb2378; call rax; 
0x000000000008a9ee: add al, ch; mov esp, 0x48000a13; add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000122774: add al, ch; mov gs, word ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000149cf8: add al, ch; movabs byte ptr [0xc0950fc0850000b4], al; add rsp, 8; movzx eax, al; ret; 
0x0000000000116a09: add al, ch; movabs eax, dword ptr [0x80c48148000153]; add byte ptr [rax], al; ret; 
0x0000000000098d57: add al, ch; movsxd rdi, dword ptr [rbp - 0x76b70001]; ret; 
0x0000000000085846: add al, ch; or al, byte ptr gs:[rax]; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x000000000010629d: add al, ch; or eax, 0x85fffffe; sal byte ptr [rsp + rbp*4 + 0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x00000000001293b7: add al, ch; or esi, 0xffffffff; dec dword ptr [rcx]; ret; 
0x000000000013fac4: add al, ch; out 0x6e, al; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x000000000012fedb: add al, ch; outsd dx, dword ptr [rsi]; push rcx; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014a793: add al, ch; outsd dx, dword ptr [rsi]; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x00000000000ba771: add al, ch; pop rcx; test al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x000000000015be6b: add al, ch; pop rdi; xchg eax, ecx; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x0000000000028d70: add al, ch; pop rdx; ret 0; 
0x000000000015b6c8: add al, ch; pop rsi; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000001160fd: add al, ch; popfq; ret 0xfff6; 
0x000000000008b660: add al, ch; push -0x67; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000131a42: add al, ch; push 0x48ffffa3; add esp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x0000000000110dbf: add al, ch; push rbx; int1; jmp qword ptr [rsi - 0x7d]; 
0x00000000000d2974: add al, ch; push rsi; idiv bh; nop word ptr [rax + rax]; mov eax, 0x24; syscall; 
0x0000000000109b74: add al, ch; push rsi; mov ah, 0xf2; jmp qword ptr [rsi + 0xf]; 
0x0000000000112f44: add al, ch; push rsi; or ebp, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000092e2e: add al, ch; pushfq; and edx, edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000131c78: add al, ch; ret 0x112; 
0x000000000008bad8: add al, ch; ret 0x5e; 
0x00000000000880b8: add al, ch; ret 0xa3c; 
0x00000000000c9a08: add al, ch; ret 0xf6b5; 
0x00000000000bfa08: add al, ch; ret 0xf755; 
0x00000000001505b8: add al, ch; ret 0xfdb7; 
0x000000000004b947: add al, ch; ret; 
0x0000000000117880: add al, ch; sbb al, byte ptr [rbx]; add byte ptr [rax], al; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000114ee8: add al, ch; sbb al, byte ptr [rcx + rsi*8]; dec dword ptr [rax - 0x77]; add eax, 0xd566b; add rsp, 8; ret; 
0x000000000015ca5d: add al, ch; sbb eax, 0x89fffb02; ret; 
0x00000000000dff2f: add al, ch; sbb edx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000090cec: add al, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000001408d1: add al, ch; stc; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000067cd1: add al, ch; stc; sar ah, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000011b3d1: add al, ch; stc; wait; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000001446cd: add al, ch; std; or bh, ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000000dde4f: add al, ch; sti; jno 0xdde48; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014302f: add al, ch; sti; xchg eax, esi; hlt; jmp qword ptr [rsi + 0x66]; 
0x0000000000124857: add al, ch; stosd dword ptr [rdi], eax; or dh, al; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001328c4: add al, ch; sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001406a0: add al, ch; sub cl, byte ptr [rcx - 0x11]; jmp qword ptr [rsi + 0x2e]; 
0x00000000001225c4: add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x0000000000160a7d: add al, ch; sub eax, 0x89fffabb; ret 0xc085; 
0x00000000000e017f: add al, ch; sub edi, dword ptr [rsp + rax - 0x3b7eb800]; add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret; 
0x000000000013201f: add al, ch; sub esi, dword ptr [rax]; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000028ea9: add al, ch; xchg eax, ecx; ret 0xffff; 
0x0000000000041ebe: add al, ch; xor al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x00000000001320d4: add al, ch; xor ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000015c198: add al, ch; xor cl, byte ptr [rsi + 0x6de8ffed]; xor ch, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000010a0df: add al, ch; xor esi, dword ptr [rdx - 0x7cb7000f]; ret; 
0x00000000000585cf: add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000586a1: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000001522ae: add bh, al; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000015230a: add bh, al; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000011fb60: add bh, al; test eax, esi; idiv edi; jmp qword ptr [rdi + 0x6d]; 
0x00000000001478f7: add bh, al; xor dword ptr [rax + 0x23], 0; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000047397: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000010467f: add bh, bh; dec dword ptr [rbx - 0x76b6ebb0]; ret 0xc748; 
0x0000000000192db7: add bh, bh; dec dword ptr [rcx + 0x21]; ret 0x949; 
0x00000000000a2d1d: add bh, bh; dec dword ptr [rdi]; test byte ptr [rbx], bl; cmp eax, 0xf7410000; ret 0; 
0x00000000000a3fdd: add bh, bh; dec dword ptr [rdi]; test byte ptr [rip - 0x8ffffd6], cl; ret; 
0x000000000014bc4c: add bh, bh; loope 0x14bbe0; ret; 
0x000000000014668e: add bh, bh; mov ah, 0x24; call 0x4c146697; mov dword ptr [rsp + 0x18], edx; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000cc9d2: add bh, bh; ret; 
0x000000000009d4e5: add bh, bh; rol byte ptr [rbp + 0x480e74c0], 1; lea eax, [rip + 0x14a1cd]; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000008254d: add bh, bh; rol byte ptr [rbx + 0xb74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000014510f: add bh, bh; ror byte ptr [rax - 0x73], 1; add eax, 0xa47e7; add rsp, 8; ret; 
0x000000000012c2e6: add bh, bh; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000152636: add bh, bh; ror byte ptr [rcx - 0x75], 1; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x00000000001460c3: add bh, bh; xor eax, 0x72156; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f83: add bh, bh; xor eax, 0x72296; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000000585c0: add bh, byte ptr [rax + 1]; ret; 
0x0000000000058810: add bh, byte ptr [rax + 2]; ret; 
0x000000000010c4b2: add bh, byte ptr [rax - 1]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004419b: add bh, byte ptr [rax - 1]; ret; 
0x000000000015750a: add bh, byte ptr [rbp - 3]; jmp qword ptr [rsi - 0x70]; 
0x0000000000053730: add bh, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000001019ce: add bh, dh; fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; ret; 
0x0000000000192ed1: add bh, dh; fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x00000000000441c6: add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000044196: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000048b56: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000011331e: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000c4f53: add bh, dh; jmp qword ptr [rsi + 0x2e]; 
0x000000000002c475: add bh, dh; ret 0; 
0x000000000002c469: add bh, dh; ret 0xf800; 
0x00000000001168d7: add bh, dh; ret 0xfc07; 
0x0000000000049637: add bh, dh; ret 0xffef; 
0x00000000000a3fcd: add bh, dh; ret; 
0x000000000011d9cf: add bl, al; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x0000000000042b63: add bl, bl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x0000000000042cb7: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x00000000000e67b2: add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x0000000000115791: add bl, byte ptr [rax + rsi + 0x31]; xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x0000000000115751: add bl, byte ptr [rax + rsi + 0x31]; xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x0000000000115496: add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x00000000000e67b3: add bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000d1d4c: add bl, ch; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000015809e: add bl, ch; fidivr dword ptr [rax - 1]; ret; 
0x000000000013a7d6: add bl, ch; lahf; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000014edbd: add bl, ch; mov al, 0xe8; add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x0000000000148482: add bl, ch; mov ebx, 0xfe6d86e8; jmp qword ptr [rsi + 0xf]; 
0x0000000000196aab: add bl, ch; mov ecx, 0xfa9f1de8; jmp qword ptr [rsi + 0x2e]; 
0x0000000000145fda: add bl, ch; mov edx, 0xfe922ee8; jmp qword ptr [rsi + 0x66]; 
0x000000000011729e: add bl, ch; mov word ptr [rax - 0x77], cs; ret 0xb9e9; 
0x00000000001132ec: add bl, ch; out 0x90, al; mov eax, 0xc; syscall; 
0x0000000000148532: add bl, ch; ret 0x1f0f; 
0x0000000000147bd8: add bl, ch; ret 0x5b8b; 
0x0000000000109d5b: add bl, ch; ret 0x9066; 
0x00000000000e1a2d: add bl, ch; ret 0xc389; 
0x0000000000055ab3: add bl, ch; ret; 
0x00000000001822cd: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000e1903: add bl, ch; sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000004474f: add bl, ch; shr al, cl; mov ecx, 0x66000eaa; nop dword ptr [rax + rax]; mov eax, 0x83; syscall; 
0x0000000000082c2c: add bl, ch; test eax, 0xe9c68948; sub al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x000000000004342f: add bl, dh; addps xmm0, xmm0; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000018219f: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018218f: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000194c9b: add bl, dh; divps xmm0, xmmword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000014708f: add bl, dh; movq mm0, qword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014f2b7: add bl, dh; movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014bcf7: add bl, dh; movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b61ff: add bl, dh; movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b553f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b555f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b55df: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b559f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b55bf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b567f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6b9f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b552f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000014f2c7: add bl, dh; movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014bd07: add bl, dh; movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014705f: add bl, dh; movq mm1, qword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000014f2df: add bl, dh; movq mm4, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c228: add bl, dh; movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c234: add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000ba427: add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b64df: add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b64ef: add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x0000000000194ca3: add bl, dh; movups xmmword ptr [rsp - 0x28], xmm0; ret; 
0x000000000004330d: add bl, dh; movups xmmword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043332: add bl, dh; mulps xmm0, xmmword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043305: add bl, dh; mulps xmm0, xmmword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000b553e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b555e: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b55de: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b55be: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000014f2c6: add bl, sil; movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014bd06: add bl, sil; movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000011ae87: add byte ptr [r11 + rcx*4 + 0x7d], r9b; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000056bc3: add byte ptr [r13 + 0x39], r9b; ret 0x860f; 
0x0000000000056c2c: add byte ptr [r13 + 0x39], r9b; ret 0xcd74; 
0x00000000001125ac: add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000109492: add byte ptr [r8 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000009e156: add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000925aa: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x00000000000a0321: add byte ptr [r8 - 0x77], r9b; ret 0x1beb; 
0x0000000000029957: add byte ptr [r8 - 0x77], r9b; ret 0xf641; 
0x000000000013f737: add byte ptr [r8 - 0x77], r9b; ret; 
0x000000000012ae2a: add byte ptr [r8], 0; add byte ptr [rax], al; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x0000000000106750: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a0158: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000a0113: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000065ce0: add byte ptr [r8], r8b; lea rsi, [rip + 0x143866]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000011264b: add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000489bb: add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000013acd6: add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x000000000010cc1f: add byte ptr [rax + 0x102], bh; syscall; 
0x000000000010eaef: add byte ptr [rax + 0x107], bh; syscall; 
0x00000000000ba6df: add byte ptr [rax + 0x10], bh; pop rbx; ret; 
0x0000000000063b9f: add byte ptr [rax + 0x10], bh; ret; 
0x0000000000112c06: add byte ptr [rax + 0x10], bh; syscall; 
0x000000000010ea2f: add byte ptr [rax + 0x10a], bh; syscall; 
0x0000000000135ede: add byte ptr [rax + 0x10ec8348], dl; push 2; call 0x135940; add rsp, 0x18; ret; 
0x000000000011e7af: add byte ptr [rax + 0x110], bh; syscall; 
0x000000000011dc25: add byte ptr [rax + 0x119], bh; syscall; 
0x000000000011e80f: add byte ptr [rax + 0x11b], bh; syscall; 
0x000000000011dd0f: add byte ptr [rax + 0x122], bh; syscall; 
0x000000000011dd0e: add byte ptr [rax + 0x122], dil; syscall; 
0x000000000011e47f: add byte ptr [rax + 0x123], bh; syscall; 
0x000000000010d73f: add byte ptr [rax + 0x124], bh; syscall; 
0x000000000010d79f: add byte ptr [rax + 0x125], bh; syscall; 
0x000000000011e59f: add byte ptr [rax + 0x126], bh; syscall; 
0x000000000011e89f: add byte ptr [rax + 0x12c], bh; syscall; 
0x000000000011e3bf: add byte ptr [rax + 0x131], bh; syscall; 
0x000000000011433f: add byte ptr [rax + 0x132], bh; syscall; 
0x00000000000e19d1: add byte ptr [rax + 0x142], bh; syscall; 
0x0000000000168fbc: add byte ptr [rax + 0x14634900], 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018e70e: add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000011e9bf: add byte ptr [rax + 0x14a], bh; syscall; 
0x000000000011e9ef: add byte ptr [rax + 0x14b], bh; syscall; 
0x000000000009aa2f: add byte ptr [rax + 0x16], bh; ret; 
0x000000000010d76f: add byte ptr [rax + 0x16], bh; syscall; 
0x000000000009aa2e: add byte ptr [rax + 0x16], dil; ret; 
0x00000000000b785e: add byte ptr [rax + 0x1788168a], dl; lea rax, [rdi + 1]; ret; 
0x000000000010185f: add byte ptr [rax + 0x18], bh; syscall; 
0x000000000012c41f: add byte ptr [rax + 0x18], bh; syscall; ret; 
0x00000000000536d0: add byte ptr [rax + 0x193d2e05], cl; add byte ptr [rax - 0x73], cl; add eax, 0x193d22; mov byte ptr [rax + rdx], 0; ret; 
0x000000000011768f: add byte ptr [rax + 0x1b], bh; syscall; 
0x000000000011f9ef: add byte ptr [rax + 0x1e], bh; syscall; 
0x000000000011fa7f: add byte ptr [rax + 0x1f], bh; syscall; 
0x00000000000431bb: add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000ba6ff: add byte ptr [rax + 0x20], bh; pop rbx; ret; 
0x000000000010d6df: add byte ptr [rax + 0x20], bh; syscall; 
0x00000000001161de: add byte ptr [rax + 0x213d8b48], dl; sbb eax, 0x8548000d; push qword ptr [rbp + 0xc]; mov eax, 1; ret; 
0x000000000010d70f: add byte ptr [rax + 0x21], bh; syscall; 
0x0000000000193328: add byte ptr [rax + 0x21], cl; ret 0x8545; 
0x00000000001931f2: add byte ptr [rax + 0x21], cl; ret 0x8548; 
0x00000000000529ea: add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000001126bf: add byte ptr [rax + 0x22], bh; syscall; 
0x000000000011254f: add byte ptr [rax + 0x23], bh; syscall; 
0x00000000000d297f: add byte ptr [rax + 0x24], bh; syscall; 
0x00000000000d29af: add byte ptr [rax + 0x26], bh; syscall; 
0x00000000000e26df: add byte ptr [rax + 0x27], bh; syscall; 
0x00000000000e26df: add byte ptr [rax + 0x27], bh; syscall; ret; 
0x000000000011f10f: add byte ptr [rax + 0x29], bh; syscall; 
0x0000000000047388: add byte ptr [rax + 0x29], cl; fmul dword ptr [rax - 0x3f]; call 0x6491bf96; ret; 
0x000000000013c167: add byte ptr [rax + 0x29], cl; ret 0x149; 
0x00000000000d37cd: add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x000000000002c71c: add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x000000000007a2da: add byte ptr [rax + 0x29], cl; ret; 
0x00000000000cf152: add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000011e14e: add byte ptr [rax + 0x2c74d285], dl; mov ecx, 0x145; mov eax, ecx; syscall; 
0x00000000000ea9ee: add byte ptr [rax + 0x2c755ef9], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000ba6ef: add byte ptr [rax + 0x30], bh; pop rbx; ret; 
0x000000000011ebdf: add byte ptr [rax + 0x33], bh; syscall; 
0x000000000012fc72: add byte ptr [rax + 0x33], cl; push rbx; or byte ptr [rax + 0x33], cl; add ecx, dword ptr [rax + 9]; ret 0x850f; 
0x00000000000a6ece: add byte ptr [rax + 0x3907be0f], dl; ret 0xf41; 
0x0000000000107886: add byte ptr [rax + 0x39], cl; ret 0x2d74; 
0x0000000000096d5c: add byte ptr [rax + 0x39], cl; ret 0x4e72; 
0x0000000000106ae1: add byte ptr [rax + 0x39], cl; ret 0x7976; 
0x0000000000094518: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000008dfc7: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000097253: add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x00000000000e9ae3: add byte ptr [rax + 0x39], cl; ret 0xdd75; 
0x000000000002a02c: add byte ptr [rax + 0x39], cl; ret; 
0x00000000000bb351: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xce624; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad61: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xceee4; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf71: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcf114; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f1: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcf6e4; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad21: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcf884; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae51: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcfb74; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x00000000000a7261: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xdb0c4; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000009fd31: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe24b4; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009fd71: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe5f54; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d461: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe8a54; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c1: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe8dc4; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d301: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe8f14; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x0000000000151b97: add byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48000000], ah; add eax, 0xa0; pop rbx; ret; 
0x0000000000151ab7: add byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48000000], ah; sub eax, -0x80; pop rbx; ret; 
0x00000000001519f7: add byte ptr [rax + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rdi + 0x5b000000], cl; ret; 
0x000000000012e347: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + 0x11], 1; lea rdx, [rip + 0xbbdbc]; call 0xbbb80; add rsp, 8; ret; 
0x00000000000e194f: add byte ptr [rax + 0x3b], bh; syscall; 
0x00000000000441af: add byte ptr [rax + 0x3e], bh; syscall; 
0x00000000000441ae: add byte ptr [rax + 0x3e], dil; syscall; 
0x00000000000e123f: add byte ptr [rax + 0x3f], bh; syscall; 
0x00000000000e3613: add byte ptr [rax + 0x40], bh; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000ba71f: add byte ptr [rax + 0x40], bh; pop rbx; ret; 
0x00000000000e35e7: add byte ptr [rax + 0x40], bh; ret; 
0x000000000011f8ef: add byte ptr [rax + 0x40], bh; syscall; 
0x000000000011f8ee: add byte ptr [rax + 0x40], dil; syscall; 
0x000000000011f8bf: add byte ptr [rax + 0x41], bh; syscall; 
0x000000000011f8be: add byte ptr [rax + 0x41], dil; syscall; 
0x000000000011f85f: add byte ptr [rax + 0x44], bh; syscall; 
0x000000000011f88f: add byte ptr [rax + 0x47], bh; syscall; 
0x000000000011f88e: add byte ptr [rax + 0x47], dil; syscall; 
0x00000000000ba697: add byte ptr [rax + 0x485bf0e5], al; cmovne eax, edx; ret; 
0x000000000009cdb3: add byte ptr [rax + 0x48], al; lea eax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x0000000000112489: add byte ptr [rax + 0x48], bh; syscall; 
0x0000000000042eb0: add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000042e70: add byte ptr [rax + 0x48c22148], al; mov dword ptr [rsp - 8], edx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000010d50f: add byte ptr [rax + 0x49], bh; syscall; 
0x0000000000115b0f: add byte ptr [rax + 0x4c], bh; syscall; 
0x0000000000115b3f: add byte ptr [rax + 0x4d], bh; syscall; 
0x0000000000115b3e: add byte ptr [rax + 0x4d], dil; syscall; 
0x000000000010d88f: add byte ptr [rax + 0x51], bh; syscall; 
0x0000000000063a0f: add byte ptr [rax + 0x52], bh; syscall; 
0x000000000010eb1f: add byte ptr [rax + 0x54], bh; syscall; 
0x000000000010ea5f: add byte ptr [rax + 0x59], bh; syscall; 
0x000000000010caff: add byte ptr [rax + 0x5a], bh; syscall; 
0x000000000010cb2f: add byte ptr [rax + 0x5b], bh; syscall; 
0x00000000000253a3: add byte ptr [rax + 0x5b], bl; pop rbp; ret; 
0x000000000010e17f: add byte ptr [rax + 0x5d], bh; syscall; 
0x000000000010e1af: add byte ptr [rax + 0x5e], bh; syscall; 
0x000000000010caef: add byte ptr [rax + 0x5f], bh; syscall; 
0x000000000010caef: add byte ptr [rax + 0x5f], bh; syscall; ret; 
0x000000000010caee: add byte ptr [rax + 0x5f], dil; syscall; 
0x000000000010caee: add byte ptr [rax + 0x5f], dil; syscall; ret; 
0x00000000000ba70f: add byte ptr [rax + 0x60], bh; pop rbx; ret; 
0x00000000000cf77f: add byte ptr [rax + 0x60], bh; syscall; 
0x0000000000112e5f: add byte ptr [rax + 0x62], bh; syscall; 
0x0000000000112e5e: add byte ptr [rax + 0x62], dil; syscall; 
0x00000000000a70b0: add byte ptr [rax + 0x63], cl; adc al, 0x90; add rdx, rax; jmp rdx; 
0x0000000000041794: add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000006406c: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000191a65: add byte ptr [rax + 0x63], cl; add al, 0x81; add rcx, rax; jmp rcx; 
0x0000000000035aec: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000000f93d8: add byte ptr [rax + 0x63], cl; add al, 0x83; add rax, rbx; jmp rax; 
0x000000000007ef18: add byte ptr [rax + 0x63], cl; add al, 0x86; add rax, rdx; jmp rax; 
0x000000000006d957: add byte ptr [rax + 0x63], cl; add al, 0x86; add rax, rsi; jmp rax; 
0x000000000007763d: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, r14; jmp rax; 
0x0000000000080a40: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000007de5c: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdx; jmp rax; 
0x00000000000777bf: add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, r14; jmp rax; 
0x000000000007e1ae: add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, rdx; jmp rax; 
0x0000000000077daf: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r14; jmp rax; 
0x000000000007ad39: add byte ptr [rax + 0x63], cl; add al, 0x90; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x00000000000e3a02: add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000000ba5b8: add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x00000000000f667c: add byte ptr [rax + 0x63], cl; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000013a750: add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x00000000001284ed: add byte ptr [rax + 0x63], cl; ret 0x4864; 
0x0000000000181397: add byte ptr [rax + 0x63], cl; ret 0x8348; 
0x00000000000a5a7b: add byte ptr [rax + 0x63], cl; ret 0x8d41; 
0x000000000005a513: add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x000000000004a016: add byte ptr [rax + 0x63], cl; ret 0xc748; 
0x000000000005ac97: add byte ptr [rax + 0x63], cl; ret; 
0x000000000013b3e8: add byte ptr [rax + 0x63], cl; ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x000000000010117f: add byte ptr [rax + 0x63], cl; ror byte ptr [rbp + rcx*4 + 5], 1; ret; 
0x00000000000efcb5: add byte ptr [rax + 0x63], cl; ror byte ptr [rdi], 1; mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x000000000015e777: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000074b6c: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000001474d4: add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xa7603f8], r8b; mov eax, 2; ret; 
0x00000000000e126f: add byte ptr [rax + 0x64], bh; syscall; 
0x00000000000cf228: add byte ptr [rax + 0x65], dh; mov qword ptr [rsp + 0xe0], rdx; lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x00000000000e26ff: add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000e26ff: add byte ptr [rax + 0x66], bh; syscall; ret; 
0x00000000000b960e: add byte ptr [rax + 0x66f0ff3], dl; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000011e5ff: add byte ptr [rax + 0x67], bh; syscall; 
0x00000000000e271f: add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000e271f: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000e270f: add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000e270f: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000e272f: add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000e272f: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000000e296f: add byte ptr [rax + 0x6d], bh; syscall; 
0x00000000000e26ef: add byte ptr [rax + 0x6e], bh; syscall; 
0x00000000000e26ef: add byte ptr [rax + 0x6e], bh; syscall; ret; 
0x00000000000e299f: add byte ptr [rax + 0x6f], bh; syscall; 
0x00000000000e299f: add byte ptr [rax + 0x6f], bh; syscall; ret; 
0x00000000000e29ff: add byte ptr [rax + 0x70], bh; syscall; 
0x0000000000042e21: add byte ptr [rax + 0x7110ff2], al; and rdx, rax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043219: add byte ptr [rax + 0x7110ff3], al; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000e273f: add byte ptr [rax + 0x73], bh; syscall; 
0x00000000000e555f: add byte ptr [rax + 0x7400017a], al; sub cl, byte ptr [rdi]; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x000000000012a58e: add byte ptr [rax + 0x7456ff83], dl; or edi, dword ptr [rax + 7]; ret; 
0x00000000000b4fcf: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x00000000000e2a2f: add byte ptr [rax + 0x76], bh; syscall; 
0x000000000012e0ae: add byte ptr [rax + 0x77ca3948], dl; add eax, 0xfe09a6e9; call qword ptr [rax - 0x18]; 
0x000000000018801f: add byte ptr [rax + 0x77f8c517], cl; ret; 
0x00000000000e2a5f: add byte ptr [rax + 0x78], bh; syscall; 
0x00000000000b6a2f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000011dbdf: add byte ptr [rax + 0x7b], bh; syscall; 
0x00000000000e29cf: add byte ptr [rax + 0x7c], bh; syscall; 
0x000000000011e35f: add byte ptr [rax + 0x7d], bh; syscall; 
0x00000000000e356f: add byte ptr [rax + 0x7e], bh; ret; 
0x000000000011e38f: add byte ptr [rax + 0x7e], bh; syscall; 
0x00000000000441e4: add byte ptr [rax + 0x7f], bh; syscall; 
0x000000000013b86f: add byte ptr [rax + 0x7fffffff], bh; ret; 
0x00000000000ba6bf: add byte ptr [rax + 0x80], bh; pop rbx; ret; 
0x0000000000044221: add byte ptr [rax + 0x82], bh; syscall; 
0x000000000004475f: add byte ptr [rax + 0x83], bh; syscall; 
0x000000000011e7df: add byte ptr [rax + 0x86], bh; syscall; 
0x000000000010c9df: add byte ptr [rax + 0x8a], bh; syscall; 
0x000000000011320f: add byte ptr [rax + 0x8c], bh; syscall; 
0x000000000011324f: add byte ptr [rax + 0x8d], bh; syscall; 
0x000000000011324e: add byte ptr [rax + 0x8d], dil; syscall; 
0x000000000010179f: add byte ptr [rax + 0x8e], bh; syscall; 
0x00000000001017cf: add byte ptr [rax + 0x8f], bh; syscall; 
0x00000000001017ff: add byte ptr [rax + 0x90], bh; syscall; 
0x000000000010182f: add byte ptr [rax + 0x91], bh; syscall; 
0x000000000010188f: add byte ptr [rax + 0x92], bh; syscall; 
0x00000000001018bf: add byte ptr [rax + 0x93], bh; syscall; 
0x00000000001018ef: add byte ptr [rax + 0x94], bh; syscall; 
0x000000000011e17f: add byte ptr [rax + 0x95], bh; syscall; 
0x000000000011e17e: add byte ptr [rax + 0x95], dil; syscall; 
0x000000000011771f: add byte ptr [rax + 0x96], bh; syscall; 
0x000000000011774f: add byte ptr [rax + 0x97], bh; syscall; 
0x000000000011777f: add byte ptr [rax + 0x98], bh; syscall; 
0x000000000011e2bf: add byte ptr [rax + 0x9a], bh; syscall; 
0x000000000011e6bf: add byte ptr [rax + 0x9b], bh; syscall; 
0x000000000011e28f: add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000011e28e: add byte ptr [rax + 0x9e], dil; syscall; 
0x00000000001141df: add byte ptr [rax + 0xa1], bh; syscall; 
0x000000000011428f: add byte ptr [rax + 0xa2], bh; syscall; 
0x00000000000cf85f: add byte ptr [rax + 0xa4], bh; syscall; 
0x000000000011db4f: add byte ptr [rax + 0xa6], bh; syscall; 
0x000000000011469f: add byte ptr [rax + 0xa7], bh; syscall; 
0x00000000001146cf: add byte ptr [rax + 0xa8], bh; syscall; 
0x000000000011758f: add byte ptr [rax + 0xa], bh; syscall; 
0x0000000000113e6f: add byte ptr [rax + 0xaa], bh; syscall; 
0x0000000000113fbf: add byte ptr [rax + 0xab], bh; syscall; 
0x0000000000113fbe: add byte ptr [rax + 0xab], dil; syscall; 
0x000000000011da0f: add byte ptr [rax + 0xac], bh; syscall; 
0x000000000011d9df: add byte ptr [rax + 0xad], bh; syscall; 
0x000000000011e3ef: add byte ptr [rax + 0xae], bh; syscall; 
0x000000000011e41f: add byte ptr [rax + 0xb0], bh; syscall; 
0x00000000000f6e48: add byte ptr [rax + 0xb], cl; test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xe2c1; 
0x000000000011db7f: add byte ptr [rax + 0xbb], bh; syscall; 
0x000000000011b93f: add byte ptr [rax + 0xc6], bh; syscall; 
0x000000000011b81f: add byte ptr [rax + 0xc7], bh; syscall; 
0x000000000012bdc1: add byte ptr [rax + 0xca], bh; syscall; 
0x000000000012bdc1: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000012be68: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000011e44f: add byte ptr [rax + 0xd5], bh; syscall; 
0x000000000009352f: add byte ptr [rax + 0xd7905c7], dl; adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x150d4e; ret; 
0x000000000011e2ef: add byte ptr [rax + 0xe4], bh; syscall; 
0x000000000011e2ef: add byte ptr [rax + 0xe4], bh; syscall; ret; 
0x00000000000e3902: add byte ptr [rax + 0xe5], bh; syscall; 
0x0000000000043ecf: add byte ptr [rax + 0xe], bh; syscall; 
0x00000000001158ef: add byte ptr [rax + 0xeb], bh; syscall; 
0x00000000001158ee: add byte ptr [rax + 0xeb], dil; syscall; 
0x0000000000035174: add byte ptr [rax + 0xf], al; mov bh, 0xc0; ret; 
0x0000000000154be7: add byte ptr [rax + 0xf], al; mov dh, 0xc5; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000029e2f: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000fa0be: add byte ptr [rax + 0xf], al; mov dh, 0xf6; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000fca59: add byte ptr [rax + 0xf], al; mov dh, 0xf6; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000aff15: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000154a47: add byte ptr [rax + 0xf], cl; mov edi, 0xe6894806; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000193626: add byte ptr [rax + 0xf], cl; mov edx, 0x21482fea; ret 0x41e9; 
0x000000000005881f: add byte ptr [rax + 0xf], cl; mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000292df: add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x0000000000102b23: add byte ptr [rax + 0xf], cl; mov esi, 0x894d024e; ret 0x8d4c; 
0x0000000000154b57: add byte ptr [rax + 0xf], cl; mov esi, 0xe68948c5; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000006d4e9: add byte ptr [rax + 0xf], cl; movabs dword ptr [0x48fffff6dc830fc1], eax; lea ecx, [rip + 0x13c3b1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000054a71: add byte ptr [rax + 0xf], cl; ror byte ptr [r9 - 0x76a7dbac], 1; ret 0x31e9; 
0x000000000012b7c6: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000e355f: add byte ptr [rax + 0xfc17], bh; ret; 
0x000000000011e56f: add byte ptr [rax + 0xfd], bh; syscall; 
0x00000000000e34d0: add byte ptr [rax + 0xfde8], bh; cmovne rax, rdx; ret; 
0x00000000000e35da: add byte ptr [rax + 0xff], bh; cmovne rax, rdx; ret; 
0x000000000011e5cf: add byte ptr [rax + 0xff], bh; syscall; 
0x00000000000e349a: add byte ptr [rax + 0xfffa], bh; cmovne rax, rdx; ret; 
0x00000000000e357f: add byte ptr [rax + 0xfffa], bh; ret; 
0x0000000000082c96: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114b06: add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x000000000005869c: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000010b707: add byte ptr [rax + 1], bh; pop rbx; ret; 
0x00000000000585d5: add byte ptr [rax + 1], bh; ret; 
0x000000000011274f: add byte ptr [rax + 1], bh; syscall; 
0x00000000000aa584: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000001862a1: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa1: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x00000000001824d9: add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000015d940: add byte ptr [rax + 1], cl; ret 0x3a83; 
0x00000000000578d8: add byte ptr [rax + 1], cl; ret 0x8948; 
0x00000000001824d0: add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000fc886: add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000fd493: add byte ptr [rax + 1], cl; ret 0x8d4a; 
0x000000000013a0dd: add byte ptr [rax + 1], cl; ret 0xe183; 
0x00000000000ebd36: add byte ptr [rax + 1], cl; ret 0xf66; 
0x0000000000055539: add byte ptr [rax + 1], cl; ret; 
0x000000000010b706: add byte ptr [rax + 1], dil; pop rbx; ret; 
0x000000000008c19e: add byte ptr [rax + 1], dil; ret; 
0x00000000000587c1: add byte ptr [rax + 2], bh; ret; 
0x0000000000152a4e: add byte ptr [rax + 2], dil; ret; 
0x0000000000032bcd: add byte ptr [rax + 3], cl; or byte ptr [rax - 0x77], cl; rol byte ptr [rax - 0x75], 1; cmp byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000181b6c: add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000035534: add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000151c80: add byte ptr [rax + 5], cl; test al, 0; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000ba6cf: add byte ptr [rax + 8], bh; pop rbx; ret; 
0x000000000010d0af: add byte ptr [rax + 8], bh; syscall; 
0x00000000000b60ac: add byte ptr [rax + rax], 0; ret; 
0x00000000000dd2dc: add byte ptr [rax + rax], al; add al, ch; and eax, dword ptr [rax - 0x76b7000c]; ret 0x8948; 
0x00000000001317d9: add byte ptr [rax + rax], al; add al, ch; cmp ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000122994: add byte ptr [rax + rax], al; add al, ch; imul ebp, dword ptr [rcx], -0x10; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000124471: add byte ptr [rax + rax], al; add al, ch; mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000df974: add byte ptr [rax + rax], al; add al, ch; mov ebx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000122771: add byte ptr [rax + rax], al; add al, ch; mov gs, word ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000124854: add byte ptr [rax + rax], al; add al, ch; stosd dword ptr [rdi], eax; or dh, al; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001328c1: add byte ptr [rax + rax], al; add al, ch; sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001225c1: add byte ptr [rax + rax], al; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x00000000001320d1: add byte ptr [rax + rax], al; add al, ch; xor ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000009c7ff: add byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000133c0a: add byte ptr [rax + rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000008083a: add byte ptr [rax + rax], al; add cl, ch; ret 0xfffc; 
0x000000000012b7c4: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000113341: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009799b: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, rsi; ret; 
0x00000000000999e1: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009c609: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000501ab: add byte ptr [rax + rax], cl; add cl, ch; ret 0xfffd; 
0x00000000000cdf45: add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret; 
0x0000000000026ec6: add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019618b: add byte ptr [rax + rcx*2 - 0x75], ah; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000035247: add byte ptr [rax + rcx*2 - 0x75], ah; adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000012c38f: add byte ptr [rax + rcx*2 - 0x75], ah; add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012118e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012164e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012134e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001212be: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012150e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001215ae: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001216de: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012180e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001213de: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012121e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012146e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000000538c6: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x77], cl; ret 0x1de8; 
0x0000000000153d38: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rbx + 0x418d880c], cl; mov edi, 0x8337e983; clc; sbb cl, byte ptr [rcx + 0x430f41c8]; ret 0xf801; 
0x000000000012f413: add byte ptr [rax + rcx*2 - 0x75], ah; sub byte ptr [rdi], cl; mov esi, 0xf303c07; test byte ptr [rbp - 0x77000000], ah; ret 0xe283; 
0x0000000000151972: add byte ptr [rax + rcx*2 - 0x77], ah; add ebx, dword ptr [rbx - 0x39]; add eax, 0x9829e; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151caa: add byte ptr [rax + rcx*2 - 0x77], ah; add ecx, dword ptr [rax - 0x73]; add eax, 0x97cca; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bca: add byte ptr [rax + rcx*2 - 0x77], ah; add ecx, dword ptr [rax - 0x73]; add eax, 0x97db2; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151aea: add byte ptr [rax + rcx*2 - 0x77], ah; add ecx, dword ptr [rax - 0x73]; add eax, 0x97eaa; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a22: add byte ptr [rax + rcx*2 - 0x77], ah; add ecx, dword ptr [rax - 0x73]; add eax, 0x97f92; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000047bd3: add byte ptr [rax + rcx*2 - 0x77], ah; push rbp; add byte ptr [rax - 0x75], cl; jnp 0x47be5; call rax; 
0x00000000000e351b: add byte ptr [rax + rdx*8 + 0x49], dh; cmp eax, 0x138f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000001125ad: add byte ptr [rax + rsi - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000012d2ce: add byte ptr [rax - 0x138af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ac1]; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d20e: add byte ptr [rax - 0x138af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ba1]; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d14e: add byte ptr [rax - 0x138af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60c61]; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000009e76e: add byte ptr [rax - 0x138af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef651]; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e41e: add byte ptr [rax - 0x138af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef981]; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2be: add byte ptr [rax - 0x138af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefb01]; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000005d532: add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000014d741: add byte ptr [rax - 0x168b7f80], 0x89; ret 0xeac1; 
0x00000000000eaa1f: add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x000000000009d3c5: add byte ptr [rax - 0x197fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xb8dd; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x000000000009e62e: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xcbd4; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e58e: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xcc64; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e67e: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xedc4; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5de: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xee54; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000015d35e: add byte ptr [rax - 0x1f3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d34e: add byte ptr [rax - 0x1fa417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d33e: add byte ptr [rax - 0x203417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d36e: add byte ptr [rax - 0x210417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d32e: add byte ptr [rax - 0x23f417], dl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000134fe0: add byte ptr [rax - 0x2976178c], 0xc1; out dx, al; adc bh, dh; ret 0x8080; 
0x000000000013ba35: add byte ptr [rax - 0x39], cl; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000015b565: add byte ptr [rax - 0x39], cl; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx - 1], bh; mov eax, edx; ret; 
0x0000000000092a4a: add byte ptr [rax - 0x39], cl; add eax, 0x154b12; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000120546: add byte ptr [rax - 0x39], cl; add eax, 0xc3e0e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012051d: add byte ptr [rax - 0x39], cl; add eax, 0xc3e37; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001204c6: add byte ptr [rax - 0x39], cl; add eax, 0xc3e8e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012016f: add byte ptr [rax - 0x39], cl; add eax, 0xc41e5; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000012013e: add byte ptr [rax - 0x39], cl; add eax, 0xc4216; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001225b9: add byte ptr [rax - 0x39], cl; add eax, 0xc5de3; add byte ptr [rax + rax], al; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x0000000000116521: add byte ptr [rax - 0x39], cl; add eax, 0xd1a03; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000114ec4: add byte ptr [rax - 0x39], cl; add eax, 0xd2ed0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000058f87: add byte ptr [rax - 0x39], cl; ret 0xc001; 
0x0000000000043d8a: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000004200f: add byte ptr [rax - 0x39], cl; ret; 
0x00000000000ce4cf: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000ce50f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000ce4bf: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000ce4ff: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000043f5f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000000296ba: add byte ptr [rax - 0x39], cl; test al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000043284: add byte ptr [rax - 0x3dbab77], al; movd xmm0, dword ptr [rsp - 4]; ret; 
0x000000000012f68e: add byte ptr [rax - 0x3efa74b8], dl; or r8d, dword ptr [r8]; add rax, qword ptr fs:[0]; ret; 
0x0000000000042a95: add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x000000000018618e: add byte ptr [rax - 0x3f43f00d], dl; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000431ae: add byte ptr [rax - 0x3f81f09a], dl; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000026416: add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1c3d26], eax; ret; 
0x000000000012fd2a: add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0xeb; ret 0x8b48; 
0x0000000000025391: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000000315f0: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x0000000000130731: add byte ptr [rax - 0x3f], cl; ret 0xeb11; 
0x000000000011282c: add byte ptr [rax - 0x3fcef877], al; ret; 
0x0000000000058662: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001202cf: add byte ptr [rax - 0x41], cl; ret; 
0x0000000000058698: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000194bd7: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab80000], al; ret; 
0x000000000004b976: add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x000000000007868f: add byte ptr [rax - 0x50f43], al; jmp qword ptr [rax]; 
0x00000000000e162e: add byte ptr [rax - 0x66fa72b8], dl; lea edx, [rax]; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x23]; syscall; 
0x000000000011641f: add byte ptr [rax - 0x6af0dc06], al; ret 0xc084; 
0x00000000000934de: add byte ptr [rax - 0x6ff874b8], dl; mov dword ptr [rip + 0x150dc6], 1; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x000000000009a85c: add byte ptr [rax - 0x73], cl; adc eax, 0x10ff3c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000bc688: add byte ptr [rax - 0x73], cl; adc eax, 0x11930; cmovne rax, rdx; ret; 
0x0000000000080b1b: add byte ptr [rax - 0x73], cl; adc eax, 0x129b01; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000802c6: add byte ptr [rax - 0x73], cl; adc eax, 0x12a112; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009cd68: add byte ptr [rax - 0x73], cl; adc eax, 0x13800; cmovne rax, rdx; ret; 
0x0000000000064bcc: add byte ptr [rax - 0x73], cl; adc eax, 0x1446c0; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d368: add byte ptr [rax - 0x73], cl; adc eax, 0x14e20; cmovne rax, rdx; ret; 
0x000000000002728c: add byte ptr [rax - 0x73], cl; adc eax, 0x170d6c; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009e79a: add byte ptr [rax - 0x73], cl; adc eax, 0x1b84e; cmove rax, rdx; ret; 
0x000000000009e44a: add byte ptr [rax - 0x73], cl; adc eax, 0x1bb7e; cmove rax, rdx; ret; 
0x000000000009e2ea: add byte ptr [rax - 0x73], cl; adc eax, 0x1bcfe; cmove rax, rdx; ret; 
0x00000000001926ef: add byte ptr [rax - 0x73], cl; adc eax, 0x275c9; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000012d2b4: add byte ptr [rax - 0x73], cl; adc eax, 0x3bb44; cmovne rax, rdx; ret; 
0x000000000012d134: add byte ptr [rax - 0x73], cl; adc eax, 0x3bce4; cmovne rax, rdx; ret; 
0x000000000012d1f4: add byte ptr [rax - 0x73], cl; adc eax, 0x3e6f4; cmovne rax, rdx; ret; 
0x000000000012d28f: add byte ptr [rax - 0x73], cl; adc eax, 0x5bd59; cmove rax, rdx; ret; 
0x000000000012d1cf: add byte ptr [rax - 0x73], cl; adc eax, 0x5be39; cmove rax, rdx; ret; 
0x000000000012d10f: add byte ptr [rax - 0x73], cl; adc eax, 0x5bef9; cmove rax, rdx; ret; 
0x000000000012d2de: add byte ptr [rax - 0x73], cl; adc eax, 0x60a4a; cmove rax, rdx; ret; 
0x000000000012d21e: add byte ptr [rax - 0x73], cl; adc eax, 0x60b2a; cmove rax, rdx; ret; 
0x000000000012d15e: add byte ptr [rax - 0x73], cl; adc eax, 0x60bea; cmove rax, rdx; ret; 
0x000000000012d39e: add byte ptr [rax - 0x73], cl; adc eax, 0x60f3a; cmove rax, rdx; ret; 
0x0000000000151876: add byte ptr [rax - 0x73], cl; adc eax, 0x983c2; mov qword ptr fs:[rax], rdx; ret; 
0x000000000010842d: add byte ptr [rax - 0x73], cl; adc eax, 0xa5233; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000ee830: add byte ptr [rax - 0x73], cl; adc eax, 0xbde18; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000bad86: add byte ptr [rax - 0x73], cl; adc eax, 0xc04c2; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x00000000000e8b68: add byte ptr [rax - 0x73], cl; adc eax, 0xc3784; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x000000000009ce18: add byte ptr [rax - 0x73], cl; adc eax, 0xc40b0; cmovne rax, rdx; ret; 
0x000000000009d3d2: add byte ptr [rax - 0x73], cl; adc eax, 0xc4d56; cmovne rax, rdx; ret; 
0x00000000000e7054: add byte ptr [rax - 0x73], cl; adc eax, 0xc51a8; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e6a70: add byte ptr [rax - 0x73], cl; adc eax, 0xc570c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e39fb: add byte ptr [rax - 0x73], cl; adc eax, 0xc8351; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e3d50: add byte ptr [rax - 0x73], cl; adc eax, 0xc83d8; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000e2ff1: add byte ptr [rax - 0x73], cl; adc eax, 0xc8d07; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000009e754: add byte ptr [rax - 0x73], cl; adc eax, 0xca6d4; cmovne rax, rdx; ret; 
0x000000000009e404: add byte ptr [rax - 0x73], cl; adc eax, 0xcaa04; cmovne rax, rdx; ret; 
0x000000000009e2a4: add byte ptr [rax - 0x73], cl; adc eax, 0xcd654; cmovne rax, rdx; ret; 
0x000000000009e63b: add byte ptr [rax - 0x73], cl; adc eax, 0xcfddd; cmovne rax, rdx; ret; 
0x000000000009e59b: add byte ptr [rax - 0x73], cl; adc eax, 0xcfe6d; cmovne rax, rdx; ret; 
0x000000000009e68b: add byte ptr [rax - 0x73], cl; adc eax, 0xd1edd; cmovne rax, rdx; ret; 
0x000000000009e5eb: add byte ptr [rax - 0x73], cl; adc eax, 0xd1f6d; cmovne rax, rdx; ret; 
0x00000000000bb3a9: add byte ptr [rax - 0x73], cl; adc eax, 0xd4b9f; cmovne rax, rdx; ret; 
0x000000000009ce88: add byte ptr [rax - 0x73], cl; adc eax, 0xd5c30; cmovne rax, rdx; ret; 
0x000000000009d428: add byte ptr [rax - 0x73], cl; adc eax, 0xd6e40; cmovne rax, rdx; ret; 
0x000000000009e4e8: add byte ptr [rax - 0x73], cl; adc eax, 0xd8900; cmovne rax, rdx; ret; 
0x000000000009e548: add byte ptr [rax - 0x73], cl; adc eax, 0xda0b0; cmovne rax, rdx; ret; 
0x000000000009d726: add byte ptr [rax - 0x73], cl; adc eax, 0xe3d72; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d486: add byte ptr [rax - 0x73], cl; adc eax, 0xe3ed2; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009cea6: add byte ptr [rax - 0x73], cl; adc eax, 0xe4332; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000009e72f: add byte ptr [rax - 0x73], cl; adc eax, 0xea8e9; cmove rax, rdx; ret; 
0x000000000009e3df: add byte ptr [rax - 0x73], cl; adc eax, 0xeac19; cmove rax, rdx; ret; 
0x000000000009e27f: add byte ptr [rax - 0x73], cl; adc eax, 0xead99; cmove rax, rdx; ret; 
0x000000000009e77e: add byte ptr [rax - 0x73], cl; adc eax, 0xef5da; cmove rax, rdx; ret; 
0x000000000009e42e: add byte ptr [rax - 0x73], cl; adc eax, 0xef90a; cmove rax, rdx; ret; 
0x000000000009e2ce: add byte ptr [rax - 0x73], cl; adc eax, 0xefa8a; cmove rax, rdx; ret; 
0x000000000009e38e: add byte ptr [rax - 0x73], cl; adc eax, 0xeff5a; cmove rax, rdx; ret; 
0x000000000009e209: add byte ptr [rax - 0x73], cl; adc eax, 0xf05cf; cmovne rax, rdx; ret; 
0x000000000009cdbb: add byte ptr [rax - 0x73], cl; adc eax, 0xf16fd; cmovne rax, rdx; ret; 
0x00000000000cf825: add byte ptr [rax - 0x73], cl; adc eax, 0xffffff53; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x00000000000cf745: add byte ptr [rax - 0x73], cl; adc eax, 0xffffff73; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x000000000010c386: add byte ptr [rax - 0x73], cl; adc eax, 0xffffff92; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x00000000000bbc50: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x00000000000bb89c: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x00000000000afada: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000bb35b: add byte ptr [rax - 0x73], cl; add eax, 0x116bd; cmove rax, rdx; ret; 
0x00000000000bad6b: add byte ptr [rax - 0x73], cl; add eax, 0x11fdd; cmove rax, rdx; ret; 
0x000000000009d46b: add byte ptr [rax - 0x73], cl; add eax, 0x12a4d; cmove rax, rdx; ret; 
0x00000000000baf7b: add byte ptr [rax - 0x73], cl; add eax, 0x12a9d; cmove rax, rdx; ret; 
0x00000000000bb0fb: add byte ptr [rax - 0x73], cl; add eax, 0x12bad; cmove rax, rdx; ret; 
0x00000000000bad2b: add byte ptr [rax - 0x73], cl; add eax, 0x12ded; cmove rax, rdx; ret; 
0x000000000009d2cb: add byte ptr [rax - 0x73], cl; add eax, 0x12edd; cmove rax, rdx; ret; 
0x000000000009d30b: add byte ptr [rax - 0x73], cl; add eax, 0x1303d; cmove rax, rdx; ret; 
0x00000000000780e4: add byte ptr [rax - 0x73], cl; add eax, 0x131c54; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077fb8: add byte ptr [rax - 0x73], cl; add eax, 0x131c80; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077da8: add byte ptr [rax - 0x73], cl; add eax, 0x131f10; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x00000000000777b8: add byte ptr [rax - 0x73], cl; add eax, 0x132380; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000bae5b: add byte ptr [rax - 0x73], cl; add eax, 0x1341d; cmove rax, rdx; ret; 
0x00000000000339c7: add byte ptr [rax - 0x73], cl; add eax, 0x17bf7d; ret; 
0x0000000000026c5f: add byte ptr [rax - 0x73], cl; add eax, 0x188824; ret; 
0x0000000000026c6f: add byte ptr [rax - 0x73], cl; add eax, 0x18a6ae; ret; 
0x00000000000536d6: add byte ptr [rax - 0x73], cl; add eax, 0x193d22; mov byte ptr [rax + rdx], 0; ret; 
0x000000000004886f: add byte ptr [rax - 0x73], cl; add eax, 0x1a18af; add rsp, 8; ret; 
0x000000000009e368: add byte ptr [rax - 0x73], cl; add eax, 0x1c090; cmovne rax, rdx; ret; 
0x00000000000a726b: add byte ptr [rax - 0x73], cl; add eax, 0x37bd; cmove rax, rdx; ret; 
0x000000000012d359: add byte ptr [rax - 0x73], cl; add eax, 0x5c18f; cmove rax, rdx; ret; 
0x0000000000151d27: add byte ptr [rax - 0x73], cl; add eax, 0x97c51; pop rbx; ret; 
0x0000000000151c47: add byte ptr [rax - 0x73], cl; add eax, 0x97d39; pop rbx; ret; 
0x0000000000151b67: add byte ptr [rax - 0x73], cl; add eax, 0x97e31; pop rbx; ret; 
0x000000000009fd3b: add byte ptr [rax - 0x73], cl; add eax, 0xaaed; cmove rax, rdx; ret; 
0x0000000000117dfd: add byte ptr [rax - 0x73], cl; add eax, 0xd025b; add rsp, 0x18; ret; 
0x0000000000117885: add byte ptr [rax - 0x73], cl; add eax, 0xd0783; add rsp, 8; ret; 
0x0000000000114bb3: add byte ptr [rax - 0x73], cl; add eax, 0xd321d; add rsp, 8; ret; 
0x000000000009e349: add byte ptr [rax - 0x73], cl; add eax, 0xeb1af; cmove rax, rdx; ret; 
0x000000000009fd7b: add byte ptr [rax - 0x73], cl; add eax, 0xff2d; cmove rax, rdx; ret; 
0x000000000007e214: add byte ptr [rax - 0x73], cl; add eax, 0xffffed2f; mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x00000000000bb734: add byte ptr [rax - 0x73], cl; add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x38; call rbx; 
0x000000000013e8f7: add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x00000000000cdf8f: add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cdf9f: add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000000dc2d6: add byte ptr [rax - 0x73], cl; cmp eax, 0x10a442; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc290: add byte ptr [rax - 0x73], cl; cmp eax, 0x10a488; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e6: add byte ptr [rax - 0x73], cl; cmp eax, 0x10a632; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0b9: add byte ptr [rax - 0x73], cl; cmp eax, 0x10a65f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff6: add byte ptr [rax - 0x73], cl; cmp eax, 0x10a722; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfcd: add byte ptr [rax - 0x73], cl; cmp eax, 0x10a74b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbafb: add byte ptr [rax - 0x73], cl; cmp eax, 0x10ac1d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8d47: add byte ptr [rax - 0x73], cl; cmp eax, 0x11d9d1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b97: add byte ptr [rax - 0x73], cl; cmp eax, 0x11db81; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000080a39: add byte ptr [rax - 0x73], cl; cmp eax, 0x129b27; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000009d4d1: add byte ptr [rax - 0x73], cl; cmp eax, 0x14a24b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004178d: add byte ptr [rax - 0x73], cl; cmp eax, 0x16342b; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000047605: add byte ptr [rax - 0x73], cl; cmp eax, 0x168493; call 0x34fd0; xor eax, eax; ret; 
0x0000000000039509: add byte ptr [rax - 0x73], cl; cmp eax, 0x1ad38f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394a9: add byte ptr [rax - 0x73], cl; cmp eax, 0x1ad3ef; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375f9: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af35f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003758f: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af3c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003745d: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af4fb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373fc: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af55c; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037324: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af5f4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370d0: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af648; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000372cd: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af64b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f97: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af781; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003709e: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af7fa; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f69: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af92f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d2b: add byte ptr [rax - 0x73], cl; cmp eax, 0x1af9ed; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d04: add byte ptr [rax - 0x73], cl; cmp eax, 0x1afb94; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a22: add byte ptr [rax - 0x73], cl; cmp eax, 0x1afcf6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036af8: add byte ptr [rax - 0x73], cl; cmp eax, 0x1afe20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a4b: add byte ptr [rax - 0x73], cl; cmp eax, 0x1afe4d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036ab1: add byte ptr [rax - 0x73], cl; cmp eax, 0x1afe67; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035567: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b1331; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034b0e: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b1c0a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a34: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b1ce4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c7: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b1d51; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003492b: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b1ded; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034351: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b23c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003431a: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b23fe; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034133: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b25e5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003235e: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b43ba; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f2a: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b47ee; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031de8: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4930; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031d10: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4a08; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c8e: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4a8a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a52: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4cc6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a12: add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4d06; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014f28c: add byte ptr [rax - 0x73], cl; cmp eax, 0x60150; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014e99c: add byte ptr [rax - 0x73], cl; cmp eax, 0x60a00; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014bccc: add byte ptr [rax - 0x73], cl; cmp eax, 0x632ac; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x00000000000f9bab: add byte ptr [rax - 0x73], cl; cmp eax, 0xb2cb5; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f6ef7: add byte ptr [rax - 0x73], cl; cmp eax, 0xb58ad; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000e9107: add byte ptr [rax - 0x73], cl; cmp eax, 0xc3265; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000d8e4d: add byte ptr [rax - 0x73], cl; cmp eax, 0xd2ad3; mov esi, ecx; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000d8e92: add byte ptr [rax - 0x73], cl; cmp eax, 0xd2c7a; mov edx, eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000cf84b: add byte ptr [rax - 0x73], cl; cmp eax, 0xe3a35; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000cdf7f: add byte ptr [rax - 0x73], cl; hlt; ret; 
0x00000000000360c8: add byte ptr [rax - 0x73], cl; mov ebx, 0x80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000807b4: add byte ptr [rax - 0x73], cl; mov rdi, rbx; call rax; 
0x000000000006cb2a: add byte ptr [rax - 0x73], cl; or eax, 0x13cb6e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000191a5e: add byte ptr [rax - 0x73], cl; or eax, 0x2821a; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000010907b: add byte ptr [rax - 0x73], cl; or eax, 0xa46a5; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000ee739: add byte ptr [rax - 0x73], cl; or eax, 0xbdd3f; movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x0000000000117879: add byte ptr [rax - 0x73], cl; or eax, 0xd078f; call 0x117ba0; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x000000000017b9e5: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000133b6f: add byte ptr [rax - 0x73], cl; pop rdi; add ebx, ebp; cwde; xor eax, eax; ret; 
0x000000000014249d: add byte ptr [rax - 0x73], cl; pop rdi; xor byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x8b4c; 
0x0000000000095ff2: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000047231: add byte ptr [rax - 0x73], cl; push rax; dec dword ptr [rbx + rcx*4 + 0x2d]; ret; 
0x0000000000114fe8: add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000015abc5: add byte ptr [rax - 0x73], cl; push rsp; and al, 8; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000000f93d1: add byte ptr [rax - 0x73], cl; sbb eax, 0xb347b; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000140c52: add byte ptr [rax - 0x73], cl; xchg dword ptr [rax + 0x31000000], eax; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000008020d: add byte ptr [rax - 0x73], cl; xor eax, 0x12a10f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000006d950: add byte ptr [rax - 0x73], cl; xor eax, 0x13c004; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000065ce2: add byte ptr [rax - 0x73], cl; xor eax, 0x143866; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000475fe: add byte ptr [rax - 0x73], cl; xor eax, 0x16848d; lea rdi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x0000000000052e5d: add byte ptr [rax - 0x73], cl; xor eax, 0x7b; call rax; 
0x00000000000d6aed: add byte ptr [rax - 0x73], cl; xor eax, 0xd4c47; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ba5b1: add byte ptr [rax - 0x73], cl; xor eax, 0xf0a27; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000105132: add byte ptr [rax - 0x73], cl; xor eax, 0xffffd426; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013fbd0: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffa58; lea rdi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000029b50: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffa68; lea rdi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000151cce: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffb9a; lea rdi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000055633: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffc05; lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bee: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffc7a; lea rdi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b0e: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffd5a; lea rdi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a46: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffe22; lea rdi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c9d6: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffec2; lea rdi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015198e: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffeda; lea rdi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450f4: add byte ptr [rax - 0x73], cl; xor eax, 0xffffff04; lea rdi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d55c: add byte ptr [rax - 0x73], cl; xor eax, 0xffffff3c; lea rdi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013770d: add byte ptr [rax - 0x73], cl; xor eax, 0xffffffbb; lea rdi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114f14: add byte ptr [rax - 0x73], cl; xor eax, 0xffffffc4; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e64cf: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 1], r9b; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000939f7: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000121192: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121652: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121352: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001212c2: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121512: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001215b2: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001216e2: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121812: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001213e2: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121222: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121472: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000014bf15: add byte ptr [rax - 0x75], cl; adc eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000e15ff: add byte ptr [rax - 0x75], cl; adc eax, 0x102869; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e14df: add byte ptr [rax - 0x75], cl; adc eax, 0x102989; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13df: add byte ptr [rax - 0x75], cl; adc eax, 0x102a89; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1347: add byte ptr [rax - 0x75], cl; adc eax, 0x102b21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a57: add byte ptr [rax - 0x75], cl; adc eax, 0x180411; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b4f: add byte ptr [rax - 0x75], cl; adc eax, 0x19b319; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000441f7: add byte ptr [rax - 0x75], cl; adc eax, 0x19fc71; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004418f: add byte ptr [rax - 0x75], cl; adc eax, 0x19fcd9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c74f: add byte ptr [rax - 0x75], cl; adc eax, 0xb7719; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa67: add byte ptr [rax - 0x75], cl; adc eax, 0xc4401; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9d7: add byte ptr [rax - 0x75], cl; adc eax, 0xc4491; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f787: add byte ptr [rax - 0x75], cl; adc eax, 0xc46e1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f607: add byte ptr [rax - 0x75], cl; adc eax, 0xc4861; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f55f: add byte ptr [rax - 0x75], cl; adc eax, 0xc4909; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b7: add byte ptr [rax - 0x75], cl; adc eax, 0xc49b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f07f: add byte ptr [rax - 0x75], cl; adc eax, 0xc4de9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efbf: add byte ptr [rax - 0x75], cl; adc eax, 0xc4ea9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ef1f: add byte ptr [rax - 0x75], cl; adc eax, 0xc4f49; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee5f: add byte ptr [rax - 0x75], cl; adc eax, 0xc5009; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edbf: add byte ptr [rax - 0x75], cl; adc eax, 0xc50a9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ecff: add byte ptr [rax - 0x75], cl; adc eax, 0xc5169; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011eb7f: add byte ptr [rax - 0x75], cl; adc eax, 0xc52e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011eaaf: add byte ptr [rax - 0x75], cl; adc eax, 0xc53b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e1ef: add byte ptr [rax - 0x75], cl; adc eax, 0xc5c79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e11f: add byte ptr [rax - 0x75], cl; adc eax, 0xc5d49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e07f: add byte ptr [rax - 0x75], cl; adc eax, 0xc5de9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011dfb7: add byte ptr [rax - 0x75], cl; adc eax, 0xc5eb1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df07: add byte ptr [rax - 0x75], cl; adc eax, 0xc5f61; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de67: add byte ptr [rax - 0x75], cl; adc eax, 0xc6001; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dcef: add byte ptr [rax - 0x75], cl; adc eax, 0xc6179; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dca7: add byte ptr [rax - 0x75], cl; adc eax, 0xc61c1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011ad8f: add byte ptr [rax - 0x75], cl; adc eax, 0xc90d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011762f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc839; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115ae7: add byte ptr [rax - 0x75], cl; adc eax, 0xce381; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011438f: add byte ptr [rax - 0x75], cl; adc eax, 0xcfad9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114267: add byte ptr [rax - 0x75], cl; adc eax, 0xcfc01; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011354f: add byte ptr [rax - 0x75], cl; adc eax, 0xd0919; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134af: add byte ptr [rax - 0x75], cl; adc eax, 0xd09b9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011322f: add byte ptr [rax - 0x75], cl; adc eax, 0xd0c39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e3f: add byte ptr [rax - 0x75], cl; adc eax, 0xd1029; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112dff: add byte ptr [rax - 0x75], cl; adc eax, 0xd1069; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112737: add byte ptr [rax - 0x75], cl; adc eax, 0xd1731; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001126ff: add byte ptr [rax - 0x75], cl; adc eax, 0xd1769; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112327: add byte ptr [rax - 0x75], cl; adc eax, 0xd1b41; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011220f: add byte ptr [rax - 0x75], cl; adc eax, 0xd1c59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001121bf: add byte ptr [rax - 0x75], cl; adc eax, 0xd1ca9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011174f: add byte ptr [rax - 0x75], cl; adc eax, 0xd2719; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d82f: add byte ptr [rax - 0x75], cl; adc eax, 0xd6639; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6b7: add byte ptr [rax - 0x75], cl; adc eax, 0xd67b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d07f: add byte ptr [rax - 0x75], cl; adc eax, 0xd6de9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cfdf: add byte ptr [rax - 0x75], cl; adc eax, 0xd6e89; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cb9f: add byte ptr [rax - 0x75], cl; adc eax, 0xd72c9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c977: add byte ptr [rax - 0x75], cl; adc eax, 0xd74f1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c91f: add byte ptr [rax - 0x75], cl; adc eax, 0xd7549; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c8bf: add byte ptr [rax - 0x75], cl; adc eax, 0xd75a9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c61f: add byte ptr [rax - 0x75], cl; adc eax, 0xd7849; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010b427: add byte ptr [rax - 0x75], cl; adc eax, 0xd8a41; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010b377: add byte ptr [rax - 0x75], cl; adc eax, 0xd8af1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000fe74f: add byte ptr [rax - 0x75], cl; adc eax, 0xe5861; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000008cbcf: add byte ptr [rax - 0x75], cl; adc r11b, r13b; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000019441b: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000086958: add byte ptr [rax - 0x75], cl; add al, 0x24; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000014ea47: add byte ptr [rax - 0x75], cl; add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014bdc7: add byte ptr [rax - 0x75], cl; add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000010948f: add byte ptr [rax - 0x75], cl; add byte ptr [r8 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000352ad: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003547d: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000003528d: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000011ac21: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; adc al, byte ptr [rcx]; add byte ptr [rax], al; call rax; 
0x000000000011aa96: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; lea eax, [rax]; add byte ptr [rax], al; call rax; 
0x00000000001164ca: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x83; ret 0x4808; 
0x0000000000047cf1: add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017859f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x00000000001740ef: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017b89f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000dc874: add byte ptr [rax - 0x75], cl; add eax, 0x1075f4; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e188f: add byte ptr [rax - 0x75], cl; add eax, 0x108b21; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc2cf: add byte ptr [rax - 0x75], cl; add eax, 0x10e089; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0df: add byte ptr [rax - 0x75], cl; add eax, 0x10e279; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b90: add byte ptr [rax - 0x75], cl; add eax, 0x1217c8; lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009c28f: add byte ptr [rax - 0x75], cl; add eax, 0x147cb9; call qword ptr [rax]; 
0x000000000009c1af: add byte ptr [rax - 0x75], cl; add eax, 0x147d99; call qword ptr [rax]; 
0x000000000009819f: add byte ptr [rax - 0x75], cl; add eax, 0x14bcc9; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009798f: add byte ptr [rax - 0x75], cl; add eax, 0x14c4d9; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009d4ca: add byte ptr [rax - 0x75], cl; add eax, 0x14ce9e; lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000096280: add byte ptr [rax - 0x75], cl; add eax, 0x14db38; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000009294f: add byte ptr [rax - 0x75], cl; add eax, 0x152d09; ret; 
0x000000000008c79f: add byte ptr [rax - 0x75], cl; add eax, 0x1576c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000083f7f: add byte ptr [rax - 0x75], cl; add eax, 0x15fee9; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000005f66f: add byte ptr [rax - 0x75], cl; add eax, 0x1847f9; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000005f55f: add byte ptr [rax - 0x75], cl; add eax, 0x184909; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000048bff: add byte ptr [rax - 0x75], cl; add eax, 0x19b269; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000485f7: add byte ptr [rax - 0x75], cl; add eax, 0x19b871; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048557: add byte ptr [rax - 0x75], cl; add eax, 0x19b911; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044b37: add byte ptr [rax - 0x75], cl; add eax, 0x19f331; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044a87: add byte ptr [rax - 0x75], cl; add eax, 0x19f3e1; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000044957: add byte ptr [rax - 0x75], cl; add eax, 0x19f511; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044917: add byte ptr [rax - 0x75], cl; add eax, 0x19f551; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044157: add byte ptr [rax - 0x75], cl; add eax, 0x19fd11; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f2f: add byte ptr [rax - 0x75], cl; add eax, 0x19ff39; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043def: add byte ptr [rax - 0x75], cl; add eax, 0x1a0079; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000354af: add byte ptr [rax - 0x75], cl; add eax, 0x1aea31; add rax, qword ptr fs:[0]; ret; 
0x00000000000354cf: add byte ptr [rax - 0x75], cl; add eax, 0x1aea51; add rax, qword ptr fs:[0]; ret; 
0x0000000000034d9f: add byte ptr [rax - 0x75], cl; add eax, 0x1af021; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034d5f: add byte ptr [rax - 0x75], cl; add eax, 0x1af081; mov qword ptr [rax], rdx; ret; 
0x00000000000339df: add byte ptr [rax - 0x75], cl; add eax, 0x1b03e1; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000036196: add byte ptr [rax - 0x75], cl; add eax, 0x1b41ba; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030cef: add byte ptr [rax - 0x75], cl; add eax, 0x1b5a11; ret; 
0x0000000000026ebf: add byte ptr [rax - 0x75], cl; add eax, 0x1bcfa9; add rax, qword ptr fs:[0]; ret; 
0x00000000000287ff: add byte ptr [rax - 0x75], cl; add eax, 0x1c17b1; ret; 
0x00000000000287ef: add byte ptr [rax - 0x75], cl; add eax, 0x1c17d1; ret; 
0x0000000000160eaf: add byte ptr [rax - 0x75], cl; add eax, 0x82fb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000016066f: add byte ptr [rax - 0x75], cl; add eax, 0x837f9; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000016060f: add byte ptr [rax - 0x75], cl; add eax, 0x83859; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000015e7df: add byte ptr [rax - 0x75], cl; add eax, 0x85689; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015d96f: add byte ptr [rax - 0x75], cl; add eax, 0x864e9; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015c705: add byte ptr [rax - 0x75], cl; add eax, 0x88e43; call qword ptr [rax + 0x28]; 
0x000000000015af0f: add byte ptr [rax - 0x75], cl; add eax, 0x88f59; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a8cf: add byte ptr [rax - 0x75], cl; add eax, 0x89599; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015b5c8: add byte ptr [rax - 0x75], cl; add eax, 0x89f80; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b508: add byte ptr [rax - 0x75], cl; add eax, 0x8a040; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b352: add byte ptr [rax - 0x75], cl; add eax, 0x8a1f6; call qword ptr [rax + 0x28]; 
0x000000000015b2b5: add byte ptr [rax - 0x75], cl; add eax, 0x8a293; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b218: add byte ptr [rax - 0x75], cl; add eax, 0x8a330; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b182: add byte ptr [rax - 0x75], cl; add eax, 0x8a3c6; call qword ptr [rax]; 
0x000000000015abb5: add byte ptr [rax - 0x75], cl; add eax, 0x8a993; call qword ptr [rax]; 
0x000000000015dec7: add byte ptr [rax - 0x75], cl; add eax, 0x8c0b9; call qword ptr [rax + 0x10]; 
0x000000000015dc47: add byte ptr [rax - 0x75], cl; add eax, 0x8c339; call qword ptr [rax + 8]; 
0x000000000015db4f: add byte ptr [rax - 0x75], cl; add eax, 0x8c431; call qword ptr [rax]; 
0x000000000015186f: add byte ptr [rax - 0x75], cl; add eax, 0x92529; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012ec17: add byte ptr [rax - 0x75], cl; add eax, 0xb5251; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012c767: add byte ptr [rax - 0x75], cl; add eax, 0xb7701; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001210af: add byte ptr [rax - 0x75], cl; add eax, 0xc2da9; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea1f: add byte ptr [rax - 0x75], cl; add eax, 0xc5449; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e277: add byte ptr [rax - 0x75], cl; add eax, 0xc5bf1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e247: add byte ptr [rax - 0x75], cl; add eax, 0xc5c21; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120917: add byte ptr [rax - 0x75], cl; add eax, 0xc78f9; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000120817: add byte ptr [rax - 0x75], cl; add eax, 0xc79f9; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000011ada7: add byte ptr [rax - 0x75], cl; add eax, 0xc90c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011840f: add byte ptr [rax - 0x75], cl; add eax, 0xcba59; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001174df: add byte ptr [rax - 0x75], cl; add eax, 0xcc989; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000011479f: add byte ptr [rax - 0x75], cl; add eax, 0xcf6c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011476f: add byte ptr [rax - 0x75], cl; add eax, 0xcf6f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011464f: add byte ptr [rax - 0x75], cl; add eax, 0xcf819; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000113337: add byte ptr [rax - 0x75], cl; add eax, 0xd0b31; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001116b7: add byte ptr [rax - 0x75], cl; add eax, 0xd27b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011157f: add byte ptr [rax - 0x75], cl; add eax, 0xd28e9; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x000000000010faef: add byte ptr [rax - 0x75], cl; add eax, 0xd4379; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cbcf: add byte ptr [rax - 0x75], cl; add eax, 0xd7299; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010cbb7: add byte ptr [rax - 0x75], cl; add eax, 0xd72b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb5f: add byte ptr [rax - 0x75], cl; add eax, 0xd7309; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c98f: add byte ptr [rax - 0x75], cl; add eax, 0xd74d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c937: add byte ptr [rax - 0x75], cl; add eax, 0xd7531; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d7: add byte ptr [rax - 0x75], cl; add eax, 0xd7591; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c687: add byte ptr [rax - 0x75], cl; add eax, 0xd77e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c637: add byte ptr [rax - 0x75], cl; add eax, 0xd7831; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e7: add byte ptr [rax - 0x75], cl; add eax, 0xd7881; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001019c7: add byte ptr [rax - 0x75], cl; add eax, 0xe24a1; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000101977: add byte ptr [rax - 0x75], cl; add eax, 0xe24f1; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x0000000000094969: add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax + 0x29]; ret; 
0x00000000000a70bf: add byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000148c8f: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000146d21: add byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x0000000000147553: add byte ptr [rax - 0x75], cl; and al, 8; mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014db4f: add byte ptr [rax - 0x75], cl; and al, 8; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145084: add byte ptr [rax - 0x75], cl; and al, 8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001376a9: add byte ptr [rax - 0x75], cl; and al, 8; mov rdi, rbx; call rax; 
0x00000000001459ed: add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000001457d9: add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000001457ed: add byte ptr [rax - 0x75], cl; and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x00000000001658bf: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000044eb3: add byte ptr [rax - 0x75], cl; cmp al, 0x24; mov eax, ecx; syscall; 
0x0000000000129b57: add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000014bc7a: add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x000000000014f5e2: add byte ptr [rax - 0x75], cl; cmp byte ptr [rcx + rcx*4 - 2], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000001504f7: add byte ptr [rax - 0x75], cl; cmp ebp, ebx; ret; 
0x00000000000f15e7: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000165a9f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016608f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000047bd8: add byte ptr [rax - 0x75], cl; jnp 0x47be5; call rax; 
0x000000000009c52f: add byte ptr [rax - 0x75], cl; jnp 0x9c57c; call rax; 
0x00000000000ff020: add byte ptr [rax - 0x75], cl; jnp 0xff04d; call 0x25318; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000014eb7a: add byte ptr [rax - 0x75], cl; jo 0x14ebc8; mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000006619f: add byte ptr [rax - 0x75], cl; lea esp, [rax - 0x39000005]; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000013e8ef: add byte ptr [rax - 0x75], cl; mov esp, 0x8024; add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x00000000000352b0: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000165c8f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e8f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000035480: add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000147190: add byte ptr [rax - 0x75], cl; or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000ecadf: add byte ptr [rax - 0x75], cl; or byte ptr [r8 + 0x63], r9b; ret 0xb60f; 
0x00000000001504bf: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x00000000001461af: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000014d4a7: add byte ptr [rax - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x1a], r9b; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x00000000000ff0db: add byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000ecdfc: add byte ptr [rax - 0x75], cl; or ecx, dword ptr [rax + 0x63]; ret 0x634c; 
0x0000000000035290: add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000011ba57: add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x0000000000122117: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000122017: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000121e17: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000121f17: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000121c17: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000121e97: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000121c97: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x0000000000121d17: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000121f97: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x0000000000121b97: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x0000000000109493: add byte ptr [rax - 0x75], cl; push rbp; adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000e20aa: add byte ptr [rax - 0x75], cl; push rbp; test al, 0x85; ror byte ptr [rdi], 0x84; add dword ptr [rax], 0x83480000; ret 0x480f; 
0x00000000001188df: add byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 9], cl; ret 0xfffe; 
0x000000000008dc51: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000097246: add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0xf04; 
0x000000000010b9c2: add byte ptr [rax - 0x75], cl; push rdx; sbb byte ptr [rax - 0x73], cl; pushfq; ret 0x8207; 
0x000000000016b39f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000016533f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016abdf: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab4f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016adef: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000000a718f: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x0000000000126402: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rcx; 
0x00000000000a6fef: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000de05f: add byte ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000012091e: add byte ptr [rax - 0x75], cl; sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x00000000001654ff: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000008228e: add byte ptr [rax - 0x75], cl; xchg eax, edi; movabs al, byte ptr [0x1308a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000146c65: add byte ptr [rax - 0x75], cl; xor al, 0x24; mov rdi, rbx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000005c212: add byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x77], cl; fucomip st(0); ret 0xfc90; 
0x000000000012b70b: add byte ptr [rax - 0x75], cl; xor cl, ch; pop rsp; out 0xff, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000002e1fe: add byte ptr [rax - 0x76b2a8bf], dl; ret 0x3145; 
0x0000000000115e7f: add byte ptr [rax - 0x76b7ffc8], al; ret; 
0x00000000001204e6: add byte ptr [rax - 0x77], cl; adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xc3e68], 2; ret; 
0x000000000015da54: add byte ptr [rax - 0x77], cl; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000fb8bd: add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000929e0: add byte ptr [rax - 0x77], cl; adc eax, 0x154b80; add dword ptr [rip + 0x154b75], 1; ret; 
0x000000000002539c: add byte ptr [rax - 0x77], cl; adc eax, 0x1c4c0c; pop rax; pop rbx; pop rbp; ret; 
0x000000000015afd4: add byte ptr [rax - 0x77], cl; adc eax, 0x8a574; add rsp, 8; ret; 
0x0000000000114ba5: add byte ptr [rax - 0x77], cl; adc eax, 0xd324b; mov qword ptr [rip + 0xd324c], rax; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x000000000009d4f2: add byte ptr [rax - 0x77], cl; add eax, 0x14a1ae; add rsp, 8; ret; 
0x000000000009d4b0: add byte ptr [rax - 0x77], cl; add eax, 0x14a1f0; ret; 
0x000000000009353a: add byte ptr [rax - 0x77], cl; add eax, 0x150d4e; ret; 
0x000000000009350d: add byte ptr [rax - 0x77], cl; add eax, 0x150d73; ret; 
0x00000000000934ed: add byte ptr [rax - 0x77], cl; add eax, 0x150d8b; ret; 
0x0000000000114bac: add byte ptr [rax - 0x77], cl; add eax, 0xd324c; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x000000000015df0f: add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000014dc4a: add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000113b7b: add byte ptr [rax - 0x77], cl; and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015236f: add byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x000000000015215f: add byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521cf: add byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x000000000015223f: add byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x0000000000112ad9: add byte ptr [rax - 0x77], cl; and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, ecx; syscall; 
0x000000000015440f: add byte ptr [rax - 0x77], cl; and al, 0x38; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x00000000001128fd: add byte ptr [rax - 0x77], cl; and al, 0x58; xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x00000000000cec72: add byte ptr [rax - 0x77], cl; and al, 0x58; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x0000000000087ded: add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000008e95c: add byte ptr [rax - 0x77], cl; call 0x10cd6cac; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047c6f: add byte ptr [rax - 0x77], cl; clc; cqo; idiv rsi; ret; 
0x0000000000115d02: add byte ptr [rax - 0x77], cl; clc; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x000000000009297f: add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000188fdf: add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x000000000015d976: add byte ptr [rax - 0x77], cl; dec byte ptr [rax - 0x75]; cmp al, 0x24; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000008269a: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000015aa7d: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x1b]; add rsp, 0x520; pop rbx; ret; 
0x000000000008c39a: add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x00000000001117bf: add byte ptr [rax - 0x77], cl; fidivr dword ptr [rax + 0x10f]; syscall; 
0x0000000000075be4: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x000000000009b835: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax; 
0x000000000009bc3f: add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; call rax; 
0x00000000001178b5: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 1]; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x0000000000088dc4: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000011869e: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, ebp; pop rbp; pop r12; jmp rax; 
0x000000000004201f: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x39]; ret; 
0x000000000015d54c: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 0x10; call rax; 
0x00000000001369ca: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 8; call rax; 
0x0000000000150d1d: add byte ptr [rax - 0x77], cl; fisttp word ptr [rbp + rcx*4 + 5]; fsub dword ptr [rcx - 1]; dec dword ptr [rax - 0x73]; adc eax, 0x3711; call qword ptr [rax]; 
0x0000000000044249: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + 0x82b8c2]; add byte ptr [rax], al; syscall; 
0x00000000000f0008: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000112efe: add byte ptr [rax - 0x77], cl; fmul dword ptr [rdi]; test dword ptr [rbp + 0x48000000], edi; add esp, 0x70; pop rbx; ret; 
0x00000000001236d7: add byte ptr [rax - 0x77], cl; fsubr st(1); sar ch, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000003956f: add byte ptr [rax - 0x77], cl; fucomip st(0); pop rax; cmp al, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000115e3c: add byte ptr [rax - 0x77], cl; fucomip st(0); sti; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000097f1c: add byte ptr [rax - 0x77], cl; fucomip st(0); wait; out 0xff, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000925ab: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000015d3cd: add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000007cf30: add byte ptr [rax - 0x77], cl; mov ebp, 0xfffffb10; jmp rax; 
0x000000000006a7d5: add byte ptr [rax - 0x77], cl; mov ebp, ds; sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000008d983: add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x0000000000160634: add byte ptr [rax - 0x77], cl; mov esi, 0x80; mov eax, ecx; syscall; 
0x0000000000043ca0: add byte ptr [rax - 0x77], cl; out 0x48, al; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000e38fa: add byte ptr [rax - 0x77], cl; out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000009d6e8: add byte ptr [rax - 0x77], cl; out dx, al; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c714: add byte ptr [rax - 0x77], cl; out dx, al; mov edi, ebx; mov eax, ecx; syscall; 
0x00000000001457b2: add byte ptr [rax - 0x77], cl; out dx, al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000009ba97: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call rax; 
0x00000000000e1660: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x0000000000145890: add byte ptr [rax - 0x77], cl; out dx, eax; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000014791d: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000147901: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x0000000000147199: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x30]; 
0x000000000008882b: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000147ad0: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x00000000000835ec: add byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000146176: add byte ptr [rax - 0x77], cl; out dx, eax; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000014d432: add byte ptr [rax - 0x77], cl; out dx, eax; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000000bbfa6: add byte ptr [rax - 0x77], cl; out dx, eax; mov rdx, qword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000010246f: add byte ptr [rax - 0x77], cl; push rdx; fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x000000000015210a: add byte ptr [rax - 0x77], cl; push rsp; and al, 0x38; call qword ptr [rax + 0x18]; 
0x00000000001523fa: add byte ptr [rax - 0x77], cl; push rsp; and al, 0x40; call qword ptr [rax + 0x18]; 
0x0000000000096521: add byte ptr [rax - 0x77], cl; push rsp; and al, 8; xor edi, edi; call qword ptr [rax]; 
0x000000000013fa7f: add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000000a0322: add byte ptr [rax - 0x77], cl; ret 0x1beb; 
0x00000000000538ca: add byte ptr [rax - 0x77], cl; ret 0x1de8; 
0x0000000000055671: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000031d8d: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000028f96: add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000082b63: add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x000000000004251e: add byte ptr [rax - 0x77], cl; ret 0x394d; 
0x00000000000e3bda: add byte ptr [rax - 0x77], cl; ret 0x3de9; 
0x0000000000082936: add byte ptr [rax - 0x77], cl; ret 0x45f7; 
0x0000000000191516: add byte ptr [rax - 0x77], cl; ret 0x4de9; 
0x00000000000e3bac: add byte ptr [rax - 0x77], cl; ret 0x6be9; 
0x00000000000ee46f: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000001933ff: add byte ptr [rax - 0x77], cl; ret 0x850f; 
0x00000000000358ce: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000129d3b: add byte ptr [rax - 0x77], cl; ret 0x85e9; 
0x0000000000030c4c: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000011b31c: add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x00000000000a0679: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000001939bd: add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x000000000003798d: add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x0000000000067feb: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000193705: add byte ptr [rax - 0x77], cl; ret 0x94c; 
0x00000000000a74f1: add byte ptr [rax - 0x77], cl; ret 0x96e8; 
0x00000000000fe437: add byte ptr [rax - 0x77], cl; ret 0xa0e9; 
0x000000000011aedb: add byte ptr [rax - 0x77], cl; ret 0xabe; 
0x0000000000116f7e: add byte ptr [rax - 0x77], cl; ret 0xb1e9; 
0x0000000000149711: add byte ptr [rax - 0x77], cl; ret 0xb45; 
0x000000000009c0d4: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000e3c57: add byte ptr [rax - 0x77], cl; ret 0xc0e9; 
0x00000000000e4b22: add byte ptr [rax - 0x77], cl; ret 0xc0eb; 
0x0000000000052aba: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000001935ef: add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x000000000009c91f: add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x000000000012d43f: add byte ptr [rax - 0x77], cl; ret 0xf44; 
0x0000000000029958: add byte ptr [rax - 0x77], cl; ret 0xf641; 
0x00000000000c6f16: add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x000000000010fb5a: add byte ptr [rax - 0x77], cl; ret 0xfd83; 
0x000000000008fbf8: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000002535c: add byte ptr [rax - 0x77], cl; ret; 
0x00000000000603af: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x8349; 
0x00000000000fdaaf: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 1; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x974; 
0x00000000000ceb34: add byte ptr [rax - 0x77], cl; sal byte ptr [rbp + 5], 1; add rsp, 0x28; ret; 
0x0000000000043dae: add byte ptr [rax - 0x77], cl; sal byte ptr [rbp + 8], 1; add rsp, 0x148; ret; 
0x00000000000a6c27: add byte ptr [rax - 0x77], cl; sal dword ptr [rcx], 0xc0; mov qword ptr [rdx], rcx; ret; 
0x00000000000ba0f0: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015da0c: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000052ee5: add byte ptr [rax - 0x77], cl; sti; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x000000000013f654: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rdi], ah; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 5; ret 0xa47; 
0x000000000015b2bc: add byte ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x20]; 
0x000000000015b21f: add byte ptr [rax - 0x77], cl; xlatb; mov rsi, r8; call qword ptr [rax + 8]; 
0x0000000000160dec: add byte ptr [rax - 0x77], cl; xlatb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000098a30: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x14b4a5; mov qword ptr [rax], rdi; ret; 
0x0000000000093896: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x15063f; mov qword ptr [rax], rdx; ret; 
0x0000000000111aae: add byte ptr [rax - 0x77], cl; xor esi, esi; syscall; 
0x0000000000112e1f: add byte ptr [rax - 0x77], cl; xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000000a438b: add byte ptr [rax - 0x78], 0x75; ret 0xde89; 
0x00000000000a6aeb: add byte ptr [rax - 0x78], 0x7d; ret 0x2bf; 
0x00000000000a286d: add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x0000000000194af0: add byte ptr [rax - 0x7ab70000], al; ret 0x7775; 
0x0000000000194bde: add byte ptr [rax - 0x7ab80000], al; ret; 
0x0000000000037a49: add byte ptr [rax - 0x7af0cc07], al; ret 5; 
0x00000000000b034f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000015e7cf: add byte ptr [rax - 0x7b], cl; div byte ptr [rbx + rcx - 0x17]; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000010d92f: add byte ptr [rax - 0x7b], cl; push qword ptr [rax + rbx*8 + 0x49]; mov esi, edi; mov rdi, r14; mov eax, 0x4f; syscall; 
0x00000000001161e6: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0xc]; mov eax, 1; ret; 
0x0000000000042e5d: add byte ptr [rax - 0x7b], cl; ret 0x574; 
0x0000000000194be1: add byte ptr [rax - 0x7b], cl; ret; 
0x00000000000269d6: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x4864; 
0x000000000011ac24: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; adc al, byte ptr [rcx]; add byte ptr [rax], al; call rax; 
0x000000000011aa99: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; lea eax, [rax]; add byte ptr [rax], al; call rax; 
0x000000000009adec: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000007bc51: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0xe; 
0x0000000000156a0a: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000000b2813: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000008e927: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x88; ret; 
0x000000000010e3be: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x2141; 
0x0000000000193b79: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test byte ptr [rax], dh; add eax, 0x89480000; ret 0xc148; 
0x0000000000114afa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd3299; mov eax, 1; add rsp, 8; ret; 
0x00000000000ba44f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x000000000009aa1f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x000000000010c3fd: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbp + 0x31], 0xd2; xor esi, esi; mov rdi, rbx; call rax; 
0x000000000012a5ad: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbp + 0x48], 0x8b; jp 0x12a607; mov rsi, rdx; call rax; 
0x0000000000114d36: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x2c], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000114e27: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x2d], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000114f68: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x30], cl; xor eax, eax; pop rbx; ret; 
0x000000000010c48f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x31], 0xd2; call rax; 
0x00000000000ff15f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x31], 0xc0; ret; 
0x00000000001164cd: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x83; ret 0x4808; 
0x00000000000824b3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000000136e5b: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0xb2378; call rax; 
0x0000000000082583: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000000009d07e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x00000000000a0097: add byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x77], 0xd0; cmovne rax, rdi; ret; 
0x000000000004848c: add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret 0; 
0x0000000000044e3f: add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x95; ret; 
0x0000000000037a40: add byte ptr [rax - 0x7bf0ce07], al; push rbp; or byte ptr [rax], al; add byte ptr [rax - 0x7af0cc07], al; ret 5; 
0x000000000017a0a7: add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000191fe9: add byte ptr [rax - 0x7d], cl; add dword ptr [rbx + 0x40ba01e3], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x8949; 
0x000000000005c567: add byte ptr [rax - 0x7d], cl; call 0x3c890d70; mov dword ptr [rax], 0x89482275; ret 0x8948; 
0x00000000000985bf: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000106670: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; test byte ptr [rip - 0x76fffffd], dh; ret 0xc085; 
0x0000000000106d0d: add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rbx*8 - 0x77]; ret 0xc085; 
0x00000000000ba49d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000082bd1: add byte ptr [rax - 0x7d], cl; cli; push qword ptr [rcx + rdi + 0x48]; mov eax, edx; pop rbx; ret; 
0x000000000016068f: add byte ptr [rax - 0x7d], cl; in al, dx; adc byte ptr [rdx + 2], ch; call 0x10c120; add rsp, 0x18; ret; 
0x000000000010b91f: add byte ptr [rax - 0x7d], cl; in al, dx; adc byte ptr [rdx], ch; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000e15cf: add byte ptr [rax - 0x7d], cl; in al, dx; sbb al, ch; mul dword ptr [rdi - 0x3876fffc]; mov eax, 0x22; syscall; 
0x0000000000098784: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000002a547: add byte ptr [rax - 0x7d], cl; mov dword ptr [rcx], 0x83481389; ret; 
0x000000000002a40f: add byte ptr [rax - 0x7d], cl; mov dword ptr [rcx], 0x83481389; rol dword ptr [rax + rcx*2], 0x83; ret; 
0x0000000000147c6e: add byte ptr [rax - 0x7d], cl; mov eax, 0x100; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000107dc3: add byte ptr [rax - 0x7d], cl; ret 0x3101; 
0x00000000000b9a1f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000a62af: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000bac3f: add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x0000000000027ad5: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000002f18d: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000e20b6: add byte ptr [rax - 0x7d], cl; ret 0x480f; 
0x0000000000074b4f: add byte ptr [rax - 0x7d], cl; ret 0x4817; 
0x0000000000036378: add byte ptr [rax - 0x7d], cl; ret 0x481a; 
0x00000000000299f9: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000002b4af: add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x000000000017ba6f: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000967c0: add byte ptr [rax - 0x7d], cl; ret 0x4a10; 
0x0000000000157b28: add byte ptr [rax - 0x7d], cl; ret 0x4d02; 
0x00000000001157d4: add byte ptr [rax - 0x7d], cl; ret 0x6602; 
0x0000000000181288: add byte ptr [rax - 0x7d], cl; ret 0x6610; 
0x000000000009cf97: add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000127cb7: add byte ptr [rax - 0x7d], cl; ret 0x8330; 
0x00000000000f7227: add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x00000000000809a7: add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000038597: add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x00000000000e0cd3: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000017da53: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000158952: add byte ptr [rax - 0x7d], cl; ret 0xeb01; 
0x000000000017ba93: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000038fd5: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000027007: add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a8aef: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000b048f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000000549a0: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x88; pop rax; dec dword ptr [rbx - 0x7a97db8c]; test byte ptr [rdi], 0x8e; ret; 
0x000000000008341a: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0x7520; 
0x00000000000bb452: add byte ptr [rax - 0x7d], cl; stc; add al, 0x48; cmovne eax, edx; ret; 
0x00000000001505b1: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xfdb7; 
0x0000000000034cd4: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000009af08: add byte ptr [rax - 0x7f], cl; ret 0x6be2; 
0x0000000000168fab: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000008378f: add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x00000000001479f3: add byte ptr [rax - 0x7f], cl; ret; 
0x000000000015d38e: add byte ptr [rax - 0xbb417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d37e: add byte ptr [rax - 0xcc417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000012d38e: add byte ptr [rax - 0xf8af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60fb1]; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000009e37e: add byte ptr [rax - 0xf8af71b], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeffd1]; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000013ac91: add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x0000000000046f4d: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000004216d: add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000043f3d: add byte ptr [rax - 1], bh; ret; 
0x000000000013a9e6: add byte ptr [rax - 1], dil; ret; 
0x000000000005b10a: add byte ptr [rax - 9], cl; fisttp word ptr [rcx - 0x39]; ret 0xffff; 
0x0000000000196924: add byte ptr [rax], 0; add al, ch; adc dword ptr [rcx + rdi*8 - 1], 0x48; add esp, 0x80; pop rbx; ret; 
0x000000000008a2da: add byte ptr [rax], 0; add al, ch; int 0x1a; or al, byte ptr [rax]; add rsp, 0x80; ret; 
0x0000000000063bef: add byte ptr [rax], 0; add al, ch; mov eax, 0x48000c81; add esp, 0x80; ret; 
0x0000000000116a06: add byte ptr [rax], 0; add al, ch; movabs eax, dword ptr [0x80c48148000153]; add byte ptr [rax], al; ret; 
0x00000000000880b5: add byte ptr [rax], 0; add al, ch; ret 0xa3c; 
0x00000000001505b5: add byte ptr [rax], 0; add al, ch; ret 0xfdb7; 
0x00000000000c5bbe: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000001824cd: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000fc883: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000fd490: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8d4a; 
0x00000000000f4ad6: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret; 
0x000000000013e8f4: add byte ptr [rax], 0; add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x000000000015c702: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x88e43; call qword ptr [rax + 0x28]; 
0x000000000015b5c5: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x89f80; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b505: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x8a040; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b34f: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x8a1f6; call qword ptr [rax + 0x28]; 
0x000000000015b2b2: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x8a293; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b215: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x8a330; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b17f: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x8a3c6; call qword ptr [rax]; 
0x000000000015abb2: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x8a993; call qword ptr [rax]; 
0x000000000014f5df: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; cmp byte ptr [rcx + rcx*4 - 2], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000097243: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0xf04; 
0x00000000000929dd: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x154b80; add dword ptr [rip + 0x154b75], 1; ret; 
0x00000000000833d0: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000008fbf5: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000008e924: add byte ptr [rax], 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x88; ret; 
0x0000000000181712: add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000196dbb: add byte ptr [rax], 0; add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000aa7ab: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000aa7cb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aac8b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aac9b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x000000000009a213: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x0000000000151d23: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x97c51]; pop rbx; ret; 
0x0000000000151c43: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x97d39]; pop rbx; ret; 
0x0000000000151b63: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x97e31]; pop rbx; ret; 
0x00000000000eaa6b: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x000000000007eec3: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; jmp rax; 
0x000000000007edbb: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rbp - 0x538], 1; mov r9, rsi; jmp rax; 
0x00000000000b786b: add byte ptr [rax], 0; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000e123b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x000000000011f85b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x44; syscall; 
0x00000000000e29cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x7c; syscall; 
0x000000000013a4a3: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000010d0ab: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 8; syscall; 
0x0000000000155ebb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000008c1db: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008d2fb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000044dcb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x19f3d6]; ret; 
0x000000000016b78b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000011dd8b: add byte ptr [rax], 0; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x000000000011f0ab: add byte ptr [rax], 0; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x36; syscall; 
0x000000000013b7e3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, -1; mov rdx, rax; ret; 
0x00000000000472b3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ba53: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x0000000000145793: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000154e8b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155173: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000008c79b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1576c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000287eb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x0000000000120813: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc79f9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001116b3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd27b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000047c7b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000009c52b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x48]; call rax; 
0x000000000016b5cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a71ab: add byte ptr [rax], 0; add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b552b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000018133b: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rax, ecx; ret; 
0x000000000012ae2b: add byte ptr [rax], 0; add byte ptr [rax], al; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x00000000000ba64b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000016b8db: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016b86b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000186b0b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000032b13: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000001874bd: add byte ptr [rax], 0; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000009ca1b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008c1cb: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x0000000000084f2b: add byte ptr [rax], 0; add byte ptr [rax], al; xor edi, edi; mov rax, rdi; ret; 
0x000000000012df2b: add byte ptr [rax], 0; add byte ptr [rax], al; xor esi, esi; mov rax, rsi; ret; 
0x0000000000098849: add byte ptr [rax], 0; add byte ptr [rbp + rcx*4 + 5], cl; in al, dx; ret; 
0x00000000000821fb: add byte ptr [rax], 0; add byte ptr [rbx + 0x48], bl; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000993f7: add byte ptr [rax], 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000005f519: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000fc521: add byte ptr [rax], 0; add byte ptr [rbx - 0x7bf0f002], al; ret 0; 
0x000000000015c7ae: add byte ptr [rax], 0; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x000000000013e5f3: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x1f0f; 
0x000000000013efb7: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x33e9; 
0x000000000013e4ef: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xf41; 
0x000000000013f0f5: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xfee9; 
0x000000000013ee8d: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8944; 
0x000000000013f08b: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x93e9; 
0x00000000000de29e: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x00000000000de368: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret; 
0x000000000013f00f: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x43e9; 
0x000000000008a602: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x30], al; pop rbx; ret; 
0x000000000008571a: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x0000000000094d5b: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a1974: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x6c], al; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x0000000000044e4d: add byte ptr [rax], 0; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000065260: add byte ptr [rax], 0; add byte ptr [rcx - 0x6777b], cl; jmp qword ptr [rsi + 0xf]; 
0x000000000005b020: add byte ptr [rax], 0; add byte ptr [rcx - 0x7d], al; ret 0x4840; 
0x000000000005490a: add byte ptr [rax], 0; add byte ptr [rcx], al; ret 0x8b44; 
0x00000000000547ac: add byte ptr [rax], 0; add byte ptr [rcx], al; ret 0x8b4c; 
0x000000000012bd8c: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000140c56: add byte ptr [rax], 0; add byte ptr [rcx], dh; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000047483: add byte ptr [rax], 0; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000018e37f: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000016a833: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000010babc: add byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x90], eax; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000018b1f1: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015609a: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; and al, 0x28; call rdx; 
0x0000000000097269: add byte ptr [rax], 0; add dh, dh; ret 0x7504; 
0x0000000000042aab: add byte ptr [rax], 0; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000001161c7: add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x0000000000101b67: add byte ptr [rax], ah; add byte ptr [rax], al; ret; 
0x00000000000e1704: add byte ptr [rax], ah; add dword ptr [rax + 0x38], edi; syscall; 
0x00000000000351b4: add byte ptr [rax], ah; movzx eax, ax; ret; 
0x000000000009e0e2: add byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; add eax, 0x1b854; cmove rax, rdx; ret; 
0x00000000001317d8: add byte ptr [rax], al; add al, 0; add al, ch; cmp ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000124470: add byte ptr [rax], al; add al, 0; add al, ch; mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000122770: add byte ptr [rax], al; add al, 0; add al, ch; mov gs, word ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001328c0: add byte ptr [rax], al; add al, 0; add al, ch; sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001225c0: add byte ptr [rax], al; add al, 0; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x00000000001320d0: add byte ptr [rax], al; add al, 0; add al, ch; xor ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012f2f1: add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012f36f: add byte ptr [rax], al; add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000014bc40: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0xc8; jmp rcx; 
0x0000000000152631: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax], al; call rax; 
0x00000000000d0697: add byte ptr [rax], al; add al, ch; adc dword ptr [rbx - 9], esp; dec dword ptr [rax - 0x77]; ret; 
0x0000000000196925: add byte ptr [rax], al; add al, ch; adc dword ptr [rcx + rdi*8 - 1], 0x48; add esp, 0x80; pop rbx; ret; 
0x000000000013adcb: add byte ptr [rax], al; add al, ch; cmp eax, 0x89fffe3e; ret; 
0x000000000011004a: add byte ptr [rax], al; add al, ch; ficom word ptr [rax - 0xf]; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000008a2db: add byte ptr [rax], al; add al, ch; int 0x1a; or al, byte ptr [rax]; add rsp, 0x80; ret; 
0x00000000001108c0: add byte ptr [rax], al; add al, ch; int1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000028e47: add byte ptr [rax], al; add al, ch; int1; ret 0xffff; 
0x00000000000ff011: add byte ptr [rax], al; add al, ch; jmp qword ptr [rdx - 0xe]; 
0x00000000000fe395: add byte ptr [rax], al; add al, ch; mov bl, 0x6c; dec dword ptr [rax - 0x77]; ret; 
0x0000000000063bf0: add byte ptr [rax], al; add al, ch; mov eax, 0x48000c81; add esp, 0x80; ret; 
0x0000000000116a07: add byte ptr [rax], al; add al, ch; movabs eax, dword ptr [0x80c48148000153]; add byte ptr [rax], al; ret; 
0x00000000001293b5: add byte ptr [rax], al; add al, ch; or esi, 0xffffffff; dec dword ptr [rcx]; ret; 
0x000000000015b6c6: add byte ptr [rax], al; add al, ch; pop rsi; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000112f42: add byte ptr [rax], al; add al, ch; push rsi; or ebp, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000008bad6: add byte ptr [rax], al; add al, ch; ret 0x5e; 
0x00000000000880b6: add byte ptr [rax], al; add al, ch; ret 0xa3c; 
0x00000000001505b6: add byte ptr [rax], al; add al, ch; ret 0xfdb7; 
0x000000000004b945: add byte ptr [rax], al; add al, ch; ret; 
0x0000000000090cea: add byte ptr [rax], al; add al, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000028ea7: add byte ptr [rax], al; add al, ch; xchg eax, ecx; ret 0xffff; 
0x0000000000041ebc: add byte ptr [rax], al; add al, ch; xor al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000010a0dd: add byte ptr [rax], al; add al, ch; xor esi, dword ptr [rdx - 0x7cb7000f]; ret; 
0x00000000000585cd: add byte ptr [rax], al; add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000005869f: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000001522ac: add byte ptr [rax], al; add bh, al; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000011fb5e: add byte ptr [rax], al; add bh, al; test eax, esi; idiv edi; jmp qword ptr [rdi + 0x6d]; 
0x000000000010467d: add byte ptr [rax], al; add bh, bh; dec dword ptr [rbx - 0x76b6ebb0]; ret 0xc748; 
0x0000000000192db5: add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx + 0x21]; ret 0x949; 
0x000000000014bc4a: add byte ptr [rax], al; add bh, bh; loope 0x14bbe0; ret; 
0x000000000008254b: add byte ptr [rax], al; add bh, bh; rol byte ptr [rbx + 0xb74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000014510d: add byte ptr [rax], al; add bh, bh; ror byte ptr [rax - 0x73], 1; add eax, 0xa47e7; add rsp, 8; ret; 
0x0000000000152634: add byte ptr [rax], al; add bh, bh; ror byte ptr [rcx - 0x75], 1; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x0000000000049635: add byte ptr [rax], al; add bh, dh; ret 0xffef; 
0x00000000000ecb38: add byte ptr [rax], al; add bh, dh; ret; 
0x0000000000042b61: add byte ptr [rax], al; add bl, bl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000015809c: add byte ptr [rax], al; add bl, ch; fidivr dword ptr [rax - 1]; ret; 
0x000000000014edbb: add byte ptr [rax], al; add bl, ch; mov al, 0xe8; add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x0000000000148480: add byte ptr [rax], al; add bl, ch; mov ebx, 0xfe6d86e8; jmp qword ptr [rsi + 0xf]; 
0x0000000000145fd8: add byte ptr [rax], al; add bl, ch; mov edx, 0xfe922ee8; jmp qword ptr [rsi + 0x66]; 
0x000000000011729c: add byte ptr [rax], al; add bl, ch; mov word ptr [rax - 0x77], cs; ret 0xb9e9; 
0x00000000001132ea: add byte ptr [rax], al; add bl, ch; out 0x90, al; mov eax, 0xc; syscall; 
0x0000000000148530: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000109d59: add byte ptr [rax], al; add bl, ch; ret 0x9066; 
0x00000000000e1a2b: add byte ptr [rax], al; add bl, ch; ret 0xc389; 
0x0000000000082c2a: add byte ptr [rax], al; add bl, ch; test eax, 0xe9c68948; sub al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x000000000018218d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000014708d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000b552d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000014f2dd: add byte ptr [rax], al; add bl, dh; movq mm4, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c232: add byte ptr [rax], al; add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000ba425: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b64dd: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b64ed: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x00000000001125aa: add byte ptr [rax], al; add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000112649: add byte ptr [rax], al; add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000013acd4: add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000ba6dd: add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; pop rbx; ret; 
0x0000000000063b9d: add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; ret; 
0x000000000011340d: add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; syscall; 
0x000000000011dc23: add byte ptr [rax], al; add byte ptr [rax + 0x119], bh; syscall; 
0x000000000018e70c: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000012c7cd: add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x00000000000b785c: add byte ptr [rax], al; add byte ptr [rax + 0x1788168a], dl; lea rax, [rdi + 1]; ret; 
0x000000000012c41d: add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; 
0x000000000012c41d: add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; ret; 
0x00000000000536ce: add byte ptr [rax], al; add byte ptr [rax + 0x193d2e05], cl; add byte ptr [rax - 0x73], cl; add eax, 0x193d22; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000ba6fd: add byte ptr [rax], al; add byte ptr [rax + 0x20], bh; pop rbx; ret; 
0x00000000001161dc: add byte ptr [rax], al; add byte ptr [rax + 0x213d8b48], dl; sbb eax, 0x8548000d; push qword ptr [rbp + 0xc]; mov eax, 1; ret; 
0x00000000001126bd: add byte ptr [rax], al; add byte ptr [rax + 0x22], bh; syscall; 
0x00000000000d37cb: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x000000000007a2d8: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000cf150: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000011e14c: add byte ptr [rax], al; add byte ptr [rax + 0x2c74d285], dl; mov ecx, 0x145; mov eax, ecx; syscall; 
0x00000000000ea9ec: add byte ptr [rax], al; add byte ptr [rax + 0x2c755ef9], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000ba6ed: add byte ptr [rax], al; add byte ptr [rax + 0x30], bh; pop rbx; ret; 
0x00000000000a6ecc: add byte ptr [rax], al; add byte ptr [rax + 0x3907be0f], dl; ret 0xf41; 
0x00000000000e81bd: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000008dfc5: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000000c5bbf: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e194d: add byte ptr [rax], al; add byte ptr [rax + 0x3b], bh; syscall; 
0x00000000000e123d: add byte ptr [rax], al; add byte ptr [rax + 0x3f], bh; syscall; 
0x00000000000ba71d: add byte ptr [rax], al; add byte ptr [rax + 0x40], bh; pop rbx; ret; 
0x000000000011f85d: add byte ptr [rax], al; add byte ptr [rax + 0x44], bh; syscall; 
0x00000000000ba695: add byte ptr [rax], al; add byte ptr [rax + 0x485bf0e5], al; cmovne eax, edx; ret; 
0x000000000009cdb1: add byte ptr [rax], al; add byte ptr [rax + 0x48], al; lea eax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x0000000000112487: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x0000000000042eae: add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000042e6e: add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rsp - 8], edx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000115b0d: add byte ptr [rax], al; add byte ptr [rax + 0x4c], bh; syscall; 
0x0000000000063a0d: add byte ptr [rax], al; add byte ptr [rax + 0x52], bh; syscall; 
0x000000000010cafd: add byte ptr [rax], al; add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000ba70d: add byte ptr [rax], al; add byte ptr [rax + 0x60], bh; pop rbx; ret; 
0x00000000000cf77d: add byte ptr [rax], al; add byte ptr [rax + 0x60], bh; syscall; 
0x000000000007ef16: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x86; add rax, rdx; jmp rax; 
0x000000000007de5a: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdx; jmp rax; 
0x000000000007e262: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, rdx; jmp rax; 
0x00000000000f667a: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000013a74e: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x00000000000a5a79: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d41; 
0x000000000005ac95: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x000000000013b3e6: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x00000000001474d2: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xa7603f8], r8b; mov eax, 2; ret; 
0x00000000000e26fd: add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000e26fd: add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; ret; 
0x00000000000e271d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000e271d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000e270d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000e270d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000e272d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000e272d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000000e26ed: add byte ptr [rax], al; add byte ptr [rax + 0x6e], bh; syscall; 
0x00000000000e26ed: add byte ptr [rax], al; add byte ptr [rax + 0x6e], bh; syscall; ret; 
0x0000000000043217: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff3], al; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000e273d: add byte ptr [rax], al; add byte ptr [rax + 0x73], bh; syscall; 
0x000000000012a58c: add byte ptr [rax], al; add byte ptr [rax + 0x7456ff83], dl; or edi, dword ptr [rax + 7]; ret; 
0x000000000012e0ac: add byte ptr [rax], al; add byte ptr [rax + 0x77ca3948], dl; add eax, 0xfe09a6e9; call qword ptr [rax - 0x18]; 
0x00000000000b6a2d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000e29cd: add byte ptr [rax], al; add byte ptr [rax + 0x7c], bh; syscall; 
0x00000000000e356d: add byte ptr [rax], al; add byte ptr [rax + 0x7e], bh; ret; 
0x00000000000441e2: add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; syscall; 
0x000000000013b86d: add byte ptr [rax], al; add byte ptr [rax + 0x7fffffff], bh; ret; 
0x000000000004421f: add byte ptr [rax], al; add byte ptr [rax + 0x82], bh; syscall; 
0x000000000004475d: add byte ptr [rax], al; add byte ptr [rax + 0x83], bh; syscall; 
0x000000000011320d: add byte ptr [rax], al; add byte ptr [rax + 0x8c], bh; syscall; 
0x000000000010179d: add byte ptr [rax], al; add byte ptr [rax + 0x8e], bh; syscall; 
0x00000000000cf85d: add byte ptr [rax], al; add byte ptr [rax + 0xa4], bh; syscall; 
0x000000000011db4d: add byte ptr [rax], al; add byte ptr [rax + 0xa6], bh; syscall; 
0x0000000000113e6d: add byte ptr [rax], al; add byte ptr [rax + 0xaa], bh; syscall; 
0x000000000012bdbf: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000012bdbf: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000012be66: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000e3900: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x0000000000043ecd: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000005881d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000292dd: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x0000000000054a6f: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; ror byte ptr [r9 - 0x76a7dbac], 1; ret 0x31e9; 
0x00000000000e34ce: add byte ptr [rax], al; add byte ptr [rax + 0xfde8], bh; cmovne rax, rdx; ret; 
0x00000000000e35d8: add byte ptr [rax], al; add byte ptr [rax + 0xff], bh; cmovne rax, rdx; ret; 
0x00000000000e3498: add byte ptr [rax], al; add byte ptr [rax + 0xfffa], bh; cmovne rax, rdx; ret; 
0x00000000000e357d: add byte ptr [rax], al; add byte ptr [rax + 0xfffa], bh; ret; 
0x00000000000585d3: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000cdbc0: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000001824d7: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000000578d6: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8948; 
0x00000000001824ce: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000fc884: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000fd491: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d4a; 
0x0000000000055537: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x00000000000587bf: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000189d8d: add byte ptr [rax], al; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000151c7e: add byte ptr [rax], al; add byte ptr [rax + 5], cl; test al, 0; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000ba6cd: add byte ptr [rax], al; add byte ptr [rax + 8], bh; pop rbx; ret; 
0x000000000010d0ad: add byte ptr [rax], al; add byte ptr [rax + 8], bh; syscall; 
0x00000000000cdf43: add byte ptr [rax], al; add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret; 
0x00000000000538c4: add byte ptr [rax], al; add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x77], cl; ret 0x1de8; 
0x0000000000047bd1: add byte ptr [rax], al; add byte ptr [rax + rcx*2 - 0x77], ah; push rbp; add byte ptr [rax - 0x75], cl; jnp 0x47be5; call rax; 
0x00000000000eaa1d: add byte ptr [rax], al; add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x000000000015d35c: add byte ptr [rax], al; add byte ptr [rax - 0x1f3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d34c: add byte ptr [rax], al; add byte ptr [rax - 0x1fa417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d33c: add byte ptr [rax], al; add byte ptr [rax - 0x203417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d36c: add byte ptr [rax], al; add byte ptr [rax - 0x210417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d32c: add byte ptr [rax], al; add byte ptr [rax - 0x23f417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013ba33: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000092a48: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x154b12; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012051b: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0xc3e37; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000050124: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000004200d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000ce4cd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000ce50d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000ce4bd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000ce4fd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000043282: add byte ptr [rax], al; add byte ptr [rax - 0x3dbab77], al; movd xmm0, dword ptr [rsp - 4]; ret; 
0x000000000012f68c: add byte ptr [rax], al; add byte ptr [rax - 0x3efa74b8], dl; or r8d, dword ptr [r8]; add rax, qword ptr fs:[0]; ret; 
0x0000000000026414: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1c3d26], eax; ret; 
0x000000000012fd28: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0xeb; ret 0x8b48; 
0x000000000002538f: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000000315ee: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000013072f: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0xeb11; 
0x000000000011282a: add byte ptr [rax], al; add byte ptr [rax - 0x3fcef877], al; ret; 
0x0000000000058696: add byte ptr [rax], al; add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000000e162c: add byte ptr [rax], al; add byte ptr [rax - 0x66fa72b8], dl; lea edx, [rax]; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x23]; syscall; 
0x00000000000afad8: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000026c5d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x188824; ret; 
0x0000000000026c6d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x18a6ae; ret; 
0x0000000000151d25: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97c51; pop rbx; ret; 
0x0000000000151c45: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97d39; pop rbx; ret; 
0x0000000000151b65: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97e31; pop rbx; ret; 
0x000000000013e8f5: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x00000000000cdf8d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cdf9d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x0000000000080a37: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x129b27; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000cdf7d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x00000000000807b2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov rdi, rbx; call rax; 
0x0000000000095ff0: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000004722f: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rax; dec dword ptr [rbx + rcx*4 + 0x2d]; ret; 
0x0000000000052e5b: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x7b; call rax; 
0x00000000000fe74d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc eax, 0xe5861; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x0000000000047cef: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017b88d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000009c28d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x147cb9; call qword ptr [rax]; 
0x000000000009c1ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x147d99; call qword ptr [rax]; 
0x000000000008c79d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1576c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048bfd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x19b269; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000034d5d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1af081; mov qword ptr [rax], rdx; ret; 
0x0000000000030ced: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1b5a11; ret; 
0x0000000000026ebd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1bcfa9; add rax, qword ptr fs:[0]; ret; 
0x00000000000287fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1c17b1; ret; 
0x00000000000287ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1c17d1; ret; 
0x000000000015c703: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x88e43; call qword ptr [rax + 0x28]; 
0x000000000015a8cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x89599; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015b5c6: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x89f80; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b506: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x8a040; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b350: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x8a1f6; call qword ptr [rax + 0x28]; 
0x000000000015b2b3: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x8a293; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b216: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x8a330; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b180: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x8a3c6; call qword ptr [rax]; 
0x000000000015abb3: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x8a993; call qword ptr [rax]; 
0x0000000000120815: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xc79f9; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001174dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xcc989; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000001116b5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xd27b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000094967: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000014db4d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000001457d7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000044eb1: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp al, 0x24; mov eax, ecx; syscall; 
0x000000000014bc78: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x000000000014f5e0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [rcx + rcx*4 - 2], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000f1b9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000009c52d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jnp 0x9c57c; call rax; 
0x000000000006619d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; lea esp, [rax - 0x39000005]; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000165c8d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e8d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000011ba55: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x00000000001188dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 9], cl; ret 0xfffe; 
0x0000000000097244: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0xf04; 
0x00000000000de05d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000001654fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000008228c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, edi; movabs al, byte ptr [0x1308a8948000000]; add byte ptr [rax], al; ret; 
0x000000000002e1fc: add byte ptr [rax], al; add byte ptr [rax - 0x76b2a8bf], dl; ret 0x3145; 
0x00000000000fb8bb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000929de: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x154b80; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000093538: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x150d4e; ret; 
0x000000000009350b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x150d73; ret; 
0x00000000000934eb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x150d8b; ret; 
0x000000000014dc48: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000cec70: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x58; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x0000000000087deb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000047c7d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; cqo; idiv rsi; ret; 
0x000000000009297d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000188fdd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x0000000000082698: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000015aa7b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x1b]; add rsp, 0x520; pop rbx; ret; 
0x000000000008c398: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x00000000001117bd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr dword ptr [rax + 0x10f]; syscall; 
0x000000000009bc3d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; call rax; 
0x0000000000088dc2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000015d54a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 0x10; call rax; 
0x0000000000044247: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + 0x82b8c2]; add byte ptr [rax], al; syscall; 
0x00000000000f0006: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000001236d5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fsubr st(1); sar ch, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000115e3a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(0); sti; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000007cf2e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov ebp, 0xfffffb10; jmp rax; 
0x000000000008d981: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x0000000000160632: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000012c712: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000009ba95: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call rax; 
0x00000000001478ff: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x0000000000147197: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x30]; 
0x0000000000088829: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000000835ea: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000146174: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000014d430: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x000000000010246d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rdx; fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x0000000000152108: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rsp; and al, 0x38; call qword ptr [rax + 0x18]; 
0x00000000001523f8: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rsp; and al, 0x40; call qword ptr [rax + 0x18]; 
0x000000000013fa7d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000075bcf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000008350c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000077353: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000ee46d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000151f77: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000fd78d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000011b31a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x00000000000a0677: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000001939bb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x00000000000ff567: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000001935ed: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x000000000009c91d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x000000000008fbf6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000000296c0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000007e74d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x8349; 
0x00000000000fdaad: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 1; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x974; 
0x00000000000ceb32: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sal byte ptr [rbp + 5], 1; add rsp, 0x28; ret; 
0x0000000000043dac: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sal byte ptr [rbp + 8], 1; add rsp, 0x148; ret; 
0x0000000000052ee3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x0000000000194aee: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x7775; 
0x0000000000194bdc: add byte ptr [rax], al; add byte ptr [rax - 0x7ab80000], al; ret; 
0x000000000015e7cd: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbx + rcx - 0x17]; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000007bc4f: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0xe; 
0x000000000008e925: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x88; ret; 
0x00000000000ba44d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x000000000010c3fb: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbp + 0x31], 0xd2; xor esi, esi; mov rdi, rbx; call rax; 
0x000000000010c48d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x31], 0xd2; call rax; 
0x00000000000ff15d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x31], 0xc0; ret; 
0x00000000000824b1: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000000082581: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000000009d07c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000004848a: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret 0; 
0x0000000000191fe7: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; add dword ptr [rbx + 0x40ba01e3], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x8949; 
0x000000000005c565: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call 0x3c890d70; mov dword ptr [rax], 0x89482275; ret 0x8948; 
0x00000000000985bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000098782: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000002a40d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; mov dword ptr [rcx], 0x83481389; rol dword ptr [rax + rcx*2], 0x83; ret; 
0x00000000000b9a1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000a62ad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000027ad3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000f666d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000e20b4: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x480f; 
0x00000000000d28cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000017d593: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000157b26: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4d02; 
0x0000000000181286: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6610; 
0x00000000000e1d10: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000038595: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000017f111: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000158950: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb01; 
0x000000000017d5bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000838a3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000002de1c: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a8aed: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000016a7a4: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000008378d: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x000000000015d38c: add byte ptr [rax], al; add byte ptr [rax - 0xbb417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d37c: add byte ptr [rax], al; add byte ptr [rax - 0xcc417], dl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000046f4b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000004216b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000043f3b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000005b108: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fisttp word ptr [rcx - 0x39]; ret 0xffff; 
0x000000000008bad4: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x5e; 
0x000000000012fd63: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret; 
0x000000000010a0db: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; xor esi, dword ptr [rdx - 0x7cb7000f]; ret; 
0x000000000010467b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; dec dword ptr [rbx - 0x76b6ebb0]; ret 0xc748; 
0x0000000000192db3: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx + 0x21]; ret 0x949; 
0x0000000000049b3b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0xffef; 
0x000000000011729a: add byte ptr [rax], al; add byte ptr [rax], al; add bl, ch; mov word ptr [rax - 0x77], cs; ret 0xb9e9; 
0x00000000000b64db: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b64eb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x00000000000ba6db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; pop rbx; ret; 
0x0000000000063b9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; ret; 
0x000000000011340b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; syscall; 
0x000000000018e70a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000012c7cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x000000000012c41b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; 
0x000000000012c41b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x18], bh; syscall; ret; 
0x00000000000ba6fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x20], bh; pop rbx; ret; 
0x00000000001126bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x22], bh; syscall; 
0x000000000011e14a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2c74d285], dl; mov ecx, 0x145; mov eax, ecx; syscall; 
0x00000000000ba6eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x30], bh; pop rbx; ret; 
0x00000000000a6eca: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x3907be0f], dl; ret 0xf41; 
0x00000000000e194b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x3b], bh; syscall; 
0x00000000000ba71b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x40], bh; pop rbx; ret; 
0x0000000000042eac: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000042e6c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rsp - 8], edx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000115b0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x4c], bh; syscall; 
0x0000000000063a0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x52], bh; syscall; 
0x000000000010cafb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000ba70b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x60], bh; pop rbx; ret; 
0x00000000000cf77b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x60], bh; syscall; 
0x00000000000e26fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000e26fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; ret; 
0x00000000000e271b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000e271b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000e270b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000e270b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000e272b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000e272b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000000e26eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6e], bh; syscall; 
0x00000000000e26eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6e], bh; syscall; ret; 
0x00000000000e273b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x73], bh; syscall; 
0x000000000012a58a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7456ff83], dl; or edi, dword ptr [rax + 7]; ret; 
0x000000000012e0aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x77ca3948], dl; add eax, 0xfe09a6e9; call qword ptr [rax - 0x18]; 
0x00000000000b6a2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000e356b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7e], bh; ret; 
0x000000000013b86b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7fffffff], bh; ret; 
0x000000000004475b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x83], bh; syscall; 
0x000000000011320b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x8c], bh; syscall; 
0x000000000010179b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x8e], bh; syscall; 
0x00000000000cf85b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xa4], bh; syscall; 
0x000000000011db4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xa6], bh; syscall; 
0x0000000000113e6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xaa], bh; syscall; 
0x000000000012c68b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000005881b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000292db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x00000000000e357b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xfffa], bh; ret; 
0x000000000009c4fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000014780b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000189d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000000ba6cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 8], bh; pop rbx; ret; 
0x00000000000eaa1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x000000000015d35a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1f3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d34a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1fa417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d33a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x203417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d36a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x210417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d32a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x23f417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000004200b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000ce4cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000ce50b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000ce4bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000ce4fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000012f68a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x3efa74b8], dl; or r8d, dword ptr [r8]; add rax, qword ptr fs:[0]; ret; 
0x0000000000026c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x188824; ret; 
0x0000000000026c6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x18a6ae; ret; 
0x00000000000cdf8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cdf9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000000cdf7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x0000000000047ced: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000009c28b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x147cb9; call qword ptr [rax]; 
0x000000000009c1ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x147d99; call qword ptr [rax]; 
0x0000000000030ceb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1b5a11; ret; 
0x0000000000026ebb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1bcfa9; add rax, qword ptr fs:[0]; ret; 
0x00000000000287fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1c17b1; ret; 
0x000000000014db4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000de05b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000002e1fa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x76b2a8bf], dl; ret 0x3145; 
0x000000000009297b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000188fdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x00000000001478fd: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x00000000000ee46b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000fd78b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000009c91b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x0000000000093609: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000007e74b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x8349; 
0x0000000000194aec: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x7775; 
0x0000000000194bda: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab80000], al; ret; 
0x000000000015e7cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbx + rcx - 0x17]; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000985bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000002a40b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; mov dword ptr [rcx], 0x83481389; rol dword ptr [rax + rcx*2], 0x83; ret; 
0x00000000000b9a1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000a62ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000004985b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000f666b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000d28cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000004b6eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a8aeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000008378b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x000000000015d38a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xbb417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000015d37a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xcc417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000008749b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000008bad2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x5e; 
0x0000000000042eaa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x00000000001478fc: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000042eab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000049537: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0xf], 0x44; ret 0x14eb; 
0x00000000001019bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000193322: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + 0x21], cl; ret 0x8545; 
0x000000000006313b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], dl; call qword ptr [rbx + 0x48]; 
0x00000000000a0159: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000bcb6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x39082444], cl; ret 0x840f; 
0x00000000000b546b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000017b87b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x00000000000a0114: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000008c1ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x8042507], cl; add byte ptr [rax], al; ret; 
0x0000000000155e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x47fbd7b9], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000190f9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x76b7c017], al; ret 0xd348; 
0x000000000017618b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000600bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x50; or al, 0xf6; ret 0xf01; 
0x00000000000b9c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000018648b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000001526db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000010b90b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x3fcefb89], cl; ret; 
0x00000000001524eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x000000000013b0ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; rol dword ptr [rax - 0x69f0fe07], cl; ret 0x8341; 
0x000000000007eedb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; jmp rax; 
0x00000000000c07db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4104; 
0x00000000000ea14b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x000000000016105b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x00000000000a774b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000000be83b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000108a8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; jmp qword ptr [rdx]; 
0x000000000008d6cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; clc; ret; 
0x000000000012dfcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; leave; mov rax, rcx; ret; 
0x00000000000a6d6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x48], cl; mov dword ptr [rdi], edx; ret; 
0x00000000000352cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x000000000018973b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x00000000000a46cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; shr cl, cl; ret 0xfffa; 
0x0000000000049adb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000aac7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000018259b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x000000000018253b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000aa7bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000093f9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000176169: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b6439: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b5439: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000011e869: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x11f; syscall; 
0x000000000011e8f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x134; syscall; 
0x000000000011e989: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x13f; syscall; 
0x000000000010d0d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x000000000011f0d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x30; syscall; 
0x000000000011ec39: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x32; syscall; 
0x000000000011fa19: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x43; syscall; 
0x000000000010cbe9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x53; syscall; 
0x000000000010eab9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x57; syscall; 
0x000000000010e9f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x58; syscall; 
0x000000000011e779: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x00000000000e2939: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x79; syscall; 
0x000000000011dba9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x7a; syscall; 
0x000000000011ddb9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x87; syscall; 
0x000000000010c9a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x89; syscall; 
0x00000000001176e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x95; syscall; 
0x0000000000114669: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x99; syscall; 
0x000000000011e329: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x9f; syscall; 
0x000000000011e4d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb1; syscall; 
0x000000000011e689: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb4; syscall; 
0x000000000011b8a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc2; syscall; 
0x000000000011b909: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc3; syscall; 
0x000000000011b7e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc4; syscall; 
0x000000000011b999: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc5; syscall; 
0x000000000011e539: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xfe; syscall; 
0x0000000000092929: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; ret; 
0x00000000001477f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 2; ret; 
0x0000000000112779: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000dc9e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; ret; 
0x000000000011e959: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000011e659: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d49: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011e719: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e749: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a939: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b879: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000898c9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000092969: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000140119: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000176139: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b6409: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x0000000000043979: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000430c9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000144fc9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; ret; 
0x00000000000b9479: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000155ed9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000112719: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000cdc99: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x000000000013a45b: add byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; mov bl, 0xae; out dx, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000130bad: add byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000000eaa9b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000001174fb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000012defb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7420; 
0x000000000010cddb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7540; 
0x000000000006027b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0xf50; 
0x00000000000e52fb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x0000000000155e9c: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000063bac: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000ce48c: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000009925c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x0000000000196dbc: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000044e83: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000028855: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114ecc: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000ba694: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000004324c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x80000000; mov dword ptr [rdi], edx; ret; 
0x00000000000aa7ac: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000aa7bc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aa7cc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000018253c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000aac7c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aac8c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aac9c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x000000000005881c: add byte ptr [rax], al; add byte ptr [rax], al; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000001563b4: add byte ptr [rax], al; add byte ptr [rax], al; call 0x151c60; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001967f5: add byte ptr [rax], al; add byte ptr [rax], al; call 0x25318; mov qword ptr [rip + 0x514bf], 0; add rsp, 8; ret; 
0x000000000014650b: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000145880: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000013ba3a: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000111884: add byte ptr [rax], al; add byte ptr [rax], al; cmova eax, edx; ret; 
0x000000000011f687: add byte ptr [rax], al; add byte ptr [rax], al; cmovb rax, rdx; ret; 
0x000000000015aad1: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000000a08b1: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000e128d: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000126228: add byte ptr [rax], al; add byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000009aa9a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000042b60: add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x000000000007d14e: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000000b905c: add byte ptr [rax], al; add byte ptr [rax], al; lea r11, [rip + 0xf1e4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018e78c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000018e79c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000018e7ac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000018e7bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000018e7cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000018e71c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000018e72c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000018e73c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000018e74c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000018e75c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000018e76c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000018e77c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000afad7: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cdf7c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cdf9c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cdf8c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x000000000009a214: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x0000000000026c5c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x188824]; ret; 
0x0000000000026c6c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x18a6ae]; ret; 
0x0000000000151d24: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97c51]; pop rbx; ret; 
0x0000000000151c44: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97d39]; pop rbx; ret; 
0x0000000000151b64: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97e31]; pop rbx; ret; 
0x000000000017849c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017416c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000012005c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x0000000000076f6f: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x00000000000eaa6c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000eaa9c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b6a2c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b542c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000b544c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000007eec4: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; jmp rax; 
0x000000000007cf23: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007edbc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x538], 1; mov r9, rsi; jmp rax; 
0x0000000000148bea: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x000000000017618c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000017617c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000017615c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x000000000010b90c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000a71dc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b644c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000585cc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000001470dc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001470ac: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x00000000001470cc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x00000000001470bc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 8; ret; 
0x00000000001019b1: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr fs:[0x40], 0; ret; 
0x00000000000b6a3c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b786c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b610c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000013acd3: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x00000000000ba6dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; pop rbx; ret; 
0x0000000000063b9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; ret; 
0x000000000011340c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x000000000012c7cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000012c41c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x000000000012c41c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x18; syscall; ret; 
0x00000000000ba6fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x20; pop rbx; ret; 
0x00000000001126bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x22; syscall; 
0x00000000000ba6ec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x30; pop rbx; ret; 
0x00000000000e194c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x3b; syscall; 
0x00000000000e123c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x00000000000ba71c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x40; pop rbx; ret; 
0x000000000011f85c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x44; syscall; 
0x0000000000115b0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x4c; syscall; 
0x0000000000063a0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x52; syscall; 
0x000000000010cafc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5a; syscall; 
0x00000000000ba70c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x60; pop rbx; ret; 
0x00000000000cf77c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x60; syscall; 
0x00000000000e26fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000000e26fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x00000000000e271c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000000e271c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000000e270c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000000e270c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000000e272c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000000e272c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000e26ec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6e; syscall; 
0x00000000000e26ec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6e; syscall; ret; 
0x00000000000e273c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x73; syscall; 
0x00000000000e29cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7c; syscall; 
0x00000000000e356c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7e; ret; 
0x000000000013b86c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x000000000004475c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x83; syscall; 
0x000000000011320c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8c; syscall; 
0x000000000010179c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8e; syscall; 
0x00000000000cf85c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa4; syscall; 
0x000000000011db4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa6; syscall; 
0x0000000000113e6c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xaa; syscall; 
0x000000000012c68c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000000e357c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfffa; ret; 
0x000000000008749c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000585d2: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000000587be: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x00000000000ba6cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; pop rbx; ret; 
0x000000000010d0ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; syscall; 
0x0000000000047eab: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017b87c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000155ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000008c1dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008c1ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000008d2fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000044ddc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x19f3c2]; ret; 
0x0000000000044dcc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x19f3d6]; ret; 
0x000000000012422c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; ret; 
0x00000000000b546c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000e190c: add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000015b569: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, 0xffffffff; mov eax, edx; ret; 
0x000000000016b78c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000012bdb4: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000014f5a2: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000009198c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000007cf18: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x4d0], 0; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x0000000000076f64: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x4e8], 0; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x00000000001761cc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761dc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001761ec: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x00000000001761fc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000017620c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000017621c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001761bc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000017619c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x0000000000156384: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000b645c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b649c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b64ac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b64bc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b64cc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b648c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b646c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x0000000000092a47: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x154b12], 0; ret; 
0x000000000012051a: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0xc3e37], 0; ret; 
0x00000000000ff536: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000001470ea: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000ff53e: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; ret; 
0x000000000014dc47: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000152107: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x000000000011e2fc: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x000000000011dd8c: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x000000000011f0ac: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x36; syscall; 
0x0000000000077807: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x000000000007eedc: add byte ptr [rax], al; add byte ptr [rax], al; mov r9, rsi; jmp rax; 
0x000000000013b7e4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; mov rdx, rax; ret; 
0x00000000000928ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x00000000000ce4bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000ce4cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000ce4dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000ce4ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000ce4fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000ce50c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x00000000001524ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x00000000000472b4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ba54: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x0000000000047cee: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000145794: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000017b88c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000001458ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x38]; add r12, 0x18; mov rsi, r12; call qword ptr [rax + 0x10]; 
0x0000000000154e8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155174: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000009356c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x154072], eax; ret; 
0x000000000009c28c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x000000000008c79c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1576c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048bfc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x19b269]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000030cec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x0000000000026ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x00000000000287fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c17b1]; ret; 
0x00000000000287ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x000000000015a8cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x89599]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000120814: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc79f9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001174dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcc989]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000001116b4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd27b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000014db4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000018648c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000047c7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000009297c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000188fdc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000000b54ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000009c52c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x48]; call rax; 
0x0000000000153595: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000001478fe: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000000fe74c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xe5861]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000016b5cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000009926c: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000001526dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r15; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000000a700c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018803c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018802c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a71ac: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rax - 1]; ret; 
0x00000000000a70dc: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000015b901: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rip + 0x8e4b4], ax; mov eax, 1; add rsp, 8; ret; 
0x0000000000042b0d: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014708c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000b552c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000014f2dc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x00000000000b64dc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b64ec: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000018133c: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rax, ecx; ret; 
0x000000000013b3e5: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x00000000000871d1: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000012ae2c: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x0000000000090b9d: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000001520fa: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x00000000001523ea: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x0000000000152618: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsp + 0xb8], xmm2; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000001526b2: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsp + 0xb8], xmm3; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x000000000018aefc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000ba64c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x00000000000aa4ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016b8dc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016b86c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000186b0c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000010cc17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eae7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e807: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e477: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d737: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d797: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e597: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e897: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d767: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x0000000000101857: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x0000000000117687: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d707: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d29a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f107: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebd7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d887: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea57: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e177: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e1267: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5f7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2967: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e2997: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e2997: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; ret; 
0x00000000000e29f7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a57: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbd7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e357: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e387: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017f7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x0000000000101827: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x0000000000101887: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x0000000000117717: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x0000000000117747: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x0000000000117777: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x0000000000114697: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x0000000000117587: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011da07: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e417: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db77: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b937: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b817: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e447: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e2e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; ret; 
0x000000000011e567: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000012f2b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, edi; bswap eax; ret; 
0x00000000000441d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x7f; syscall; 
0x000000000010e1d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000010e9c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000010ea87: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000011e837: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000011e8c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000000011e927: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000011f137: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x000000000011ec07: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x000000000011e6e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000011e627: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x000000000011e507: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x000000000011b9c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000000011b967: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000000011b847: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000000011b8d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000001176b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x000000000011e4a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000001210a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000043447: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000001560e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000155f99: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000aa9e9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000176128: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b63f8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b60f8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000011dd08: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441a8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8e8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8b8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f888: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e58: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x0000000000113248: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x0000000000091139: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000144fd8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 1; ret; 
0x0000000000152a48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 2; ret; 
0x000000000016b068: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000063a38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000000e1428: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x3d; syscall; 
0x0000000000043f58: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000155b28: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000092948: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000354a8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1aea31]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354c8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1aea51]; add rax, qword ptr fs:[0]; ret; 
0x00000000000b4da8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x0000000000165338: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b1f8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016b178: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000008c2b8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000aad19: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126e8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; syscall; 
0x0000000000186079: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000011fa48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x000000000018e70b: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6fb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000017616a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b641b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b643a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b642b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000b543a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000011e86a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x11f; syscall; 
0x000000000011e8fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x134; syscall; 
0x000000000011e98a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x13f; syscall; 
0x000000000010d0da: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x000000000011765b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x00000000000e150b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x25; syscall; 
0x000000000011f0da: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x30; syscall; 
0x000000000011eadb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x31; syscall; 
0x000000000011ec3a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x32; syscall; 
0x000000000011ebab: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x34; syscall; 
0x000000000011fa1a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x43; syscall; 
0x000000000010d85b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x50; syscall; 
0x000000000010cbea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x53; syscall; 
0x000000000010eaba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x57; syscall; 
0x000000000010e9fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x58; syscall; 
0x000000000010e14b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x5c; syscall; 
0x000000000011e77a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x00000000000e293a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x79; syscall; 
0x000000000011dbaa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x7a; syscall; 
0x000000000011ddba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x87; syscall; 
0x000000000010c9aa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x89; syscall; 
0x00000000001176ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x95; syscall; 
0x000000000011466a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x99; syscall; 
0x000000000011e32a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x9f; syscall; 
0x000000000011e4da: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb1; syscall; 
0x000000000011e68a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb4; syscall; 
0x000000000011b8aa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc2; syscall; 
0x000000000011b90a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc3; syscall; 
0x000000000011b7ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc4; syscall; 
0x000000000011b99a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc5; syscall; 
0x00000000000dc9bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xd9; syscall; 
0x000000000011e53a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xfe; syscall; 
0x000000000009292a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000001477fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 2; ret; 
0x00000000001123eb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 3; syscall; 
0x000000000009268b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000011277a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000dc9ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; ret; 
0x000000000012f2cb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, edi; rol ax, 8; ret; 
0x00000000001761ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b647b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000011e95a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000011e65a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d4a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011e71a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e74a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a93a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b87a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000000011b7bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000000ce4ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x00000000000898ca: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000009296a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000014011a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012f68b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0xb47c1]; add rax, qword ptr fs:[0]; ret; 
0x000000000018829b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x000000000017614b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017613a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b640a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x000000000004397a: add byte ptr [rax], al; add byte ptr [rax], al; nop; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000430ca: add byte ptr [rax], al; add byte ptr [rax], al; nop; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000009be8b: add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000018217b: add byte ptr [rax], al; add byte ptr [rax], al; nop; vzeroupper; xor eax, eax; ret; 
0x00000000000b947a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000155ecb: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000011271a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000cdc9a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000042ead: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000042e6d: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000049539: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0xf], 0x44; ret 0x14eb; 
0x0000000000058695: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000008dc7c: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000a015a: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000ba607: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; cmove rax, rdx; ret; 
0x00000000000a0115: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000314f5: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000001409b3: add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000026ecc: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000a0995: add byte ptr [rax], al; add byte ptr [rax], al; test dl, dl; cmovne rax, rdi; ret; 
0x000000000018218c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000001874be: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000001825bc: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000352cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000009cb8e: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000009291c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008c1bc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008c1cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000632dc: add byte ptr [rax], al; add byte ptr [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000012dfcc: add byte ptr [rax], al; add byte ptr [rax], al; xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000026bcc: add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x0000000000084f2c: add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov rax, rdi; ret; 
0x00000000000a6d6c: add byte ptr [rax], al; add byte ptr [rax], al; xor edx, edx; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x000000000012df2c: add byte ptr [rax], al; add byte ptr [rax], al; xor esi, esi; mov rax, rsi; ret; 
0x00000000000cdfac: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000193324: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + 0x21], cl; ret 0x8545; 
0x000000000009e0e1: add byte ptr [rax], al; add byte ptr [rax], dl; lea rax, [rip + 0x1b854]; cmove rax, rdx; ret; 
0x000000000015065a: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000010c2d4: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000011f6f6: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000011fdd5: add byte ptr [rax], al; add byte ptr [rbp + 0x10e74d2], al; ror byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000015cfc1: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008cfd1: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x48; ret; 
0x0000000000045041: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000012d817: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0xd8; ret; 
0x0000000000063980: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x18; ret; 
0x00000000000e158e: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000150890: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x30; pop rbx; ret; 
0x0000000000044575: add byte ptr [rax], al; add byte ptr [rbp + 0x15], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000014910c: add byte ptr [rax], al; add byte ptr [rbp + 0x16], dh; add rsp, 0x40; pop rbx; ret; 
0x00000000000450b4: add byte ptr [rax], al; add byte ptr [rbp + 0x16], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000d2a1e: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; add rsp, 0x28; ret; 
0x0000000000112b5b: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x00000000001502e8: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000145e62: add byte ptr [rax], al; add byte ptr [rbp + 0x1d], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011dab9: add byte ptr [rax], al; add byte ptr [rbp + 0x1d], dh; add rsp, 0x78; ret; 
0x0000000000139624: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004472f: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000005c22c: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; add rsp, 0x450; pop rbx; ret; 
0x00000000000c8b2c: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000135816: add byte ptr [rax], al; add byte ptr [rbp + 0x25], dh; add rsp, 0x38; ret; 
0x000000000004468a: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x140; pop rbx; ret; 
0x000000000015294c: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x28; ret; 
0x00000000000d0b1d: add byte ptr [rax], al; add byte ptr [rbp + 0x29], al; ret 0x8d46; 
0x00000000000d0df2: add byte ptr [rax], al; add byte ptr [rbp + 0x29], al; ret; 
0x000000000004aa16: add byte ptr [rax], al; add byte ptr [rbp + 0x29], cl; ret; 
0x000000000015af7b: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x18; ret; 
0x000000000015b3f2: add byte ptr [rax], al; add byte ptr [rbp + 0x2d], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000001483ad: add byte ptr [rax], al; add byte ptr [rbp + 0x30], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000146448: add byte ptr [rax], al; add byte ptr [rbp + 0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d5e80: add byte ptr [rax], al; add byte ptr [rbp + 0x310875db], al; rol byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; xchg eax, esp; ret 0x8d48; 
0x000000000008df28: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000127151: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000190f3d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 9], cl; fld dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x3145; 
0x0000000000089a55: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089b57: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x000000000009e8b4: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x39], cl; ret; 
0x000000000006313d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], dl; call qword ptr [rbx + 0x48]; 
0x000000000014844b: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000150aed: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000044476: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000dce0d: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000013a51c: add byte ptr [rax], al; add byte ptr [rbp + 0x39850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000528ff: add byte ptr [rax], al; add byte ptr [rbp + 0x39], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000011496d: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; add rsp, 0x68; ret; 
0x000000000005836e: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000015de93: add byte ptr [rax], al; add byte ptr [rbp + 0x3c], dh; add rsp, 0x38; ret; 
0x000000000015db2d: add byte ptr [rax], al; add byte ptr [rbp + 0x3c], dh; add rsp, 0x58; ret; 
0x0000000000154507: add byte ptr [rax], al; add byte ptr [rbp + 0x3e], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000114602: add byte ptr [rax], al; add byte ptr [rbp + 0x3e], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000147e67: add byte ptr [rax], al; add byte ptr [rbp + 0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000440f7: add byte ptr [rax], al; add byte ptr [rbp + 0x3f], dh; add rsp, 0x148; ret; 
0x00000000001159b1: add byte ptr [rax], al; add byte ptr [rbp + 0x3f], dh; add rsp, 0x38; ret; 
0x0000000000154a17: add byte ptr [rax], al; add byte ptr [rbp + 0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000115a80: add byte ptr [rax], al; add byte ptr [rbp + 0x40], dh; add rsp, 0x38; ret; 
0x0000000000061abd: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000061b8f: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000a015b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000001545c7: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000013b676: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001125d4: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000112503: add byte ptr [rax], al; add byte ptr [rbp + 0x43], dh; add rsp, 0x18; ret; 
0x000000000009413d: add byte ptr [rax], al; add byte ptr [rbp + 0x43], dh; add rsp, 0x50; pop rbx; ret; 
0x00000000000e1dcc: add byte ptr [rax], al; add byte ptr [rbp + 0x43], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000112669: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000015dc2a: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x68; ret; 
0x0000000000149dc9: add byte ptr [rax], al; add byte ptr [rbp + 0x481074d2], al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000120390: add byte ptr [rax], al; add byte ptr [rbp + 0x481174db], al; movsxd rbx, ebx; mov qword ptr [rip + 0xc3fbf], rbx; pop rbx; ret; 
0x0000000000082a45: add byte ptr [rax], al; add byte ptr [rbp + 0x48117ec0], al; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000194aae: add byte ptr [rax], al; add byte ptr [rbp + 0x484c75ff], al; add esp, 0x30; pop rbx; ret; 
0x0000000000155917: add byte ptr [rax], al; add byte ptr [rbp + 0x49], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000154b29: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011f96c: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x58; ret; 
0x0000000000112474: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x000000000013ba59: add byte ptr [rax], al; add byte ptr [rbp + 0x4b], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000154c47: add byte ptr [rax], al; add byte ptr [rbp + 0x4d], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000010e0ee: add byte ptr [rax], al; add byte ptr [rbp + 0x4d], dh; add rsp, 0x130; pop rbx; ret; 
0x00000000000ddad8: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; add rsp, 0x38; ret; 
0x000000000015ddd1: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; add rsp, 0x78; ret; 
0x000000000008dd07: add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000005bc8f: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000101afc: add byte ptr [rax], al; add byte ptr [rbp + 0x55], dh; add rsp, 0x38; ret; 
0x00000000000e2ac8: add byte ptr [rax], al; add byte ptr [rbp + 0x56], dh; add rsp, 0x38; ret; 
0x000000000013bb14: add byte ptr [rax], al; add byte ptr [rbp + 0x58], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000052a8d: add byte ptr [rax], al; add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000907eb: add byte ptr [rax], al; add byte ptr [rbp + 0x5c], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000010d5e4: add byte ptr [rax], al; add byte ptr [rbp + 0x63], dh; add rsp, 0x30; pop rbx; ret; 
0x00000000001139d8: add byte ptr [rax], al; add byte ptr [rbp + 0x66], dh; add rsp, 0x48; ret; 
0x00000000000529af: add byte ptr [rax], al; add byte ptr [rbp + 0x6e], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000113b4a: add byte ptr [rax], al; add byte ptr [rbp + 0x6e], dh; add rsp, 0x38; ret; 
0x00000000000dfb8c: add byte ptr [rax], al; add byte ptr [rbp + 0x76], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001461db: add byte ptr [rax], al; add byte ptr [rbp + 0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000014d2d8: add byte ptr [rax], al; add byte ptr [rbp + 0x7e], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000011b547: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011a747: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000015e3c6: add byte ptr [rax], al; add byte ptr [rbp + 0xb], dh; add rsp, 0x28; ret; 
0x0000000000112bb6: add byte ptr [rax], al; add byte ptr [rbp + 0xc], dh; add rsp, 0x18; ret; 
0x00000000000d2b4f: add byte ptr [rax], al; add byte ptr [rbp + 0xd], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000012d721: add byte ptr [rax], al; add byte ptr [rbp + 0xd], dh; add rsp, 0xd8; ret; 
0x0000000000150d5c: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000004437c: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x118; ret; 
0x0000000000150f83: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000012ed61: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x0000000000043adc: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000047d6c: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000011489f: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000015442e: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x48; ret; 
0x000000000015211e: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000010c45f: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceba6: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000011a928: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x418; ret; 
0x000000000004450a: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x98; ret; 
0x000000000004513a: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xa8; ret; 
0x00000000000538de: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x0000000000156146: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x000000000010e98c: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000063360: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x1010; pop rbx; ret; 
0x00000000001560ce: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0xa0; pop rbx; ret; 
0x00000000000dc3a6: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0xe0; pop rbx; ret; 
0x000000000007a2d0: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000bb585: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x43], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000011fee5: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x52], cl; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x000000000009884a: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 5], cl; in al, dx; ret; 
0x0000000000103e1d: add byte ptr [rax], al; add byte ptr [rbp - 0x217bf037], al; add eax, 0xf9830000; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000002643e: add byte ptr [rax], al; add byte ptr [rbp - 0x3c], dh; ret; 
0x00000000000e1bc7: add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret; 
0x000000000011370b: add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ror dword ptr [rcx - 0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000011386b: add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ror dword ptr [rcx - 0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000004e5f5: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x1fe9; 
0x0000000000051345: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x2fe9; 
0x00000000000e8182: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x8948; 
0x0000000000191ff3: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x8949; 
0x000000000012d774: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x000000000004b6b5: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0xdfe9; 
0x000000000010131d: add byte ptr [rax], al; add byte ptr [rbp - 0x7cb7feba], cl; ret 0x8901; 
0x0000000000182528: add byte ptr [rax], al; add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x000000000008c1dd: add byte ptr [rax], al; add byte ptr [rbx + 0x2002507], cl; add byte ptr [rax], al; ret; 
0x000000000008f14d: add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000bcb6d: add byte ptr [rax], al; add byte ptr [rbx + 0x39082444], cl; ret 0x840f; 
0x0000000000030e49: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000008198d: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000015abeb: add byte ptr [rax], al; add byte ptr [rbx + 0x440f03fb], al; fmul dword ptr [rax - 0x75]; add eax, 0x8a955; call qword ptr [rax + 0x28]; 
0x00000000000b613d: add byte ptr [rax], al; add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000013aca2: add byte ptr [rax], al; add byte ptr [rbx + 0x45740aff], al; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000a69b6: add byte ptr [rax], al; add byte ptr [rbx + 0x458880c8], al; ret 0xd889; 
0x00000000000cd8bd: add byte ptr [rax], al; add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000b6a6d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b546d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000017b87d: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x000000000014e366: add byte ptr [rax], al; add byte ptr [rbx + 0x48102444], cl; lea edx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000ba608: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; cmove eax, edx; ret; 
0x00000000000821fc: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000d94f3: add byte ptr [rax], al; add byte ptr [rbx + 0x490f01ea], al; ret 0xc083; 
0x00000000000eaeb0: add byte ptr [rax], al; add byte ptr [rbx + 0x5b010447], al; pop rbp; pop r12; ret; 
0x0000000000044fc8: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000044310: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000004447f: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d2fd: add byte ptr [rax], al; add byte ptr [rbx + 0x5e8c107], cl; and eax, 1; ret; 
0x000000000002d770: add byte ptr [rax], al; add byte ptr [rbx + 0x634807e2], al; ror byte ptr [rax + 0x39], cl; ret 0x8d0f; 
0x0000000000032c73: add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x00000000001140e6: add byte ptr [rax], al; add byte ptr [rbx + 0x75c08500], cl; xor dword ptr [rcx - 0x77], ecx; fdivr dword ptr [rax + 0x10e]; syscall; 
0x000000000008c1ad: add byte ptr [rax], al; add byte ptr [rbx + 0x8042507], cl; add byte ptr [rax], al; ret; 
0x000000000010c252: add byte ptr [rax], al; add byte ptr [rbx + 0x87702fe], al; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000014f5a3: add byte ptr [rax], al; add byte ptr [rbx + 0x88b3], cl; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x28]; 
0x000000000002a1bf: add byte ptr [rax], al; add byte ptr [rbx + 0x941f8e0], al; ret 0x8944; 
0x00000000001172ad: add byte ptr [rax], al; add byte ptr [rbx + 0xcd09205], cl; add byte ptr [rbp - 0x76f98b01], al; cmp eax, 0xcd088; ret; 
0x000000000016b71d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b6ad: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b63d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000009a605: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x41], cl; or byte ptr [rax - 0x75], cl; sbb byte ptr [r9 - 0x7d], al; ret 0x4901; 
0x0000000000056bba: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x45], cl; or byte ptr [rbx + rcx*4 + 0x4d], cl; add byte ptr [rbp + 0x39], cl; ret 0x860f; 
0x00000000001087ad: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x90; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000054903: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x7c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b44; 
0x00000000000f3cdd: add byte ptr [rax], al; add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x000000000006f458: add byte ptr [rax], al; add byte ptr [rbx - 0x1f7cfe10], al; add dword ptr [rax - 0x5b77b], ecx; jmp qword ptr [rsi + 0xf]; 
0x00000000000a6a77: add byte ptr [rax], al; add byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x000000000014f367: add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000011b7a9: add byte ptr [rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x0000000000121445: add byte ptr [rax], al; add byte ptr [rbx - 0x3fcecf11], al; cmp edi, 9; setbe al; ret; 
0x0000000000155e9d: add byte ptr [rax], al; add byte ptr [rbx - 0x47fbd7b9], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000121199: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121659: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121359: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001212c9: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121519: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001215b9: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001216e9: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121819: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001213e9: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121229: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000121479: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000007e3a5: add byte ptr [rax], al; add byte ptr [rbx - 0x4ff43], al; call qword ptr [rax]; 
0x0000000000065287: add byte ptr [rax], al; add byte ptr [rbx - 0x61f43], al; call qword ptr [rax]; 
0x0000000000089fdb: add byte ptr [rax], al; add byte ptr [rbx - 0x760e76cd], cl; ret 0xe181; 
0x0000000000190f9d: add byte ptr [rax], al; add byte ptr [rbx - 0x76b7c017], al; ret 0xd348; 
0x000000000005f51a: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000aac52: add byte ptr [rax], al; add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x000000000011278d: add byte ptr [rax], al; add byte ptr [rbx - 0x7a3fcee9], cl; sar byte ptr [rax + 8], cl; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000fc522: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0f002], al; ret 0; 
0x00000000000ef38a: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fd16], al; ret 0xeb02; 
0x0000000000186a71: add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000012194d: add byte ptr [rax], al; add byte ptr [rcx + 0x107223c6], cl; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000055f75: add byte ptr [rax], al; add byte ptr [rcx + 0x146348c2], cl; xchg eax, esi; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x000000000009d779: add byte ptr [rax], al; add byte ptr [rcx + 0x29], cl; ret; 
0x000000000017618d: add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000f0892: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x2f73; 
0x00000000000f6f89: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x00000000000f8011: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x000000000009f22d: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000014fbfa: add byte ptr [rax], al; add byte ptr [rcx + 0x3b84843], cl; add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x0000000000160dda: add byte ptr [rax], al; add byte ptr [rcx + 0x3eb8c7], cl; add byte ptr [rax], al; syscall; 
0x0000000000158113: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000114822: add byte ptr [rax], al; add byte ptr [rcx + 0x480575d0], cl; add esp, 0x58; ret; 
0x0000000000156210: add byte ptr [rax], al; add byte ptr [rcx + 0x480675d0], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000150778: add byte ptr [rax], al; add byte ptr [rcx + 0x480675d0], cl; sub esp, -0x80; pop rbx; ret; 
0x0000000000113d13: add byte ptr [rax], al; add byte ptr [rcx + 0x480d75d0], cl; add esp, 0x28; ret; 
0x00000000001131e9: add byte ptr [rax], al; add byte ptr [rcx + 0x481175d8], cl; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000150e6b: add byte ptr [rax], al; add byte ptr [rcx + 0x481575d0], cl; add esp, 0x10; pop rbx; ret; 
0x000000000015e600: add byte ptr [rax], al; add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x00000000001515cc: add byte ptr [rax], al; add byte ptr [rcx + 0x482475d8], cl; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000815cb: add byte ptr [rax], al; add byte ptr [rcx + 0x485575f0], cl; add esp, 0xd0; pop rbx; ret; 
0x000000000008176a: add byte ptr [rax], al; add byte ptr [rcx + 0x485675f0], cl; add esp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000356cb: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop r15; jmp rax; 
0x00000000000ce8a6: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x000000000012c899: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x00000000000dbb77: add byte ptr [rax], al; add byte ptr [rcx + 0x5d], al; pop r14; jmp rax; 
0x00000000000610d6: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8d49; 
0x000000000005b5c0: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0xf631; 
0x000000000004401e: add byte ptr [rax], al; add byte ptr [rcx + 0xd], bh; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000011da8e: add byte ptr [rax], al; add byte ptr [rcx + 0xf182474], cl; sub dword ptr [rsp + 0x20], eax; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x000000000014f2f6: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], edx; ret; 
0x000000000014e9cb: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000600bd: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x50; or al, 0xf6; ret 0xf01; 
0x000000000007a9ea: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000007a97e: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x00000000000a10ee: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; xchg eax, ebp; ret 0x3948; 
0x00000000000b9c5d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000013e5f4: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x1f0f; 
0x000000000013efb8: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x33e9; 
0x000000000013e4f0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xf41; 
0x000000000013f0f6: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xfee9; 
0x000000000013ee8e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8944; 
0x000000000013f08c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x93e9; 
0x00000000000de29f: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x00000000000de369: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret; 
0x000000000013f010: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x43e9; 
0x0000000000146693: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x18; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000001187db: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x58], cl; adc byte ptr [rax - 0x77], cl; or byte ptr [r9 - 0x75], r9b; or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x00000000000ced0b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x64], cl; and al, 0x50; mov rsi, r13; mov rdi, rbp; call rbx; 
0x0000000000146991: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], al; call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000153388: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x000000000011fe8e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x000000000008e750: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000014c665: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000153596: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x000000000008a603: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x30], al; pop rbx; ret; 
0x000000000011fd9a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000008571b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x0000000000094d5c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018ad40: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000001863cd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000000a1975: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x6c], al; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x00000000000834ea: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000009bdb3: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; mov rdx, rbx; mov rsi, r12; call rax; 
0x00000000001526dd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000014f5be: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014f5a9: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x28]; 
0x000000000010674b: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009d7cb: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000010b90d: add byte ptr [rax], al; add byte ptr [rcx - 0x3fcefb89], cl; ret; 
0x000000000013d30e: add byte ptr [rax], al; add byte ptr [rcx - 0x41], al; add eax, 0x83000000; ret; 
0x0000000000055e0c: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000044023: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000065261: add byte ptr [rax], al; add byte ptr [rcx - 0x6777b], cl; jmp qword ptr [rsi + 0xf]; 
0x00000000000fc51b: add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; mov bh, 0x80; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0f002], al; ret 0; 
0x00000000001524ed: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x000000000015d803: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rsi + 0x48], 0x8b; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x0000000000091202: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000000bdfea: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x4489; 
0x00000000000a1c89: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8348; 
0x00000000000a112c: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x860f; 
0x00000000000a197d: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x000000000013b0ad: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; rol dword ptr [rax - 0x69f0fe07], cl; ret 0x8341; 
0x000000000011ae82: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; add byte ptr [r11 + rcx*4 + 0x7d], r9b; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000007edc7: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; jmp rax; 
0x000000000007d142: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0ba: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd2: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec2: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x0000000000051f0b: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x000000000002ae1f: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0xf685; 
0x0000000000055f4b: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000004b224: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4418; 
0x000000000005b021: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4840; 
0x00000000000fc9d5: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret; 
0x000000000009e8ff: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x00000000000c07dd: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4104; 
0x00000000000ea14d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x00000000000e73b5: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c04; 
0x000000000016105d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000009e88d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xbd01; 
0x00000000000a774d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000000be83d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000932fc: add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; clc; add dword ptr [rdi + rcx + 0x44], eax; ret 0xf641; 
0x0000000000108a8d: add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; jmp qword ptr [rdx]; 
0x0000000000148beb: add byte ptr [rax], al; add byte ptr [rcx - 0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x0000000000150711: add byte ptr [rax], al; add byte ptr [rcx - 1], al; adc bl, byte ptr [rdx + 0x31]; rcr byte ptr [rcx - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x000000000008fbef: add byte ptr [rax], al; add byte ptr [rcx - 1], al; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000000c1a51: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; fmul dword ptr [rcx - 0x39]; ret 0xffff; 
0x00000000000aae20: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x00000000000aae46: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x000000000011c158: add byte ptr [rax], al; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000101bf0: add byte ptr [rax], al; add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x000000000005490b: add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b44; 
0x00000000000547ad: add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b4c; 
0x00000000000f54e9: add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x2476; 
0x00000000000eaef5: add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x840f; 
0x00000000000c88e5: add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x000000000012bd8d: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000000d5c7e: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x2941; 
0x00000000000d7ccb: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x448d; 
0x00000000000d3292: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x858b; 
0x00000000000da346: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8944; 
0x00000000000d9db4: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8948; 
0x00000000000d7daf: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x894c; 
0x00000000000da4f4: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8b48; 
0x00000000000da3f5: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8d41; 
0x00000000000d83b6: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8d44; 
0x00000000000db08d: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8d45; 
0x0000000000113221: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xc085; 
0x00000000000d5d05: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xc889; 
0x00000000000d6f42: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd089; 
0x00000000000d31b8: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd129; 
0x0000000000084f2d: add byte ptr [rax], al; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; clc; ret; 
0x0000000000140c57: add byte ptr [rax], al; add byte ptr [rcx], dh; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000014622f: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000012dfcd: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; mov rax, rcx; ret; 
0x00000000000a6d6d: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x48], cl; mov dword ptr [rdi], edx; ret; 
0x0000000000047484: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000aa76a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x00000000000352cd: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x0000000000101c0d: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000009cb8f: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000018973d: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x000000000010bb24: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000043ec3: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000001569d0: add byte ptr [rax], al; add byte ptr [rcx], dh; shr al, 0x86; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a46cd: add byte ptr [rax], al; add byte ptr [rcx], dh; shr cl, cl; ret 0xfffa; 
0x000000000012df2d: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xf0; ret; 
0x00000000000f6487: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rcx + 0x442c244c], 0x29; ret 0x8944; 
0x000000000018e380: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000001090bd: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cda02: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; neg eax; ret; 
0x0000000000190552: add byte ptr [rax], al; add byte ptr [rdi + 9], bh; neg eax; ret; 
0x00000000001019b2: add byte ptr [rax], al; add byte ptr [rdi + rax*8 + 4], ah; and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000191544: add byte ptr [rax], al; add byte ptr [rdi + rcx + 0x44], al; ret 0x8548; 
0x00000000000433f6: add byte ptr [rax], al; add byte ptr [rdi], bh; mov dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x00000000000871d2: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x000000000012ae2d: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbp - 0x78], edi; call rcx; 
0x0000000000090b9e: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000014f308: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], ebx; ret; 
0x000000000014bd10: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], ecx; ret; 
0x000000000014e9f8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], edx; ret; 
0x000000000014f2e8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], esp; ret; 
0x000000000010c19e: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1aa: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x0000000000147098: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 8], eax; ret; 
0x0000000000147068: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 8], ecx; ret; 
0x000000000014bc19: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001520fb: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x00000000001523eb: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x00000000001526b3: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0xb8], ebx; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000152619: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0xb8], edx; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x0000000000043ea4: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x000000000012c405: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8948d789; ret; 
0x000000000016a834: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000016b86d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000186b0d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000016b8dd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000049add: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ba64d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000aa4ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000018aefd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000aac8d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000aac9d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000aac7d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000001824c4: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8148c0; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x000000000018259d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x000000000018253d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000aa7cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000aa7bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000aa7ad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000000f6e85: add byte ptr [rax], al; add byte ptr [rdi], cl; pushfq; ret 0xd108; 
0x000000000010babd: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x90], eax; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac5: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xa0], eax; syscall; 
0x0000000000043e79: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e81: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e89: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000010d46f: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ecx; add esp, 0x68; ret; 
0x00000000001117dd: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], eax; add esp, 0x40; pop rbx; ret; 
0x000000000010cce5: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], edi; add esp, 0x68; ret; 
0x0000000000101d4b: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx - 0x7efffffc], ebx; ret 0xffe0; 
0x000000000009b4b8: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], esi; add esp, 0x18; ret; 
0x000000000017aa75: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx - 0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x000000000010ce6a: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000012c9c1: add byte ptr [rax], al; add byte ptr [rdi], cl; test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000014e008: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, edi; ret; 
0x00000000001813d7: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000054e39: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0x4e9; 
0x00000000001914e2: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8441; 
0x00000000000f6e4e: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xe2c1; 
0x0000000000140f95: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000000e3616: add byte ptr [rax], al; add byte ptr [rdx + 0x20], bh; cmovne rax, rdx; ret; 
0x00000000000b948d: add byte ptr [rax], al; add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000dd699: add byte ptr [rax], al; add byte ptr [rdx + 0x48], dl; mov edx, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000012bdba: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000000a0996: add byte ptr [rax], al; add byte ptr [rdx + rdx*8 - 0x38baf0b8], al; ret; 
0x00000000000d2d0e: add byte ptr [rax], al; add byte ptr [rdx - 0x3a], al; add al, 0x28; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009e46d: add byte ptr [rax], al; add byte ptr [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000015b56a: add byte ptr [rax], al; add byte ptr [rdx - 1], bh; mov eax, edx; ret; 
0x000000000015515d: add byte ptr [rax], al; add byte ptr [rdx - 1], bh; mov rsi, r14; mov rdi, rbp; xor eax, eax; call rcx; 
0x0000000000101767: add byte ptr [rax], al; add byte ptr [rdx], ch; call 0x101680; add rsp, 0x18; ret; 
0x0000000000112bff: add byte ptr [rax], al; add byte ptr [rsi + 0x5409], bh; mov eax, 0x10; syscall; 
0x0000000000112c2e: add byte ptr [rax], al; add byte ptr [rsi + 0x5409], bh; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000010192c: add byte ptr [rax], al; add byte ptr [rsi + 0x7fffffff], bh; mov r10, rdx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x000000000015e2bb: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000012bdb5: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000001813ff: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx + 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ret 0xf40; 
0x000000000018123b: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x2e]; cmp cl, byte ptr [rax - 0x7d]; ret 0x2910; 
0x000000000018b1f2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015609b: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; and al, 0x28; call rdx; 
0x00000000001503f1: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add eax, 0x67f74; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x0000000000093f9d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000aa6d2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000000aabaa: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000aabcf: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000014d469: add byte ptr [rax], al; add byte ptr [rsi + 8], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000017848b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000017616b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b643b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b543b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000011e86b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x11f; syscall; 
0x000000000011e8fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x134; syscall; 
0x000000000011e98b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x13f; syscall; 
0x000000000010d0db: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x000000000011f0db: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x30; syscall; 
0x000000000011ec3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x32; syscall; 
0x000000000011fa1b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x43; syscall; 
0x000000000010cbeb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x53; syscall; 
0x000000000010eabb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x57; syscall; 
0x000000000010e9fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x58; syscall; 
0x000000000011e77b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x00000000000e293b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x79; syscall; 
0x000000000011dbab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x7a; syscall; 
0x000000000011ddbb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x87; syscall; 
0x000000000010c9ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x89; syscall; 
0x00000000001176eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x95; syscall; 
0x000000000011466b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x99; syscall; 
0x000000000011e32b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x9f; syscall; 
0x000000000011e4db: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb1; syscall; 
0x000000000011e68b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb4; syscall; 
0x000000000011b8ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc2; syscall; 
0x000000000011b90b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc3; syscall; 
0x000000000011b7eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc4; syscall; 
0x000000000011b99b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc5; syscall; 
0x000000000011e53b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xfe; syscall; 
0x000000000009292b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; ret; 
0x00000000001477fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 2; ret; 
0x000000000011277b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000dc9eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; ret; 
0x000000000008d2eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000011e95b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000011e65b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d4b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011e71b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e74b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a93b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b87b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000898cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000009296b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000449ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x19f4b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015e85b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x85609]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015a98b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x894d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a96b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x894f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a91b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x89549]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014011b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000003544b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000017613b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b640b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000b79db: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b8b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004397b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000430cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000144fcb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; ret; 
0x00000000000b947b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000155edb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000011271b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000cdc9b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x000000000017416d: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000015b902: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; add eax, 0x8e4b4; mov eax, 1; add rsp, 8; ret; 
0x0000000000042b0e: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014bd72: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x0000000000090d66: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000127674: add byte ptr [rax], al; add cl, byte ptr [rax - 0x77]; ret 0x53ff; 
0x0000000000127015: add byte ptr [rax], al; add cl, byte ptr [rax - 0x77]; ret 0x55ff; 
0x000000000012872d: add byte ptr [rax], al; add cl, byte ptr [rax - 0x77]; ret 0xff41; 
0x00000000000d2d32: add byte ptr [rax], al; add cl, ch; cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000191112: add byte ptr [rax], al; add cl, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000e7c72: add byte ptr [rax], al; add cl, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000c9592: add byte ptr [rax], al; add cl, ch; imul byte ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000ecaca: add byte ptr [rax], al; add cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000007ed0f: add byte ptr [rax], al; add cl, ch; imul esi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000a6a65: add byte ptr [rax], al; add cl, ch; int1; ret 0xffff; 
0x000000000013a45d: add byte ptr [rax], al; add cl, ch; mov bl, 0xae; out dx, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000159727: add byte ptr [rax], al; add cl, ch; mov ecx, 0xe8fffffe; fcomp qword ptr [rdx - 3]; jmp qword ptr [rsi + 0x66]; 
0x0000000000026c4e: add byte ptr [rax], al; add cl, ch; mov edx, 0x66000e63; nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x0000000000130baf: add byte ptr [rax], al; add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x000000000007e032: add byte ptr [rax], al; add cl, ch; pop rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000193c32: add byte ptr [rax], al; add cl, ch; push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000fda82: add byte ptr [rax], al; add cl, ch; push rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000014fc02: add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x0000000000056f04: add byte ptr [rax], al; add cl, ch; ret 0xfffc; 
0x0000000000030a2b: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x000000000002f914: add byte ptr [rax], al; add cl, ch; ret 0xfffe; 
0x000000000002d542: add byte ptr [rax], al; add cl, ch; sar esi, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000007effe: add byte ptr [rax], al; add cl, ch; stosb byte ptr [rdi], al; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000103cea: add byte ptr [rax], al; add cl, ch; xabort -1; jmp qword ptr [rsi + 0xf]; 
0x000000000012c9c7: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000eaa9d: add byte ptr [rax], al; add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x000000000007bf54: add byte ptr [rax], al; add dh, al; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x000000000012d34c: add byte ptr [rax], al; add dh, byte ptr [rdi + rbx - 0x7b]; ror byte ptr [rax - 0x73], 0x15; rol dword ptr ss:[rip + 0x58d4800], 0x8f; rol dword ptr [rip + 0x440f4800], 0xc2; ret; 
0x0000000000093526: add byte ptr [rax], al; add dh, byte ptr [rsi + 5]; ret; 
0x000000000012747d: add byte ptr [rax], al; add dh, dh; ret 0x4c04; 
0x00000000001174fd: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000012defd: add byte ptr [rax], al; add dh, dh; ret 0x7420; 
0x000000000018f9c1: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x000000000009726a: add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x00000000001490ba: add byte ptr [rax], al; add dh, dh; ret 0x7507; 
0x000000000010cddd: add byte ptr [rax], al; add dh, dh; ret 0x7540; 
0x0000000000032f8e: add byte ptr [rax], al; add dh, dh; ret 0xf04; 
0x00000000000b07f0: add byte ptr [rax], al; add dh, dh; ret 0xf20; 
0x00000000000b07f9: add byte ptr [rax], al; add dh, dh; ret 0xf40; 
0x000000000006027d: add byte ptr [rax], al; add dh, dh; ret 0xf50; 
0x000000000002b7e1: add byte ptr [rax], al; add dh, dh; ret; 
0x00000000000e52fd: add byte ptr [rax], al; add dh, dh; test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x00000000001524df: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000001526cb: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x00000000001524c9: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0xb0], 1; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x00000000001524d4: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x0000000000147967: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x23b8]; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000155e9e: add byte ptr [rax], al; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000155eae: add byte ptr [rax], al; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x00000000000eaeb1: add byte ptr [rax], al; add dword ptr [rdi + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000101bf1: add byte ptr [rax], al; add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x0000000000063bae: add byte ptr [rax], al; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x0000000000182529: add byte ptr [rax], al; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000013cc36: add byte ptr [rax], al; add edx, 1; syscall; 
0x00000000000475af: add byte ptr [rax], al; add qword ptr [rip + 0x1a2b47], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004580e: add byte ptr [rax], al; add r14, r15; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x0000000000151b9f: add byte ptr [rax], al; add rax, 0xa0; pop rbx; ret; 
0x0000000000151c7f: add byte ptr [rax], al; add rax, 0xa8; pop rbx; ret; 
0x00000000000ce48e: add byte ptr [rax], al; add rax, 3; ret; 
0x00000000000aa583: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000001862a0: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa0: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000001824d8: add byte ptr [rax], al; add rax, rdi; vzeroupper; ret; 
0x000000000014c831: add byte ptr [rax], al; add rdi, 0x10; jmp rcx; 
0x000000000014f261: add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000014e921: add byte ptr [rax], al; add rdi, 0x68; jmp rcx; 
0x000000000014bc44: add byte ptr [rax], al; add rdi, 0xc8; jmp rcx; 
0x000000000014da42: add byte ptr [rax], al; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000012c46f: add byte ptr [rax], al; add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x00000000000630b2: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000009925e: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x0000000000196dbe: add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000001512fb: add byte ptr [rax], al; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000013716d: add byte ptr [rax], al; add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000009ae97: add byte ptr [rax], al; add rsp, 0x18; mov rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000044e85: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009b4bf: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000d11b4: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043a98: add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000000026eaf: add byte ptr [rax], al; add rsp, 0x28; jmp rax; 
0x000000000008a201: add byte ptr [rax], al; add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000154661: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000009baf3: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000005c3dd: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000009050d: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000089cdf: add byte ptr [rax], al; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000001117e4: add byte ptr [rax], al; add rsp, 0x40; pop rbx; ret; 
0x000000000014d4e4: add byte ptr [rax], al; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055ff2: add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x000000000013cc4f: add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000100222: add byte ptr [rax], al; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000114113: add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010ccec: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x00000000000bb681: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112f06: add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x000000000010ce71: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x0000000000122f49: add byte ptr [rax], al; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x0000000000123013: add byte ptr [rax], al; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000001230f2: add byte ptr [rax], al; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x0000000000122437: add byte ptr [rax], al; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x0000000000124216: add byte ptr [rax], al; add rsp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x000000000015c958: add byte ptr [rax], al; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000026cfc: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000081894: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000008dd3a: add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000030e43: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x00000000001504e9: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000001456fe: add byte ptr [rax], al; add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x000000000010b496: add byte ptr [rax], al; add rsp, 8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000015b00b: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000144756: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000005c585: add byte ptr [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000081f3b: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008206f: add byte ptr [rax], al; add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x000000000009d617: add byte ptr [rax], al; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000009e7f6: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000084067: add byte ptr [rax], al; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000147860: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; jmp rcx; 
0x0000000000028857: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000042d36: add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000009d006: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000ba696: add byte ptr [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000042aac: add byte ptr [rax], al; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000018bc31: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011d8b4: add byte ptr [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000003548b: add byte ptr [rax], al; and eax, esi; ret; 
0x00000000000485e2: add byte ptr [rax], al; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x000000000018c503: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018bc36: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000008a2ee: add byte ptr [rax], al; and ecx, 0xffffffcf; mov dword ptr [rdi], ecx; ret; 
0x000000000004324e: add byte ptr [rax], al; and edx, 0x80000000; mov dword ptr [rdi], edx; ret; 
0x00000000000ecb7d: add byte ptr [rax], al; and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x0000000000034df6: add byte ptr [rax], al; and esi, dword ptr [rdi + 0x10]; lea rax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x0000000000042dbe: add byte ptr [rax], al; andpd xmm0, xmmword ptr [rip + 0x174fc8]; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x00000000000aa7ae: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000aa7be: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aa7ce: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000b0230: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000000ce064: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000a89ce: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000018254e: add byte ptr [rax], al; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018253e: add byte ptr [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000aac7e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aac8e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aac9e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000aff14: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x00000000000affa2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000014f3a8: add byte ptr [rax], al; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000014f2a8: add byte ptr [rax], al; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000014bdb5: add byte ptr [rax], al; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014bf03: add byte ptr [rax], al; bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x000000000005881e: add byte ptr [rax], al; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000010178c: add byte ptr [rax], al; call 0x101090; add rsp, 0x18; ret; 
0x0000000000112be2: add byte ptr [rax], al; call 0x113410; add rsp, 0x18; ret; 
0x00000000001203a6: add byte ptr [rax], al; call 0x11fad0; movsxd rbx, ebx; mov qword ptr [rip + 0xc3fa9], rbx; pop rbx; ret; 
0x000000000015c6f8: add byte ptr [rax], al; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b345: add byte ptr [rax], al; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2a8: add byte ptr [rax], al; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b175: add byte ptr [rax], al; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015aba8: add byte ptr [rax], al; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x0000000000047f5b: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000de294: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de35e: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x0000000000124211: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c36: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3d4: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov eax, edx; ret; 
0x0000000000081478: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x00000000000480b0: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000015b2ee: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; mov rax, rdx; add rsp, 8; ret; 
0x0000000000052f86: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x0000000000063bf1: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047117: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000047942: add byte ptr [rax], al; call 0x12bdb0; add rsp, 0x80; xor esi, esi; mov rdi, r9; call rdx; 
0x00000000001563b6: add byte ptr [rax], al; call 0x151c60; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000114ee7: add byte ptr [rax], al; call 0x25308; mov qword ptr [rip + 0xd566b], rax; add rsp, 8; ret; 
0x00000000001967f7: add byte ptr [rax], al; call 0x25318; mov qword ptr [rip + 0x514bf], 0; add rsp, 8; ret; 
0x00000000001178bc: add byte ptr [rax], al; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x0000000000152174: add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000014650d: add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000001457fc: add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x00000000000869d3: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000150d2d: add byte ptr [rax], al; call qword ptr [rax]; 
0x0000000000026ba0: add byte ptr [rax], al; call rax; 
0x000000000014510e: add byte ptr [rax], al; call rax; lea rax, [rip + 0xa47e7]; add rsp, 8; ret; 
0x0000000000152635: add byte ptr [rax], al; call rax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x00000000000472e5: add byte ptr [rax], al; call rdx; 
0x0000000000111886: add byte ptr [rax], al; cmova eax, edx; ret; 
0x000000000013b452: add byte ptr [rax], al; cmovb eax, edx; ret; 
0x000000000011f689: add byte ptr [rax], al; cmovb rax, rdx; ret; 
0x0000000000044b2c: add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000ba642: add byte ptr [rax], al; cmove rax, rcx; ret; 
0x000000000009e1c1: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000ecb86: add byte ptr [rax], al; cmovne eax, edx; pop rbx; ret; 
0x000000000012c678: add byte ptr [rax], al; cmovne eax, edx; ret; 
0x000000000015aad3: add byte ptr [rax], al; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000000a08b3: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000e128f: add byte ptr [rax], al; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000012622a: add byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000017a0a6: add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000431b5: add byte ptr [rax], al; cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x000000000015abec: add byte ptr [rax], al; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x00000000000d2a8b: add byte ptr [rax], al; cmp edi, edx; sete al; add eax, 0x16d; ret; 
0x000000000004800e: add byte ptr [rax], al; cmp edx, -1; cmove rbx, rax; mov rax, rbx; pop rbx; ret; 
0x000000000009aa9c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000bb350: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xce624]; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad60: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xceee4]; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf70: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcf114]; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f0: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcf6e4]; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad20: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcf884]; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae50: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcfb74]; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x00000000000a7260: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xdb0c4]; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000009fd30: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe24b4]; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009fd70: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe5f54]; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d460: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe8a54]; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c0: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe8dc4]; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d300: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe8f14]; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x0000000000042cb6: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000042b62: add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000029b6a: add byte ptr [rax], al; jmp rax; 
0x000000000014bc4b: add byte ptr [rax], al; jmp rcx; 
0x000000000016b919: add byte ptr [rax], al; lea r11, [rip + 0x4ddde]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b905e: add byte ptr [rax], al; lea r11, [rip + 0xf1e4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b71ce: add byte ptr [rax], al; lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b1e: add byte ptr [rax], al; lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000146239: add byte ptr [rax], al; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000018e78e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000018e79e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000018e7ae: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000018e7be: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000018e7ce: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000018e6ed: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000018e71e: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000018e72e: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000018e73e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000018e74e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000018e75e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000018e69a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000018e76e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000018e77e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000afad9: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cde1b: add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x00000000000cdf7e: add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cdf9e: add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cdf8e: add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x000000000009a216: add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x000000000009cdb2: add byte ptr [rax], al; lea rax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x00000000000339c6: add byte ptr [rax], al; lea rax, [rip + 0x17bf7d]; ret; 
0x0000000000026c5e: add byte ptr [rax], al; lea rax, [rip + 0x188824]; ret; 
0x0000000000026c6e: add byte ptr [rax], al; lea rax, [rip + 0x18a6ae]; ret; 
0x000000000004886e: add byte ptr [rax], al; lea rax, [rip + 0x1a18af]; add rsp, 8; ret; 
0x0000000000151d26: add byte ptr [rax], al; lea rax, [rip + 0x97c51]; pop rbx; ret; 
0x0000000000151c46: add byte ptr [rax], al; lea rax, [rip + 0x97d39]; pop rbx; ret; 
0x0000000000151b66: add byte ptr [rax], al; lea rax, [rip + 0x97e31]; pop rbx; ret; 
0x0000000000117dfc: add byte ptr [rax], al; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000117884: add byte ptr [rax], al; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x000000000007e213: add byte ptr [rax], al; lea rax, [rip - 0x12d1]; mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x00000000000f93d0: add byte ptr [rax], al; lea rbx, [rip + 0xb347b]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000807b3: add byte ptr [rax], al; lea rcx, [rbx + 0x40]; mov rdi, rbx; call rax; 
0x000000000017b9e4: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000006cb29: add byte ptr [rax], al; lea rcx, [rip + 0x13cb6e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000191a5d: add byte ptr [rax], al; lea rcx, [rip + 0x2821a]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000010907a: add byte ptr [rax], al; lea rcx, [rip + 0xa46a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000ee738: add byte ptr [rax], al; lea rcx, [rip + 0xbdd3f]; movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x0000000000117878: add byte ptr [rax], al; lea rcx, [rip + 0xd078f]; call 0x117ba0; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000080a38: add byte ptr [rax], al; lea rdi, [rip + 0x129b27]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000004178c: add byte ptr [rax], al; lea rdi, [rip + 0x16342b]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000014f28b: add byte ptr [rax], al; lea rdi, [rip + 0x60150]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014e99b: add byte ptr [rax], al; lea rdi, [rip + 0x60a00]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014bccb: add byte ptr [rax], al; lea rdi, [rip + 0x632ac]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x00000000000f9baa: add byte ptr [rax], al; lea rdi, [rip + 0xb2cb5]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f6ef6: add byte ptr [rax], al; lea rdi, [rip + 0xb58ad]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000e9106: add byte ptr [rax], al; lea rdi, [rip + 0xc3265]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000d8e4c: add byte ptr [rax], al; lea rdi, [rip + 0xd2ad3]; mov esi, ecx; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000d8e91: add byte ptr [rax], al; lea rdi, [rip + 0xd2c7a]; mov edx, eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000cf231: add byte ptr [rax], al; lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000009a85b: add byte ptr [rax], al; lea rdx, [rip + 0x10ff3c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000080b1a: add byte ptr [rax], al; lea rdx, [rip + 0x129b01]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000802c5: add byte ptr [rax], al; lea rdx, [rip + 0x12a112]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064bcb: add byte ptr [rax], al; lea rdx, [rip + 0x1446c0]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d367: add byte ptr [rax], al; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000002728b: add byte ptr [rax], al; lea rdx, [rip + 0x170d6c]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001926ee: add byte ptr [rax], al; lea rdx, [rip + 0x275c9]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000010842c: add byte ptr [rax], al; lea rdx, [rip + 0xa5233]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000ee82f: add byte ptr [rax], al; lea rdx, [rip + 0xbde18]; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000e8b67: add byte ptr [rax], al; lea rdx, [rip + 0xc3784]; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x000000000009ce17: add byte ptr [rax], al; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009d3d1: add byte ptr [rax], al; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x00000000000e7053: add byte ptr [rax], al; lea rdx, [rip + 0xc51a8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e6a6f: add byte ptr [rax], al; lea rdx, [rip + 0xc570c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e39fa: add byte ptr [rax], al; lea rdx, [rip + 0xc8351]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e3d4f: add byte ptr [rax], al; lea rdx, [rip + 0xc83d8]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000e2ff0: add byte ptr [rax], al; lea rdx, [rip + 0xc8d07]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000009e63a: add byte ptr [rax], al; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e59a: add byte ptr [rax], al; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e68a: add byte ptr [rax], al; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5ea: add byte ptr [rax], al; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000009d427: add byte ptr [rax], al; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009e547: add byte ptr [rax], al; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x000000000009e208: add byte ptr [rax], al; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x0000000000151702: add byte ptr [rax], al; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000008020c: add byte ptr [rax], al; lea rsi, [rip + 0x12a10f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000006d94f: add byte ptr [rax], al; lea rsi, [rip + 0x13c004]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000065ce1: add byte ptr [rax], al; lea rsi, [rip + 0x143866]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000475fd: add byte ptr [rax], al; lea rsi, [rip + 0x16848d]; lea rdi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x0000000000052e5c: add byte ptr [rax], al; lea rsi, [rip + 0x7b]; call rax; 
0x00000000000d6aec: add byte ptr [rax], al; lea rsi, [rip + 0xd4c47]; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ba5b0: add byte ptr [rax], al; lea rsi, [rip + 0xf0a27]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x000000000012c9c8: add byte ptr [rax], al; leave; ret; 
0x000000000017849e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017416e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000012005e: add byte ptr [rax], al; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x0000000000076f71: add byte ptr [rax], al; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x000000000011c353: add byte ptr [rax], al; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000eaa6e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000eaa9e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000eaaae: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x0000000000115cfe: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x00000000001871b3: add byte ptr [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000000eaa63: add byte ptr [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000b6a2e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b542e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000536cf: add byte ptr [rax], al; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000b611e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b6a4e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b544e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b948e: add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x0000000000120056: add byte ptr [rax], al; mov dword ptr [r13 + 0x20], 0; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x000000000014bd8e: add byte ptr [rax], al; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x000000000007eec6: add byte ptr [rax], al; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; jmp rax; 
0x0000000000077777: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x000000000007cf25: add byte ptr [rax], al; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007cf10: add byte ptr [rax], al; mov dword ptr [rbp - 0x518], 0; mov qword ptr [rbp - 0x4d0], 0; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x0000000000076f5c: add byte ptr [rax], al; mov dword ptr [rbp - 0x528], 0; mov qword ptr [rbp - 0x4e8], 0; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x000000000007ef26: add byte ptr [rax], al; mov dword ptr [rbp - 0x528], 1; mov r9, rsi; jmp rax; 
0x000000000007edbe: add byte ptr [rax], al; mov dword ptr [rbp - 0x538], 1; mov r9, rsi; jmp rax; 
0x00000000001478f6: add byte ptr [rax], al; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x000000000008ee30: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014befc: add byte ptr [rax], al; mov dword ptr [rbx + 0xa8], r12d; bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x0000000000148bec: add byte ptr [rax], al; mov dword ptr [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x000000000017618e: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000017617e: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000017615e: add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x0000000000155b70: add byte ptr [rax], al; mov dword ptr [rdi + 0x28], edx; ret; 
0x000000000013a498: add byte ptr [rax], al; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000010b90e: add byte ptr [rax], al; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000a71de: add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x0000000000042c77: add byte ptr [rax], al; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b644e: add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000585ce: add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000586a0: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000009355c: add byte ptr [rax], al; mov dword ptr [rip + 0x150d48], eax; ret; 
0x0000000000147057: add byte ptr [rax], al; mov dword ptr [rsi + 8], eax; ret; 
0x00000000001470de: add byte ptr [rax], al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001470ae: add byte ptr [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x00000000001470ce: add byte ptr [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x00000000001470be: add byte ptr [rax], al; mov dword ptr [rsi], 8; ret; 
0x000000000010c1c4: add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001522ad: add byte ptr [rax], al; mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; 
0x0000000000152309: add byte ptr [rax], al; mov dword ptr [rsp + 0x18], 1; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000011da8f: add byte ptr [rax], al; mov dword ptr [rsp + 0x18], esi; movaps xmmword ptr [rsp + 0x20], xmm0; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x0000000000152311: add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x00000000001524cd: add byte ptr [rax], al; mov dword ptr [rsp + 0xb0], 1; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x00000000001524d8: add byte ptr [rax], al; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x00000000001526c4: add byte ptr [rax], al; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x000000000015262a: add byte ptr [rax], al; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000001019b3: add byte ptr [rax], al; mov dword ptr fs:[0x40], 0; ret; 
0x00000000000de2a0: add byte ptr [rax], al; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de36a: add byte ptr [rax], al; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000de449: add byte ptr [rax], al; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbde: add byte ptr [rax], al; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000016b7fe: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b6a3e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b786e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b610e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b949e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000013acd5: add byte ptr [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000010cc1e: add byte ptr [rax], al; mov eax, 0x102; syscall; 
0x000000000010eaee: add byte ptr [rax], al; mov eax, 0x107; syscall; 
0x00000000000ba6de: add byte ptr [rax], al; mov eax, 0x10; pop rbx; ret; 
0x0000000000063b9e: add byte ptr [rax], al; mov eax, 0x10; ret; 
0x0000000000112c05: add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x000000000010ea2e: add byte ptr [rax], al; mov eax, 0x10a; syscall; 
0x000000000011e7ae: add byte ptr [rax], al; mov eax, 0x110; syscall; 
0x000000000011dc24: add byte ptr [rax], al; mov eax, 0x119; syscall; 
0x000000000011e80e: add byte ptr [rax], al; mov eax, 0x11b; syscall; 
0x000000000011e47e: add byte ptr [rax], al; mov eax, 0x123; syscall; 
0x000000000010d73e: add byte ptr [rax], al; mov eax, 0x124; syscall; 
0x000000000010d79e: add byte ptr [rax], al; mov eax, 0x125; syscall; 
0x000000000011e59e: add byte ptr [rax], al; mov eax, 0x126; syscall; 
0x000000000011e89e: add byte ptr [rax], al; mov eax, 0x12c; syscall; 
0x000000000011e3be: add byte ptr [rax], al; mov eax, 0x131; syscall; 
0x000000000011e9be: add byte ptr [rax], al; mov eax, 0x14a; syscall; 
0x000000000011e9ee: add byte ptr [rax], al; mov eax, 0x14b; syscall; 
0x000000000009aa6e: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000010d76e: add byte ptr [rax], al; mov eax, 0x16; syscall; 
0x000000000010185e: add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x000000000012c41e: add byte ptr [rax], al; mov eax, 0x18; syscall; ret; 
0x000000000011768e: add byte ptr [rax], al; mov eax, 0x1b; syscall; 
0x000000000011f9ee: add byte ptr [rax], al; mov eax, 0x1e; syscall; 
0x000000000011fa7e: add byte ptr [rax], al; mov eax, 0x1f; syscall; 
0x00000000000ba6fe: add byte ptr [rax], al; mov eax, 0x20; pop rbx; ret; 
0x000000000010d70e: add byte ptr [rax], al; mov eax, 0x21; syscall; 
0x00000000001126be: add byte ptr [rax], al; mov eax, 0x22; syscall; 
0x00000000000d297e: add byte ptr [rax], al; mov eax, 0x24; syscall; 
0x00000000000d29ae: add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x00000000000e26de: add byte ptr [rax], al; mov eax, 0x27; syscall; 
0x00000000000e26de: add byte ptr [rax], al; mov eax, 0x27; syscall; ret; 
0x000000000011f10e: add byte ptr [rax], al; mov eax, 0x29; syscall; 
0x00000000000ba6ee: add byte ptr [rax], al; mov eax, 0x30; pop rbx; ret; 
0x000000000011ebde: add byte ptr [rax], al; mov eax, 0x33; syscall; 
0x00000000000e194e: add byte ptr [rax], al; mov eax, 0x3b; syscall; 
0x00000000000e123e: add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x00000000000e3636: add byte ptr [rax], al; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000ba71e: add byte ptr [rax], al; mov eax, 0x40; pop rbx; ret; 
0x000000000011f85e: add byte ptr [rax], al; mov eax, 0x44; syscall; 
0x0000000000112488: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000010d50e: add byte ptr [rax], al; mov eax, 0x49; syscall; 
0x0000000000115b0e: add byte ptr [rax], al; mov eax, 0x4c; syscall; 
0x000000000010d88e: add byte ptr [rax], al; mov eax, 0x51; syscall; 
0x0000000000063a0e: add byte ptr [rax], al; mov eax, 0x52; syscall; 
0x000000000010eb1e: add byte ptr [rax], al; mov eax, 0x54; syscall; 
0x000000000010ea5e: add byte ptr [rax], al; mov eax, 0x59; syscall; 
0x000000000010cafe: add byte ptr [rax], al; mov eax, 0x5a; syscall; 
0x000000000010cb2e: add byte ptr [rax], al; mov eax, 0x5b; syscall; 
0x000000000010e17e: add byte ptr [rax], al; mov eax, 0x5d; syscall; 
0x000000000010e1ae: add byte ptr [rax], al; mov eax, 0x5e; syscall; 
0x00000000000ba70e: add byte ptr [rax], al; mov eax, 0x60; pop rbx; ret; 
0x00000000000cf77e: add byte ptr [rax], al; mov eax, 0x60; syscall; 
0x00000000000e126e: add byte ptr [rax], al; mov eax, 0x64; syscall; 
0x00000000000e26fe: add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000000e26fe: add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x000000000011e5fe: add byte ptr [rax], al; mov eax, 0x67; syscall; 
0x00000000000e271e: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000000e271e: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000000e270e: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000000e270e: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000000e272e: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000000e272e: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000e296e: add byte ptr [rax], al; mov eax, 0x6d; syscall; 
0x00000000000e26ee: add byte ptr [rax], al; mov eax, 0x6e; syscall; 
0x00000000000e26ee: add byte ptr [rax], al; mov eax, 0x6e; syscall; ret; 
0x00000000000e299e: add byte ptr [rax], al; mov eax, 0x6f; syscall; 
0x00000000000e299e: add byte ptr [rax], al; mov eax, 0x6f; syscall; ret; 
0x00000000000e29fe: add byte ptr [rax], al; mov eax, 0x70; syscall; 
0x00000000000e273e: add byte ptr [rax], al; mov eax, 0x73; syscall; 
0x00000000000e2a2e: add byte ptr [rax], al; mov eax, 0x76; syscall; 
0x00000000000e2a5e: add byte ptr [rax], al; mov eax, 0x78; syscall; 
0x000000000011dbde: add byte ptr [rax], al; mov eax, 0x7b; syscall; 
0x00000000000e29ce: add byte ptr [rax], al; mov eax, 0x7c; syscall; 
0x000000000011e35e: add byte ptr [rax], al; mov eax, 0x7d; syscall; 
0x00000000000e356e: add byte ptr [rax], al; mov eax, 0x7e; ret; 
0x000000000011e38e: add byte ptr [rax], al; mov eax, 0x7e; syscall; 
0x00000000000441e3: add byte ptr [rax], al; mov eax, 0x7f; syscall; 
0x000000000013b86e: add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x0000000000044220: add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x000000000004475e: add byte ptr [rax], al; mov eax, 0x83; syscall; 
0x000000000011e7de: add byte ptr [rax], al; mov eax, 0x86; syscall; 
0x000000000010c9de: add byte ptr [rax], al; mov eax, 0x8a; syscall; 
0x000000000011320e: add byte ptr [rax], al; mov eax, 0x8c; syscall; 
0x000000000010179e: add byte ptr [rax], al; mov eax, 0x8e; syscall; 
0x00000000001017ce: add byte ptr [rax], al; mov eax, 0x8f; syscall; 
0x00000000001017fe: add byte ptr [rax], al; mov eax, 0x90; syscall; 
0x000000000010182e: add byte ptr [rax], al; mov eax, 0x91; syscall; 
0x000000000010188e: add byte ptr [rax], al; mov eax, 0x92; syscall; 
0x00000000001018be: add byte ptr [rax], al; mov eax, 0x93; syscall; 
0x00000000001018ee: add byte ptr [rax], al; mov eax, 0x94; syscall; 
0x000000000011771e: add byte ptr [rax], al; mov eax, 0x96; syscall; 
0x000000000011774e: add byte ptr [rax], al; mov eax, 0x97; syscall; 
0x000000000011777e: add byte ptr [rax], al; mov eax, 0x98; syscall; 
0x000000000011e2be: add byte ptr [rax], al; mov eax, 0x9a; syscall; 
0x000000000011e6be: add byte ptr [rax], al; mov eax, 0x9b; syscall; 
0x00000000001141de: add byte ptr [rax], al; mov eax, 0xa1; syscall; 
0x00000000000cf85e: add byte ptr [rax], al; mov eax, 0xa4; syscall; 
0x000000000011db4e: add byte ptr [rax], al; mov eax, 0xa6; syscall; 
0x000000000011469e: add byte ptr [rax], al; mov eax, 0xa7; syscall; 
0x00000000001146ce: add byte ptr [rax], al; mov eax, 0xa8; syscall; 
0x000000000011758e: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x0000000000113e6e: add byte ptr [rax], al; mov eax, 0xaa; syscall; 
0x000000000011da0e: add byte ptr [rax], al; mov eax, 0xac; syscall; 
0x000000000011d9de: add byte ptr [rax], al; mov eax, 0xad; syscall; 
0x000000000011e3ee: add byte ptr [rax], al; mov eax, 0xae; syscall; 
0x000000000011e41e: add byte ptr [rax], al; mov eax, 0xb0; syscall; 
0x000000000011db7e: add byte ptr [rax], al; mov eax, 0xbb; syscall; 
0x000000000011b93e: add byte ptr [rax], al; mov eax, 0xc6; syscall; 
0x000000000011b81e: add byte ptr [rax], al; mov eax, 0xc7; syscall; 
0x000000000012bdc0: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000012bdc0: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x000000000012be67: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000011e44e: add byte ptr [rax], al; mov eax, 0xd5; syscall; 
0x000000000011e2ee: add byte ptr [rax], al; mov eax, 0xe4; syscall; 
0x000000000011e2ee: add byte ptr [rax], al; mov eax, 0xe4; syscall; ret; 
0x00000000000e3901: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x0000000000043ece: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000000e355e: add byte ptr [rax], al; mov eax, 0xfc17; ret; 
0x000000000011e56e: add byte ptr [rax], al; mov eax, 0xfd; syscall; 
0x00000000000e34cf: add byte ptr [rax], al; mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x00000000000e35d9: add byte ptr [rax], al; mov eax, 0xff; cmovne rax, rdx; ret; 
0x000000000011e5ce: add byte ptr [rax], al; mov eax, 0xff; syscall; 
0x00000000000e3499: add byte ptr [rax], al; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x00000000000e357e: add byte ptr [rax], al; mov eax, 0xfffa; ret; 
0x000000000013ac90: add byte ptr [rax], al; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x0000000000046f4c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x000000000004216c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000043f3c: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000082c95: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001161c8: add byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x00000000000585d4: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000011274e: add byte ptr [rax], al; mov eax, 1; syscall; 
0x00000000000587c0: add byte ptr [rax], al; mov eax, 2; ret; 
0x00000000000ba6ce: add byte ptr [rax], al; mov eax, 8; pop rbx; ret; 
0x000000000010d0ae: add byte ptr [rax], al; mov eax, 8; syscall; 
0x000000000011b7aa: add byte ptr [rax], al; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x0000000000047ead: add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017b87e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000010c1ce: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000155ebe: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000008c1de: add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008c1ae: add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000008d2fe: add byte ptr [rax], al; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000154e46: add byte ptr [rax], al; mov eax, dword ptr [rdx]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000044dde: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x19f3c2]; ret; 
0x0000000000044dce: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x19f3d6]; ret; 
0x0000000000154536: add byte ptr [rax], al; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000014e367: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0x10]; lea rdx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000158114: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009b5cf: add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x00000000000ba616: add byte ptr [rax], al; mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x0000000000043e99: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000013b858: add byte ptr [rax], al; mov eax, edi; add eax, edx; mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x000000000012f2be: add byte ptr [rax], al; mov eax, edi; bswap eax; ret; 
0x000000000002741c: add byte ptr [rax], al; mov eax, edi; ret; 
0x000000000012421d: add byte ptr [rax], al; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c42: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x000000000005f571: add byte ptr [rax], al; mov eax, edx; ret; 
0x0000000000081484: add byte ptr [rax], al; mov eax, esi; pop rbx; ret; 
0x00000000001129aa: add byte ptr [rax], al; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x000000000008a604: add byte ptr [rax], al; mov eax, r10d; pop rbx; ret; 
0x000000000008571c: add byte ptr [rax], al; mov eax, r8d; pop rbx; ret; 
0x000000000004401f: add byte ptr [rax], al; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000b6a6e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b546e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b613e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b547e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000121b16: add byte ptr [rax], al; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000115990: add byte ptr [rax], al; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x00000000001090be: add byte ptr [rax], al; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000056199: add byte ptr [rax], al; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000139847: add byte ptr [rax], al; mov edi, dword ptr [rbp - 0x60]; syscall; 
0x0000000000052eec: add byte ptr [rax], al; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x0000000000114159: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x0000000000055999: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x0000000000160ddb: add byte ptr [rax], al; mov edi, eax; mov eax, 0x3e; syscall; 
0x0000000000112c34: add byte ptr [rax], al; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000000e190e: add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x0000000000113b31: add byte ptr [rax], al; mov edi, edx; syscall; 
0x0000000000146992: add byte ptr [rax], al; mov edi, r13d; call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000000834e6: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000e3617: add byte ptr [rax], al; mov edx, 0x20; cmovne rax, rdx; ret; 
0x000000000011fd96: add byte ptr [rax], al; mov edx, 0x40; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x00000000000e3523: add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e3494: add byte ptr [rax], al; mov edx, 0x7f; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x000000000009e46e: add byte ptr [rax], al; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000015b56b: add byte ptr [rax], al; mov edx, 0xffffffff; mov eax, edx; ret; 
0x000000000015515e: add byte ptr [rax], al; mov edx, 0xffffffff; mov rsi, r14; mov rdi, rbp; xor eax, eax; call rcx; 
0x000000000012bdbb: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000011dcd6: add byte ptr [rax], al; mov edx, 8; syscall; 
0x000000000016b71e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b6ae: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b63e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000000b545e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000055f76: add byte ptr [rax], al; mov edx, eax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x000000000011436e: add byte ptr [rax], al; mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000010cd4b: add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000112c00: add byte ptr [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000000112c2f: add byte ptr [rax], al; mov esi, 0x5409; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000010192d: add byte ptr [rax], al; mov esi, 0x7fffffff; mov r10, rdx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x000000000012be76: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000015e2bc: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000012bdb6: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000086b0a: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000008ebc8: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000090d67: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000146170: add byte ptr [rax], al; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000441de: add byte ptr [rax], al; mov esi, 8; mov eax, 0x7f; syscall; 
0x000000000014d46a: add byte ptr [rax], al; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014f5a4: add byte ptr [rax], al; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000012194e: add byte ptr [rax], al; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000867b4: add byte ptr [rax], al; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000009198e: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000007cf1a: add byte ptr [rax], al; mov qword ptr [rbp - 0x4d0], 0; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007e474: add byte ptr [rax], al; mov qword ptr [rbp - 0x4e0], r9; mov rdx, r15; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000076f66: add byte ptr [rax], al; mov qword ptr [rbp - 0x4e8], 0; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x0000000000077513: add byte ptr [rax], al; mov qword ptr [rbp - 0x4f0], r10; mov rdx, r15; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x000000000007cf2f: add byte ptr [rax], al; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007736b: add byte ptr [rax], al; mov qword ptr [rbp - 0x4f8], r10; mov rdx, r14; mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000008200e: add byte ptr [rax], al; mov qword ptr [rbp], rax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000015da53: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015da0b: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000011c1fa: add byte ptr [rax], al; mov qword ptr [rbx + 0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000028850: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015df0e: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000001761ce: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761de: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001761ee: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x00000000001761fe: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000017620e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000017621e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001761be: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000017619e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x0000000000155c64: add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rdx; ret; 
0x0000000000156386: add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000b645e: add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b649e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b64ae: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b64be: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b64ce: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018805e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b648e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b646e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x00000000000585e8: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000082294: add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rcx; ret; 
0x000000000008d982: add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000063b38: add byte ptr [rax], al; mov qword ptr [rdx + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x0000000000063b88: add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000015b564: add byte ptr [rax], al; mov qword ptr [rdx], 0; mov edx, 0xffffffff; mov eax, edx; ret; 
0x0000000000093539: add byte ptr [rax], al; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x000000000009350c: add byte ptr [rax], al; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934ec: add byte ptr [rax], al; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x0000000000092a49: add byte ptr [rax], al; mov qword ptr [rip + 0x154b12], 0; ret; 
0x00000000000929df: add byte ptr [rax], al; mov qword ptr [rip + 0x154b80], rdx; add dword ptr [rip + 0x154b75], 1; ret; 
0x000000000012051c: add byte ptr [rax], al; mov qword ptr [rip + 0xc3e37], 0; ret; 
0x000000000012016e: add byte ptr [rax], al; mov qword ptr [rip + 0xc41e5], 0; add rsp, 8; ret; 
0x000000000012013d: add byte ptr [rax], al; mov qword ptr [rip + 0xc4216], 3; add rsp, 8; ret; 
0x0000000000116520: add byte ptr [rax], al; mov qword ptr [rip + 0xd1a03], 0; add rsp, 8; ret; 
0x0000000000114ec3: add byte ptr [rax], al; mov qword ptr [rip + 0xd2ed0], 0; add rsp, 8; ret; 
0x00000000000ff538: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000147048: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000489e3: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a32: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000001470e4: add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000ff540: add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000147040: add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000147010: add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x000000000014dc49: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000ddafc: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000146694: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x000000000015236e: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x000000000015215e: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521ce: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x000000000015223e: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x0000000000112ad8: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, ecx; syscall; 
0x000000000015440e: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x0000000000152109: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x00000000001523f9: add byte ptr [rax], al; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x000000000014e307: add byte ptr [rax], al; mov qword ptr [rsp + 0x438], rax; xor eax, eax; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000000ced0c: add byte ptr [rax], al; mov qword ptr [rsp + 0x50], r12; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000001128fc: add byte ptr [rax], al; mov qword ptr [rsp + 0x58], rax; xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x00000000000cec71: add byte ptr [rax], al; mov qword ptr [rsp + 0x58], rax; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000010c6c0: add byte ptr [rax], al; mov qword ptr [rsp + 0x98], rax; xor eax, eax; mov eax, 0x14c; syscall; 
0x00000000001526bc: add byte ptr [rax], al; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000152622: add byte ptr [rax], al; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x0000000000087dec: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000013ba34: add byte ptr [rax], al; mov qword ptr [rsp], 0; call rax; 
0x0000000000094bde: add byte ptr [rax], al; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000047bd2: add byte ptr [rax], al; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x0000000000035539: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000e19c6: add byte ptr [rax], al; mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x000000000010e1de: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000010e9ce: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000010ea8e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000011e83e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000011e2fe: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x000000000011dd8e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x000000000011e8ce: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000000011e92e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000011f13e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x35; syscall; 
0x000000000011f0ae: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x36; syscall; 
0x000000000011ec0e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x37; syscall; 
0x000000000011e6ee: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000011e62e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xa5; syscall; 
0x000000000011e50e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xaf; syscall; 
0x000000000011b9ce: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000000011b96e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000000011b84e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000000011b8de: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000001176be: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xd8; syscall; 
0x000000000011f9be: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xdc; syscall; 
0x000000000011e4ae: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000000077809: add byte ptr [rax], al; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000077199: add byte ptr [rax], al; mov r10, rdx; xor esi, esi; jmp rax; 
0x0000000000055e0d: add byte ptr [rax], al; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000044024: add byte ptr [rax], al; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000016531e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000115c96: add byte ptr [rax], al; mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x000000000007edc8: add byte ptr [rax], al; mov r9, rsi; jmp rax; 
0x000000000007d143: add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0bb: add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd3: add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec3: add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000001605c3: add byte ptr [rax], al; mov r9, rsi; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000011370c: add byte ptr [rax], al; mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000011386c: add byte ptr [rax], al; mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000013b7e6: add byte ptr [rax], al; mov rax, -1; mov rdx, rax; ret; 
0x0000000000043dfc: add byte ptr [rax], al; mov rax, -1; ret; 
0x00000000000ce4be: add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000ce4ce: add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000ce4de: add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000ce4ee: add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000ce4fe: add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000ce50e: add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000147af4: add byte ptr [rax], al; mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000014f06e: add byte ptr [rax], al; mov rax, qword ptr [r14 + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014c65f: add byte ptr [rax], al; mov rax, qword ptr [r14 + 0xd0]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014fe2a: add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000015264e: add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x00000000001524ee: add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x0000000000152509: add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x00000000000472b6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000088dce: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000014796b: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x23b8]; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000012b6f6: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000011ba56: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x0000000000047cf0: add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000014721d: add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; lea esi, [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000014718f: add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000001461ae: add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000001457d8: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145796: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000001457ec: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000014f599: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x60]; mov dword ptr [rbx + 0x58], 0; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000014f60f: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x60]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000014eb79: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000014bf14: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd0]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000150361: add byte ptr [rax], al; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000017b88e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000001458ee: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x38]; add r12, 0x18; mov rsi, r12; call qword ptr [rax + 0x10]; 
0x0000000000145867: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000154d8e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x00000000001543a6: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000015040f: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000015457e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 8]; 
0x00000000001504be: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000154e8e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155926: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x000000000015466e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x000000000015554e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000147e76: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000000934fe: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150da6], 1; mov qword ptr [rip + 0x150d73], rax; ret; 
0x000000000009356e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x154072], eax; ret; 
0x000000000009329e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x000000000009323e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x0000000000101b5e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x000000000008c26f: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c15f: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000014ea76: add byte ptr [rax], al; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x00000000000e188e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x108b21]; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc2ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x10e089]; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b8f: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1217c8]; lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009c28e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x000000000009819e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x14bcc9]; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009798e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x14c4d9]; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009d4c9: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x14ce9e]; lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009627f: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x14db38]; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000008c79e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1576c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000005f66e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1847f9]; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000005f55e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x184909]; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000048bfe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x19b269]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000044a86: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x19f3e1]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000044916: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x19f551]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f2e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x19ff39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043dee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a0079]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000034d9e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1af021]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034d5e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1af081]; mov qword ptr [rax], rdx; ret; 
0x00000000000339de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b03e1]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000036195: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b41ba]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030cee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x0000000000026ebe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x00000000000287fe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c17b1]; ret; 
0x00000000000287ee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x000000000016066e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x837f9]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000016060e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x83859]; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000015e7de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x85689]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015c704: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015af0e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x88f59]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a8ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x89599]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015b5c7: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b507: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8a040]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b351: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2b4: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b217: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8a330]; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b181: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015abb4: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x000000000015dec6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8c0b9]; call qword ptr [rax + 0x10]; 
0x000000000015dc46: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x000000000015db4e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x000000000015186e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x92529]; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012c766: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xb7701]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001210ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea1e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc5449]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e276: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc5bf1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e246: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc5c21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120916: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc78f9]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000120816: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc79f9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000011ada6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xc90c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011840e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcba59]; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001174de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcc989]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000011479e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcf6c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011464e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001116b6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd27b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010faee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd4379]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cbb6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd72b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb5e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd7309]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c98e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd74d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c936: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd7531]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd7591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c686: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd77e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c636: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd7831]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd7881]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001019c6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xe24a1]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000101976: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xe24f1]; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x0000000000121c96: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000352de: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000003545e: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000a70be: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000148c8e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000146d20: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000147552: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014db4e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145083: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000019441a: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000086957: add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000012c38e: add byte ptr [rax], al; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000094d5d: add byte ptr [rax], al; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018ad41: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000001863ce: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000082699: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000480bc: add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000004210c: add byte ptr [rax], al; mov rax, rcx; ret; 
0x0000000000047c7e: add byte ptr [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000009297e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000188fde: add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x000000000015b2fa: add byte ptr [rax], al; mov rax, rdx; add rsp, 8; ret; 
0x000000000009799e: add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000052ee4: add byte ptr [rax], al; mov rbx, rdi; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x00000000001656de: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658be: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a9e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165c8e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e8e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016608e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001654fe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b6abe: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b54ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b617e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b54be: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000ba0ef: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001457ad: add byte ptr [rax], al; mov rdi, qword ptr [r13]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000014bf2e: add byte ptr [rax], al; mov rdi, qword ptr [r15]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000472a4: add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000014f5e1: add byte ptr [rax], al; mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000ff01f: add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x28]; call 0x25318; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000009c52e: add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x48]; call rax; 
0x000000000009c2e6: add byte ptr [rax], al; mov rdi, qword ptr [rdi + 0x48]; mov rsi, rbp; call rax; 
0x0000000000044eb2: add byte ptr [rax], al; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000014c666: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000153597: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000153389: add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000014f5bf: add byte ptr [rax], al; mov rdi, r14; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014f5aa: add byte ptr [rax], al; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x0000000000086f75: add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000009bdb4: add byte ptr [rax], al; mov rdi, r15; mov rdx, rbx; mov rsi, r12; call rax; 
0x0000000000082019: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000014588f: add byte ptr [rax], al; mov rdi, rbp; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000014791c: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000147900: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000147198: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000008882a: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000147acf: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbx]; 
0x00000000000835eb: add byte ptr [rax], al; mov rdi, rbp; call rax; 
0x0000000000146175: add byte ptr [rax], al; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000014d431: add byte ptr [rax], al; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x0000000000091478: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000147972: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000150d1c: add byte ptr [rax], al; mov rdi, rbx; lea r8, [rip - 0x9e28]; lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x0000000000044248: add byte ptr [rax], al; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x000000000015d54b: add byte ptr [rax], al; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000088dc3: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000008228d: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x00000000000e14de: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x102989]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13de: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x102a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1346: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x102b21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a56: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x180411]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004418e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x19fcd9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c74e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xb7719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa66: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc4401]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9d6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc4491]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f786: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc46e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f606: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc4861]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f55e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc4909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc49b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f07e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc4de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efbe: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc4ea9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee5e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc5009]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edbe: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc50a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011eb7e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc52e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011eaae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc53b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e1ee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc5c79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e11e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc5d49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e07e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc5de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df06: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc5f61]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de66: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc6001]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dcee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc6179]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011ad8e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xc90d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011762e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc839]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011354e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd0919]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134ae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd09b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112e3e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd1029]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112dfe: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd1069]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112736: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd1731]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112326: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd1b41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001121be: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd1ca9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011174e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd2719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d07e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cfde: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6e89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010c976: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd74f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c91e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd7549]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c8be: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd75a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000fe74e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xe5861]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000016b55e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b4ee: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b47e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b39e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b32e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b2be: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b549e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a718e: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x0000000000126401: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x10]; xor esi, esi; mov edi, 0x2000004; call rcx; 
0x00000000000a6fee: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x0000000000075ae4: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x000000000007570f: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x0000000000075359: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000009b19c: add byte ptr [rax], al; mov rdx, r15; mov rdi, r13; call rax; 
0x0000000000133c0c: add byte ptr [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000008ec9d: add byte ptr [rax], al; mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000007b426: add byte ptr [rax], al; mov rdx, r9; mov qword ptr [rbp - 0x8e8], r9; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x00000000000454a3: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000454de: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000000084349: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000001117be: add byte ptr [rax], al; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x0000000000075be3: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x000000000009b834: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000007b1e1: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x928], rcx; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x0000000000160633: add byte ptr [rax], al; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x0000000000111aad: add byte ptr [rax], al; mov rdx, rsi; xor esi, esi; syscall; 
0x0000000000075182: add byte ptr [rax], al; mov rsi, qword ptr [r14 + 0x18]; mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000000881da: add byte ptr [rax], al; mov rsi, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x000000000009926e: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000014bf1b: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000cf239: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000146c64: add byte ptr [rax], al; mov rsi, qword ptr [rsp]; mov rdi, rbx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000012766d: add byte ptr [rax], al; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000011fe8f: add byte ptr [rax], al; mov rsi, r13; mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x000000000008e751: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000834eb: add byte ptr [rax], al; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000012700e: add byte ptr [rax], al; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x00000000001526de: add byte ptr [rax], al; mov rsi, r15; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000011fd9b: add byte ptr [rax], al; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000011ff24: add byte ptr [rax], al; mov rsi, r8; mov edi, ebx; mov eax, r14d; syscall; 
0x000000000015d3cc: add byte ptr [rax], al; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000012c713: add byte ptr [rax], al; mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000009ba96: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rbx; call rax; 
0x000000000008c399: add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000009bc3e: add byte ptr [rax], al; mov rsi, rbx; mov rdi, r12; call rax; 
0x000000000010ccc2: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000000e38f9: add byte ptr [rax], al; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000112d05: add byte ptr [rax], al; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000a700e: add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018803e: add byte ptr [rax], al; mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018802e: add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a71ae: add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rax - 1]; ret; 
0x00000000000a70de: add byte ptr [rax], al; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000014bd73: add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000015b903: add byte ptr [rax], al; mov word ptr [rip + 0x8e4b4], ax; mov eax, 1; add rsp, 8; ret; 
0x0000000000048a74: add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000042b0f: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000001516dc: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000010babe: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac6: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x0000000000043e7a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e82: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e8a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000001503f2: add byte ptr [rax], al; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x000000000014708e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014bcf6: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b61fe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b626e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b567e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b552e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000014f2de: add byte ptr [rax], al; movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c227: add byte ptr [rax], al; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c233: add byte ptr [rax], al; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000ba426: add byte ptr [rax], al; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b64de: add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b64ee: add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b1f50: add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000015594e: add byte ptr [rax], al; movsx eax, word ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154b56: add byte ptr [rax], al; movsx rax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154a46: add byte ptr [rax], al; movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000007e263: add byte ptr [rax], al; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007de5b: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007ef17: add byte ptr [rax], al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000008098c: add byte ptr [rax], al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000147e96: add byte ptr [rax], al; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000018133e: add byte ptr [rax], al; movsxd rax, ecx; ret; 
0x000000000013b3e7: add byte ptr [rax], al; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x0000000000032c74: add byte ptr [rax], al; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x00000000000ba005: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000014f2f7: add byte ptr [rax], al; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014e9cc: add byte ptr [rax], al; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000871d3: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000012ae2e: add byte ptr [rax], al; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x0000000000090b9f: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000014bd11: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014e9f9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x000000000014f309: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014f2e9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c19f: add byte ptr [rax], al; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1ab: add byte ptr [rax], al; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000147099: add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000147069: add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000014bc1a: add byte ptr [rax], al; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001520fc: add byte ptr [rax], al; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x00000000001523ec: add byte ptr [rax], al; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x000000000015261a: add byte ptr [rax], al; movups xmmword ptr [rsp + 0xb8], xmm2; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000001526b4: add byte ptr [rax], al; movups xmmword ptr [rsp + 0xb8], xmm3; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000154be6: add byte ptr [rax], al; movzx eax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000181beb: add byte ptr [rax], al; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000181c25: add byte ptr [rax], al; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000090d26: add byte ptr [rax], al; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000181a60: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000018fa5e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000018fa4e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa3e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa2e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa1e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000018fa0e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018bd9e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018bb51: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018282e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000196da6: add byte ptr [rax], al; movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x00000000000ba64e: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x0000000000029e2e: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000010b8ce: add byte ptr [rax], al; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000001559de: add byte ptr [rax], al; movzx eax, word ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154ad6: add byte ptr [rax], al; movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000aa4ee: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000181dee: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000186b1e: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018738e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016b8de: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000187f3e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000018859e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000016b86e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000186b0e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000010cc19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eae9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e809: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e479: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d739: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d799: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e599: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e899: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d769: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x0000000000101859: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x0000000000117689: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d709: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d29a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f109: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebd9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d889: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea59: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e179: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e1269: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2969: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e2999: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e2999: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; ret; 
0x00000000000e29f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a59: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbd9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e359: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e389: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x0000000000101829: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x0000000000101889: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x0000000000117719: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x0000000000117749: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x0000000000117779: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x0000000000114699: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x0000000000117589: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011da09: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e419: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db79: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b939: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b819: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e449: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e2e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; ret; 
0x000000000011e569: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000012f2b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, edi; bswap eax; ret; 
0x00000000000441d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x7f; syscall; 
0x000000000010e1d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000010e9c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000010ea89: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000011e839: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000011e8c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000000011e929: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000011f139: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x000000000011ec09: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x000000000011e6e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000011e629: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x000000000011e509: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x000000000011b9c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000000011b969: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000000011b849: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000000011b8d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000001176b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x000000000011e4a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000000043f29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x19ff39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000015af09: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x88f59]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000151869: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x92529]; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001210a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc5449]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000010cb59: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7309]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000012d461: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x0000000000043449: add byte ptr [rax], al; nop dword ptr [rax + rax]; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000001560e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000155f9b: add byte ptr [rax], al; nop dword ptr [rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000aa9eb: add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000017415b: add byte ptr [rax], al; nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000017612a: add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b63fa: add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b60fa: add byte ptr [rax], al; nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000011dd0a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441aa: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8ea: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8ba: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f88a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b3a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e5a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x000000000011324a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x000000000009113b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000144fda: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 1; ret; 
0x0000000000152a4a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 2; ret; 
0x00000000001784ca: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000010c1ba: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000010b8fa: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000010c26b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000016b06a: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b789a: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x0000000000063a3a: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x00000000000e142a: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x3d; syscall; 
0x0000000000043f5a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000014578f: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000017841b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x00000000001740eb: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000155b2a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009294a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000354aa: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1aea31]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354ca: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1aea51]; add rax, qword ptr fs:[0]; ret; 
0x00000000000b4daa: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000016533a: add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018f9fb: add byte ptr [rax], al; nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000000a89eb: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016b1fa: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016b17a: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000032b0f: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000185e5b: add byte ptr [rax], al; nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000aad1b: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126ea: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000018607b: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000011fa4a: add byte ptr [rax], al; nop dword ptr [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000000b71c8: add byte ptr [rax], al; nop word ptr [rax + rax]; lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b18: add byte ptr [rax], al; nop word ptr [rax + rax]; lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000011db45: add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x00000000001461a8: add byte ptr [rax], al; nop word ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000012d0b5: add byte ptr [rax], al; nop word ptr [rax + rax]; ret; 
0x0000000000026bc5: add byte ptr [rax], al; nop word ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000013a46d: add byte ptr [rax], al; nop; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000018e70d: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6fd: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000017848c: add byte ptr [rax], al; nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b785d: add byte ptr [rax], al; nop; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x000000000017616c: add byte ptr [rax], al; nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b641d: add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b643c: add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b642d: add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000b543c: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000011e86c: add byte ptr [rax], al; nop; mov eax, 0x11f; syscall; 
0x000000000011e8fc: add byte ptr [rax], al; nop; mov eax, 0x134; syscall; 
0x000000000011e98c: add byte ptr [rax], al; nop; mov eax, 0x13f; syscall; 
0x000000000010d0dc: add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x000000000011765d: add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x00000000000e150d: add byte ptr [rax], al; nop; mov eax, 0x25; syscall; 
0x000000000011f0dc: add byte ptr [rax], al; nop; mov eax, 0x30; syscall; 
0x000000000011eadd: add byte ptr [rax], al; nop; mov eax, 0x31; syscall; 
0x000000000011ec3c: add byte ptr [rax], al; nop; mov eax, 0x32; syscall; 
0x000000000011ebad: add byte ptr [rax], al; nop; mov eax, 0x34; syscall; 
0x000000000011fa1c: add byte ptr [rax], al; nop; mov eax, 0x43; syscall; 
0x000000000010d85d: add byte ptr [rax], al; nop; mov eax, 0x50; syscall; 
0x000000000010cbec: add byte ptr [rax], al; nop; mov eax, 0x53; syscall; 
0x000000000010eabc: add byte ptr [rax], al; nop; mov eax, 0x57; syscall; 
0x000000000010e9fc: add byte ptr [rax], al; nop; mov eax, 0x58; syscall; 
0x000000000010e14d: add byte ptr [rax], al; nop; mov eax, 0x5c; syscall; 
0x000000000011e77c: add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x00000000000e293c: add byte ptr [rax], al; nop; mov eax, 0x79; syscall; 
0x000000000011dbac: add byte ptr [rax], al; nop; mov eax, 0x7a; syscall; 
0x000000000011ddbc: add byte ptr [rax], al; nop; mov eax, 0x87; syscall; 
0x000000000010c9ac: add byte ptr [rax], al; nop; mov eax, 0x89; syscall; 
0x00000000001176ec: add byte ptr [rax], al; nop; mov eax, 0x95; syscall; 
0x000000000011466c: add byte ptr [rax], al; nop; mov eax, 0x99; syscall; 
0x000000000011e32c: add byte ptr [rax], al; nop; mov eax, 0x9f; syscall; 
0x000000000011e4dc: add byte ptr [rax], al; nop; mov eax, 0xb1; syscall; 
0x000000000011e68c: add byte ptr [rax], al; nop; mov eax, 0xb4; syscall; 
0x000000000011b8ac: add byte ptr [rax], al; nop; mov eax, 0xc2; syscall; 
0x000000000011b90c: add byte ptr [rax], al; nop; mov eax, 0xc3; syscall; 
0x000000000011b7ec: add byte ptr [rax], al; nop; mov eax, 0xc4; syscall; 
0x000000000011b99c: add byte ptr [rax], al; nop; mov eax, 0xc5; syscall; 
0x00000000000dc9bd: add byte ptr [rax], al; nop; mov eax, 0xd9; syscall; 
0x000000000011e53c: add byte ptr [rax], al; nop; mov eax, 0xfe; syscall; 
0x000000000009292c: add byte ptr [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000001477fc: add byte ptr [rax], al; nop; mov eax, 2; ret; 
0x00000000001123ed: add byte ptr [rax], al; nop; mov eax, 3; syscall; 
0x000000000009268d: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000011277c: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000dc9ec: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; ret; 
0x000000000008d2ec: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000012f2cd: add byte ptr [rax], al; nop; mov eax, edi; rol ax, 8; ret; 
0x00000000001761ad: add byte ptr [rax], al; nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b647d: add byte ptr [rax], al; nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000011e95c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000011e65c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d4c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011e71c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e74c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8ec: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a93c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b87c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000000011b7bd: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000000ce4ad: add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x00000000000898cc: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000009296c: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000449ac: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x19f4b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015e85c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x85609]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015a98c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x894d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a96c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x894f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a91c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x89549]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014011c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012f68d: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0xb47c1]; add rax, qword ptr fs:[0]; ret; 
0x00000000001133ed: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0xd0a79]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000003544c: add byte ptr [rax], al; nop; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000018829d: add byte ptr [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x000000000017614d: add byte ptr [rax], al; nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017613c: add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b640c: add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x00000000000b79dc: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b8c: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004397c: add byte ptr [rax], al; nop; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000430cc: add byte ptr [rax], al; nop; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000009be8d: add byte ptr [rax], al; nop; ret; 
0x000000000018217d: add byte ptr [rax], al; nop; vzeroupper; xor eax, eax; ret; 
0x00000000000b947c: add byte ptr [rax], al; nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000155ecd: add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000011271c: add byte ptr [rax], al; nop; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000cdc9c: add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000042eaf: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000042e6f: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004953b: add byte ptr [rax], al; or byte ptr [rax + 0xf], 0x44; ret 0x14eb; 
0x0000000000043283: add byte ptr [rax], al; or byte ptr [rcx + 0x66fc2454], 0xf; outsb dx, byte ptr [rsi]; and al, 0xfc; ret; 
0x0000000000058697: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000008dc7e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000006275f: add byte ptr [rax], al; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000042ab1: add byte ptr [rax], al; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000004344e: add byte ptr [rax], al; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000aa6f9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000aabd0: add byte ptr [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000356cc: add byte ptr [rax], al; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000000ce8a7: add byte ptr [rax], al; pop r12; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x000000000012c89a: add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x00000000000dbb78: add byte ptr [rax], al; pop r13; pop r14; jmp rax; 
0x00000000001478af: add byte ptr [rax], al; pop rbp; jmp rcx; 
0x0000000000061abe: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000061b90: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000000a015c: add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000ba609: add byte ptr [rax], al; pop rbx; cmove rax, rdx; ret; 
0x000000000005f51b: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000821fd: add byte ptr [rax], al; pop rbx; mov rax, rdx; pop rbp; pop r12; ret; 
0x0000000000030e4a: add byte ptr [rax], al; pop rbx; pop r12; ret; 
0x0000000000044fc9: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000044311: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044480: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000314f7: add byte ptr [rax], al; pop rbx; ret; 
0x000000000008f14e: add byte ptr [rax], al; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000e18be: add byte ptr [rax], al; pop rdi; mov eax, 0x3a; syscall; 
0x0000000000101768: add byte ptr [rax], al; push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000014668d: add byte ptr [rax], al; push qword ptr [rsp + 0xe8]; mov qword ptr [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000dd69a: add byte ptr [rax], al; push rdx; mov rdx, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001409b5: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x000000000015609c: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rsp + 0x28], xmm0; call rdx; 
0x00000000000268ee: add byte ptr [rax], al; ret; 
0x000000000012f2f2: add byte ptr [rax], al; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000000026415: add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x0000000000034e91: add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000835de: add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x0000000000042a36: add byte ptr [rax], al; sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000000cdae0: add byte ptr [rax], al; setl al; neg eax; cmp ecx, r8d; cmovg eax, edx; ret; 
0x0000000000189fe3: add byte ptr [rax], al; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x0000000000101c16: add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000e371d: add byte ptr [rax], al; setne al; ret; 
0x0000000000044908: add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000044980: add byte ptr [rax], al; shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x0000000000097f8e: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000010b816: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000014f368: add byte ptr [rax], al; sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018bc3c: add byte ptr [rax], al; sub eax, ecx; ret; 
0x0000000000042a84: add byte ptr [rax], al; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000121446: add byte ptr [rax], al; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x0000000000113222: add byte ptr [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x000000000013b08b: add byte ptr [rax], al; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000091c36: add byte ptr [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000087326: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000151abf: add byte ptr [rax], al; sub rax, -0x80; pop rbx; ret; 
0x00000000000b9e71: add byte ptr [rax], al; sub rax, rdx; ret; 
0x00000000000873de: add byte ptr [rax], al; sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000010b91e: add byte ptr [rax], al; sub rsp, 0x10; push 0; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000145d2e: add byte ptr [rax], al; sub rsp, 8; call 0x113ce0; mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x000000000013fbfe: add byte ptr [rax], al; sub rsp, 8; call 0x13f630; or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x0000000000029b7e: add byte ptr [rax], al; sub rsp, 8; call 0x295c0; or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x00000000001562ce: add byte ptr [rax], al; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x0000000000043e92: add byte ptr [rax], al; syscall; 
0x000000000010c28a: add byte ptr [rax], al; syscall; neg eax; ret; 
0x000000000012bdc5: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x00000000000cf6c3: add byte ptr [rax], al; syscall; ret; 
0x000000000009e78e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b915]; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e43e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bc45]; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2de: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bdc5]; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000012d16e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x730db]; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d22e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7319b]; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2ee: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7327b]; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x00000000000a0997: add byte ptr [rax], al; test dl, dl; cmovne rax, rdi; ret; 
0x000000000009e35e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x1c117]; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x0000000000149cb7: add byte ptr [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000000a0096: add byte ptr [rax], al; test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret; 
0x000000000018219e: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018218e: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018e317: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000001874c0: add byte ptr [rax], al; vzeroupper; ret; 
0x00000000001825be: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x0000000000043218: add byte ptr [rax], al; xor bl, 0xf; adc dword ptr [rdi], eax; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000cea9c: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x00000000000352ce: add byte ptr [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000015a8b7: add byte ptr [rax], al; xor eax, eax; call 0x10d420; add rsp, 8; sar eax, 0x1f; ret; 
0x0000000000101c0e: add byte ptr [rax], al; xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000092c3e: add byte ptr [rax], al; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000012c39e: add byte ptr [rax], al; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000e3726: add byte ptr [rax], al; xor eax, eax; cmp rdx, 0x2f; setne al; ret; 
0x000000000013a48f: add byte ptr [rax], al; xor eax, eax; mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000010c6c8: add byte ptr [rax], al; xor eax, eax; mov eax, 0x14c; syscall; 
0x000000000009cb90: add byte ptr [rax], al; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000014e30f: add byte ptr [rax], al; xor eax, eax; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x000000000014bf43: add byte ptr [rax], al; xor eax, eax; mov rsi, qword ptr [rsp + 0x30]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000014f5f6: add byte ptr [rax], al; xor eax, eax; mov rsi, qword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x0000000000047485: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047123: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000008dc69: add byte ptr [rax], al; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000047166: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008c1be: add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008c1ce: add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x0000000000181dde: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000048666: add byte ptr [rax], al; xor eax, ecx; ret; 
0x00000000000632de: add byte ptr [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x0000000000146230: add byte ptr [rax], al; xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000012dfce: add byte ptr [rax], al; xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000026bce: add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x0000000000084f2e: add byte ptr [rax], al; xor edi, edi; mov rax, rdi; ret; 
0x000000000011751b: add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000112dea: add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000055e06: add byte ptr [rax], al; xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000008223e: add byte ptr [rax], al; xor edx, edx; mov rax, rdx; ret; 
0x000000000010bb25: add byte ptr [rax], al; xor edx, edx; mov rsi, r12; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000043ec4: add byte ptr [rax], al; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000010c4c3: add byte ptr [rax], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000000b9f11: add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000000a6d6e: add byte ptr [rax], al; xor edx, edx; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x00000000000e16fc: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x00000000000920dd: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, r14; call qword ptr [rax + 0x58]; 
0x00000000000452c7: add byte ptr [rax], al; xor esi, esi; call 0x49340; add rsp, 8; ret; 
0x000000000012c658: add byte ptr [rax], al; xor esi, esi; lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x000000000012df2e: add byte ptr [rax], al; xor esi, esi; mov rax, rsi; ret; 
0x000000000004794e: add byte ptr [rax], al; xor esi, esi; mov rdi, r9; call rdx; 
0x000000000012be6c: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000089a56: add byte ptr [rax], al; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000089b58: add byte ptr [rax], al; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000cda0e: add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000009cd6c: add byte ptr [rax], bh; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000126226: add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000193326: add byte ptr [rax], cl; add byte ptr [rax + 0x21], cl; ret 0x8545; 
0x0000000000035114: add byte ptr [rax], cl; movzx eax, ax; ret; 
0x00000000000e19c4: add byte ptr [rax], dl; add byte ptr [rax], al; mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x000000000009e0e3: add byte ptr [rax], dl; lea rax, [rip + 0x1b854]; cmove rax, rdx; ret; 
0x00000000000351f4: add byte ptr [rax], dl; movzx eax, ax; ret; 
0x0000000000155ead: add byte ptr [rax], r8b; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000010b495: add byte ptr [rax], r8b; add rsp, 8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000000144755: add byte ptr [rax], r8b; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000009d005: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008a2ed: add byte ptr [rax], r8b; and ecx, 0xffffffcf; mov dword ptr [rdi], ecx; ret; 
0x0000000000034df5: add byte ptr [rax], r8b; and esi, dword ptr [rdi + 0x10]; lea rax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x0000000000042dbd: add byte ptr [rax], r8b; andpd xmm0, xmmword ptr [rip + 0x174fc8]; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x000000000017c64d: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000018254d: add byte ptr [rax], r8b; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001203a5: add byte ptr [rax], r8b; call 0x11fad0; movsxd rbx, ebx; mov qword ptr [rip + 0xc3fa9], rbx; pop rbx; ret; 
0x0000000000093e8d: add byte ptr [rax], r8b; call rax; 
0x0000000000042cb5: add byte ptr [rax], r8b; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000098fbd: add byte ptr [rax], r8b; jmp rax; 
0x00000000000b71cd: add byte ptr [rax], r8b; lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b1d: add byte ptr [rax], r8b; lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000339c5: add byte ptr [rax], r8b; lea rax, [rip + 0x17bf7d]; ret; 
0x00000000000eaaad: add byte ptr [rax], r8b; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x0000000000115cfd: add byte ptr [rax], r8b; mov byte ptr [rdi], 0; mov rax, rdi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x00000000000b6a4d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000014bd8d: add byte ptr [rax], r8b; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x000000000007ef25: add byte ptr [rax], r8b; mov dword ptr [rbp - 0x528], 1; mov r9, rsi; jmp rax; 
0x00000000000b949d: add byte ptr [rax], r8b; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000010cc1d: add byte ptr [rax], r8b; mov eax, 0x102; syscall; 
0x000000000010eaed: add byte ptr [rax], r8b; mov eax, 0x107; syscall; 
0x000000000010ea2d: add byte ptr [rax], r8b; mov eax, 0x10a; syscall; 
0x000000000011e7ad: add byte ptr [rax], r8b; mov eax, 0x110; syscall; 
0x000000000011e80d: add byte ptr [rax], r8b; mov eax, 0x11b; syscall; 
0x000000000011e47d: add byte ptr [rax], r8b; mov eax, 0x123; syscall; 
0x000000000010d73d: add byte ptr [rax], r8b; mov eax, 0x124; syscall; 
0x000000000010d79d: add byte ptr [rax], r8b; mov eax, 0x125; syscall; 
0x000000000011e59d: add byte ptr [rax], r8b; mov eax, 0x126; syscall; 
0x000000000011e89d: add byte ptr [rax], r8b; mov eax, 0x12c; syscall; 
0x000000000011e3bd: add byte ptr [rax], r8b; mov eax, 0x131; syscall; 
0x000000000011e9bd: add byte ptr [rax], r8b; mov eax, 0x14a; syscall; 
0x000000000011e9ed: add byte ptr [rax], r8b; mov eax, 0x14b; syscall; 
0x000000000009aa6d: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000010d76d: add byte ptr [rax], r8b; mov eax, 0x16; syscall; 
0x000000000010185d: add byte ptr [rax], r8b; mov eax, 0x18; syscall; 
0x000000000011768d: add byte ptr [rax], r8b; mov eax, 0x1b; syscall; 
0x000000000011f9ed: add byte ptr [rax], r8b; mov eax, 0x1e; syscall; 
0x000000000011fa7d: add byte ptr [rax], r8b; mov eax, 0x1f; syscall; 
0x000000000010d70d: add byte ptr [rax], r8b; mov eax, 0x21; syscall; 
0x00000000000d297d: add byte ptr [rax], r8b; mov eax, 0x24; syscall; 
0x00000000000d29ad: add byte ptr [rax], r8b; mov eax, 0x26; syscall; 
0x00000000000e26dd: add byte ptr [rax], r8b; mov eax, 0x27; syscall; 
0x00000000000e26dd: add byte ptr [rax], r8b; mov eax, 0x27; syscall; ret; 
0x000000000011f10d: add byte ptr [rax], r8b; mov eax, 0x29; syscall; 
0x000000000011ebdd: add byte ptr [rax], r8b; mov eax, 0x33; syscall; 
0x000000000010d50d: add byte ptr [rax], r8b; mov eax, 0x49; syscall; 
0x000000000010d88d: add byte ptr [rax], r8b; mov eax, 0x51; syscall; 
0x000000000010eb1d: add byte ptr [rax], r8b; mov eax, 0x54; syscall; 
0x000000000010ea5d: add byte ptr [rax], r8b; mov eax, 0x59; syscall; 
0x000000000010cb2d: add byte ptr [rax], r8b; mov eax, 0x5b; syscall; 
0x000000000010e17d: add byte ptr [rax], r8b; mov eax, 0x5d; syscall; 
0x000000000010e1ad: add byte ptr [rax], r8b; mov eax, 0x5e; syscall; 
0x00000000000e126d: add byte ptr [rax], r8b; mov eax, 0x64; syscall; 
0x000000000011e5fd: add byte ptr [rax], r8b; mov eax, 0x67; syscall; 
0x00000000000e296d: add byte ptr [rax], r8b; mov eax, 0x6d; syscall; 
0x00000000000e299d: add byte ptr [rax], r8b; mov eax, 0x6f; syscall; 
0x00000000000e299d: add byte ptr [rax], r8b; mov eax, 0x6f; syscall; ret; 
0x00000000000e29fd: add byte ptr [rax], r8b; mov eax, 0x70; syscall; 
0x00000000000e2a2d: add byte ptr [rax], r8b; mov eax, 0x76; syscall; 
0x00000000000e2a5d: add byte ptr [rax], r8b; mov eax, 0x78; syscall; 
0x000000000011dbdd: add byte ptr [rax], r8b; mov eax, 0x7b; syscall; 
0x000000000011e35d: add byte ptr [rax], r8b; mov eax, 0x7d; syscall; 
0x000000000011e38d: add byte ptr [rax], r8b; mov eax, 0x7e; syscall; 
0x000000000011e7dd: add byte ptr [rax], r8b; mov eax, 0x86; syscall; 
0x000000000010c9dd: add byte ptr [rax], r8b; mov eax, 0x8a; syscall; 
0x00000000001017cd: add byte ptr [rax], r8b; mov eax, 0x8f; syscall; 
0x00000000001017fd: add byte ptr [rax], r8b; mov eax, 0x90; syscall; 
0x000000000010182d: add byte ptr [rax], r8b; mov eax, 0x91; syscall; 
0x000000000010188d: add byte ptr [rax], r8b; mov eax, 0x92; syscall; 
0x00000000001018bd: add byte ptr [rax], r8b; mov eax, 0x93; syscall; 
0x00000000001018ed: add byte ptr [rax], r8b; mov eax, 0x94; syscall; 
0x000000000011771d: add byte ptr [rax], r8b; mov eax, 0x96; syscall; 
0x000000000011774d: add byte ptr [rax], r8b; mov eax, 0x97; syscall; 
0x000000000011777d: add byte ptr [rax], r8b; mov eax, 0x98; syscall; 
0x000000000011e2bd: add byte ptr [rax], r8b; mov eax, 0x9a; syscall; 
0x000000000011e6bd: add byte ptr [rax], r8b; mov eax, 0x9b; syscall; 
0x00000000001141dd: add byte ptr [rax], r8b; mov eax, 0xa1; syscall; 
0x000000000011469d: add byte ptr [rax], r8b; mov eax, 0xa7; syscall; 
0x00000000001146cd: add byte ptr [rax], r8b; mov eax, 0xa8; syscall; 
0x000000000011758d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x000000000011da0d: add byte ptr [rax], r8b; mov eax, 0xac; syscall; 
0x000000000011d9dd: add byte ptr [rax], r8b; mov eax, 0xad; syscall; 
0x000000000011e3ed: add byte ptr [rax], r8b; mov eax, 0xae; syscall; 
0x000000000011e41d: add byte ptr [rax], r8b; mov eax, 0xb0; syscall; 
0x000000000011db7d: add byte ptr [rax], r8b; mov eax, 0xbb; syscall; 
0x000000000011b93d: add byte ptr [rax], r8b; mov eax, 0xc6; syscall; 
0x000000000011b81d: add byte ptr [rax], r8b; mov eax, 0xc7; syscall; 
0x000000000011e44d: add byte ptr [rax], r8b; mov eax, 0xd5; syscall; 
0x000000000011e2ed: add byte ptr [rax], r8b; mov eax, 0xe4; syscall; 
0x000000000011e2ed: add byte ptr [rax], r8b; mov eax, 0xe4; syscall; ret; 
0x00000000000e355d: add byte ptr [rax], r8b; mov eax, 0xfc17; ret; 
0x000000000011e56d: add byte ptr [rax], r8b; mov eax, 0xfd; syscall; 
0x000000000011e5cd: add byte ptr [rax], r8b; mov eax, 0xff; syscall; 
0x0000000000044e15: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x00000000000e4045: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x000000000011274d: add byte ptr [rax], r8b; mov eax, 1; syscall; 
0x000000000014c7ed: add byte ptr [rax], r8b; mov eax, 2; ret; 
0x000000000010c1cd: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000154e45: add byte ptr [rax], r8b; mov eax, dword ptr [rdx]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154535: add byte ptr [rax], r8b; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012f2bd: add byte ptr [rax], r8b; mov eax, edi; bswap eax; ret; 
0x00000000000b614d: add byte ptr [rax], r8b; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000121b15: add byte ptr [rax], r8b; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000834e5: add byte ptr [rax], r8b; mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000011fd95: add byte ptr [rax], r8b; mov edx, 0x40; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x00000000000b545d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000011436d: add byte ptr [rax], r8b; mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000000441dd: add byte ptr [rax], r8b; mov esi, 8; mov eax, 0x7f; syscall; 
0x000000000018805d: add byte ptr [rax], r8b; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000010e1dd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000010e9cd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000010ea8d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000011e83d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000011e8cd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000000011e92d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000011f13d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x35; syscall; 
0x000000000011ec0d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x37; syscall; 
0x000000000011e6ed: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000011e62d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xa5; syscall; 
0x000000000011e50d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xaf; syscall; 
0x000000000011b9cd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000000011b96d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000000011b84d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000000011b8dd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000001176bd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xd8; syscall; 
0x000000000011e4ad: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000000115c95: add byte ptr [rax], r8b; mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x000000000015264d: add byte ptr [rax], r8b; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x000000000012b6f5: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000001461ad: add byte ptr [rax], r8b; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000154d8d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x00000000001543a5: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000015457d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 8]; 
0x0000000000154fed: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155925: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x000000000015466d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x000000000015554d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000147e75: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000009329d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x000000000009323d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x0000000000101b5d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x0000000000044a85: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x19f3e1]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000044915: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x19f551]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f2d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x19ff39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ded: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x1a0079]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000016066d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x837f9]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000015e7dd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x85689]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015af0d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x88f59]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015dec5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x8c0b9]; call qword ptr [rax + 0x10]; 
0x000000000015dc45: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x000000000015db4d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x000000000015186d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x92529]; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012c765: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xb7701]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001210ad: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea1d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xc5449]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e275: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xc5bf1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e245: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xc5c21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120915: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xc78f9]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011ada5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xc90c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011840d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xcba59]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011479d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xcf6c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011464d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010faed: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd4379]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cbb5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd72b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb5d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd7309]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c98d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd74d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c935: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd7531]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd7591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c685: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd77e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c635: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd7831]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd7881]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001019c5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xe24a1]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000121c95: add byte ptr [rax], r8b; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000003545d: add byte ptr [rax], r8b; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000a70bd: add byte ptr [rax], r8b; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000148c8d: add byte ptr [rax], r8b; mov rax, qword ptr [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000012c38d: add byte ptr [rax], r8b; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000018adfd: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000000b66cd: add byte ptr [rax], r8b; mov rax, rdi; ret; 
0x00000000000b6abd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b54bd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000e14dd: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0x102989]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13dd: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0x102a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1345: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0x102b21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a55: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0x180411]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c74d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xb7719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa65: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc4401]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9d5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc4491]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f785: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc46e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f605: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc4861]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f55d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc4909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc49b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f07d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc4de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efbd: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc4ea9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee5d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc5009]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edbd: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc50a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011e07d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc5de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df05: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc5f61]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de65: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xc6001]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011762d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc839]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011354d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd0919]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134ad: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd09b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112e3d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd1029]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112735: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd1731]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112325: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd1b41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011174d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd2719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d07d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd6de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010c975: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd74f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c91d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd7549]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b549d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a718d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000454dd: add byte ptr [rax], r8b; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000012700d: add byte ptr [rax], r8b; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x000000000014bcf5: add byte ptr [rax], r8b; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000154b55: add byte ptr [rax], r8b; movsx rax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154a45: add byte ptr [rax], r8b; movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000147e95: add byte ptr [rax], r8b; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154be5: add byte ptr [rax], r8b; movzx eax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000018fa5d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000018fa4d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa3d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa2d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa1d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000018fa0d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018282d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000010b8cd: add byte ptr [rax], r8b; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000154ad5: add byte ptr [rax], r8b; movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000186b1d: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000187f3d: add byte ptr [rax], r8b; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000004344d: add byte ptr [rax], r8b; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000145d0d: add byte ptr [rax], r8b; pop rbx; ret; 
0x00000000000e18bd: add byte ptr [rax], r8b; pop rdi; mov eax, 0x3a; syscall; 
0x00000000000268ed: add byte ptr [rax], r8b; ret; 
0x0000000000121d95: add byte ptr [rax], r8b; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x0000000000091c35: add byte ptr [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000087325: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000145d2d: add byte ptr [rax], r8b; sub rsp, 8; call 0x113ce0; mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x000000000013fbfd: add byte ptr [rax], r8b; sub rsp, 8; call 0x13f630; or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x0000000000029b7d: add byte ptr [rax], r8b; sub rsp, 8; call 0x295c0; or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x00000000001562cd: add byte ptr [rax], r8b; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x000000000009e78d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b915]; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e43d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bc45]; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2dd: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bdc5]; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000012d16d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x730db]; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d22d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7319b]; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2ed: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7327b]; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x00000000000a0095: add byte ptr [rax], r8b; test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret; 
0x000000000018219d: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000fe73d: add byte ptr [rax], r8b; xor eax, eax; add rsp, 8; ret; 
0x0000000000092c3d: add byte ptr [rax], r8b; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000012c39d: add byte ptr [rax], r8b; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000e3725: add byte ptr [rax], r8b; xor eax, eax; cmp rdx, 0x2f; setne al; ret; 
0x000000000014716d: add byte ptr [rax], r8b; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba5c5: add byte ptr [rax], r8b; xor eax, eax; pop rbx; ret; 
0x0000000000047165: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000181ddd: add byte ptr [rax], r8b; xor eax, eax; vzeroupper; ret; 
0x000000000012ebad: add byte ptr [rax], r8b; xor ecx, ecx; mov rax, rcx; ret; 
0x000000000008223d: add byte ptr [rax], r8b; xor edx, edx; mov rax, rdx; ret; 
0x00000000000cda0d: add byte ptr [rax], r8b; xor rax, rax; ret; 
0x00000000000dff2c: add byte ptr [rbp + 0x10], bh; add al, ch; sbb edx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015065c: add byte ptr [rbp + 0x10], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000010c2d6: add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000011f6f8: add byte ptr [rbp + 0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000011fdd7: add byte ptr [rbp + 0x10e74d2], al; ror byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000015cfc3: add byte ptr [rbp + 0x11], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008cfd3: add byte ptr [rbp + 0x11], dh; add rsp, 0x48; ret; 
0x0000000000045043: add byte ptr [rbp + 0x11], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000012d819: add byte ptr [rbp + 0x11], dh; add rsp, 0xd8; ret; 
0x0000000000063982: add byte ptr [rbp + 0x12], dh; add rsp, 0x18; ret; 
0x00000000000e1590: add byte ptr [rbp + 0x12], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000150892: add byte ptr [rbp + 0x12], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000013b5b3: add byte ptr [rbp + 0x12], dh; movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x000000000008c18e: add byte ptr [rbp + 0x14], dh; xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne al; ret; 
0x0000000000044577: add byte ptr [rbp + 0x15], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000bb39d: add byte ptr [rbp + 0x15], dh; and ch, 2; lea rax, [rip + 0x115d6]; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009e1fd: add byte ptr [rbp + 0x15], dh; and ch, 2; lea rax, [rip + 0xcbf6]; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000010ca5f: add byte ptr [rbp + 0x15], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000014910e: add byte ptr [rbp + 0x16], dh; add rsp, 0x40; pop rbx; ret; 
0x00000000000450b6: add byte ptr [rbp + 0x16], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000d2a20: add byte ptr [rbp + 0x1a], dh; add rsp, 0x28; ret; 
0x000000000010caca: add byte ptr [rbp + 0x1a], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112b5d: add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x0000000000062f4e: add byte ptr [rbp + 0x1b], dh; add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x00000000001502ea: add byte ptr [rbp + 0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000145e64: add byte ptr [rbp + 0x1d], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011dabb: add byte ptr [rbp + 0x1d], dh; add rsp, 0x78; ret; 
0x0000000000139626: add byte ptr [rbp + 0x1e], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000044731: add byte ptr [rbp + 0x1e], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000005c22e: add byte ptr [rbp + 0x1e], dh; add rsp, 0x450; pop rbx; ret; 
0x00000000000dda6a: add byte ptr [rbp + 0x22], dh; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044821: add byte ptr [rbp + 0x22], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087e90: add byte ptr [rbp + 0x23], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c8b2e: add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000135818: add byte ptr [rbp + 0x25], dh; add rsp, 0x38; ret; 
0x000000000004468c: add byte ptr [rbp + 0x27], dh; add rsp, 0x140; pop rbx; ret; 
0x000000000015294e: add byte ptr [rbp + 0x27], dh; add rsp, 0x28; ret; 
0x000000000014db3a: add byte ptr [rbp + 0x28], dh; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000141f68: add byte ptr [rbp + 0x28], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0b1f: add byte ptr [rbp + 0x29], al; ret 0x8d46; 
0x00000000000d0df4: add byte ptr [rbp + 0x29], al; ret; 
0x000000000005c12f: add byte ptr [rbp + 0x29], cl; ret 0xc149; 
0x000000000004aa18: add byte ptr [rbp + 0x29], cl; ret; 
0x00000000000c8907: add byte ptr [rbp + 0x29dc75db], al; ret; 
0x000000000015af7d: add byte ptr [rbp + 0x2c], dh; add rsp, 0x18; ret; 
0x00000000000dfa45: add byte ptr [rbp + 0x2c], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000015b3f4: add byte ptr [rbp + 0x2d], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000011f94f: add byte ptr [rbp + 0x2e], dh; mov eax, 0x42; syscall; 
0x00000000001483af: add byte ptr [rbp + 0x30], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000014644a: add byte ptr [rbp + 0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d5e82: add byte ptr [rbp + 0x310875db], al; rol byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; xchg eax, esp; ret 0x8d48; 
0x0000000000145160: add byte ptr [rbp + 0x310b75c0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008df2a: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000010c367: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000009feaf: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000039d77: add byte ptr [rbp + 0x31], al; in al, 0xeb; ret; 
0x0000000000127153: add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000062277: add byte ptr [rbp + 0x31], al; push rsi; ret 0x7540; 
0x0000000000190d5f: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 9], cl; fld dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x3145; 
0x0000000000089a57: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089b59: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x000000000009e8b6: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x39], cl; ret; 
0x000000000011fa4f: add byte ptr [rbp + 0x31], al; sar byte ptr [rax + 0x1d], cl; syscall; 
0x000000000006313f: add byte ptr [rbp + 0x31], dl; call qword ptr [rbx + 0x48]; 
0x000000000012a1d8: add byte ptr [rbp + 0x31e37fc0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000129ebb: add byte ptr [rbp + 0x32], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014844d: add byte ptr [rbp + 0x35], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000030f67: add byte ptr [rbp + 0x35], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150aef: add byte ptr [rbp + 0x35], dh; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000044478: add byte ptr [rbp + 0x35], dh; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000002c461: add byte ptr [rbp + 0x36880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x00000000001510c4: add byte ptr [rbp + 0x36], dh; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x00000000000dce0f: add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000000c8a51: add byte ptr [rbp + 0x391a74db], al; ret; 
0x00000000000c895b: add byte ptr [rbp + 0x392074db], al; ret; 
0x000000000013a51e: add byte ptr [rbp + 0x39850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000e77d1: add byte ptr [rbp + 0x39], al; ret 0xf45; 
0x00000000000ec8f7: add byte ptr [rbp + 0x39], al; sal dword ptr [rbp - 0x48], 0xeb; rcl byte ptr [rax - 0x74fbbc75], 0x55; add al, 1; ret 0x341; 
0x0000000000056bc4: add byte ptr [rbp + 0x39], cl; ret 0x860f; 
0x0000000000056c2d: add byte ptr [rbp + 0x39], cl; ret 0xcd74; 
0x0000000000056cca: add byte ptr [rbp + 0x39], cl; ret 0xd074; 
0x0000000000052901: add byte ptr [rbp + 0x39], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000011496f: add byte ptr [rbp + 0x3b], dh; add rsp, 0x68; ret; 
0x0000000000058370: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000015de95: add byte ptr [rbp + 0x3c], dh; add rsp, 0x38; ret; 
0x000000000015db2f: add byte ptr [rbp + 0x3c], dh; add rsp, 0x58; ret; 
0x0000000000154509: add byte ptr [rbp + 0x3e], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000114604: add byte ptr [rbp + 0x3e], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000147e69: add byte ptr [rbp + 0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000440f9: add byte ptr [rbp + 0x3f], dh; add rsp, 0x148; ret; 
0x00000000001159b3: add byte ptr [rbp + 0x3f], dh; add rsp, 0x38; ret; 
0x0000000000154a19: add byte ptr [rbp + 0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000115a82: add byte ptr [rbp + 0x40], dh; add rsp, 0x38; ret; 
0x000000000011dc1b: add byte ptr [rbp + 0x412075c0], al; mov ecx, 8; mov eax, 0x119; syscall; 
0x00000000001117b5: add byte ptr [rbp + 0x413675c0], al; mov eax, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x0000000000061abf: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000061b91: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000a015d: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000001545c9: add byte ptr [rbp + 0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000013b678: add byte ptr [rbp + 0x42], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001125d6: add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000112505: add byte ptr [rbp + 0x43], dh; add rsp, 0x18; ret; 
0x000000000009413f: add byte ptr [rbp + 0x43], dh; add rsp, 0x50; pop rbx; ret; 
0x00000000000e1dce: add byte ptr [rbp + 0x43], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000012a038: add byte ptr [rbp + 0x44], dh; add rsp, 0xe0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e1378: add byte ptr [rbp + 0x451375c0], al; xor edx, edx; mov eax, 0x3d; syscall; 
0x000000000011358b: add byte ptr [rbp + 0x451875c0], al; xor eax, eax; mov eax, 0x127; syscall; 
0x000000000011363b: add byte ptr [rbp + 0x451875c0], al; xor eax, eax; mov eax, 0x128; syscall; 
0x00000000000e146b: add byte ptr [rbp + 0x451875c0], al; xor eax, eax; mov eax, 0xf7; syscall; 
0x000000000011ee9b: add byte ptr [rbp + 0x452075c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec7b: add byte ptr [rbp + 0x452075c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000011266b: add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000015dc2c: add byte ptr [rbp + 0x45], dh; add rsp, 0x68; ret; 
0x00000000001462a0: add byte ptr [rbp + 0x480b75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000632ce: add byte ptr [rbp + 0x480d75c0], al; mov eax, ebx; pop rbx; ret; 
0x00000000000d3326: add byte ptr [rbp + 0x480d75c0], al; mov eax, edx; add rsp, 8; ret; 
0x000000000015afc9: add byte ptr [rbp + 0x480e74c0], al; lea edx, [rip + 0x8874b]; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x0000000000149d75: add byte ptr [rbp + 0x480e75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000149dcb: add byte ptr [rbp + 0x481074d2], al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000149eab: add byte ptr [rbp + 0x481075c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000120392: add byte ptr [rbp + 0x481174db], al; movsxd rbx, ebx; mov qword ptr [rip + 0xc3fbf], rbx; pop rbx; ret; 
0x0000000000082a47: add byte ptr [rbp + 0x48117ec0], al; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000160d95: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x8954f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d65: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x89577]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d35: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x8959f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d05: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x895c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cd5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x895ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160ca5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x89617]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd55: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe5df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd25: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe607]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcf5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe62f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcc5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe657]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc95: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe67f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc65: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6a7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc35: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc05: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6f7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bba5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe70f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbd9: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe71b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012bb75: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe737]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb45: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe75f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb15: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe787]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bae5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe7af]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bab5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe7d7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba55: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe827]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba25: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe84f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9f5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe877]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9c5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe89f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b995: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe8c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b965: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe8ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b935: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe917]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b905: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe93f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8d5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe967]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8a5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe98f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b875: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe9b7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b845: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe9df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b815: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe9ff]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b7e5: add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbeb07]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000009d4a5: add byte ptr [rbp + 0x481675c0], al; lea eax, [rip + 0x14a20f]; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x000000000008c265: add byte ptr [rbp + 0x48167ec0], al; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c155: add byte ptr [rbp + 0x48167ec0], al; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000015aac4: add byte ptr [rbp + 0x481778c0], al; lea eax, [rip + 0x8f2b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000036431: add byte ptr [rbp + 0x481974f6], al; mov eax, dword ptr [rip + 0x1b3f23]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0ae: add byte ptr [rbp + 0x481d74c0], al; mov eax, dword ptr [rip + 0x10e2ae]; lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfc2: add byte ptr [rbp + 0x481d74c0], al; mov eax, dword ptr [rip + 0x10e39a]; lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8d3c: add byte ptr [rbp + 0x481d74c0], al; mov eax, dword ptr [rip + 0x121620]; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394fe: add byte ptr [rbp + 0x481d74c0], al; mov eax, dword ptr [rip + 0x1b0e5e]; lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034128: add byte ptr [rbp + 0x481d74c9], al; mov eax, dword ptr [rip + 0x1b622c]; lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc285: add byte ptr [rbp + 0x481d74d2], al; mov eax, dword ptr [rip + 0x10e0d7]; lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d20: add byte ptr [rbp + 0x481d74d2], al; mov eax, dword ptr [rip + 0x1b363c]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003555c: add byte ptr [rbp + 0x481d74d2], al; mov eax, dword ptr [rip + 0x1b4df8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034346: add byte ptr [rbp + 0x481d74d2], al; mov eax, dword ptr [rip + 0x1b6016]; lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037584: add byte ptr [rbp + 0x481d74f6], al; mov eax, dword ptr [rip + 0x1b2dd0]; lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000043c95: add byte ptr [rbp + 0x481e74c0], al; mov eax, dword ptr [rip + 0x1a66a7]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000031ddd: add byte ptr [rbp + 0x481e74c9], al; mov eax, dword ptr [rip + 0x1b857f]; lea rdi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d695: add byte ptr [rbp + 0x482874d2], al; mov eax, dword ptr [rip + 0x14ccd7]; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001121ef: add byte ptr [rbp + 0x482e78ff], al; mov edx, esi; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x0000000000036cf9: add byte ptr [rbp + 0x484474c9], al; mov eax, dword ptr [rip + 0x1b3663]; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009bfa3: add byte ptr [rbp + 0x484874c0], al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000151967: add byte ptr [rbp + 0x484c75c0], al; lea eax, [rip + 0x982cd]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x0000000000194ab0: add byte ptr [rbp + 0x484c75ff], al; add esp, 0x30; pop rbx; ret; 
0x00000000001459d9: add byte ptr [rbp + 0x487274c0], al; mov eax, dword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014651f: add byte ptr [rbp + 0x489774c0], al; mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000dbeb5: add byte ptr [rbp + 0x48cb75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001120c7: add byte ptr [rbp + 0x492475c0], al; mov edx, ecx; mov eax, 0x146; syscall; 
0x00000000001140ea: add byte ptr [rbp + 0x493175c0], al; mov eax, ebx; mov eax, 0x10e; syscall; 
0x0000000000155919: add byte ptr [rbp + 0x49], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000154b2b: add byte ptr [rbp + 0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011f96e: add byte ptr [rbp + 0x4a], dh; add rsp, 0x58; ret; 
0x0000000000112476: add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x000000000013ba5b: add byte ptr [rbp + 0x4b], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000154c49: add byte ptr [rbp + 0x4d], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000010e0f0: add byte ptr [rbp + 0x4d], dh; add rsp, 0x130; pop rbx; ret; 
0x00000000000ddada: add byte ptr [rbp + 0x4e], dh; add rsp, 0x38; ret; 
0x000000000015ddd3: add byte ptr [rbp + 0x4e], dh; add rsp, 0x78; ret; 
0x000000000008233c: add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000005bc91: add byte ptr [rbp + 0x51], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000101afe: add byte ptr [rbp + 0x55], dh; add rsp, 0x38; ret; 
0x00000000000e2aca: add byte ptr [rbp + 0x56], dh; add rsp, 0x38; ret; 
0x000000000013bb16: add byte ptr [rbp + 0x58], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011aaf4: add byte ptr [rbp + 0x58], dh; add rsp, 0xe0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052a8f: add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000907ed: add byte ptr [rbp + 0x5c], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000010d5e6: add byte ptr [rbp + 0x63], dh; add rsp, 0x30; pop rbx; ret; 
0x00000000001139da: add byte ptr [rbp + 0x66], dh; add rsp, 0x48; ret; 
0x0000000000112d6d: add byte ptr [rbp + 0x69], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000529b1: add byte ptr [rbp + 0x6e], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000113b4c: add byte ptr [rbp + 0x6e], dh; add rsp, 0x38; ret; 
0x00000000000dfb8e: add byte ptr [rbp + 0x76], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001461dd: add byte ptr [rbp + 0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000138ce3: add byte ptr [rbp + 0x79], dh; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000014d2da: add byte ptr [rbp + 0x7e], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000011b549: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011a749: add byte ptr [rbp + 0xa], dh; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000015e3c8: add byte ptr [rbp + 0xb], dh; add rsp, 0x28; ret; 
0x00000000000926b2: add byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000112bb8: add byte ptr [rbp + 0xc], dh; add rsp, 0x18; ret; 
0x0000000000062eca: add byte ptr [rbp + 0xc], dh; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000008603f: add byte ptr [rbp + 0xc], dh; add rsp, 0x300; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044309: add byte ptr [rbp + 0xc], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f1d3: add byte ptr [rbp + 0xc], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d2b51: add byte ptr [rbp + 0xd], dh; add rsp, 0x30; pop rbx; ret; 
0x000000000012d723: add byte ptr [rbp + 0xd], dh; add rsp, 0xd8; ret; 
0x0000000000150d5e: add byte ptr [rbp + 0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000ee740: add byte ptr [rbp + 0xf], al; mov dh, 0xe4; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000fc7d7: add byte ptr [rbp + 0xf], al; mov dh, 0xed; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000ee837: add byte ptr [rbp + 0xf], al; mov dh, 0xed; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x000000000005711f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000005700f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000004437e: add byte ptr [rbp + 0xf], dh; add rsp, 0x118; ret; 
0x0000000000150f85: add byte ptr [rbp + 0xf], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000012ed63: add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x00000000000454f7: add byte ptr [rbp + 1], cl; test dword ptr [rax - 0x77], 0xfe894cea; mov rdi, r12; call rbx; 
0x0000000000047c9a: add byte ptr [rbp + 3], dh; pop rbx; ret; 
0x0000000000043ade: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000047d6e: add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x00000000001148a1: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000154430: add byte ptr [rbp + 5], dh; add rsp, 0x48; ret; 
0x0000000000152120: add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000010c461: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceba8: add byte ptr [rbp + 6], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000011a92a: add byte ptr [rbp + 8], dh; add rsp, 0x418; ret; 
0x000000000004450c: add byte ptr [rbp + 8], dh; add rsp, 0x98; ret; 
0x000000000004513c: add byte ptr [rbp + 8], dh; add rsp, 0xa8; ret; 
0x00000000000538e0: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x0000000000156148: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x000000000010e98e: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000063362: add byte ptr [rbp + 9], dh; add rsp, 0x1010; pop rbx; ret; 
0x000000000015e685: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000001560d0: add byte ptr [rbp + 9], dh; add rsp, 0xa0; pop rbx; ret; 
0x00000000000dc3a8: add byte ptr [rbp + 9], dh; add rsp, 0xe0; pop rbx; ret; 
0x00000000001150df: add byte ptr [rbp + 9], dh; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000016502f: add byte ptr [rbp + rcx*4 + 0x1d], cl; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c3f: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rdx + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679ff: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rsi], edx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016499f: add byte ptr [rbp + rcx*4 + 0x1d], cl; fld dword ptr [rbp + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016775f: add byte ptr [rbp + rcx*4 + 0x1d], cl; fstp dword ptr [rax]; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul ebx, dword ptr [rdi], 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016430f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul ecx, dword ptr [rbx + 5], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646ff: add byte ptr [rbp + rcx*4 + 0x1d], cl; jns 0x16474c; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; jns 0x1674e0; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645af: add byte ptr [rbp + rcx*4 + 0x1d], cl; leave; add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167186: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dl, 0x1e; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164aef: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rbx + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678af: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rdi], edx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f7f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x49000520; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x4900054c; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b71cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rbx], edi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000166e2f: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rdx], esp; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016406f: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rsi + 5], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f1f: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cdf: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; and eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b6: add byte ptr [rbp + rcx*4 + 0x1d], cl; ret 0x546; 
0x000000000016445f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rdx + 5], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016721f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rsi], ebx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a3f: add byte ptr [rbp + rcx*4 + 0x1d], cl; stc; and eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016760f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rdx], ebx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016484f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rsi + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b8f: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x49000524; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007a2d2: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000bb587: add byte ptr [rbp + rcx*4 + 0x43], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000014623a: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call qword ptr [rax]; 
0x0000000000145f89: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x00000000001460c9: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call qword ptr [rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000011fee7: add byte ptr [rbp + rcx*4 + 0x52], cl; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x000000000009884c: add byte ptr [rbp + rcx*4 + 5], cl; in al, dx; ret; 
0x000000000012b77c: add byte ptr [rbp - 0x12], dh; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000008089f: add byte ptr [rbp - 0x157c7ffc], cl; xor byte ptr [rbp - 0x77], al; call 0x2949c8ae; rol byte ptr [rcx], 1; ret 0x3944; 
0x0000000000094f9e: add byte ptr [rbp - 0x17], dh; pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000103e1f: add byte ptr [rbp - 0x217bf037], al; add eax, 0xf9830000; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000005f45f: add byte ptr [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000026440: add byte ptr [rbp - 0x3c], dh; ret; 
0x0000000000149cb8: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x00000000000639f1: add byte ptr [rbp - 0x3f6af040], al; movzx eax, al; neg eax; pop rbx; ret; 
0x0000000000044218: add byte ptr [rbp - 0x41e48a40], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x0000000000112bf8: add byte ptr [rbp - 0x45dc8a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000010ce47: add byte ptr [rbp - 0x479a8a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000012c7a0: add byte ptr [rbp - 0x47c48a40], al; out 0, al; add byte ptr [rax], al; syscall; 
0x000000000012c3be: add byte ptr [rbp - 0x47d28a40], al; and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001139b9: add byte ptr [rbp - 0x47d58a40], al; jno 0x1139c1; add byte ptr [rax], al; syscall; 
0x00000000000e2819: add byte ptr [rbp - 0x47d58a40], al; push 0; add byte ptr [rax], al; syscall; 
0x00000000001134e8: add byte ptr [rbp - 0x47ec8a40], al; adc al, 0; add byte ptr [rax], al; syscall; 
0x0000000000113448: add byte ptr [rbp - 0x47ec8a40], al; adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010d018: add byte ptr [rbp - 0x47ec8a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000010d668: add byte ptr [rbp - 0x47ec8a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e15b8: add byte ptr [rbp - 0x47ec8a40], al; and al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e1638: add byte ptr [rbp - 0x47ec8a40], al; and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001175c8: add byte ptr [rbp - 0x47ec8a40], al; sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011eb18: add byte ptr [rbp - 0x47ec8a40], al; sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011ea48: add byte ptr [rbp - 0x47ec8a40], al; sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011e0b8: add byte ptr [rbp - 0x47ec8a40], al; xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000011de9b: add byte ptr [rbp - 0x47ef8a40], al; adc al, 1; add byte ptr [rax], al; syscall; 
0x000000000010b3bb: add byte ptr [rbp - 0x47ef8a40], al; adc al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010b30b: add byte ptr [rbp - 0x47ef8a40], al; adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000011dffb: add byte ptr [rbp - 0x47ef8a40], al; adc eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000011f44b: add byte ptr [rbp - 0x47ef8a40], al; and byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000011effb: add byte ptr [rbp - 0x47ef8a40], al; sub al, 0; add byte ptr [rax], al; syscall; 
0x000000000011f4eb: add byte ptr [rbp - 0x47ef8a40], al; sub eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000011f59b: add byte ptr [rbp - 0x47ef8a40], al; xor eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001562ef: add byte ptr [rbp - 0x47f38a2e], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000c923f: add byte ptr [rbp - 0x57c03b0], cl; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000000e44ea: add byte ptr [rbp - 0x737af040], al; add al, byte ptr [rax]; add byte ptr [rbx - 0x2e74b], cl; inc dword ptr [rbx - 0x30773]; call qword ptr [rax]; 
0x00000000000ec059: add byte ptr [rbp - 0x73], cl; pop rdx; dec dword ptr [rcx + 0x29]; ret; 
0x000000000009727d: add byte ptr [rbp - 0x75], cl; and byte ptr [r9 - 0x75], cl; push rcx; or dh, dh; ret 0x7404; 
0x000000000014949e: add byte ptr [rbp - 0x75], cl; push rcx; or byte ptr [rcx + 0x31], cl; ror byte ptr [rbp - 0x75], 1; sbb dword ptr [rbp + 0x31], ecx; ret 0x314d; 
0x000000000010ccb8: add byte ptr [rbp - 0x76968a40], al; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000006dcd2: add byte ptr [rbp - 0x76b70088], cl; ret; 
0x0000000000080e77: add byte ptr [rbp - 0x76bb7ffc], cl; ret 0xc001; 
0x00000000000f705b: add byte ptr [rbp - 0x76df8b40], al; ret 0xe283; 
0x00000000001172b5: add byte ptr [rbp - 0x76f98b01], al; cmp eax, 0xcd088; ret; 
0x00000000000e1bc9: add byte ptr [rbp - 0x77], al; ret; 
0x000000000011370d: add byte ptr [rbp - 0x77], al; ror dword ptr [rcx - 0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000011386d: add byte ptr [rbp - 0x77], al; ror dword ptr [rcx - 0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000006cdb7: add byte ptr [rbp - 0x77], cl; imul ecx; ret; 
0x0000000000027a41: add byte ptr [rbp - 0x77], cl; int1; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x0000000000193288: add byte ptr [rbp - 0x77], cl; mov dword ptr [rcx - 0x7d], 0x894c07e7; ret 0x8d4f; 
0x000000000004e5f7: add byte ptr [rbp - 0x77], cl; ret 0x1fe9; 
0x0000000000051347: add byte ptr [rbp - 0x77], cl; ret 0x2fe9; 
0x00000000000e8184: add byte ptr [rbp - 0x77], cl; ret 0x8948; 
0x0000000000191ff5: add byte ptr [rbp - 0x77], cl; ret 0x8949; 
0x000000000012d776: add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x000000000019305b: add byte ptr [rbp - 0x77], cl; ret 0x894d; 
0x000000000004b6b7: add byte ptr [rbp - 0x77], cl; ret 0xdfe9; 
0x00000000000a257a: add byte ptr [rbp - 0x77], cl; ret; 
0x000000000007741d: add byte ptr [rbp - 0x77], cl; test dword ptr [rcx + rcx*4 - 0x2a], 0x4ddf8948; sub edi, edx; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000009b385: add byte ptr [rbp - 0x7ad98140], al; fisttp dword ptr [rdi]; xchg eax, esp; ret; 
0x000000000014585f: add byte ptr [rbp - 0x7b], al; dec dword ptr [rdi]; test byte ptr [rdi + 0x48000000], al; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000ca0af: add byte ptr [rbp - 0x7b], al; in al, 0x74; out 0xe8, al; pop rdx; mov bl, 0xf5; jmp qword ptr [rsi + 0xf]; 
0x000000000018127f: add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; lahf; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6610; 
0x0000000000193423: add byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; test byte ptr [rbx], al; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000a6d0b: add byte ptr [rbp - 0x7c], al; sal byte ptr [rax + rsi*2 + 0x44], 0x38; ret 0x4153; 
0x000000000010131f: add byte ptr [rbp - 0x7cb7feba], cl; ret 0x8901; 
0x000000000011b73f: add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x0000000000107cdf: add byte ptr [rbp - 0x7cdb8b25], al; sti; add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x00000000000ec6c7: add byte ptr [rbp - 0x7cde872e], al; ret 0x4801; 
0x00000000000f2367: add byte ptr [rbp - 0x7ce7872e], al; ret 0x2901; 
0x00000000000314ff: add byte ptr [rbp - 0x7cf78140], al; call 0x8469e0b; pop rbx; ret; 
0x0000000000146b7e: add byte ptr [rbp - 0x7ed28a40], al; ret; 
0x0000000000064b82: add byte ptr [rbp - 0x7fbf2688], cl; jmp qword ptr [rdx]; 
0x00000000000551f7: add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x000000000018252a: add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x000000000017d8d9: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000000929e7: add byte ptr [rbx + 0x154b7505], al; add byte ptr [rcx], al; ret; 
0x000000000008926e: add byte ptr [rbx + 0x178920ca], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000009a1f7: add byte ptr [rbx + 0x1e], dh; lea rax, [rax - 8]; ret; 
0x000000000008c1df: add byte ptr [rbx + 0x2002507], cl; add byte ptr [rax], al; ret; 
0x0000000000062760: add byte ptr [rbx + 0x28907c8], al; mov eax, 1; ret; 
0x00000000000b94cf: add byte ptr [rbx + 0x30178916], cl; in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x000000000008f14f: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000b6a9f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b78df: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b548f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000bcb6f: add byte ptr [rbx + 0x39082444], cl; ret 0x840f; 
0x0000000000153d3c: add byte ptr [rbx + 0x418d880c], cl; mov edi, 0x8337e983; clc; sbb cl, byte ptr [rcx + 0x430f41c8]; ret 0xf801; 
0x0000000000026f9b: add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000030e4b: add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000008198f: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000000dbc8f: add byte ptr [rbx + 0x43391843], cl; or al, 0x7c; ret 0x850f; 
0x000000000008c2a8: add byte ptr [rbx + 0x440f02fe], 0xd1; mov dword ptr [rdi], edx; ret; 
0x000000000015abed: add byte ptr [rbx + 0x440f03fb], al; fmul dword ptr [rax - 0x75]; add eax, 0x8a955; call qword ptr [rax + 0x28]; 
0x00000000000b78af: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b613f: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000013aca4: add byte ptr [rbx + 0x45740aff], al; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000a69b8: add byte ptr [rbx + 0x458880c8], al; ret 0xd889; 
0x00000000000cd8bf: add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000cd8ef: add byte ptr [rbx + 0x463b0c47], cl; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b6a6f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b546f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x00000000001784cf: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000017b87f: add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x000000000013616c: add byte ptr [rbx + 0x4804c244], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000155dfb: add byte ptr [rbx + 0x48082444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e13cd: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044268: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x00000000000e1682: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e15f2: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x18; ret; 
0x000000000014e368: add byte ptr [rbx + 0x48102444], cl; lea edx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001885cf: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b789f: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 4]; ret; 
0x00000000000ba60a: add byte ptr [rbx + 0x48], bl; cmove eax, edx; ret; 
0x00000000000a6d61: add byte ptr [rbx + 0x48], bl; mov dword ptr [rdi], edx; ret; 
0x00000000000821fe: add byte ptr [rbx + 0x48], bl; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000d94f5: add byte ptr [rbx + 0x490f01ea], al; ret 0xc083; 
0x00000000001660af: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165eaf: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165caf: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016b06f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000000eaeb2: add byte ptr [rbx + 0x5b010447], al; pop rbp; pop r12; ret; 
0x0000000000064255: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000044fca: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000039c48: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000044481: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d2ff: add byte ptr [rbx + 0x5e8c107], cl; and eax, 1; ret; 
0x000000000002d772: add byte ptr [rbx + 0x634807e2], al; ror byte ptr [rax + 0x39], cl; ret 0x8d0f; 
0x0000000000144e91: add byte ptr [rbx + 0x634807e6], al; add al, 0xb1; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000b5b59: add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000032c75: add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000010b8ff: add byte ptr [rbx + 0x6890447], cl; xor eax, eax; ret; 
0x0000000000154e47: add byte ptr [rbx + 0x748d4802], cl; and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154fa7: add byte ptr [rbx + 0x748d4806], cl; and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000e1376: add byte ptr [rbx + 0x75c08500], cl; adc eax, dword ptr [rbp + 0x31]; sar byte ptr [rax + 0x3d], cl; syscall; 
0x000000000011e0b6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x130]; syscall; 
0x0000000000113446: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x13]; syscall; 
0x0000000000048ae6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x13e]; syscall; 
0x00000000001134e6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x14]; syscall; 
0x00000000001175c6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x1a]; syscall; 
0x00000000000e15b6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x22]; syscall; 
0x00000000000e1636: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x23]; syscall; 
0x000000000011eb16: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x2a]; syscall; 
0x000000000011ea46: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x2b]; syscall; 
0x000000000011ef56: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x2e]; syscall; 
0x000000000011edf6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x2f]; syscall; 
0x0000000000114216: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x4a]; syscall; 
0x00000000001142c6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x4b]; syscall; 
0x000000000010d7d6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x55]; syscall; 
0x000000000010d016: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 1]; syscall; 
0x000000000010d666: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 3]; syscall; 
0x00000000001116e6: add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 7]; syscall; 
0x00000000001120c5: add byte ptr [rbx + 0x75c08500], cl; and al, 0x49; mov edx, ecx; mov eax, 0x146; syscall; 
0x000000000010d486: add byte ptr [rbx + 0x75c08500], cl; and edi, dword ptr [rax + 0x48]; syscall; 
0x0000000000112bf6: add byte ptr [rbx + 0x75c08500], cl; and edi, dword ptr [rdx + 1]; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000012c79e: add byte ptr [rbx + 0x75c08500], cl; cmp edi, dword ptr [rax + 0xe6]; syscall; 
0x000000000010ce45: add byte ptr [rbx + 0x75c08500], cl; mov eax, 0x101; syscall; 
0x00000000001117b3: add byte ptr [rbx + 0x75c08500], cl; mov r8d, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x0000000000044216: add byte ptr [rbx + 0x75c08500], cl; sbb edi, dword ptr [rsi + 8]; mov eax, 0x82; syscall; 
0x00000000001140e8: add byte ptr [rbx + 0x75c08500], cl; xor dword ptr [rcx - 0x77], ecx; fdivr dword ptr [rax + 0x10e]; syscall; 
0x000000000008ff9f: add byte ptr [rbx + 0x78920c8], al; mov rax, qword ptr [rip + 0x153ec4]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008c1af: add byte ptr [rbx + 0x8042507], cl; add byte ptr [rax], al; ret; 
0x000000000010c254: add byte ptr [rbx + 0x87702fe], al; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000014f5a5: add byte ptr [rbx + 0x88b3], cl; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x28]; 
0x0000000000160c9f: add byte ptr [rbx + 0x8971a05], cl; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0x89617]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000002a1c1: add byte ptr [rbx + 0x941f8e0], al; ret 0x8944; 
0x00000000001189a4: add byte ptr [rbx + 0x94801e2], al; ret 0x8948; 
0x000000000012bbff: add byte ptr [rbx + 0xbe7ba05], cl; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6f7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b80f: add byte ptr [rbx + 0xbebaa05], cl; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe9ff]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000008dd03: add byte ptr [rbx + 0xc08b], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x00000000001205b0: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0xc7c3e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000001172af: add byte ptr [rbx + 0xcd09205], cl; add byte ptr [rbp - 0x76f98b01], al; cmp eax, 0xcd088; ret; 
0x0000000000042a8f: add byte ptr [rbx + 0xd102444], cl; add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x000000000014c851: add byte ptr [rbx + 0xe07e83b], cl; cld; jmp qword ptr [rsi - 0x7d]; 
0x00000000001016d0: add byte ptr [rbx + 0xe66110d], cl; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x000000000016b71f: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b6af: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b63f: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000000901f6: add byte ptr [rbx + 0xf8920c9], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008a2ef: add byte ptr [rbx + 0xf89cfe1], al; ret; 
0x000000000014cdf6: add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x00000000000e3746: add byte ptr [rbx + rax*4 + 0x38], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000d2428: add byte ptr [rbx + rcx*4 + 0x15], cl; and byte ptr [rbp + 0x11], dl; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015abe5: add byte ptr [rbx + rcx*4 + 0x18], ah; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x000000000009a607: add byte ptr [rbx + rcx*4 + 0x41], cl; or byte ptr [rax - 0x75], cl; sbb byte ptr [r9 - 0x7d], al; ret 0x4901; 
0x0000000000056bbc: add byte ptr [rbx + rcx*4 + 0x45], cl; or byte ptr [rbx + rcx*4 + 0x4d], cl; add byte ptr [rbp + 0x39], cl; ret 0x860f; 
0x0000000000108434: add byte ptr [rbx + rcx*4 + 0x54], cl; and al, 0x30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000014928a: add byte ptr [rbx + rcx*4 + 0x56], cl; sbb byte ptr [rcx + 0x31], cl; ror byte ptr [rbx + rcx*4 + 0x5e], 1; adc byte ptr [rbp + 0x31], cl; ret 0x314d; 
0x0000000000058547: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000056887: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000095755: add byte ptr [rbx + rcx*4 + 0x78], cl; sbb byte ptr [rax - 0x73], cl; and byte ptr [r9 + 0x39], cl; ret 0x850f; 
0x000000000011ae88: add byte ptr [rbx + rcx*4 + 0x7d], cl; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000d2631: add byte ptr [rbx + rcx*4 + 5], cl; call qword ptr [rdx + 0x11]; 
0x000000000006f7f5: add byte ptr [rbx + rcx*4 - 0x5b], cl; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x00000000001087af: add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x90; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000006f4d2: add byte ptr [rbx + rcx*4 - 0x6e], cl; add qword ptr [rax], rax; add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x0000000000054905: add byte ptr [rbx + rcx*4 - 0x7c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b44; 
0x000000000010dae9: add byte ptr [rbx + rdi + 0x34], cl; and al, 0xf; xchg eax, esp; ret 0x2044; 
0x000000000015456f: add byte ptr [rbx - 0x138afe08], al; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax]; 
0x0000000000087258: add byte ptr [rbx - 0x14f3db8c], cl; ret 0x5590; 
0x00000000000f3cdf: add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x000000000015639f: add byte ptr [rbx - 0x18], dl; fidiv dword ptr [rdi - 0x74b70001]; cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000154537: add byte ptr [rbx - 0x1976b7fa], cl; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000006f45a: add byte ptr [rbx - 0x1f7cfe10], al; add dword ptr [rax - 0x5b77b], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000111379: add byte ptr [rbx - 0x2117c385], cl; ret 0xffff; 
0x0000000000129efd: add byte ptr [rbx - 0x2b4417c8], cl; int1; jmp qword ptr [rsi + 0x66]; 
0x00000000000e44f2: add byte ptr [rbx - 0x2e74b], cl; inc dword ptr [rbx - 0x30773]; call qword ptr [rax]; 
0x00000000000a6a79: add byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x000000000014f386: add byte ptr [rbx - 0x37f0efc0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014f3be: add byte ptr [rbx - 0x37f0f3c0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014f369: add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000115b99: add byte ptr [rbx - 0x387c0f19], al; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000151cb5: add byte ptr [rbx - 0x39], bl; add eax, 0x97f5f; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151bd5: add byte ptr [rbx - 0x39], bl; add eax, 0x9803f; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151af5: add byte ptr [rbx - 0x39], bl; add eax, 0x9811f; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151a2d: add byte ptr [rbx - 0x39], bl; add eax, 0x981e7; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000012befd: add byte ptr [rbx - 0x39], bl; add eax, 0xbe4b7; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000086ddf: add byte ptr [rbx - 0x3b7cb7ff], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000048bd9: add byte ptr [rbx - 0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x000000000011b7ab: add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x0000000000121447: add byte ptr [rbx - 0x3fcecf11], al; cmp edi, 9; setbe al; ret; 
0x0000000000155e9f: add byte ptr [rbx - 0x47fbd7b9], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000015154a: add byte ptr [rbx - 0x48], bl; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000012119b: add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012165b: add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012135b: add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001212cb: add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012151b: add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001215bb: add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001216eb: add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012181b: add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000001213eb: add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012122b: add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012147b: add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000013e38a: add byte ptr [rbx - 0x49f0fe0d], al; ret; 
0x000000000007e3a7: add byte ptr [rbx - 0x4ff43], al; call qword ptr [rax]; 
0x00000000000eca9f: add byte ptr [rbx - 0x57cfd1e], al; add dword ptr [rcx], ebx; rol byte ptr [rbx - 0x3f7cfd20], 8; ret; 
0x0000000000065289: add byte ptr [rbx - 0x61f43], al; call qword ptr [rax]; 
0x0000000000064f5e: add byte ptr [rbx - 0x63773], al; inc dword ptr [rcx + rbp*8]; ret; 
0x0000000000077633: add byte ptr [rbx - 0x67b7df18], al; movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000eaabf: add byte ptr [rbx - 0x688bfb1e], al; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000013b3f7: add byte ptr [rbx - 0x708afe06], al; mov eax, 0xffffffff; ret; 
0x00000000000ef354: add byte ptr [rbx - 0x72bed3af], cl; add dword ptr [rcx], edi; ret 0x8e0f; 
0x0000000000047cf4: add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000001784df: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000017419f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x0000000000089fdd: add byte ptr [rbx - 0x760e76cd], cl; ret 0xe181; 
0x000000000014f346: add byte ptr [rbx - 0x7637f100], cl; ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x0000000000190f9f: add byte ptr [rbx - 0x76b7c017], al; ret 0xd348; 
0x0000000000103e27: add byte ptr [rbx - 0x76b7fd07], al; ret 0x940f; 
0x000000000002e906: add byte ptr [rbx - 0x76bef808], al; ret; 
0x000000000005f51c: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000aac54: add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x000000000011278f: add byte ptr [rbx - 0x7a3fcee9], cl; sar byte ptr [rax + 8], cl; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000720cc: add byte ptr [rbx - 0x7af09108], al; add eax, 0x31000018; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000000f0efc: add byte ptr [rbx - 0x7af7db84], cl; push qword ptr [rbx - 0xa]; ret; 
0x000000000018fb66: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000fc524: add byte ptr [rbx - 0x7bf0f002], al; ret 0; 
0x000000000003b159: add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000003e8ff: add byte ptr [rbx - 0x7bf0fc07], al; ret 0x29; 
0x000000000003c74b: add byte ptr [rbx - 0x7bf0fc07], al; ret 0xe; 
0x00000000000401bb: add byte ptr [rbx - 0x7bf0fc07], al; xchg eax, esi; or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe07], al; ret; 
0x000000000003a7e0: add byte ptr [rbx - 0x7bf0fe07], al; jmp qword ptr [rax]; 
0x00000000000401c4: add byte ptr [rbx - 0x7bf0fe07], al; ret; 
0x00000000000ef38c: add byte ptr [rbx - 0x7cb7fd16], al; ret 0xeb02; 
0x0000000000186a73: add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000011789f: add byte ptr [rbx - 0x7d], dl; call qword ptr [rcx]; 
0x00000000001926ec: add byte ptr [rbx], al; add byte ptr [rax], al; lea rdx, [rip + 0x275c9]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000086045: add byte ptr [rbx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ce9ab: add byte ptr [rbx], cl; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000000cea99: add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000121b17: add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012194f: add byte ptr [rcx + 0x107223c6], cl; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000013b35f: add byte ptr [rcx + 0x11894dd0], cl; ret; 
0x00000000000d8e99: add byte ptr [rcx + 0x146348c2], cl; xchg eax, edi; add rdx, rdi; jmp rdx; 
0x0000000000055f77: add byte ptr [rcx + 0x146348c2], cl; xchg eax, esi; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x000000000014707b: add byte ptr [rcx + 0x146349c1], cl; mov byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x00000000000a717f: add byte ptr [rcx + 0x146349c2], cl; nop; add rdx, r8; jmp rdx; 
0x000000000011436f: add byte ptr [rcx + 0x1969befa], cl; adc ch, byte ptr [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000014bd82: add byte ptr [rcx + 0x1b802], cl; add byte ptr [rax], al; ret; 
0x00000000000e15d8: add byte ptr [rcx + 0x22b8c7], cl; add byte ptr [rax], al; syscall; 
0x000000000007d8cc: add byte ptr [rcx + 0x29], cl; ret; 
0x0000000000088bbf: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x000000000017618f: add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000f0894: add byte ptr [rcx + 0x39], al; ret 0x2f73; 
0x0000000000139b20: add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x00000000000f6f8b: add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x00000000000f8013: add byte ptr [rcx + 0x39], al; ret; 
0x00000000000d0b80: add byte ptr [rcx + 0x39], cl; int 0xf; pushfq; ret 0x3949; 
0x0000000000093401: add byte ptr [rcx + 0x39], cl; ret 0x2977; 
0x000000000009f22f: add byte ptr [rcx + 0x39], cl; ret; 
0x00000000000e34f9: add byte ptr [rcx + 0x39], cl; sal byte ptr [rdi + rbp*8 + 0x49], 1; cmp eax, 0x54190100; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000014fbfc: add byte ptr [rcx + 0x3b84843], cl; add byte ptr [rax], al; add cl, ch; ret 0xfff8; 
0x0000000000160ddc: add byte ptr [rcx + 0x3eb8c7], cl; add byte ptr [rax], al; syscall; 
0x0000000000158115: add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x00000000000d8e54: add byte ptr [rcx + 0x46348ce], cl; mov bh, 0x48; add eax, edi; jmp rax; 
0x00000000000e2ff8: add byte ptr [rcx + 0x46348f6], cl; mov dl, 0x48; add eax, edx; jmp rax; 
0x0000000000114824: add byte ptr [rcx + 0x480575d0], cl; add esp, 0x58; ret; 
0x0000000000156212: add byte ptr [rcx + 0x480675d0], cl; add esp, 0x10; pop rbx; ret; 
0x000000000015077a: add byte ptr [rcx + 0x480675d0], cl; sub esp, -0x80; pop rbx; ret; 
0x000000000014d425: add byte ptr [rcx + 0x480c2444], cl; mov eax, dword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x0000000000113d15: add byte ptr [rcx + 0x480d75d0], cl; add esp, 0x28; ret; 
0x00000000001131eb: add byte ptr [rcx + 0x481175d8], cl; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000150e6d: add byte ptr [rcx + 0x481575d0], cl; add esp, 0x10; pop rbx; ret; 
0x000000000015e602: add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x0000000000113026: add byte ptr [rcx + 0x482275d0], cl; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000001515ce: add byte ptr [rcx + 0x482475d8], cl; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000815cd: add byte ptr [rcx + 0x485575f0], cl; add esp, 0xd0; pop rbx; ret; 
0x000000000008176c: add byte ptr [rcx + 0x485675f0], cl; add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000124110: add byte ptr [rcx + 0x486275d8], cl; add esp, 0x260; pop rbx; pop rbp; pop r12; ret; 
0x000000000014d609: add byte ptr [rcx + 0x487f75d0], cl; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d333e: add byte ptr [rcx + 0x48d23102], cl; add esp, 8; mov rax, rdx; ret; 
0x0000000000101785: add byte ptr [rcx + 0x51], al; mov r9d, 1; call 0x101090; add rsp, 0x18; ret; 
0x00000000000ff2f5: add byte ptr [rcx + 0x51], al; mov r9d, edx; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000101745: add byte ptr [rcx + 0x51], al; xor r9d, r9d; call 0x101090; add rsp, 0x18; ret; 
0x00000000001016d6: add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x0000000000117d7a: add byte ptr [rcx + 0x5b], bl; pop rbp; pop r12; ret; 
0x00000000000356cd: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop r15; jmp rax; 
0x00000000000a0dab: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; ret; 
0x0000000000133e7b: add byte ptr [rcx + 0x5c], al; pop r13; ret; 
0x00000000000ce8a8: add byte ptr [rcx + 0x5c], al; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x000000000012c89b: add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x00000000000dbb79: add byte ptr [rcx + 0x5d], al; pop r14; jmp rax; 
0x0000000000163a0e: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018aeec: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000b52e8: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000610d8: add byte ptr [rcx + 0x63], cl; ret 0x8d49; 
0x000000000005b5c2: add byte ptr [rcx + 0x63], cl; ret 0xf631; 
0x000000000013b157: add byte ptr [rcx + 0x63], cl; ret; 
0x0000000000075227: add byte ptr [rcx + 0x63], cl; ror dword ptr [rax - 0x7d], 1; ret 0xe920; 
0x00000000000e3a0f: add byte ptr [rcx + 0x71e9e8df], cl; std; dec dword ptr [rax - 0x77]; ret 0x1e9; 
0x00000000000352bf: add byte ptr [rcx + 0x7fe083f8], cl; ret; 
0x00000000000a6fda: add byte ptr [rcx + 0xc6349c1], cl; mov dword ptr [rcx + rax - 0x37], ecx; jmp rcx; 
0x000000000010198f: add byte ptr [rcx + 0xcb], bh; mov eax, ecx; syscall; 
0x000000000010198e: add byte ptr [rcx + 0xcb], dil; mov eax, ecx; syscall; 
0x0000000000044020: add byte ptr [rcx + 0xd], bh; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000004327f: add byte ptr [rcx + 0xe2], al; or byte ptr [rcx + 0x66fc2454], 0xf; outsb dx, byte ptr [rsi]; and al, 0xfc; ret; 
0x000000000012c70f: add byte ptr [rcx + 0xe4], bh; mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000012c70e: add byte ptr [rcx + 0xe4], dil; mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000011da90: add byte ptr [rcx + 0xf182474], cl; sub dword ptr [rsp + 0x20], eax; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x000000000014f2f8: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], edx; ret; 
0x000000000014e9cd: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000600bf: add byte ptr [rcx + 0xf], al; mov dh, 0x50; or al, 0xf6; ret 0xf01; 
0x000000000007a9ec: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x000000000007a9aa: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x84; ror byte ptr [rdi], cl; mov byte ptr [rsi - 0x9ffffe3], al; ret 0xf40; 
0x000000000007a980: add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x00000000000293e9: add byte ptr [rcx + 0xf], al; xchg eax, ebp; mov byte ptr [rcx + 0xf], 0x95; ret; 
0x00000000000a10f0: add byte ptr [rcx + 0xf], al; xchg eax, ebp; ret 0x3948; 
0x0000000000190de8: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000006f4d9: add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x00000000000b9c5f: add byte ptr [rcx + 1], cl; ret; 
0x000000000010bd9a: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x0000000000194410: add byte ptr [rcx + rbp + 0x48], dh; mov dword ptr [rsp], eax; call 0x194c20; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000011264c: add byte ptr [rcx + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000012d75e: add byte ptr [rcx + rbp*8], al; mov ebp, dword ptr [rdi - 0xb]; call qword ptr [rax - 0x18]; 
0x000000000012d75d: add byte ptr [rcx + rbp*8], r8b; mov ebp, dword ptr [rdi - 0xb]; call qword ptr [rax - 0x18]; 
0x00000000000eaee3: add byte ptr [rcx + rcx*4 + 0x20], al; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000009c7f7: add byte ptr [rcx + rcx*4 + 0x23], cl; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000013e5f6: add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x1f0f; 
0x000000000013efba: add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x33e9; 
0x000000000013e4f2: add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xf41; 
0x000000000013f0f8: add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xfee9; 
0x0000000000033752: add byte ptr [rcx + rcx*4 + 0x25], al; ret 0x1b30; 
0x000000000013ee90: add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8944; 
0x000000000013f08e: add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x93e9; 
0x00000000000de2a1: add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x00000000000de36b: add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret; 
0x000000000013f012: add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x43e9; 
0x0000000000146695: add byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x18; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x0000000000096287: add byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x18; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x00000000001187dd: add byte ptr [rcx + rcx*4 + 0x58], cl; adc byte ptr [rax - 0x77], cl; or byte ptr [r9 - 0x75], r9b; or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x00000000000ced0d: add byte ptr [rcx + rcx*4 + 0x64], cl; and al, 0x50; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000000a7037: add byte ptr [rcx + rcx*4 + 7], al; add rax, rdi; ret; 
0x00000000000dd513: add byte ptr [rcx + rcx*4 - 0x10], cl; call rax; 
0x0000000000146993: add byte ptr [rcx + rcx*4 - 0x11], al; call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000015338a: add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x000000000012766e: add byte ptr [rcx + rcx*4 - 0x12], cl; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000011fe90: add byte ptr [rcx + rcx*4 - 0x12], cl; mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x000000000008e752: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000bc14e: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000075ae5: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075710: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000007535a: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000bc43e: add byte ptr [rcx + rcx*4 - 0x16], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000014c667: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000153598: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000028364: add byte ptr [rcx + rcx*4 - 0x19], cl; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000003619d: add byte ptr [rcx + rcx*4 - 0x19], cl; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000867b5: add byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000145905: add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000008d55f: add byte ptr [rcx + rcx*4 - 0x1d], cl; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d35f: add byte ptr [rcx + rcx*4 - 0x1e], al; mov eax, 0x10d; syscall; 
0x000000000011e0e4: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x0000000000113474: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000113514: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x000000000011eb44: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ef84: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee24: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x0000000000048b15: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175f5: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x0000000000111715: add byte ptr [rcx + rcx*4 - 0x1e], al; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000011ea74: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000010d044: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000010cfa4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x00000000001129ab: add byte ptr [rcx + rcx*4 - 0x30], al; mov r12d, dword ptr fs:[r8]; syscall; 
0x000000000008a605: add byte ptr [rcx + rcx*4 - 0x30], al; pop rbx; ret; 
0x00000000000e1896: add byte ptr [rcx + rcx*4 - 0x31], cl; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015b50f: add byte ptr [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b5cf: add byte ptr [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000007b427: add byte ptr [rcx + rcx*4 - 0x36], cl; mov qword ptr [rbp - 0x8e8], r9; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000008c5ef: add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, rbx; mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x000000000011fd9c: add byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000011ff25: add byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, r14d; syscall; 
0x000000000008ec9e: add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000008571d: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x0000000000094d5e: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018ad42: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000001863cf: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x000000000014befd: add byte ptr [rcx + rcx*4 - 0x5d], al; test al, 0; add byte ptr [rax], al; bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x00000000000a1977: add byte ptr [rcx + rcx*4 - 0x6c], al; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x00000000000834ec: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000bc246: add byte ptr [rcx + rcx*4 - 0xe], cl; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000bbe54: add byte ptr [rcx + rcx*4 - 0xe], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000086f76: add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x000000000009bdb5: add byte ptr [rcx + rcx*4 - 1], cl; mov rdx, rbx; mov rsi, r12; call rax; 
0x000000000012700f: add byte ptr [rcx + rcx*4 - 2], cl; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x0000000000146d0e: add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, qword ptr [rsp]; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000001526df: add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000009b19d: add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r13; call rax; 
0x0000000000133c0d: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000014f5c0: add byte ptr [rcx + rcx*4 - 9], cl; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014f5ab: add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x28]; 
0x0000000000028416: add byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x0000000000047c5f: add byte ptr [rcx - 0x1086608], cl; shl rdx, 0x20; or rax, rdx; ret; 
0x000000000010cd4c: add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x0000000000155297: add byte ptr [rcx - 0x1976b718], cl; mov rdi, r12; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x000000000010d7ff: add byte ptr [rcx - 0x2076b712], cl; mov edx, eax; mov eax, 0x55; syscall; 
0x0000000000042c0f: add byte ptr [rcx - 0x2403db84], cl; and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x000000000014bd8f: add byte ptr [rcx - 0x39], al; add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000010674d: add byte ptr [rcx - 0x39], cl; add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005029e: add byte ptr [rcx - 0x39], cl; ret 0xc001; 
0x000000000004d50e: add byte ptr [rcx - 0x39], cl; ret 0xfc01; 
0x000000000004a48e: add byte ptr [rcx - 0x39], cl; ret 0xff81; 
0x000000000009d7cd: add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000115d0b: add byte ptr [rcx - 0x3a], al; inc dword ptr [rax]; ret; 
0x0000000000112c35: add byte ptr [rcx - 0x3f76be21], cl; mov eax, 0x10; syscall; 
0x000000000010b7b2: add byte ptr [rcx - 0x3fcef790], cl; mov dword ptr [rbx + 4], edx; add rsp, 0x10; pop rbx; ret; 
0x000000000010b90f: add byte ptr [rcx - 0x3fcefb89], cl; ret; 
0x000000000013d310: add byte ptr [rcx - 0x41], al; add eax, 0x83000000; ret; 
0x00000000000636a4: add byte ptr [rcx - 0x41], cl; or dword ptr [rcx], esp; test byte ptr [rax], dl; or byte ptr [rcx], spl; test byte ptr [rax - 0x77], cl; ret; 
0x00000000000507f2: add byte ptr [rcx - 0x45], al; adc r8d, dword ptr [r8]; add byte ptr [rbp + 0x29], cl; ret; 
0x000000000004416f: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000044025: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000010d68b: add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000190776: add byte ptr [rcx - 0x47], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000001939b7: add byte ptr [rcx - 0x47], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x0000000000065263: add byte ptr [rcx - 0x6777b], cl; jmp qword ptr [rsi + 0xf]; 
0x00000000000e8a70: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x00000000001933f5: add byte ptr [rcx - 0x73], cl; push rcx; add edi, esi; ret 0x7ffe; 
0x000000000013e8ec: add byte ptr [rcx - 0x74b7fff9], bl; mov esp, 0x8024; add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x000000000014bddf: add byte ptr [rcx - 0x75], al; cmp byte ptr [rax + 0xf000000], 0xc8; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000fc51d: add byte ptr [rcx - 0x75], al; mov bh, 0x80; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0f002], al; ret 0; 
0x00000000001195ec: add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 2; 
0x000000000014f06f: add byte ptr [rcx - 0x75], cl; jo 0x14f0c1; mov edi, esp; call qword ptr [rax + 0x20]; 
0x000000000015250a: add byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x000000000015264f: add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x28]; 
0x00000000001524ef: add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x000000000015d805: add byte ptr [rcx - 0x75], cl; or byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rsi + 0x48], 0x8b; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x0000000000026bf6: add byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7b], r9b; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x0000000000091204: add byte ptr [rcx - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000008679f: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000000920c8: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000014c660: add byte ptr [rcx - 0x75], cl; xchg al, dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x00000000000f5567: add byte ptr [rcx - 0x762e7638], cl; ret 0x9066; 
0x00000000000a7107: add byte ptr [rcx - 0x776b7f1], cl; ret; 
0x00000000000bdfec: add byte ptr [rcx - 0x77], al; ret 0x4489; 
0x000000000008a63a: add byte ptr [rcx - 0x77], al; ret 0x7ce9; 
0x00000000000a1c8b: add byte ptr [rcx - 0x77], al; ret 0x8348; 
0x00000000000a112e: add byte ptr [rcx - 0x77], al; ret 0x860f; 
0x00000000000a197f: add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x00000000000326e8: add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x0000000000026626: add byte ptr [rcx - 0x77], al; ret; 
0x000000000013b0af: add byte ptr [rcx - 0x77], al; rol dword ptr [rax - 0x69f0fe07], cl; ret 0x8341; 
0x000000000011dccf: add byte ptr [rcx - 0x77], al; sar byte ptr [rax + 0x121], cl; mov edx, 8; syscall; 
0x000000000011ae84: add byte ptr [rcx - 0x77], cl; add byte ptr [r11 + rcx*4 + 0x7d], r9b; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000007edc9: add byte ptr [rcx - 0x77], cl; int1; jmp rax; 
0x000000000007d144: add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0bc: add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd4: add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec4: add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000001605c4: add byte ptr [rcx - 0x77], cl; int1; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000007e161: add byte ptr [rcx - 0x77], cl; int1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000051f0d: add byte ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x0000000000077d84: add byte ptr [rcx - 0x77], cl; ret 0x3145; 
0x000000000019262e: add byte ptr [rcx - 0x77], cl; ret 0x8166; 
0x000000000002ae21: add byte ptr [rcx - 0x77], cl; ret 0xf685; 
0x000000000004bfb0: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000c0dd7: add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000127147: add byte ptr [rcx - 0x7ae7dbbc], cl; ror byte ptr [rdi], 0x8e; pushfq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000194af3: add byte ptr [rcx - 0x7b], cl; ret 0x7775; 
0x000000000007d562: add byte ptr [rcx - 0x7d], al; call qword ptr [rbx + 0xf]; 
0x00000000001486e6: add byte ptr [rcx - 0x7d], al; jmp qword ptr [rbx + 0x76]; 
0x0000000000077b0d: add byte ptr [rcx - 0x7d], al; out dx, al; add dword ptr [rax - 0x50f43], eax; jmp qword ptr [rax]; 
0x000000000007b8f7: add byte ptr [rcx - 0x7d], al; out dx, al; add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x000000000007af8b: add byte ptr [rcx - 0x7d], al; out dx, al; add dword ptr [rbx - 0x8f77b], ecx; inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x000000000004b226: add byte ptr [rcx - 0x7d], al; ret 0x4418; 
0x000000000004e26a: add byte ptr [rcx - 0x7d], al; ret 0x4835; 
0x000000000005b023: add byte ptr [rcx - 0x7d], al; ret 0x4840; 
0x00000000000be3e0: add byte ptr [rcx - 0x7d], al; ret 0x4c35; 
0x00000000000fc9d7: add byte ptr [rcx - 0x7d], al; ret; 
0x00000000001914dc: add byte ptr [rcx - 0x7d], al; test dword ptr [rcx], 0x40003d; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8441; 
0x0000000000120b9c: add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x000000000009e901: add byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x00000000000c027f: add byte ptr [rcx - 0x7d], cl; ret 0x4104; 
0x000000000006f575: add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x00000000000ea14f: add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x00000000000e73b7: add byte ptr [rcx - 0x7d], cl; ret 0x4c04; 
0x000000000016105f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000009e88f: add byte ptr [rcx - 0x7d], cl; ret 0xbd01; 
0x00000000000773d4: add byte ptr [rcx - 0x7d], cl; ret 0xbe01; 
0x00000000000a774f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000006f544: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000006f52d: add byte ptr [rcx - 0x7d], cl; rol dword ptr [rcx + rcx*2], 1; ret; 
0x000000000002b1a5: add byte ptr [rcx - 0x7d], cl; stc; add al, 0x74; xor cl, byte ptr [rcx - 0x73]; add cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000077495: add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000000932fe: add byte ptr [rcx - 0x80], al; clc; add dword ptr [rdi + rcx + 0x44], eax; ret 0xf641; 
0x00000000001080f9: add byte ptr [rcx - 0x80], al; jmp qword ptr [rdi]; 
0x0000000000108103: add byte ptr [rcx - 0x80], al; jmp qword ptr [rdx]; 
0x0000000000185ffb: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000012ad97: add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000129641: add byte ptr [rcx - 0xa], al; and al, 0x18; add dword ptr [rdi], ecx; test byte ptr [rdx - 0x17ffffff], ch; lodsd eax, dword ptr [rsi]; ret; 
0x000000000002a6e9: add byte ptr [rcx - 0xa], al; ret; 
0x0000000000148bed: add byte ptr [rcx - 0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x0000000000150713: add byte ptr [rcx - 1], al; adc bl, byte ptr [rdx + 0x31]; rcr byte ptr [rcx - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x000000000008fbf1: add byte ptr [rcx - 1], al; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000010197e: add byte ptr [rcx - 9], al; fsub dword ptr [rsp + rax*2 - 0x77]; add byte ptr [rax - 1], bh; ret; 
0x00000000000a27b1: add byte ptr [rcx - 9], al; ret 0; 
0x00000000000a27a4: add byte ptr [rcx - 9], al; ret 0xf800; 
0x00000000000c1a53: add byte ptr [rcx - 9], cl; fmul dword ptr [rcx - 0x39]; ret 0xffff; 
0x00000000000aae22: add byte ptr [rcx - 9], cl; ret 1; 
0x00000000000aae48: add byte ptr [rcx - 9], cl; ret 2; 
0x000000000015d3ca: add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000009ce86: add byte ptr [rcx], 0; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x00000000000d0695: add byte ptr [rcx], al; add byte ptr [rax], al; add al, ch; adc dword ptr [rbx - 9], esp; dec dword ptr [rax - 0x77]; ret; 
0x0000000000093536: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x150d4e; ret; 
0x0000000000093509: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x150d73; ret; 
0x00000000000934e9: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x150d8b; ret; 
0x0000000000147c72: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000159725: add byte ptr [rcx], al; add byte ptr [rax], al; add cl, ch; mov ecx, 0xe8fffffe; fcomp qword ptr [rdx - 3]; jmp qword ptr [rsi + 0x66]; 
0x0000000000035489: add byte ptr [rcx], al; add byte ptr [rax], al; and eax, esi; ret; 
0x000000000011598e: add byte ptr [rcx], al; add byte ptr [rax], al; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x0000000000147acd: add byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbx]; 
0x0000000000112d03: add byte ptr [rcx], al; add byte ptr [rax], al; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000006275d: add byte ptr [rcx], al; add byte ptr [rax], al; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000013acea: add byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000000b9e6f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x00000000000b9f0f: add byte ptr [rcx], al; add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000000475b7: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011c153: add byte ptr [rcx], al; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000101bf2: add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x000000000012ae1d: add byte ptr [rcx], al; mov qword ptr [rbp - 0x68], rax; movdqu xmm7, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000014f5c5: add byte ptr [rcx], al; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014589a: add byte ptr [rcx], al; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000351d4: add byte ptr [rcx], al; movzx eax, ax; ret; 
0x0000000000155eaf: add byte ptr [rcx], al; push rdi; sub byte ptr [rax + 1], bh; ret; 
0x000000000005490d: add byte ptr [rcx], al; ret 0x8b44; 
0x00000000000547af: add byte ptr [rcx], al; ret 0x8b4c; 
0x00000000000929ed: add byte ptr [rcx], al; ret; 
0x00000000000f54eb: add byte ptr [rcx], bh; ret 0x2476; 
0x00000000000eaef7: add byte ptr [rcx], bh; ret 0x840f; 
0x00000000000c88e7: add byte ptr [rcx], bh; ret; 
0x000000000012bd8f: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000000d2a8c: add byte ptr [rcx], bh; xlatb; sete al; add eax, 0x16d; ret; 
0x00000000001148ba: add byte ptr [rcx], bl; rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000192d64: add byte ptr [rcx], bl; sal bh, cl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000192f02: add byte ptr [rcx], bl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x00000000000d5c80: add byte ptr [rcx], ch; ret 0x2941; 
0x00000000000d7ccd: add byte ptr [rcx], ch; ret 0x448d; 
0x00000000000d3294: add byte ptr [rcx], ch; ret 0x858b; 
0x00000000000fbd93: add byte ptr [rcx], ch; ret 0x8941; 
0x00000000000da348: add byte ptr [rcx], ch; ret 0x8944; 
0x00000000000d9db6: add byte ptr [rcx], ch; ret 0x8948; 
0x00000000000d7db1: add byte ptr [rcx], ch; ret 0x894c; 
0x00000000000da4f6: add byte ptr [rcx], ch; ret 0x8b48; 
0x00000000000da3f7: add byte ptr [rcx], ch; ret 0x8d41; 
0x00000000000d83b8: add byte ptr [rcx], ch; ret 0x8d44; 
0x00000000000db08f: add byte ptr [rcx], ch; ret 0x8d45; 
0x0000000000113223: add byte ptr [rcx], ch; ret 0xc085; 
0x00000000000d5d07: add byte ptr [rcx], ch; ret 0xc889; 
0x00000000000d6f44: add byte ptr [rcx], ch; ret 0xd089; 
0x00000000000d31ba: add byte ptr [rcx], ch; ret 0xd129; 
0x000000000009d641: add byte ptr [rcx], ch; ret; 
0x00000000000d0dac: add byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0x8341; 
0x0000000000042169: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000089276: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000012f31e: add byte ptr [rcx], cl; clc; bswap eax; ret; 
0x00000000000586c4: add byte ptr [rcx], cl; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042ab2: add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x0000000000093ed6: add byte ptr [rcx], dh; call qword ptr [rdx + 0x48]; 
0x00000000001919d5: add byte ptr [rcx], dh; dec dword ptr [rax + 9]; ret; 
0x0000000000084f2f: add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; clc; ret; 
0x0000000000134ca4: add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000120101: add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000194006: add byte ptr [rcx], dh; dec dword ptr [rcx - 0x7b]; ret 0xf40; 
0x0000000000028dfd: add byte ptr [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x0000000000104b94: add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x00000000001045f0: add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x000000000010474f: add byte ptr [rcx], dh; fild dword ptr [rbx - 0x76b6f506]; ret 0xf44; 
0x0000000000140c59: add byte ptr [rcx], dh; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000083c87: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000034e8b: add byte ptr [rcx], dh; idiv byte ptr [rdi + 1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000452c8: add byte ptr [rcx], dh; imul al; jo 0x4530e; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000146231: add byte ptr [rcx], dh; leave; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000012dfcf: add byte ptr [rcx], dh; leave; mov rax, rcx; ret; 
0x0000000000097996: add byte ptr [rcx], dh; mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x00000000000a0011: add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000000a6d6f: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x48], cl; mov dword ptr [rdi], edx; ret; 
0x00000000000ce814: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x0000000000047486: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000098faf: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], cl; mov rax, rdx; pop r12; ret; 
0x00000000000aa76c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x00000000000720d5: add byte ptr [rcx], dh; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x000000000010c27f: add byte ptr [rcx], dh; rol byte ptr [rbx + 0x97404fa], 0xb8; sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000008763f: add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000015e817: add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf00008], cl; ret 0x1389; 
0x00000000000352cf: add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x0000000000101c0f: add byte ptr [rcx], dh; rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000012c39f: add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], 0xf7; sete al; ret; 
0x000000000014bf44: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x74; and al, 0x30; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000014f5f7: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x74; and al, 0x68; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000013f65c: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 5; ret 0xa47; 
0x000000000009cb91: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000010c4c4: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000000476dc: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x00000000000489bc: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b9f12: add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000018973f: add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x000000000010bb26: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000043ec5: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000102b93: add byte ptr [rcx], dh; ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg eax, esp; ret 0x1589; 
0x00000000000e16fd: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000055e07: add byte ptr [rcx], dh; sar byte ptr [rdi + 2], cl; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000008fb5f: add byte ptr [rcx], dh; shl byte ptr [rbx + rax*4 + 0x7d], 0; sbb eax, 0xe5ebdf74; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000011142d: add byte ptr [rcx], dh; shr al, 0x4b; mov eax, 0x4389ffff; cmp al, 0x85; ror byte ptr [rdi], 0x88; ret; 
0x00000000001569d2: add byte ptr [rcx], dh; shr al, 0x86; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a46cf: add byte ptr [rcx], dh; shr cl, cl; ret 0xfffa; 
0x000000000012df2f: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xf0; ret; 
0x00000000000f6489: add byte ptr [rcx], dh; test byte ptr [rcx + 0x442c244c], 0x29; ret 0x8944; 
0x000000000012eb0e: add byte ptr [rcx], sil; test byte ptr [rax - 0x77], 0xf0; ret; 
0x000000000012f32d: add byte ptr [rdi + 0x10], dh; shl edi, 0x10; movzx eax, si; or eax, edi; bswap eax; ret; 
0x000000000018e382: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000194ae7: add byte ptr [rdi + 0x48], dh; mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret 0x7775; 
0x00000000000c9a57: add byte ptr [rdi + 0x4d], dh; or eax, 0x80000000; mov dword ptr [rdx + 4], ecx; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000001090bf: add byte ptr [rdi + 1], bh; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005619a: add byte ptr [rdi + 2], bh; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000cda04: add byte ptr [rdi + 2], bh; neg eax; ret; 
0x000000000012f186: add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x0000000000190554: add byte ptr [rdi + 9], bh; neg eax; ret; 
0x00000000001019b4: add byte ptr [rdi + rax*8 + 4], ah; and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000011ba46: add byte ptr [rdi + rax*8], ah; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000449b6: add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000042d30: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000011333e: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000999de: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009c606: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000042166: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000008a516: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000027416: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edi; ret; 
0x000000000010cbd6: add byte ptr [rdi + rax*8], ah; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000042106: add byte ptr [rdi + rax*8], ah; sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, rcx; ret; 
0x000000000015d99e: add byte ptr [rdi + rbx + 0x48], dh; mov eax, dword ptr [rip + 0x864b8]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x00000000000e348c: add byte ptr [rdi + rbx*2 + 0x49], dh; cmp eax, 0x2478; mov edx, 0x7f; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x0000000000191546: add byte ptr [rdi + rcx + 0x44], al; ret 0x8548; 
0x00000000000350d4: add byte ptr [rdi + rcx], al; mov bh, 0xc0; ret; 
0x000000000005de03: add byte ptr [rdi + rcx], cl; test byte ptr [rip - 0x17000004], dh; add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x00000000000501a2: add byte ptr [rdi + rcx], cl; test dword ptr [rdx - 0x43000000], ebp; add byte ptr [rax + rax], cl; add cl, ch; ret 0xfffd; 
0x0000000000033962: add byte ptr [rdi + rdi*8], bh; cmovne edx, eax; lea rax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000002beac: add byte ptr [rdi + rsi - 0xa], dh; ret; 
0x000000000012f349: add byte ptr [rdi - 0x2b], dh; shl edi, 8; movzx eax, sil; or eax, edi; bswap eax; ret; 
0x00000000000e18bf: add byte ptr [rdi - 0x48], bl; cmp al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000115991: add byte ptr [rdi - 0x64], bh; mov eax, 0x118; syscall; 
0x00000000000433f8: add byte ptr [rdi], bh; mov dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x000000000010cbd9: add byte ptr [rdi], bl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000026f93: add byte ptr [rdi], ch; lea rdi, [rax + 1]; mov byte ptr [rdi], 0; pop rbx; pop r14; ret; 
0x0000000000026fb1: add byte ptr [rdi], ch; mov byte ptr [rdi], 0; ret; 
0x00000000000ba006: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000871d4: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x000000000016b914: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x4ddde; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012ae2f: add byte ptr [rdi], cl; adc dword ptr [rbp - 0x78], edi; call rcx; 
0x0000000000090ba0: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000014f30a: add byte ptr [rdi], cl; adc dword ptr [rdx], ebx; ret; 
0x000000000014bd12: add byte ptr [rdi], cl; adc dword ptr [rdx], ecx; ret; 
0x000000000014e9fa: add byte ptr [rdi], cl; adc dword ptr [rdx], edx; ret; 
0x000000000014f2ea: add byte ptr [rdi], cl; adc dword ptr [rdx], esp; ret; 
0x000000000010c1a0: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1ac: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000014709a: add byte ptr [rdi], cl; adc dword ptr [rsi + 8], eax; ret; 
0x000000000014706a: add byte ptr [rdi], cl; adc dword ptr [rsi + 8], ecx; ret; 
0x000000000014bc1b: add byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001520fd: add byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x00000000001523ed: add byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x00000000001526b5: add byte ptr [rdi], cl; adc dword ptr [rsp + 0xb8], ebx; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x000000000015261b: add byte ptr [rdi], cl; adc dword ptr [rsp + 0xb8], edx; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000000bfa06: add byte ptr [rdi], cl; add al, ch; ret 0xf755; 
0x0000000000043ea6: add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x000000000012c407: add byte ptr [rdi], cl; add eax, 0x8948d789; ret; 
0x000000000016a836: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000018859f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000188c7f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000018739f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016b86f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000186b0f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000186b1f: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000012b741: add byte ptr [rdi], cl; mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x00000000001559df: add byte ptr [rdi], cl; mov bh, 6; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154ad7: add byte ptr [rdi], cl; mov bh, 6; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010b8cf: add byte ptr [rdi], cl; mov bh, 7; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000090d27: add byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018738f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016b8df: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000187f3f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x0000000000196da7: add byte ptr [rdi], cl; mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x000000000018fa4f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa3f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa0f: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018fa2f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa1f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000000d6b6f: add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000495a7: add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a6287: add byte ptr [rdi], cl; mov dh, 0x74; syscall; 
0x00000000000fbf0f: add byte ptr [rdi], cl; mov dh, 0xbc; and al, 0x18; add dword ptr [rax], eax; add al, ch; ret; 
0x0000000000064d5b: add byte ptr [rdi], cl; mov dh, 0xc0; mov rcx, qword ptr [rbp - 0x620]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e910e: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000064bd3: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000065ce9: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d6af4: add byte ptr [rdi], cl; mov dh, 0xc1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ba64f: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000f8a4a: add byte ptr [rdi], cl; mov dh, 0xd1; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000a89ef: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000181def: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000004189c: add byte ptr [rdi], cl; mov dh, 0xf8; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000000416a6: add byte ptr [rdi], cl; mov dh, 4; or byte ptr [rax - 0x77], cl; ret 0xc085; 
0x0000000000155af7: add byte ptr [rdi], cl; mov dh, 6; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000018282f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000aaecf: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000018254f: add byte ptr [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x000000000018255f: add byte ptr [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000000aac8f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000aac9f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000aac7f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000018256f: add byte ptr [rdi], cl; mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x00000000001824c6: add byte ptr [rdi], cl; mov ebp, 0xea8148c0; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000aacff: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x000000000018259f: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000aacdf: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000018253f: add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000015594f: add byte ptr [rdi], cl; mov edi, 0x748d4806; and al, 4; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000155a67: add byte ptr [rdi], cl; mov esi, 0x748d4806; and al, 4; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000aa79f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000aa7cf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000aa7bf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000aa7af: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000005f8b7: add byte ptr [rdi], cl; push rax; fsub qword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000431d7: add byte ptr [rdi], cl; push rsp; ret; 
0x00000000000f6e87: add byte ptr [rdi], cl; pushfq; ret 0xd108; 
0x00000000000cdae1: add byte ptr [rdi], cl; pushfq; sal bh, 0xd8; cmp ecx, r8d; cmovg eax, edx; ret; 
0x0000000000189fe4: add byte ptr [rdi], cl; pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x00000000000d056d: add byte ptr [rdi], cl; sub dword ptr [rax], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000d0798: add byte ptr [rdi], cl; sub dword ptr [rax], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001503fb: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; call qword ptr [rax + 0x28]; 
0x00000000001516dd: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x30], eax; push r14; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000010babf: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x90], eax; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac7: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xa0], eax; syscall; 
0x0000000000043e7b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e83: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e8b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000176474: add byte ptr [rdi], cl; test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000001102cd: add byte ptr [rdi], cl; test byte ptr [rsi + rdi*8 - 1], cl; jmp qword ptr [rsi + 0x41]; 
0x00000000001504e4: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], eax; add esp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000140f8a: add byte ptr [rdi], cl; test dword ptr [rax - 0x7f000005], esp; mov edi, 0x80; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000010d471: add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ecx; add esp, 0x68; ret; 
0x00000000001117df: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], eax; add esp, 0x40; pop rbx; ret; 
0x000000000010cce7: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], edi; add esp, 0x68; ret; 
0x000000000015553d: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], edx; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013cc4a: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], edx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000101d4d: add byte ptr [rdi], cl; test dword ptr [rbx - 0x7efffffc], ebx; ret 0xffe0; 
0x0000000000146036: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebp; add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000009b4ba: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], esi; add esp, 0x18; ret; 
0x0000000000088ebf: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000090508: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], edx; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000030e3e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x000000000017aa77: add byte ptr [rdi], cl; test dword ptr [rdx - 0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x000000000010ce6c: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000090ce6: add byte ptr [rdi], cl; test ebx, ebp; add byte ptr [rax], al; add al, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000012c9c3: add byte ptr [rdi], cl; test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000090ec6: add byte ptr [rdi], cl; test ebx, esi; add byte ptr [rax], al; add al, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000002707b: add byte ptr [rdi], cl; xchg dword ptr [rcx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000150769: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8b48; 
0x0000000000058fae: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x941; 
0x00000000000ed2eb: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xd201; 
0x000000000014e00a: add byte ptr [rdi], cl; xchg eax, edi; ret; 
0x00000000001813d9: add byte ptr [rdi], cl; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000190cc8: add byte ptr [rdi], cl; xchg eax, esp; ret 0x2041; 
0x0000000000054e3b: add byte ptr [rdi], cl; xchg eax, esp; ret 0x4e9; 
0x00000000001914e5: add byte ptr [rdi], cl; xchg eax, esp; ret 0x8441; 
0x00000000000fdf1f: add byte ptr [rdi], cl; xchg eax, esp; ret 0xd020; 
0x00000000000f6e50: add byte ptr [rdi], cl; xchg eax, esp; ret 0xe2c1; 
0x0000000000028b35: add byte ptr [rdi], cl; xchg eax, esp; ret 0xf4e9; 
0x0000000000140f74: add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000007a887: add byte ptr [rdi], cl; xchg edx, esp; and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000834e7: add byte ptr [rdx + 0x10], bh; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000145c12: add byte ptr [rdx + 0x19], ch; mov rcx, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000e3618: add byte ptr [rdx + 0x20], bh; cmovne rax, rdx; ret; 
0x00000000000b948f: add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x0000000000146168: add byte ptr [rdx + 0x3c], ch; lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000011fd97: add byte ptr [rdx + 0x40], bh; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000017415f: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x00000000000dd69b: add byte ptr [rdx + 0x48], dl; mov edx, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000e8b6f: add byte ptr [rdx + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x000000000011b7a6: add byte ptr [rdx + 0x64], bh; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x00000000000e3524: add byte ptr [rdx + 0x7f], bh; cmovne rax, rdx; ret; 
0x00000000000e3495: add byte ptr [rdx + 0x7f], bh; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x000000000012bdbc: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x000000000011dcd7: add byte ptr [rdx + 8], bh; syscall; 
0x00000000000e5563: add byte ptr [rdx + rbp + 0xf], dh; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x0000000000098907: add byte ptr [rdx + rbx + 0x48], dh; lea edi, [rip + 0x14ecc7]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000092a1d: add byte ptr [rdx + rbx + 0x48], dh; lea edi, [rip + 0x154b39]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000090251: add byte ptr [rdx + rbx + 0x48], dh; lea edi, [rip + 0x157305]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000837ed: add byte ptr [rdx + rbx + 0x48], dh; lea edi, [rip + 0x163d29]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000012c137: add byte ptr [rdx + rbx + 0x48], dh; lea edi, [rip + 0xbc4df]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000a00f3: add byte ptr [rdx + rdx + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000000a0998: add byte ptr [rdx + rdx*8 - 0x38baf0b8], al; ret; 
0x00000000000d2d10: add byte ptr [rdx - 0x3a], al; add al, 0x28; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009e46f: add byte ptr [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000005f566: add byte ptr [rdx - 1], bh; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000055d07: add byte ptr [rdx - 1], bh; mov eax, edx; ret; 
0x000000000015515f: add byte ptr [rdx - 1], bh; mov rsi, r14; mov rdi, rbp; xor eax, eax; call rcx; 
0x0000000000047cbe: add byte ptr [rdx - 1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x0000000000152632: add byte ptr [rdx], al; add byte ptr [rax], al; add bh, bh; ror byte ptr [rcx - 0x75], 1; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x0000000000114f87: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000035537: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000035226: add byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x0000000000145134: add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x0000000000029b8e: add byte ptr [rdx], al; add rsp, 8; ret; 
0x000000000012640d: add byte ptr [rdx], al; call rcx; 
0x0000000000126680: add byte ptr [rdx], al; mov rdx, qword ptr [rsp + 0x10]; mov rsi, r13; xor r15d, r15d; call rax; 
0x0000000000127016: add byte ptr [rdx], al; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x0000000000127675: add byte ptr [rdx], al; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x0000000000035134: add byte ptr [rdx], al; movzx eax, ax; ret; 
0x000000000015aacf: add byte ptr [rdx], bh; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009aa98: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000101769: add byte ptr [rdx], ch; call 0x101680; add rsp, 0x18; ret; 
0x00000000001691b7: add byte ptr [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691b6: add byte ptr [rip + 0x14634900], r8b; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000005a510: add byte ptr [rip + 0x63480000], al; ret 0x8d48; 
0x0000000000042aad: add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000018c4ff: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018c4fe: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018bc32: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011d8b5: add byte ptr [rip - 0x1000], ah; or eax, edx; ret; 
0x0000000000060f4f: add byte ptr [rip - 0x105617], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000082c28: add byte ptr [rip - 0x15000000], al; test eax, 0xe9c68948; sub al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x000000000008fb65: add byte ptr [rip - 0x1a14208c], bl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000062397: add byte ptr [rip - 0x30917], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000053726: add byte ptr [rip - 0x7cb7ad00], al; in al, dx; or al, ch; add r15b, r14b; dec dword ptr [rax - 0x77]; ret; 
0x0000000000026c55: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x0000000000113205: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0x8c; syscall; 
0x0000000000113e65: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xaa; syscall; 
0x000000000010e144: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; mov eax, 0x5c; syscall; 
0x00000000000e2933: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; mov eax, 0x79; syscall; 
0x0000000000112c01: add byte ptr [rsi + 0x5409], bh; mov eax, 0x10; syscall; 
0x0000000000112c30: add byte ptr [rsi + 0x5409], bh; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000001926f6: add byte ptr [rsi + 0x63], cl; and al, 0xa2; add rdx, r12; jmp rdx; 
0x000000000015b0f0: add byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000009be83: add byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop; ret; 
0x000000000010192e: add byte ptr [rsi + 0x7fffffff], bh; mov r10, rdx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x000000000012be77: add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000015e2bd: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000012bdb7: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000151527: add byte ptr [rsi + 0xe], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000b1f51: add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000181401: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx + 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ret 0xf40; 
0x000000000018123d: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x2e]; cmp cl, byte ptr [rax - 0x7d]; ret 0x2910; 
0x000000000018b1f4: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009450c: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; rol byte ptr [rcx + 0xf], 0x11; xor byte ptr [rax + 8], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000ebd31: add byte ptr [rsi + 0xf], ah; jo 0xebd1a; add byte ptr [rax + 1], cl; ret 0xf66; 
0x000000000015609d: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; and al, 0x28; call rdx; 
0x00000000001503f3: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add eax, 0x67f74; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x000000000005ca81: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x25e8; 
0x000000000005ca58: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000009449f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x00000000000439cf: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x77e8; 
0x000000000005f8e3: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc3e8; 
0x0000000000043a59: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xede8; 
0x0000000000043a8e: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000005ca1f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000042dbf: add byte ptr [rsi + 0xf], ah; push rsp; add eax, 0x174fc8; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x0000000000042dc7: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x174fb0; orpd xmm0, xmm1; ret; 
0x00000000000aa6d4: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000000aabac: add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000aabd1: add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000146171: add byte ptr [rsi + 4], bh; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000441df: add byte ptr [rsi + 8], bh; mov eax, 0x7f; syscall; 
0x000000000014d46b: add byte ptr [rsi + 8], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000044244: add byte ptr [rsi + 8], bh; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x0000000000196697: add byte ptr [rsi + rax - 0x17], dh; adc dword ptr [rax], eax; add byte ptr [rax], al; nop; ret; 
0x00000000000937c7: add byte ptr [rsi + rdx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 0x18; ret; 
0x000000000002f0ae: add byte ptr [rsi + rdx*2 - 0xa], dh; ret; 
0x000000000002f0ad: add byte ptr [rsi + rdx*2 - 0xa], sil; ret; 
0x0000000000134b89: add byte ptr [rsi - 0x3f], ah; ret; 
0x0000000000094e46: add byte ptr [rsi - 0x6e], dh; add rsp, 8; ret; 
0x000000000017848d: add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000017616d: add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b643d: add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b543d: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000011e86d: add byte ptr [rsi - 0x70], ah; mov eax, 0x11f; syscall; 
0x000000000011e8fd: add byte ptr [rsi - 0x70], ah; mov eax, 0x134; syscall; 
0x000000000011e98d: add byte ptr [rsi - 0x70], ah; mov eax, 0x13f; syscall; 
0x000000000010d0dd: add byte ptr [rsi - 0x70], ah; mov eax, 0x15; syscall; 
0x000000000011f0dd: add byte ptr [rsi - 0x70], ah; mov eax, 0x30; syscall; 
0x000000000011ec3d: add byte ptr [rsi - 0x70], ah; mov eax, 0x32; syscall; 
0x000000000011fa1d: add byte ptr [rsi - 0x70], ah; mov eax, 0x43; syscall; 
0x000000000010cbed: add byte ptr [rsi - 0x70], ah; mov eax, 0x53; syscall; 
0x000000000010e99d: add byte ptr [rsi - 0x70], ah; mov eax, 0x56; syscall; 
0x000000000010eabd: add byte ptr [rsi - 0x70], ah; mov eax, 0x57; syscall; 
0x000000000010e9fd: add byte ptr [rsi - 0x70], ah; mov eax, 0x58; syscall; 
0x000000000011e77d: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x00000000000e293d: add byte ptr [rsi - 0x70], ah; mov eax, 0x79; syscall; 
0x000000000011dbad: add byte ptr [rsi - 0x70], ah; mov eax, 0x7a; syscall; 
0x000000000011ddbd: add byte ptr [rsi - 0x70], ah; mov eax, 0x87; syscall; 
0x000000000010c9ad: add byte ptr [rsi - 0x70], ah; mov eax, 0x89; syscall; 
0x00000000001176ed: add byte ptr [rsi - 0x70], ah; mov eax, 0x95; syscall; 
0x000000000011466d: add byte ptr [rsi - 0x70], ah; mov eax, 0x99; syscall; 
0x000000000011e32d: add byte ptr [rsi - 0x70], ah; mov eax, 0x9f; syscall; 
0x00000000001141ad: add byte ptr [rsi - 0x70], ah; mov eax, 0xa3; syscall; 
0x000000000011e4dd: add byte ptr [rsi - 0x70], ah; mov eax, 0xb1; syscall; 
0x000000000011e68d: add byte ptr [rsi - 0x70], ah; mov eax, 0xb4; syscall; 
0x000000000011b8ad: add byte ptr [rsi - 0x70], ah; mov eax, 0xc2; syscall; 
0x000000000011b90d: add byte ptr [rsi - 0x70], ah; mov eax, 0xc3; syscall; 
0x000000000011b7ed: add byte ptr [rsi - 0x70], ah; mov eax, 0xc4; syscall; 
0x000000000011b99d: add byte ptr [rsi - 0x70], ah; mov eax, 0xc5; syscall; 
0x000000000011e53d: add byte ptr [rsi - 0x70], ah; mov eax, 0xfe; syscall; 
0x000000000009292d: add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; ret; 
0x00000000001477fd: add byte ptr [rsi - 0x70], ah; mov eax, 2; ret; 
0x000000000011277d: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000dc9ed: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; ret; 
0x000000000008d2ed: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000016062d: add byte ptr [rsi - 0x70], ah; mov ecx, 0xcb; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000011e95d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000011e65d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d4d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011e71d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e74d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8ed: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a93d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b87d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000000011186d: add byte ptr [rsi - 0x70], ah; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000000898cd: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000009296d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000009354d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150d56], 1; mov dword ptr [rip + 0x150d48], eax; ret; 
0x00000000000449ad: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x19f4b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015e85d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x85609]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015a98d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x894d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a96d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x894f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a91d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x89549]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014011d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000003544d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000017613d: add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b640d: add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000b56dd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b569d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b56bd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b79dd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b8d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000004397d: add byte ptr [rsi - 0x70], ah; movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000043f4d: add byte ptr [rsi - 0x70], ah; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x00000000000430cd: add byte ptr [rsi - 0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000144fcd: add byte ptr [rsi - 0x70], ah; ret; 
0x00000000001864ad: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000b947d: add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000155edd: add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000011271d: add byte ptr [rsi - 0x70], ah; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000cdc9d: add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x000000000009e27c: add byte ptr [rsi - 0x72b7fff2], ch; adc eax, 0xead99; cmove rax, rdx; ret; 
0x000000000017416f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017417f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000015b904: add byte ptr [rsi - 0x77], ah; add eax, 0x8e4b4; mov eax, 1; add rsp, 8; ret; 
0x0000000000042b10: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014bd74: add byte ptr [rsi - 0x77], ah; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x000000000002eab2: add byte ptr [rsi - 0x77], ah; or ecx, dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000086b0b: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000008ebc9: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000090d68: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000449b9: add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000017a10c: add byte ptr [rsi], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000e1a29: add byte ptr [rsi], dl; add byte ptr [rax], al; add bl, ch; ret 0xc389; 
0x0000000000111589: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000112ee5: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000082696: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000043f39: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000c8f34: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000106250: add byte ptr [rsp + rdx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000005c65f: add byte ptr cs:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000114fe7: add byte ptr ds:[rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000449ba: add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011b7a8: add byte ptr fs:[rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x00000000000654ed: add byte ptr gs:[rax - 0x7d], cl; ret; 
0x0000000000139223: add byte ptr gs:[rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a0daa: add byte ptr gs:[rcx + 0x5c], al; pop r13; pop r14; ret; 
0x00000000000a036e: add byte ptr gs:[rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x00000000000ed2ea: add byte ptr gs:[rdi], cl; xchg eax, ebp; ret 0xd201; 
0x000000000018244e: add ch, al; std; xlatb; ret 0xc085; 
0x0000000000182442: add ch, al; std; xlatb; ret; 
0x0000000000185c8f: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000015030a: add ch, bh; std; jmp qword ptr [rsi - 0x70]; 
0x00000000000e5570: add ch, bl; mov ebp, 0x441f0f; add dh, dh; test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x000000000007a9e8: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x57; or al, 0x83; ret; 
0x00000000000cfb39: add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000009c5d1: add ch, byte ptr [rcx]; ror byte ptr [rax - 0x75], 1; push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000ceead: add ch, byte ptr [rcx]; ror dword ptr [rcx + 0x1fe8c1c8], 0x29; ret; 
0x000000000012e3ea: add ch, byte ptr [rdi - 0x11]; jmp qword ptr [rsi - 0x70]; 
0x000000000007aa21: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000012e3e8: add ch, cl; add ch, byte ptr [rdi - 0x11]; jmp qword ptr [rsi - 0x70]; 
0x000000000012e408: add ch, cl; push rdx; outsb dx, byte ptr [rsi]; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000012e3c8: add ch, cl; ret 0xef6d; 
0x00000000000c8dcb: add ch, cl; ret; 
0x0000000000044876: add cl, 0xe9; add esi, ebx; stosq qword ptr [rdi], rax; ret; 
0x000000000008a3e7: add cl, al; call 0x1e926f2; mov edx, eax; mov eax, edx; ret; 
0x000000000008a4d7: add cl, al; call 0x1e927e3; mov edx, eax; mov eax, edx; ret; 
0x00000000000ba5e8: add cl, al; call 0xfec28fb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000008adee: add cl, bpl; sub ebp, dword ptr [rbx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b1fec: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x00000000000489b7: add cl, byte ptr [r8 - 0x77]; add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ff51d: add cl, byte ptr [rax + 0x16893847]; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000bb4fd: add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000d76cb: add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x00000000000baffd: add cl, byte ptr [rax + 0x29]; ret 0xf74; 
0x00000000000c8148: add cl, byte ptr [rax + 0x29]; ret; 
0x000000000013a906: add cl, byte ptr [rax + 0x39]; ret 0x1472; 
0x000000000008d226: add cl, byte ptr [rax + 0x39]; ret 0x870f; 
0x000000000013a914: add cl, byte ptr [rax + 0x39]; ret 0xc019; 
0x0000000000072789: add cl, byte ptr [rax + 0x63]; ror byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000001895d4: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x0000000000029fe4: add cl, byte ptr [rax + 1]; fimul word ptr [rax + 1]; ret; 
0x00000000001407ca: add cl, byte ptr [rax - 0x11]; jmp qword ptr [rsi - 0x70]; 
0x0000000000074ffe: add cl, byte ptr [rax - 0x73]; adc eax, 0xfffffbb7; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000bb3a2: add cl, byte ptr [rax - 0x73]; add eax, 0x115d6; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000007e1a7: add cl, byte ptr [rax - 0x73]; add eax, 0x12bef1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000bad91: add cl, byte ptr [rax - 0x73]; add eax, 0x12d57; cmovne rax, rdx; ret; 
0x000000000007ad32: add cl, byte ptr [rax - 0x73]; add eax, 0x12f166; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x000000000009e4e1: add cl, byte ptr [rax - 0x73]; add eax, 0x16b07; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009ce81: add cl, byte ptr [rax - 0x73]; add eax, 0x18087; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009cd61: add cl, byte ptr [rax - 0x73]; add eax, 0x1b197; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x000000000009e793: add cl, byte ptr [rax - 0x73]; add eax, 0x1b915; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e443: add cl, byte ptr [rax - 0x73]; add eax, 0x1bc45; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2e3: add cl, byte ptr [rax - 0x73]; add eax, 0x1bdc5; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000012d288: add cl, byte ptr [rax - 0x73]; add eax, 0x5bdc0; lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1c8: add cl, byte ptr [rax - 0x73]; add eax, 0x5bea0; lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d108: add cl, byte ptr [rax - 0x73]; add eax, 0x5bf60; lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d2d7: add cl, byte ptr [rax - 0x73]; add eax, 0x60ac1; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d217: add cl, byte ptr [rax - 0x73]; add eax, 0x60ba1; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d157: add cl, byte ptr [rax - 0x73]; add eax, 0x60c61; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000012d397: add cl, byte ptr [rax - 0x73]; add eax, 0x60fb1; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000009e541: add cl, byte ptr [rax - 0x73]; add eax, 0x8fc7; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x000000000009d421: add cl, byte ptr [rax - 0x73]; add eax, 0xa147; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009d361: add cl, byte ptr [rax - 0x73]; add eax, 0xa157; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000009ce11: add cl, byte ptr [rax - 0x73]; add eax, 0xa7a7; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009d3cb: add cl, byte ptr [rax - 0x73]; add eax, 0xb8dd; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x000000000009e634: add cl, byte ptr [rax - 0x73]; add eax, 0xcbd4; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e202: add cl, byte ptr [rax - 0x73]; add eax, 0xcbf6; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009e594: add cl, byte ptr [rax - 0x73]; add eax, 0xcc64; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e728: add cl, byte ptr [rax - 0x73]; add eax, 0xea950; lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3d8: add cl, byte ptr [rax - 0x73]; add eax, 0xeac80; lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e278: add cl, byte ptr [rax - 0x73]; add eax, 0xeae00; lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000009e684: add cl, byte ptr [rax - 0x73]; add eax, 0xedc4; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e4: add cl, byte ptr [rax - 0x73]; add eax, 0xee54; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000009e777: add cl, byte ptr [rax - 0x73]; add eax, 0xef651; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e427: add cl, byte ptr [rax - 0x73]; add eax, 0xef981; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2c7: add cl, byte ptr [rax - 0x73]; add eax, 0xefb01; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e387: add cl, byte ptr [rax - 0x73]; add eax, 0xeffd1; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000012d2f3: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8cd85; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x000000000012d233: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8ce65; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d173: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8cf25; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x00000000000d0566: add cl, byte ptr [rax - 0x75]; add eax, 0x1138da; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000001785a5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000174215: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000113323: add cl, byte ptr [rax - 0x75]; add eax, 0xd0b9d; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x0000000000174145: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000126681: add cl, byte ptr [rax - 0x75]; push rsp; and al, 0x10; mov rsi, r13; xor r15d, r15d; call rax; 
0x00000000000b1fed: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x00000000000489b8: add cl, byte ptr [rax - 0x77]; add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000a70ff: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000127676: add cl, byte ptr [rax - 0x77]; ret 0x53ff; 
0x0000000000127017: add cl, byte ptr [rax - 0x77]; ret 0x55ff; 
0x0000000000103e2a: add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000012872f: add cl, byte ptr [rax - 0x77]; ret 0xff41; 
0x0000000000087c65: add cl, byte ptr [rax - 0x77]; ret; 
0x000000000011649e: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x48], 0x83; ret 0x4808; 
0x00000000000bb006: add cl, byte ptr [rax - 0x7d]; mov dword ptr [rcx + rsi], 0xa20ee8f6; idiv bh; mov rax, rbx; pop rbx; ret; 
0x000000000002c606: add cl, byte ptr [rax - 0x7d]; ret 0x4802; 
0x00000000000b4f60: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000115479: add cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x000000000002ac01: add cl, byte ptr [rax - 0x7d]; ret 0x4d02; 
0x000000000009f483: add cl, byte ptr [rax - 0x7d]; ret 0x6610; 
0x00000000000e4ed2: add cl, byte ptr [rax - 0x7d]; ret 0x8401; 
0x00000000000b4fc3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x00000000000e556c: add cl, byte ptr [rax - 0x7d]; ret 0xeb02; 
0x0000000000155c55: add cl, byte ptr [rax - 0x7d]; ret 0xf04; 
0x000000000011782a: add cl, byte ptr [rax]; or eax, 0x415d5b00; pop rsp; ret; 
0x000000000009ebb8: add cl, byte ptr [rbp + 0x29]; ret 0x48b; 
0x000000000004b913: add cl, byte ptr [rbp + 1]; ret 0x15eb; 
0x0000000000102b28: add cl, byte ptr [rbp - 0x77]; ret 0x8d4c; 
0x000000000016b6b2: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b2058: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000178525: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x00000000000b20fc: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000ebfd7: add cl, byte ptr [rcx + 0x39]; ret; 
0x000000000014e9c3: add cl, byte ptr [rcx + 0x40c741f0]; sbb byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000001485e3: add cl, byte ptr [rcx + 0x55ff41da]; adc byte ptr [rcx], bh; ret; 
0x00000000001496aa: add cl, byte ptr [rcx + 9]; ret; 
0x000000000007cdc3: add cl, byte ptr [rcx + rcx*4 - 0x1e]; call qword ptr [rax + 0x38]; 
0x000000000007d39c: add cl, byte ptr [rcx + rcx*4 - 6]; call qword ptr [rax + 0x38]; 
0x00000000000b5cb8: add cl, byte ptr [rcx - 0x7d]; call 0x7f98a4c3; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000002b1af: add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000e4182: add cl, byte ptr [rcx]; ret 0xf089; 
0x00000000000350f4: add cl, byte ptr [rdi]; mov bh, 0xc0; ret; 
0x000000000005417b: add cl, byte ptr [rdi]; mov esi, 0x89410252; ret; 
0x00000000001045ea: add cl, byte ptr [rdi]; test byte ptr [rbp + 0x31000004], bh; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x000000000003e8f9: add cl, byte ptr [rdi]; test dh, ah; sub dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fc07], al; ret 0x29; 
0x0000000000188b61: add cl, byte ptr [rdi]; test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017a331: add cl, byte ptr [rdi]; test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000104b99: add cl, byte ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000181407: add cl, byte ptr [rdi]; xchg eax, edx; ret 0xf40; 
0x0000000000140c33: add cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x00000000000b1fea: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001784e3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000000b2018: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x00000000000b209c: add cl, byte ptr [rdx + 0x42880841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012687e: add cl, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000117dae: add cl, byte ptr [rip + 0x5c415d00]; ret; 
0x00000000000e99b4: add cl, ch; cld; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000d2d34: add cl, ch; cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000191114: add cl, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000e7c74: add cl, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000c9594: add cl, ch; imul byte ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000ecacc: add cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000007ed11: add cl, ch; imul esi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000a6a67: add cl, ch; int1; ret 0xffff; 
0x000000000005b472: add cl, ch; lahf; loope 0x5b476; jmp qword ptr [rsi + 0xf]; 
0x000000000013cd31: add cl, ch; leave; mov edi, gs; jmp qword ptr [rsi + 0xf]; 
0x000000000013a45f: add cl, ch; mov bl, 0xae; out dx, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000159729: add cl, ch; mov ecx, 0xe8fffffe; fcomp qword ptr [rdx - 3]; jmp qword ptr [rsi + 0x66]; 
0x0000000000026c50: add cl, ch; mov edx, 0x66000e63; nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x000000000014c14e: add cl, ch; movabs dword ptr [0x748b48c031fffffe], eax; and al, 0x40; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x0000000000038d8c: add cl, ch; outsb dx, byte ptr [rsi]; ret; 
0x0000000000130bb1: add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000000cba20: add cl, ch; pop rdx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000007e034: add cl, ch; pop rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000193c34: add cl, ch; push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000fda84: add cl, ch; push rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000014fc04: add cl, ch; ret 0xfff8; 
0x00000000000760b8: add cl, ch; ret 0xfffa; 
0x0000000000056f06: add cl, ch; ret 0xfffc; 
0x0000000000030a2d: add cl, ch; ret 0xfffd; 
0x000000000002f916: add cl, ch; ret 0xfffe; 
0x00000000000b4207: add cl, ch; ret; 
0x0000000000035994: add cl, ch; sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000002d544: add cl, ch; sar esi, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000059238: add cl, ch; sar esp, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000007f000: add cl, ch; stosb byte ptr [rdi], al; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000005eeb6: add cl, ch; stosd dword ptr [rdi], eax; in al, 0xff; jmp qword ptr [rsi + 0x44]; 
0x000000000008adef: add cl, ch; sub ebp, dword ptr [rbx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000103cec: add cl, ch; xabort -1; jmp qword ptr [rsi + 0xf]; 
0x000000000012c9c9: add cl, cl; ret; 
0x0000000000115095: add cl, dh; dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x00000000000a6c17: add dh, al; inc dword ptr [r8]; mov qword ptr [rdx], rcx; ret; 
0x00000000000eaa9f: add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000eaaaf: add dh, al; or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000007bf56: add dh, al; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x000000000016b863: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000010462d: add dh, byte ptr [rax + rcx + 0x31]; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x00000000000b94bb: add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000869cb: add dh, byte ptr [rbp + 0x7a]; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000000f3d56: add dh, byte ptr [rcx]; imul al; ret 0xf314; 
0x000000000010c257: add dh, byte ptr [rdi + 8]; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000012d34e: add dh, byte ptr [rdi + rbx - 0x7b]; ror byte ptr [rax - 0x73], 0x15; rol dword ptr ss:[rip + 0x58d4800], 0x8f; rol dword ptr [rip + 0x440f4800], 0xc2; ret; 
0x000000000018d4c8: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000018db9f: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000093528: add dh, byte ptr [rsi + 5]; ret; 
0x0000000000155d7e: add dh, byte ptr [rsi + rbx*8 - 0x15]; ret; 
0x00000000000289f7: add dh, byte ptr [rsi - 0x77]; ret 0x3d83; 
0x0000000000080834: add dh, byte ptr [rsp + rcx - 0x39]; xor al, 0; add al, 0; add cl, ch; ret 0xfffc; 
0x00000000000bad8d: add dh, dh; jno 0xbad94; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x000000000012747f: add dh, dh; ret 0x4c04; 
0x0000000000099bc8: add dh, dh; ret 0x7402; 
0x0000000000099ac6: add dh, dh; ret 0x7404; 
0x000000000012deff: add dh, dh; ret 0x7420; 
0x000000000018e597: add dh, dh; ret 0x7501; 
0x000000000018e5a4: add dh, dh; ret 0x7502; 
0x000000000009726c: add dh, dh; ret 0x7504; 
0x00000000001490bc: add dh, dh; ret 0x7507; 
0x000000000018e569: add dh, dh; ret 0x7510; 
0x000000000018e576: add dh, dh; ret 0x7520; 
0x000000000010cddf: add dh, dh; ret 0x7540; 
0x000000000010bd40: add dh, dh; ret 0xf02; 
0x0000000000032f90: add dh, dh; ret 0xf04; 
0x00000000000b07f2: add dh, dh; ret 0xf20; 
0x000000000007a9b7: add dh, dh; ret 0xf40; 
0x000000000006027f: add dh, dh; ret 0xf50; 
0x000000000010bd37: add dh, dh; ret 0xf80; 
0x000000000002b7e3: add dh, dh; ret; 
0x00000000000e52ff: add dh, dh; test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x00000000001966f6: add dil, dil; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000cc9d1: add dil, r15b; ret; 
0x00000000000e3c64: add dl, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000b59fa: add dl, byte ptr [rcx + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000083cd4: add dl, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000488ff: add dl, dh; movups xmmword ptr [rbx], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042f47: add dl, dh; movups xmmword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f71: add dl, dh; mulps xmm0, xmmword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f3f: add dl, dh; mulps xmm0, xmmword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004adc7: add dword ptr [ecx - 0x77], ecx; ret 0x8944; 
0x000000000012cc5b: add dword ptr [r8 + 0x3b], ecx; pop rbp; mov eax, 0x89483f74; ret; 
0x00000000000e8a73: add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x0000000000082f1f: add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000011b741: add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000292e3: add dword ptr [r8 - 0x7d], r9d; ret; 
0x00000000000e1b37: add dword ptr [r8], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000111376: add dword ptr [r8], eax; add byte ptr [rbx - 0x2117c385], cl; ret 0xffff; 
0x000000000009af05: add dword ptr [r8], r8d; add byte ptr [rax - 0x7f], cl; ret 0x6be2; 
0x00000000000920c5: add dword ptr [r8], r8d; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000187396: add dword ptr [r8], r8d; vzeroupper; ret; 
0x00000000000c8f37: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a430f: add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4006; 
0x00000000000eaa8d: add dword ptr [rax + 0x1b807], ecx; add byte ptr [rax], al; ret; 
0x0000000000178491: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x00000000001966e7: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6ca6aef5; ret; 
0x0000000000196737: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6ca6af45; ret; 
0x00000000000baff6: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; clc; add cl, byte ptr [rax + 0x29]; ret 0xf74; 
0x0000000000148bef: add dword ptr [rax + 0x29], ecx; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x00000000000e1706: add dword ptr [rax + 0x38], edi; syscall; 
0x000000000012c1b2: add dword ptr [rax + 0x39], ecx; ret 0x1174; 
0x000000000010f643: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x00000000000941e9: add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x000000000010f636: add dword ptr [rax + 0x39], ecx; ret 0xd72; 
0x000000000009f00c: add dword ptr [rax + 0x39], ecx; ret 0xde75; 
0x0000000000196f4a: add dword ptr [rax + 0x39], ecx; ret 0xe475; 
0x00000000000a5184: add dword ptr [rax + 0x39], ecx; ret 0xe675; 
0x00000000000a125b: add dword ptr [rax + 0x39], ecx; ret 0xe775; 
0x00000000000a1632: add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x00000000000a13e7: add dword ptr [rax + 0x39], ecx; ret 0xeb75; 
0x00000000000a11b6: add dword ptr [rax + 0x39], ecx; ret 0xec75; 
0x000000000005630b: add dword ptr [rax + 0x39], ecx; ret 0xef75; 
0x0000000000055229: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000012cc5c: add dword ptr [rax + 0x3b], ecx; pop rbp; mov eax, 0x89483f74; ret; 
0x00000000000fac14: add dword ptr [rax + 0x63], ecx; ret; 
0x000000000011de6b: add dword ptr [rax + 0xc], esp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000116343: add dword ptr [rax + 0xf], ecx; mov esi, 0xf233c03; xchg eax, ebp; ret 0xd189; 
0x00000000001905d0: add dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000001542f7: add dword ptr [rax + 1], ecx; ret; 
0x000000000002697f: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000041e5f: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000000eaa5f: add dword ptr [rax + 1], edi; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ce8a3: add dword ptr [rax + 1], edi; pop r12; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x00000000000eaa10: add dword ptr [rax + 1], edi; ret; 
0x00000000001189a7: add dword ptr [rax + 9], ecx; ret 0x8948; 
0x0000000000071f01: add dword ptr [rax + rax*2 - 0x77], esi; ret 0x3145; 
0x00000000000e6546: add dword ptr [rax + rax*8 - 0x3fce298b], eax; ret; 
0x00000000000e7f9b: add dword ptr [rax + rax], eax; or byte ptr [rax + 0xf], 0xa3; ret 0x830f; 
0x00000000001129a8: add dword ptr [rax + rax], edx; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x000000000014eca8: add dword ptr [rax + rbp*4 + 0x49], esi; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000069870: add dword ptr [rax + rcx*2 - 0x77], esi; ret 0x8948; 
0x0000000000108ad4: add dword ptr [rax + rcx*4 + 0x3c], eax; sbb cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000ef5b5: add dword ptr [rax + rdi + 0x6c], eax; sbb al, byte ptr [rip - 0x7cb7ac8b]; ret; 
0x0000000000146dbd: add dword ptr [rax + rdx + 0x48], esi; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000c6903: add dword ptr [rax - 0x39], ecx; ret 0xffff; 
0x0000000000077b11: add dword ptr [rax - 0x50f43], eax; jmp qword ptr [rax]; 
0x000000000006f460: add dword ptr [rax - 0x5b77b], ecx; jmp qword ptr [rsi + 0xf]; 
0x00000000000e5ae9: add dword ptr [rax - 0x6bf08406], eax; ret 0xb60f; 
0x00000000000e8a74: add dword ptr [rax - 0x6bf0a206], eax; ret 0xb60f; 
0x0000000000175f6a: add dword ptr [rax - 0x73], ecx; add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x0000000000082f20: add dword ptr [rax - 0x75], ecx; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x0000000000127421: add dword ptr [rax - 0x75], ecx; adc ecx, dword ptr [rax - 0x77]; ror dword ptr [rdi], 0x84; ret 0; 
0x000000000007347d: add dword ptr [rax - 0x75], ecx; cmp byte ptr [rax - 0x77], cl; lea ecx, [rax - 0x17000006]; ret; 
0x00000000001091e6: add dword ptr [rax - 0x75], ecx; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b1fc6: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x0000000000093291: add dword ptr [rax - 0x77], ecx; adc eax, 0x151037; ret; 
0x000000000009e153: add dword ptr [rax - 0x77], ecx; add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001785a2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000174212: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000174142: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000001740f2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000178522: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000174202: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012ae1e: add dword ptr [rax - 0x77], ecx; cwde; movdqu xmm7, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x00000000000a00d8: add dword ptr [rax - 0x77], ecx; fisttp word ptr [rax + 0x29]; ret 0x8d48; 
0x00000000000d69fc: add dword ptr [rax - 0x77], ecx; fmul dword ptr [rdi]; mov dh, 0x40; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000008aaed: add dword ptr [rax - 0x77], ecx; or byte ptr [r15], r9b; mov dh, 0x10; pop rbx; mov eax, edx; ret; 
0x0000000000097b0c: add dword ptr [rax - 0x77], ecx; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x0000000000060f49: add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0x105617], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000062391: add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0x30917], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000008d34d: add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x0000000000074cf0: add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000009a1dd: add dword ptr [rax - 0x77], ecx; ret 0x4574; 
0x00000000001570e3: add dword ptr [rax - 0x77], ecx; ret 0x6348; 
0x000000000008ed36: add dword ptr [rax - 0x77], ecx; ret 0x850f; 
0x00000000000f8f8b: add dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000009d031: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000008a61d: add dword ptr [rax - 0x77], ecx; sub byte ptr [rax - 0x78], r8b; cmp byte ptr [rcx + rcx*4 - 0x30], al; ret; 
0x00000000001368a8: add dword ptr [rax - 0x77], ecx; xor byte ptr [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012a11c: add dword ptr [rax - 0x7b], ecx; push qword ptr [rbp - 0x1a]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a0dd1: add dword ptr [rax - 0x7b], ecx; ror byte ptr [rax - 0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x000000000009cb67: add dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], cl; xchg eax, esp; ret 0xd084; 
0x000000000013b7d4: add dword ptr [rax - 0x7b], ecx; sar byte ptr [rax + 0xe], cl; mov rax, rdx; movsxd rdx, esi; ret; 
0x0000000000039c0f: add dword ptr [rax - 0x7cb700b1], ecx; ret 0x4901; 
0x000000000017a0aa: add dword ptr [rax - 0x7d], ecx; fdivr st(7); ret; 
0x00000000000b4c0b: add dword ptr [rax - 0x7d], ecx; fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000a0858: add dword ptr [rax - 0x7d], ecx; out dx, al; add dword ptr [rbp - 0xf], esi; xor eax, eax; ret; 
0x000000000012c1ae: add dword ptr [rax - 0x7d], ecx; out dx, eax; add dword ptr [rax + 0x39], ecx; ret 0x1174; 
0x000000000013a2f6: add dword ptr [rax - 0x7d], ecx; ret 0x3904; 
0x0000000000046170: add dword ptr [rax - 0x7d], ecx; ret 0x4001; 
0x0000000000045ba2: add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x0000000000139b4e: add dword ptr [rax - 0x7d], ecx; ret 0x4104; 
0x000000000002cbc9: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000095f9b: add dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x00000000000fe45b: add dword ptr [rax - 0x7d], ecx; ret 0x4910; 
0x00000000000dbd52: add dword ptr [rax - 0x7d], ecx; ret 0x4c48; 
0x0000000000101aa8: add dword ptr [rax - 0x7d], ecx; ret 0x8301; 
0x00000000000ef284: add dword ptr [rax - 0x7d], ecx; ret 0x8304; 
0x00000000000e552b: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000036e7b: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000101322: add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x00000000000661aa: add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000002877a: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000101321: add dword ptr [rax - 0x7d], r9d; ret 0x8901; 
0x0000000000053151: add dword ptr [rax - 0x7f], ecx; ret; 
0x000000000007b8fb: add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x0000000000039800: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000012bdb9: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000000e20b3: add dword ptr [rax], 0x83480000; ret 0x480f; 
0x000000000009d07b: add dword ptr [rax], 0x85480000; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000014f5c4: add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x0000000000120823: add dword ptr [rax], 1; ret; 
0x000000000012964b: add dword ptr [rax], eax; add al, ch; lodsd eax, dword ptr [rsi]; ret; 
0x000000000014a791: add dword ptr [rax], eax; add al, ch; outsd dx, dword ptr [rsi]; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x00000000000fbf15: add dword ptr [rax], eax; add al, ch; ret; 
0x00000000000a5313: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000097251: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000002a02a: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret; 
0x000000000008098b: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; add al, 0x86; add rax, rsi; jmp rax; 
0x000000000013a524: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000010117d: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ror byte ptr [rbp + rcx*4 + 5], 1; ret; 
0x00000000000efcb3: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ror byte ptr [rdi], 1; mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x00000000000aff13: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000181f9f: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000032bcb: add dword ptr [rax], eax; add byte ptr [rax + 3], cl; or byte ptr [rax - 0x77], cl; rol byte ptr [rax - 0x75], 1; cmp byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000058f85: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xc001; 
0x000000000004a1ae: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000009a85a: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x10ff3c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004886d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1a18af; add rsp, 8; ret; 
0x00000000000ba5af: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0xf0a27; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000146d1f: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000014eb78: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; jo 0x14ebc8; mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000014718e: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012b709: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; xor cl, ch; pop rsp; out 0xff, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000015da52: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000015df0d: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000009b833: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax; 
0x000000000015d3cb: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000147ace: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x000000000008367e: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000193ef1: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000008c98a: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000ba0ee: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015da0a: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000111aac: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; xor esi, esi; syscall; 
0x000000000017a52d: add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000098e40: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000c5af5: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000002f18b: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000017c4ed: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000e1b38: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x00000000000e0f49: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000183eaf: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c441: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000038fd3: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000027005: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009af06: add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret 0x6be2; 
0x000000000015e150: add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000013ac8f: add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x0000000000027ad1: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000125e0e: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000082c98: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114ab0: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000010178a: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x101090; add rsp, 0x18; ret; 
0x00000000001178ba: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x00000000001522b3: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000001457fa: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x00000000001526cd: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000044b2a: add dword ptr [rax], eax; add byte ptr [rax], al; cmove eax, edx; ret; 
0x0000000000077739: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x00000000000807b1: add dword ptr [rax], eax; add byte ptr [rax], al; lea rcx, [rbx + 0x40]; mov rdi, rbx; call rax; 
0x00000000000eaa61: add dword ptr [rax], eax; add byte ptr [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x0000000000077775: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000155b6e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdi + 0x28], edx; ret; 
0x000000000005869e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000009355a: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x150d48], eax; ret; 
0x00000000001522ab: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; 
0x000000000015230f: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x00000000001524cb: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0xb0], 1; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x00000000001524d6: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x000000000012bdbe: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x00000000000e38ff: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000014bd94: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000009b5cd: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x0000000000112bfe: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000015e2ba: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000155c62: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rdx; ret; 
0x00000000000585e6: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000093537: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x000000000009350a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934ea: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x0000000000147046: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000077197: add dword ptr [rax], eax; add byte ptr [rax], al; mov r10, rdx; xor esi, esi; jmp rax; 
0x000000000007edc6: add dword ptr [rax], eax; add byte ptr [rax], al; mov r9, rsi; jmp rax; 
0x000000000007d141: add dword ptr [rax], eax; add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0b9: add dword ptr [rax], eax; add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd1: add dword ptr [rax], eax; add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec1: add dword ptr [rax], eax; add byte ptr [rax], al; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x0000000000147969: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x23b8]; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000153387: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000008c397: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000048a72: add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000007e261: add dword ptr [rax], eax; add byte ptr [rax], al; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007de59: add dword ptr [rax], eax; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007ef15: add dword ptr [rax], eax; add byte ptr [rax], al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000014f2f5: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014e9ca: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000014bd0f: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014e9f7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x000000000014f307: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014f2e7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm4; ret; 
0x00000000000ce8a5: add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x0000000000061b8e: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000147926: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000056458: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000014475d: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000010b709: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000101766: add dword ptr [rax], eax; add byte ptr [rax], al; push 0; call 0x101680; add rsp, 0x18; ret; 
0x00000000000562e4: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000034e8f: add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000044906: add dword ptr [rax], eax; add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010d01e: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000004da96: add dword ptr [rax], eax; add byte ptr [rbp + 0x29], cl; ret; 
0x00000000000926b0: add dword ptr [rax], eax; add byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000ec057: add dword ptr [rax], eax; add byte ptr [rbp - 0x73], cl; pop rdx; dec dword ptr [rcx + 0x29]; ret; 
0x000000000009727b: add dword ptr [rax], eax; add byte ptr [rbp - 0x75], cl; and byte ptr [r9 - 0x75], cl; push rcx; or dh, dh; ret 0x7404; 
0x0000000000146b7c: add dword ptr [rax], eax; add byte ptr [rbp - 0x7ed28a40], al; ret; 
0x000000000006275e: add dword ptr [rax], eax; add byte ptr [rbx + 0x28907c8], al; mov eax, 1; ret; 
0x0000000000063f97: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000062ed1: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000111377: add dword ptr [rax], eax; add byte ptr [rbx - 0x2117c385], cl; ret 0xffff; 
0x00000000000f0efa: add dword ptr [rax], eax; add byte ptr [rbx - 0x7af7db84], cl; push qword ptr [rbx - 0xa]; ret; 
0x000000000006f4d7: add dword ptr [rax], eax; add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x00000000000867b3: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000011ff23: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, r14d; syscall; 
0x000000000008ec9c: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000086f74: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x000000000009b19b: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r13; call rax; 
0x000000000010cd4a: add dword ptr [rax], eax; add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x00000000000e8a6e: add dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x00000000001933f3: add dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; push rcx; add edi, esi; ret 0x7ffe; 
0x000000000014f06d: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; jo 0x14f0c1; mov edi, esp; call qword ptr [rax + 0x20]; 
0x0000000000152508: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x00000000000920c6: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000014c65e: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg al, dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x000000000006f542: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000006f52b: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; rol dword ptr [rcx + rcx*2], 1; ret; 
0x0000000000108a97: add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rdi]; 
0x000000000002a6e7: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x00000000000a2927: add dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret 0xf800; 
0x00000000000d2a8a: add dword ptr [rax], eax; add byte ptr [rcx], bh; xlatb; sete al; add eax, 0x16d; ret; 
0x00000000000fbd91: add dword ptr [rax], eax; add byte ptr [rcx], ch; ret 0x8941; 
0x00000000000cfc6b: add dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x0000000000134ca2: add dword ptr [rax], eax; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000104b92: add dword ptr [rax], eax; add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x000000000013f65a: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 5; ret 0xa47; 
0x00000000000b9f10: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000000055e05: add dword ptr [rax], eax; add byte ptr [rcx], dh; sar byte ptr [rdi + 2], cl; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000056198: add dword ptr [rax], eax; add byte ptr [rdi + 2], bh; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000011598f: add dword ptr [rax], eax; add byte ptr [rdi - 0x64], bh; mov eax, 0x118; syscall; 
0x0000000000140f72: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000011dcd5: add dword ptr [rax], eax; add byte ptr [rdx + 8], bh; syscall; 
0x00000000000b1f4f: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000005ca1d: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000014616f: add dword ptr [rax], eax; add byte ptr [rsi + 4], bh; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000002eab0: add dword ptr [rax], eax; add byte ptr [rsi - 0x77], ah; or ecx, dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000086b09: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000008ebc7: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000018244c: add dword ptr [rax], eax; add ch, al; std; xlatb; ret 0xc085; 
0x0000000000182440: add dword ptr [rax], eax; add ch, al; std; xlatb; ret; 
0x00000000000f8075: add dword ptr [rax], eax; add cl, ch; ret; 
0x000000000018e595: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000018e5a2: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000018e5af: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000018e567: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000018e574: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000018e581: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x00000000000f0ef1: add dword ptr [rax], eax; add dh, dh; ret; 
0x00000000001171c1: add dword ptr [rax], eax; add rsp, 0x80; add rsp, 8; ret; 
0x0000000000116a0d: add dword ptr [rax], eax; add rsp, 0x80; ret; 
0x000000000009d2d1: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000009cd6e: add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x000000000009e367: add dword ptr [rax], eax; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x00000000000bc687: add dword ptr [rax], eax; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x000000000009cd67: add dword ptr [rax], eax; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x000000000009e799: add dword ptr [rax], eax; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e449: add dword ptr [rax], eax; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2e9: add dword ptr [rax], eax; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x00000000000bb3a8: add dword ptr [rax], eax; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009ce87: add dword ptr [rax], eax; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009e4e7: add dword ptr [rax], eax; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009cdba: add dword ptr [rax], eax; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x000000000011254e: add dword ptr [rax], eax; mov eax, 0x23; syscall; 
0x000000000017d8d8: add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000010d6a8: add dword ptr [rax], eax; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000010d81f: add dword ptr [rax], eax; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000017f1e1: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000011423a: add dword ptr [rax], eax; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x00000000001142ea: add dword ptr [rax], eax; mov edi, ebx; mov edx, eax; mov eax, 0x4b; syscall; 
0x000000000010d68a: add dword ptr [rax], eax; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x000000000017f1ad: add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000010d7fe: add dword ptr [rax], eax; mov esi, ebp; mov rdi, rbx; mov edx, eax; mov eax, 0x55; syscall; 
0x0000000000048a25: add dword ptr [rax], eax; mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000001126b6: add dword ptr [rax], eax; nop dword ptr [rax + rax]; mov eax, 0x22; syscall; 
0x0000000000113fba: add dword ptr [rax], eax; nop dword ptr [rax]; mov eax, 0xab; syscall; 
0x0000000000114648: add dword ptr [rax], eax; nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000113204: add dword ptr [rax], eax; nop word ptr cs:[rax + rax]; mov eax, 0x8c; syscall; 
0x0000000000113e64: add dword ptr [rax], eax; nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x00000000001141ac: add dword ptr [rax], eax; nop; mov eax, 0xa3; syscall; 
0x000000000011186c: add dword ptr [rax], eax; nop; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000000a6d60: add dword ptr [rax], eax; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x00000000000489f0: add dword ptr [rax], eax; ret; 
0x0000000000187397: add dword ptr [rax], eax; vzeroupper; ret; 
0x00000000000b862f: add dword ptr [rax], ebp; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a0993: add dword ptr [rax], edi; test dl, dl; cmovne rax, rdi; ret; 
0x000000000007ed0d: add dword ptr [rax], esp; add byte ptr [rax], al; add cl, ch; imul esi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000001268d3: add dword ptr [rax], esp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2926: add dword ptr [rax], r8d; add byte ptr [rcx - 9], al; ret 0xf800; 
0x00000000000873c7: add dword ptr [rbp + 0x16], esi; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000155c9d: add dword ptr [rbp + 0x18], ebx; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000000a295e: add dword ptr [rbp + 0x19], eax; fild dword ptr [rcx - 0x7d]; ret; 
0x0000000000127ca0: add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000000118782: add dword ptr [rbp + 0x1b], esi; ret; 
0x00000000001553a5: add dword ptr [rbp + 0x27], esi; mov rax, qword ptr [r12 + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x000000000017b84b: add dword ptr [rbp + 0x32], esi; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000001260bc: add dword ptr [rbp + 0x38], ebx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000011874e: add dword ptr [rbp + 0x3f], esi; ret; 
0x000000000010cb8a: add dword ptr [rbp + 0x43], esi; mov eax, 0x10c; syscall; 
0x0000000000127ca7: add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x00000000001551f2: add dword ptr [rbp + 0x72], esi; mov rax, qword ptr [r12 + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x0000000000093427: add dword ptr [rbp + 0xe], esi; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000bbccc: add dword ptr [rbp + rcx*4 + 0x4c], ecx; and al, 0x20; call rbx; 
0x00000000000bb738: add dword ptr [rbp + rcx*4 + 0x4c], ecx; and al, 0x38; call rbx; 
0x000000000008926b: add dword ptr [rbp + rdx + 0x20ca8300], ebp; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000154572: add dword ptr [rbp - 0x14], esi; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax]; 
0x000000000009f333: add dword ptr [rbp - 0x16], esi; ret; 
0x00000000000562e0: add dword ptr [rbp - 0x23], esi; mov eax, 1; ret; 
0x000000000009c55a: add dword ptr [rbp - 0x2d], esi; mov rdi, rsi; call rax; 
0x0000000000114fec: add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000c91e9: add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000013b3fa: add dword ptr [rbp - 0x71], esi; mov eax, 0xffffffff; ret; 
0x00000000000d97c2: add dword ptr [rbp - 0x77], eax; call 0xffffffff83dde0d9; ret 0x4801; 
0x00000000000c5fb3: add dword ptr [rbp - 0x77], eax; ret; 
0x00000000000a085c: add dword ptr [rbp - 0xf], esi; xor eax, eax; ret; 
0x00000000001181e0: add dword ptr [rbp], ebx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000016b722: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000008c945: add dword ptr [rbx + 0x18], ebp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f6f83: add dword ptr [rbx + 0x1be01ea], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x00000000000f800b: add dword ptr [rbx + 0x1be01ea], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x0000000000145895: add dword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000155f74: add dword ptr [rbx + 0x28], esp; mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000155f73: add dword ptr [rbx + 0x28], r12d; mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fae30: add dword ptr [rbx + 0x294803e0], eax; ret 0x148; 
0x00000000000a623f: add dword ptr [rbx + 0x294803e0], eax; ret 0x14c; 
0x0000000000191fed: add dword ptr [rbx + 0x40ba01e3], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret 0x8949; 
0x00000000000eaeb6: add dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x0000000000080b1f: add dword ptr [rbx + 0x63480012], ebx; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000148062: add dword ptr [rbx + rcx + 0x48], esi; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000007d915: add dword ptr [rbx - 0x4ff43], eax; call qword ptr [rax]; 
0x000000000007d941: add dword ptr [rbx - 0x50743], eax; jmp qword ptr [rax]; 
0x00000000000ba96d: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x518d; 
0x0000000000077ae2: add dword ptr [rbx - 0x51743], eax; call qword ptr [rax]; 
0x000000000004158f: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000000e553b: add dword ptr [rbx - 0x7cb7fb37], eax; ret 0xeb01; 
0x000000000007af8f: add dword ptr [rbx - 0x8f77b], ecx; inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x0000000000117ca5: add dword ptr [rbx], ebp; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000178511: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b2056: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000011ff16: add dword ptr [rcx + 0x39], ecx; ret 0x4e73; 
0x000000000009d82b: add dword ptr [rcx + 0x39], ecx; ret 0x672; 
0x00000000000e81dc: add dword ptr [rcx + 0x39], ecx; ret 0xde75; 
0x00000000000e8161: add dword ptr [rcx + 0x39], ecx; ret 0xe975; 
0x000000000009e91c: add dword ptr [rcx + 0x39], ecx; ret; 
0x00000000001784f1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b2036: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000001784e1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b2016: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000ff2d8: add dword ptr [rcx + 0x50], eax; xor r8d, r8d; call 0xfe830; add rsp, 0x18; ret; 
0x000000000010bd95: add dword ptr [rcx + 0x63], ecx; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000009121a: add dword ptr [rcx + 0xf], eax; mov dh, 0x37; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000013b353: add dword ptr [rcx + 0xf], eax; mov dh, 0x42; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x000000000005a90c: add dword ptr [rcx + 0xf], eax; mov esi, 0x89412404; ret; 
0x000000000013c7c0: add dword ptr [rcx + 0xf], eax; xchg eax, edi; ret 0xf631; 
0x00000000000e4afd: add dword ptr [rcx + 0xf], eax; xchg eax, esp; ret 0x894c; 
0x0000000000029953: add dword ptr [rcx + 0xf], ecx; mov esi, 0x89480045; ret 0xf641; 
0x000000000013f733: add dword ptr [rcx + 0xf], ecx; mov esi, 0x89480045; ret; 
0x0000000000129bd3: add dword ptr [rcx + 0xf], ecx; mov esi, 0x89482404; ret 0xe883; 
0x00000000000e99ae: add dword ptr [rcx + 0xfe2d705], ecx; add cl, ch; cld; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000001187ec: add dword ptr [rcx + 9], ecx; ret 0x894d; 
0x0000000000118cb0: add dword ptr [rcx + 9], ecx; ret; 
0x000000000013b234: add dword ptr [rcx + rcx - 0x7b], esi; sal byte ptr [rbp + 0x15], 0x44; mov eax, eax; ret; 
0x0000000000118d32: add dword ptr [rcx + rcx*4 + 0x68], ecx; or byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x000000000010353f: add dword ptr [rcx + rcx*4 + 0x78], ecx; and byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000bb72e: add dword ptr [rcx - 0x75], ecx; cmp al, 0x24; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x00000000000ef1c4: add dword ptr [rcx - 0x75], ecx; push rbx; or byte ptr [rcx + 0x63493846], cl; ret 0x4c6; 
0x00000000000b2006: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x0000000000038b50: add dword ptr [rcx - 0x77], 0x83488434; rol byte ptr [rcx], 0x39; ret 0xf177; 
0x00000000000970da: add dword ptr [rcx - 0x77], ecx; push rdx; or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000057c18: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000004adc8: add dword ptr [rcx - 0x77], ecx; ret 0x8944; 
0x000000000011feeb: add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000a3b16: add dword ptr [rcx - 0x7c2de63f], ecx; ret 0x8305; 
0x000000000003419f: add dword ptr [rcx - 0x7d], eax; dec dword ptr [rip - 0x7cb79d8c]; ret; 
0x0000000000118e8f: add dword ptr [rcx - 0x7d], eax; ret 0x4801; 
0x00000000000d5d1b: add dword ptr [rcx - 0x7d], eax; ret; 
0x00000000000ef183: add dword ptr [rcx - 0x7d], ecx; clc; and byte ptr [rsi + rsi*2 + 0xf], dh; mov dh, 0x7b; or byte ptr [rbx - 0x76bac7b2], cl; ret 0x418d; 
0x000000000013b358: add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x000000000002c079: add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000001811a5: add dword ptr [rcx], 0; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181171: add dword ptr [rcx], 0; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001609ad: add dword ptr [rcx], 0x89480000; ret; 
0x00000000000920db: add dword ptr [rcx], 0xd2310000; xor esi, esi; mov rdi, r14; call qword ptr [rax + 0x58]; 
0x00000000000cde7b: add dword ptr [rcx], eax; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x000000000010cd49: add dword ptr [rcx], eax; add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000010ccc0: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000013ace1: add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x000000000010ce4d: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000001905ce: add dword ptr [rcx], eax; add dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000001905cc: add dword ptr [rcx], eax; add dword ptr [rcx], eax; add dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000001905ca: add dword ptr [rcx], eax; add dword ptr [rcx], eax; add dword ptr [rcx], eax; add dword ptr [rax + 0xf], ecx; scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000001905cb: add dword ptr [rcx], eax; add dword ptr [rcx], eax; add dword ptr [rcx], eax; imul rax, rdx; shr rax, 0x38; ret; 
0x00000000001905cd: add dword ptr [rcx], eax; add dword ptr [rcx], eax; imul rax, rdx; shr rax, 0x38; ret; 
0x00000000001905cf: add dword ptr [rcx], eax; imul rax, rdx; shr rax, 0x38; ret; 
0x00000000000eb1a9: add dword ptr [rcx], eax; ret; 
0x00000000000551ab: add dword ptr [rcx], eax; std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000f236e: add dword ptr [rcx], ebp; ror dword ptr [rax + 0x63], cl; ror byte ptr [rax + 0x63], cl; ret; 
0x00000000000e3503: add dword ptr [rcx], ebx; push rsp; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000ecaa5: add dword ptr [rcx], ebx; rol byte ptr [rbx - 0x3f7cfd20], 8; ret; 
0x000000000012c003: add dword ptr [rcx], ebx; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d5b0ce0], al; ret; 
0x000000000013b334: add dword ptr [rcx], edi; bnd jb 0x13b324; mov eax, 0xffffffff; ret; 
0x00000000000f0f54: add dword ptr [rcx], edi; call 0xffffffff8350feda; ret 0x4901; 
0x00000000001284ff: add dword ptr [rcx], edi; ret 0x840f; 
0x00000000000ef35b: add dword ptr [rcx], edi; ret 0x8e0f; 
0x00000000000ed3a4: add dword ptr [rcx], edi; ret 0xc675; 
0x00000000000ed085: add dword ptr [rcx], edi; ret 0xee7f; 
0x0000000000038b58: add dword ptr [rcx], edi; ret 0xf177; 
0x00000000000bbcc8: add dword ptr [rcx], esi; shr byte ptr [rdx + 1], cl; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000182633: add dword ptr [rcx], esp; rol byte ptr [rbp + 0xf8674c0], 1; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x0000000000155ea0: add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000155eb0: add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x0000000000155f43: add dword ptr [rdi + 0x28], esi; ret; 
0x000000000010c5b5: add dword ptr [rdi + 0x30], esi; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x000000000010c655: add dword ptr [rdi + 0x30], esi; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000010c604: add dword ptr [rdi + 0x31], esi; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000010c957: add dword ptr [rdi + 0x36], esi; mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000000eaeb3: add dword ptr [rdi + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000358cb: add dword ptr [rdi + 6], esi; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000093302: add dword ptr [rdi + rcx + 0x44], eax; ret 0xf641; 
0x00000000000a082a: add dword ptr [rdi + rcx - 0x4a], eax; adc dword ptr [rbp - 0x7c], eax; rol byte ptr [rax + 0xf], 0x95; mov dword ptr [rbp + 0x38], 0x940f41d0; ret; 
0x00000000000a02bc: add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b8faf: add dword ptr [rdi], ebx; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000009c20d: add dword ptr [rdi], ecx; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rsi; call rcx; 
0x0000000000044c70: add dword ptr [rdi], ecx; adc dword ptr [rdi], eax; ret; 
0x00000000000351d5: add dword ptr [rdi], ecx; mov bh, 0xc0; ret; 
0x00000000000610d2: add dword ptr [rdi], ecx; mov byte ptr [rax + rax + 0x63490000], al; ret 0x8d49; 
0x00000000000e670d: add dword ptr [rdi], ecx; mov dh, 0x53; add dword ptr [rdx + rdx*8 - 0x76b72d8b], eax; call 0x5c4fc478; ret; 
0x00000000000a6f43: add dword ptr [rdi], ecx; mov esi, 0x75c98408; in eax, dx; xor eax, eax; ret; 
0x00000000000ba970: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x00000000000ba976: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000000ba984: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xe9e9; 
0x000000000009c2e1: add dword ptr [rdi], ecx; test byte ptr [rax + 1], bh; add byte ptr [rax], al; mov rdi, qword ptr [rdi + 0x48]; mov rsi, rbp; call rax; 
0x00000000000f0ef6: add dword ptr [rdi], ecx; test byte ptr [rbx], bh; add dword ptr [rax], eax; add byte ptr [rbx - 0x7af7db84], cl; push qword ptr [rbx - 0xa]; ret; 
0x00000000000ef34e: add dword ptr [rdi], ecx; test byte ptr [rbx], bl; add eax, dword ptr [rax]; add byte ptr [rbx - 0x72bed3af], cl; add dword ptr [rcx], edi; ret 0x8e0f; 
0x0000000000129647: add dword ptr [rdi], ecx; test byte ptr [rdx - 0x17ffffff], ch; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000175f6e: add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x0000000000187f2f: add dword ptr [rdi], ecx; test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000188997: add dword ptr [rdi], ecx; test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000188c63: add dword ptr [rdi], ecx; test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017a30e: add dword ptr [rdi], ecx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000188fc3: add dword ptr [rdi], ecx; xchg dword ptr [rsi + 0xffffffc], esi; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x0000000000107ce6: add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x0000000000057317: add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8949; 
0x000000000013b0b5: add dword ptr [rdi], ecx; xchg eax, esi; ret 0x8341; 
0x0000000000051ef2: add dword ptr [rdi], ecx; xchg eax, esp; ret 0x2041; 
0x0000000000054644: add dword ptr [rdi], ecx; xchg eax, esp; ret 0x7c8b; 
0x0000000000103c18: add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd009; 
0x0000000000103c0e: add dword ptr [rdi], ecx; xchg eax, esp; rol byte ptr [rbx - 0x19743], 0xff; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd009; 
0x000000000015631e: add dword ptr [rdi], ecx; xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000bac57: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x000000000017f1a6: add dword ptr [rdx + 0x310d8d48], edx; movabs dword ptr [0x81048b91148b0001], eax; sub eax, edx; ret; 
0x00000000000b1fc4: add dword ptr [rdx + 0x48028801], ecx; mov eax, edi; ret; 
0x000000000018116b: add dword ptr [rdx + 0x6c0d8d48], edx; add dword ptr [rcx], 0; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000101bf3: add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x000000000018dbac: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000063b3e: add dword ptr [rdx + 4], 1; ret; 
0x0000000000063bb0: add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x000000000018d4dd: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001205bb: add dword ptr [rdx + rax*2], 1; ret; 
0x00000000000e6711: add dword ptr [rdx + rdx*8 - 0x76b72d8b], eax; call 0x5c4fc478; ret; 
0x0000000000151999: add dword ptr [rdx - 0x3eb7fff7], -0x38; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000013b14e: add dword ptr [rdx], eax; pop rbx; ret; 
0x00000000000bbc4e: add dword ptr [rdx], ebp; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb89a: add dword ptr [rdx], ebp; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000013b14d: add dword ptr [rdx], r8d; pop rbx; ret; 
0x000000000016903e: add dword ptr [rip + 0x14634900], eax; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000929e8: add dword ptr [rip + 0x154b75], 1; ret; 
0x00000000000475b2: add dword ptr [rip + 0x1a2b47], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000044902: add dword ptr [rsi + 0x13], esi; mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000044942: add dword ptr [rsi + 0x13], esi; mov rax, -2; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000014c04e: add dword ptr [rsi + 0x49], esi; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000b1fa2: add dword ptr [rsi + 0xf], esp; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b2098: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20b8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20d8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20f8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f55: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x00000000000b2118: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2138: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2158: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4ca8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d29: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000044c67: add dword ptr [rsi + 0xf], esp; fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000b1fd7: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000b1fe7: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000011e1bd: add dword ptr [rsi], edx; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000091009: add dword ptr [rsp + rbp - 0x77], esi; ret 0x8948; 
0x000000000011fa6b: add dword ptr [rsp + rcx], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009d2d0: add dword ptr cs:[rax], eax; cmove rax, rdx; ret; 
0x0000000000185947: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000108a96: add dword ptr es:[rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rdi]; 
0x00000000000f0ef0: add dword ptr fs:[rax], eax; add dh, dh; ret; 
0x00000000000e3772: add eax, 0x1006f9; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000e3682: add eax, 0x1007e9; mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000a717b: add eax, 0x1036dc; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000a70ac: add eax, 0x103787; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x00000000000dc877: add eax, 0x1075f4; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e2b99: add eax, 0x107812; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af9: add eax, 0x1078b2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e285b: add eax, 0x107b50; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27cb: add eax, 0x107be0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e1892: add eax, 0x108b21; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b7deb: add eax, 0x10; lea r11, [rip + 0xf2ffb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65cb: add eax, 0x10; lea r11, [rip + 0xf463b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000013a476: add eax, 0x10; ret; 
0x00000000000dc2d2: add eax, 0x10e089; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc28c: add eax, 0x10e0d7; lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e2: add eax, 0x10e279; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0b5: add eax, 0x10e2ae; lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff2: add eax, 0x10e369; lea rdi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfc9: add eax, 0x10e39a; lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbaf7: add eax, 0x10e864; lea rdi, [rip + 0x10ac1d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d0569: add eax, 0x1138da; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceab2: add eax, 0x1153b9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000cea92: add eax, 0x1153d9; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000bb3a5: add eax, 0x115d6; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x00000000000bb35e: add eax, 0x116bd; cmove rax, rdx; ret; 
0x00000000000cea6e: add eax, 0x118d8d; add rsp, 8; ret; 
0x00000000000bc684: add eax, 0x11b57; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x00000000000bad6e: add eax, 0x11fdd; cmove rax, rdx; ret; 
0x00000000000c8d43: add eax, 0x121620; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b93: add eax, 0x1217c8; lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d46e: add eax, 0x12a4d; cmove rax, rdx; ret; 
0x00000000000baf7e: add eax, 0x12a9d; cmove rax, rdx; ret; 
0x00000000000bb0fe: add eax, 0x12bad; cmove rax, rdx; ret; 
0x000000000007e256: add eax, 0x12bcc5; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e296: add eax, 0x12bd85; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1aa: add eax, 0x12bef1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007de10: add eax, 0x12c30b; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000009cdb7: add eax, 0x12cd4; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x00000000000bad94: add eax, 0x12d57; cmovne rax, rdx; ret; 
0x00000000000bad2e: add eax, 0x12ded; cmove rax, rdx; ret; 
0x000000000009d2ce: add eax, 0x12edd; cmove rax, rdx; ret; 
0x000000000007ad35: add eax, 0x12f166; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x000000000009d30e: add eax, 0x1303d; cmove rax, rdx; ret; 
0x00000000000780e7: add eax, 0x131c54; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077fbb: add eax, 0x131c80; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077dab: add eax, 0x131f10; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x00000000000777bb: add eax, 0x132380; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000bae5e: add eax, 0x1341d; cmove rax, rdx; ret; 
0x0000000000163a0d: add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009c602: add eax, 0x147869; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009c473: add eax, 0x147ad8; call qword ptr [rax]; 
0x000000000009c292: add eax, 0x147cb9; call qword ptr [rax]; 
0x000000000009c1b2: add eax, 0x147d99; call qword ptr [rax]; 
0x000000000009d4f5: add eax, 0x14a1ae; add rsp, 8; ret; 
0x000000000009d4ee: add eax, 0x14a1cd; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000009d4b3: add eax, 0x14a1f0; ret; 
0x000000000009d4ac: add eax, 0x14a20f; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x0000000000098a36: add eax, 0x14b4a5; mov qword ptr [rax], rdi; ret; 
0x00000000000981a2: add eax, 0x14bcc9; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000097992: add eax, 0x14c4d9; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009d6e4: add eax, 0x14cc97; mov rsi, rbp; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d69c: add eax, 0x14ccd7; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4cd: add eax, 0x14ce9e; lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009651d: add eax, 0x14d89e; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x0000000000096283: add eax, 0x14db38; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x00000000000989c7: add eax, 0x14ec08; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009389c: add eax, 0x15063f; mov qword ptr [rax], rdx; ret; 
0x0000000000093892: add eax, 0x150749; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x000000000009355f: add eax, 0x150d48; ret; 
0x000000000009353d: add eax, 0x150d4e; ret; 
0x0000000000093555: add eax, 0x150d56; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x150d48], eax; ret; 
0x0000000000093510: add eax, 0x150d73; ret; 
0x0000000000093532: add eax, 0x150d79; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x00000000000934f0: add eax, 0x150d8b; ret; 
0x0000000000093505: add eax, 0x150da6; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934e5: add eax, 0x150dc6; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x000000000019604b: add eax, 0x150ee900; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000932b6: add eax, 0x15102d; ret; 
0x00000000000932a6: add eax, 0x151035; ret; 
0x0000000000093256: add eax, 0x15103d; ret; 
0x0000000000093246: add eax, 0x151055; ret; 
0x0000000000092952: add eax, 0x152d09; ret; 
0x0000000000094346: add eax, 0x15326d; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000901f2: add eax, 0x153c79; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008ffa7: add eax, 0x153ec4; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000093575: add eax, 0x154072; ret; 
0x0000000000092a4d: add eax, 0x154b12; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000008c7a2: add eax, 0x1576c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008926a: add eax, 0x15ac01; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000083f82: add eax, 0x15fee9; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000009e4e4: add eax, 0x16b07; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x00000000000d2a92: add eax, 0x16d; ret; 
0x000000000004332e: add eax, 0x174a8d; mulss xmm0, dword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043301: add eax, 0x174ada; mulss xmm0, dword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f6d: add eax, 0x174e2e; mulsd xmm0, qword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f3b: add eax, 0x174e70; mulsd xmm0, qword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042dc3: add eax, 0x174fc8; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x0000000000042f75: add eax, 0x175456; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f43: add eax, 0x175490; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043336: add eax, 0x175751; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043309: add eax, 0x175782; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000339ca: add eax, 0x17bf7d; ret; 
0x000000000014616d: add eax, 0x17e; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000009ce84: add eax, 0x18087; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000005f672: add eax, 0x1847f9; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000005f562: add eax, 0x184909; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000026c62: add eax, 0x188824; ret; 
0x0000000000026c72: add eax, 0x18a6ae; ret; 
0x0000000000043ae0: add eax, 0x18c48348; ret; 
0x00000000000536d9: add eax, 0x193d22; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000536d2: add eax, 0x193d2e; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000559f2: add eax, 0x194941; lea rsi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052d73: add eax, 0x197618; lea rdi, [rsp + 0x40]; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000048c02: add eax, 0x19b269; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000485fa: add eax, 0x19b871; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004855a: add eax, 0x19b911; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044db7: add eax, 0x19f0b4; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044c77: add eax, 0x19f1f4; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044b3a: add eax, 0x19f331; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000047384: add eax, 0x19f346; sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000044e24: add eax, 0x19f37f; mov eax, edx; ret; 
0x0000000000044de1: add eax, 0x19f3c2; ret; 
0x0000000000044dd1: add eax, 0x19f3d6; ret; 
0x0000000000044a8a: add eax, 0x19f3e1; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000449b2: add eax, 0x19f4b9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000044992: add eax, 0x19f4d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004495a: add eax, 0x19f511; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004491a: add eax, 0x19f551; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000448da: add eax, 0x19f591; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044880: add eax, 0x19f5eb; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004415a: add eax, 0x19fd11; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f32: add eax, 0x19ff39; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df2: add eax, 0x1a0079; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000434b3: add eax, 0x1a09b8; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043135: add eax, 0x1a0d36; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042d2c: add eax, 0x1a113f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000048872: add eax, 0x1a18af; add rsp, 8; ret; 
0x0000000000042162: add eax, 0x1a1d09; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000042102: add eax, 0x1a1d69; mov dword ptr fs:[rax], 0x2a; mov rax, rcx; ret; 
0x0000000000047ea6: add eax, 0x1a2261; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000043c9c: add eax, 0x1a66a7; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000035492: add eax, 0x1ae971; add rax, qword ptr fs:[0]; ret; 
0x00000000000354b2: add eax, 0x1aea31; add rax, qword ptr fs:[0]; ret; 
0x00000000000354d2: add eax, 0x1aea51; add rax, qword ptr fs:[0]; ret; 
0x0000000000035262: add eax, 0x1aeba1; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034da2: add eax, 0x1af021; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034d62: add eax, 0x1af081; mov qword ptr [rax], rdx; ret; 
0x00000000000339e2: add eax, 0x1b03e1; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000039505: add eax, 0x1b0e5e; lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394a5: add eax, 0x1b0eb6; lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009cd64: add eax, 0x1b197; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x00000000000375f5: add eax, 0x1b2d6e; lea rdi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003758b: add eax, 0x1b2dd0; lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003396a: add eax, 0x1b2ed1; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x0000000000037459: add eax, 0x1b2f0a; lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373f8: add eax, 0x1b2f5b; lea rdi, [rip + 0x1af55c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037320: add eax, 0x1b3043; lea rdi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f93: add eax, 0x1b33d0; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f65: add eax, 0x1b33fe; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d27: add eax, 0x1b363c; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d00: add eax, 0x1b3663; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a47: add eax, 0x1b390c; lea rdi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a1e: add eax, 0x1b3935; lea rdi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003689b: add eax, 0x1b3ac8; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036438: add eax, 0x1b3f23; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036415: add eax, 0x1b3f4e; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036199: add eax, 0x1b41ba; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000360c4: add eax, 0x1b429f; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035563: add eax, 0x1b4df8; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a30: add eax, 0x1b592b; lea rdi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c3: add eax, 0x1b59a0; lea rdi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030cf2: add eax, 0x1b5a11; ret; 
0x0000000000034927: add eax, 0x1b5a34; lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003434d: add eax, 0x1b6016; lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034316: add eax, 0x1b604d; lea rdi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003412f: add eax, 0x1b622c; lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003235a: add eax, 0x1b8009; lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f26: add eax, 0x1b843d; lea rdi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009e0e7: add eax, 0x1b854; cmove rax, rdx; ret; 
0x0000000000031de4: add eax, 0x1b857f; lea rdi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c8a: add eax, 0x1b86d9; lea rdi, [rip + 0x1b4a8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a4e: add eax, 0x1b8915; lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a0e: add eax, 0x1b894d; lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009e796: add eax, 0x1b915; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e446: add eax, 0x1bc45; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x0000000000027412: add eax, 0x1bca59; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000026ec2: add eax, 0x1bcfa9; add rax, qword ptr fs:[0]; ret; 
0x0000000000026b53: add eax, 0x1bd358; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000009e2e6: add eax, 0x1bdc5; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000009e36b: add eax, 0x1c090; cmovne rax, rdx; ret; 
0x0000000000025398: add eax, 0x1c1343; mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x0000000000028802: add eax, 0x1c17b1; ret; 
0x00000000000287f2: add eax, 0x1c17d1; ret; 
0x0000000000026b90: add eax, 0x1c3813; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002641d: add eax, 0x1c3d26; ret; 
0x000000000009d734: add eax, 0x1c7e7; cmovne rax, rdx; ret; 
0x000000000009d494: add eax, 0x1c9e7; cmovne rax, rdx; ret; 
0x000000000009ceb4: add eax, 0x1cf27; cmovne rax, rdx; ret; 
0x0000000000032b0e: add eax, 0x1f0f0000; add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000035536: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000018aaf5: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861a5: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018212a: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000194c97: add eax, 0x23de8; divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000194c9f: add eax, 0x25060; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000001148c0: add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b2014: add eax, 0x289018b; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000047d70: add eax, 0x28c48348; ret; 
0x0000000000196581: add eax, 0x2b38e800; clc; lcall [rbx + 0x48]; mov dword ptr [rip + 0x5048c], 0; ret; 
0x0000000000175ff4: add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x00000000000fa445: add eax, 0x2c890000; and al, 0xeb; ret; 
0x00000000000720d2: add eax, 0x31000018; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x000000000012c316: add eax, 0x32050348; ret; 
0x000000000017a3a5: add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000012d2b0: add eax, 0x365db; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d130: add eax, 0x3677b; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x00000000000a726e: add eax, 0x37bd; cmove rax, rdx; ret; 
0x00000000001148a3: add eax, 0x38c48348; ret; 
0x000000000012d1f0: add eax, 0x3908b; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x0000000000196261: add eax, 0x39480005; ret; 
0x000000000015c6a8: add eax, 0x3d8d4800; imul rax, qword ptr [rip - 0x76e51800], -0x13; jmp qword ptr [rsi + 0x2e]; 
0x0000000000154f1b: add eax, 0x3d8d4800; ret; 
0x000000000015fc10: add eax, 0x3d8d4800; test dword ptr [rip - 0x4d17fffb], edx; push rbx; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x000000000015a544: add eax, 0x3d8d4800; xor al, 0x8c; add eax, 0xaa7ee800; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x000000000011db28: add eax, 0x400d8b48; movsxd rcx, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018ab15: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861c5: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018214a: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000012c898: add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x000000000012d35f: add eax, 0x440f4800; ret 0x66c3; 
0x000000000015cf06: add eax, 0x440f4800; ret 0x8d48; 
0x000000000012d115: add eax, 0x440f4800; ret 0xfc3; 
0x00000000000296b9: add eax, 0x45c74800; test al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000489e1: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a30: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000090257: add eax, 0x48001573; sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000178528: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x00000000001741d8: add eax, 0x48054289; mov eax, edi; ret; 
0x000000000016b3a3: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b36: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7986: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b95b6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x0000000000121a3c: add eax, 0x48104623; lea eax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000018d79b: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018dd20: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000154432: add eax, 0x48c48348; ret; 
0x0000000000055637: add eax, 0x48fffffc; lea edi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000146237: add eax, 0x4c0000e2; lea ecx, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000019658b: add eax, 0x5048c; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001960a9: add eax, 0x50666; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001967a6: add eax, 0x510e1; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000196800: add eax, 0x514bf; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000196963: add eax, 0x522fc; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000196a95: add eax, 0x52d82; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000015fc17: add eax, 0x53b2e800; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x00000000001785a9: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000174219: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000114828: add eax, 0x58c48348; ret; 
0x000000000012d358: add eax, 0x58d4800; pop rcx; add eax, 0x440f4800; ret 0x66c3; 
0x00000000001063a5: add eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x000000000012d28b: add eax, 0x5bdc0; lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1cb: add eax, 0x5bea0; lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x0000000000133b60: add eax, 0x5bf08948; ret; 
0x000000000012d10b: add eax, 0x5bf60; lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d35c: add eax, 0x5c18f; cmove rax, rdx; ret; 
0x00000000001062a9: add eax, 0x5d000000; pop r12; ret; 
0x000000000012e6be: add eax, 0x5fbed; cmp rcx, 4; cmovne rax, rdx; ret; 
0x0000000000182573: add eax, 0x60; add rax, rdi; ret; 
0x000000000018ab61: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186211: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018216a: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000012d2da: add eax, 0x60ac1; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d21a: add eax, 0x60ba1; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d15a: add eax, 0x60c61; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000012d39a: add eax, 0x60fb1; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000017bdb6: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000005a511: add eax, 0x63480000; ret 0x8d48; 
0x0000000000168e4b: add eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000147077: add eax, 0x66e64; mov ecx, eax; movsxd rdx, dword ptr [r8 + rcx*4]; add rdx, r8; jmp rdx; 
0x00000000001503f7: add eax, 0x67f74; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x000000000012c2d6: add eax, 0x72050348; ret; 
0x00000000000c895a: add eax, 0x74db8500; and byte ptr [rcx], bh; ret; 
0x00000000000c8a50: add eax, 0x74db8500; sbb bh, byte ptr [rcx]; ret; 
0x00000000000ed627: add eax, 0x7504e183; push rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c8906: add eax, 0x75db8500; fsubr qword ptr [rcx]; ret; 
0x0000000000152122: add eax, 0x78c48348; ret; 
0x000000000011db10: add eax, 0x7cc08548; adc esi, dword ptr [rcx + rax - 0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x00000000000b5cfe: add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x0000000000160eb2: add eax, 0x82fb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000013d313: add eax, 0x83000000; ret; 
0x00000000000c7e55: add eax, 0x83480000; ret 0x4801; 
0x000000000017c0dd: add eax, 0x83480000; ret 0x4910; 
0x000000000017ec31: add eax, 0x83480000; ret 0xe910; 
0x000000000017c031: add eax, 0x83480000; ret 0xeb10; 
0x0000000000053727: add eax, 0x83485300; in al, dx; or al, ch; add r15b, r14b; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ef5ba: add eax, 0x83485375; ret; 
0x0000000000160672: add eax, 0x837f9; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000160612: add eax, 0x83859; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000010caf6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000e26f6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000e2716: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000e2706: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000e2726: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000e26e6: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6e], bh; syscall; 
0x00000000000e2736: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x73], bh; syscall; 
0x000000000017852b: add eax, 0x8428d48; ret; 
0x0000000000114b52: add eax, 0x85480000; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000114af8: add eax, 0x85480000; sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd3299; mov eax, 1; add rsp, 8; ret; 
0x000000000015e862: add eax, 0x85609; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015e7e2: add eax, 0x85689; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015d9a3: add eax, 0x864b8; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015d972: add eax, 0x864e9; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015e94c: add eax, 0x88ca7; xor eax, eax; mov qword ptr [rip + 0x88c96], rsi; ret; 
0x000000000015c708: add eax, 0x88e43; call qword ptr [rax + 0x28]; 
0x000000000015af12: add eax, 0x88f59; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011c047: add eax, 0x8900071d; ret 0xe083; 
0x000000000008a4da: add eax, 0x8901e083; ret 0xd089; 
0x000000000015c6af: add eax, 0x891ae800; in eax, dx; jmp qword ptr [rsi + 0x2e]; 
0x0000000000043ea8: add eax, 0x8944c689; ret 0xeab8; 
0x0000000000031d8b: add eax, 0x89480000; ret 0x294c; 
0x0000000000193b80: add eax, 0x89480000; ret 0xc148; 
0x000000000012c409: add eax, 0x8948d789; ret; 
0x000000000015a992: add eax, 0x894d9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a972: add eax, 0x894f9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a922: add eax, 0x89549; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d9c: add eax, 0x8954f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d6c: add eax, 0x89577; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015a8d2: add eax, 0x89599; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d3c: add eax, 0x8959f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160de8: add eax, 0x895b3; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000160d0c: add eax, 0x895c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cdc: add eax, 0x895ef; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cac: add eax, 0x89617; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015b5cb: add eax, 0x89f80; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b50b: add eax, 0x8a040; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b355: add eax, 0x8a1f6; call qword ptr [rax + 0x28]; 
0x000000000015b2b8: add eax, 0x8a293; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b21b: add eax, 0x8a330; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b185: add eax, 0x8a3c6; call qword ptr [rax]; 
0x000000000015abf6: add eax, 0x8a955; call qword ptr [rax + 0x28]; 
0x000000000015abc1: add eax, 0x8a98a; lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000015abb8: add eax, 0x8a993; call qword ptr [rax]; 
0x000000000006f4d0: add eax, 0x8b4c0000; xchg eax, edx; add qword ptr [rax], rax; add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x000000000015deca: add eax, 0x8c0b9; call qword ptr [rax + 0x10]; 
0x000000000015dc4a: add eax, 0x8c339; call qword ptr [rax + 8]; 
0x000000000015db52: add eax, 0x8c431; call qword ptr [rax]; 
0x000000000013b9d3: add eax, 0x8d481a77; adc eax, 0x7235b; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000147072: add eax, 0x8d4c6b77; add eax, 0x66e64; mov ecx, eax; movsxd rdx, dword ptr [r8 + rcx*4]; add rdx, r8; jmp rdx; 
0x000000000015b907: add eax, 0x8e4b4; mov eax, 1; add rsp, 8; ret; 
0x000000000011f640: add eax, 0x8e57b; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015aacb: add eax, 0x8f2b0; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009e544: add eax, 0x8fc7; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x000000000015be6a: add eax, 0x915fe800; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x0000000000151872: add eax, 0x92529; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000151d2a: add eax, 0x97c51; pop rbx; ret; 
0x0000000000151cb1: add eax, 0x97cca; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151c4a: add eax, 0x97d39; pop rbx; ret; 
0x0000000000151bd1: add eax, 0x97db2; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151b6a: add eax, 0x97e31; pop rbx; ret; 
0x0000000000151af1: add eax, 0x97eaa; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a92: add eax, 0x97f29; pop rbx; ret; 
0x0000000000151cb8: add eax, 0x97f5f; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151a29: add eax, 0x97f92; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151ca6: add eax, 0x97f95; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bd8: add eax, 0x9803f; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151bc6: add eax, 0x98075; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151af8: add eax, 0x9811f; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151a30: add eax, 0x981e7; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151a1e: add eax, 0x9821d; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151979: add eax, 0x9829e; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000015196e: add eax, 0x982cd; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x00000000000b73b2: add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x0000000000160dd7: add eax, 0x9be; add byte ptr [rcx + 0x3eb8c7], cl; add byte ptr [rax], al; syscall; 
0x0000000000151ba2: add eax, 0xa0; pop rbx; ret; 
0x000000000009d424: add eax, 0xa147; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009d364: add eax, 0xa157; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x0000000000145d3a: add eax, 0xa3c3d; add rsp, 8; ret; 
0x0000000000140122: add eax, 0xa3ec9; mov rax, qword ptr fs:[rax]; ret; 
0x000000000014513c: add eax, 0xa47bf; ret; 
0x0000000000145114: add eax, 0xa47e7; add rsp, 8; ret; 
0x000000000009ce14: add eax, 0xa7a7; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x0000000000151c82: add eax, 0xa8; pop rbx; ret; 
0x000000000015a54b: add eax, 0xaa7ee800; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x000000000009fd3e: add eax, 0xaaed; cmove rax, rdx; ret; 
0x00000000001376e0: add eax, 0xb2f3b; add rsp, 8; ret; 
0x000000000012f692: add eax, 0xb47c1; add rax, qword ptr fs:[0]; ret; 
0x000000000012ec1a: add eax, 0xb5251; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012c76a: add eax, 0xb7701; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043e9e: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000009d3ce: add eax, 0xb8dd; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x000000000013acd1: add eax, 0xba; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x000000000012bf00: add eax, 0xbe4b7; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000012bef9: add eax, 0xbe4d2; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x000000000012bd5c: add eax, 0xbe5df; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd2c: add eax, 0xbe607; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcfc: add eax, 0xbe62f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bccc: add eax, 0xbe657; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc9c: add eax, 0xbe67f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc6c: add eax, 0xbe6a7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc3c: add eax, 0xbe6cf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc0c: add eax, 0xbe6f7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbac: add eax, 0xbe70f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbe0: add eax, 0xbe71b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012bb7c: add eax, 0xbe737; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb4c: add eax, 0xbe75f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb1c: add eax, 0xbe787; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012baec: add eax, 0xbe7af; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012babc: add eax, 0xbe7d7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba5c: add eax, 0xbe827; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba2c: add eax, 0xbe84f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9fc: add eax, 0xbe877; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9cc: add eax, 0xbe89f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b99c: add eax, 0xbe8c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b96c: add eax, 0xbe8ef; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b93c: add eax, 0xbe917; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b90c: add eax, 0xbe93f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8dc: add eax, 0xbe967; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8ac: add eax, 0xbe98f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b87c: add eax, 0xbe9b7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b84c: add eax, 0xbe9df; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b81c: add eax, 0xbe9ff; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000014622d: add eax, 0xbe; xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000012b7ec: add eax, 0xbeb07; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000014f5f5: add eax, 0xc0310000; mov rsi, qword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000018bf2a: add eax, 0xc0310000; ret; 
0x00000000001210b2: add eax, 0xc2da9; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000120549: add eax, 0xc3e0e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000120520: add eax, 0xc3e37; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001204ef: add eax, 0xc3e68; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000001204c9: add eax, 0xc3e8e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012446c: add eax, 0xc40cb; add byte ptr [rax + rax], al; add al, ch; mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000120172: add eax, 0xc41e5; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000120141: add eax, 0xc4216; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001785ad: add eax, 0xc428d48; ret; 
0x00000000000b6b3d: add eax, 0xc478d48; ret; 
0x000000000009e750: add eax, 0xc516b; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000011ea22: add eax, 0xc5449; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000009e400: add eax, 0xc549b; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000011e27a: add eax, 0xc5bf1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e24a: add eax, 0xc5c21; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001225bc: add eax, 0xc5de3; add byte ptr [rax + rax], al; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x000000000012091a: add eax, 0xc78f9; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000012081a: add eax, 0xc79f9; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000009e2a0: add eax, 0xc7feb; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x000000000011ba42: add eax, 0xc8429; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011b7a2: add eax, 0xc86b9; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000011adaa: add eax, 0xc90c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118412: add eax, 0xcba59; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001183dd: add eax, 0xcba8e; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001183cb: add eax, 0xcbaa0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009e637: add eax, 0xcbd4; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e205: add eax, 0xcbf6; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x0000000000117b7c: add eax, 0xcc2ef; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009e597: add eax, 0xcc64; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x00000000001174e2: add eax, 0xcc989; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000115b95: add eax, 0xce2d6; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000001147a2: add eax, 0xcf6c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114772: add eax, 0xcf6f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114652: add eax, 0xcf819; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000117e00: add eax, 0xd025b; add rsp, 0x18; ret; 
0x0000000000117dac: add eax, 0xd02ef; pop rbp; pop r12; ret; 
0x0000000000117888: add eax, 0xd0783; add rsp, 8; ret; 
0x0000000000117829: add eax, 0xd0802; pop rbx; pop rbp; pop r12; ret; 
0x000000000011fea1: add eax, 0xd0858b48; idiv edi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000001133f2: add eax, 0xd0a79; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011333a: add eax, 0xd0b31; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113326: add eax, 0xd0b9d; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x000000000011299f: add eax, 0xd14cc; mov rdx, rbp; mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000112835: add eax, 0xd1636; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001127d8: add eax, 0xd1693; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011654b: add eax, 0xd19e0; add rsp, 8; ret; 
0x0000000000116524: add eax, 0xd1a03; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000112224: add eax, 0xd1c47; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000001121d4: add eax, 0xd1c97; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001116ba: add eax, 0xd27b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000117d76: add eax, 0xd27f5; pop rcx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000111582: add eax, 0xd28e9; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000001177e9: add eax, 0xd2d7a; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bb44e: add eax, 0xd2e6d; cmp rcx, 4; cmovne rax, rdx; ret; 
0x0000000000114ec7: add eax, 0xd2ed0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000114bb6: add eax, 0xd321d; add rsp, 8; ret; 
0x0000000000114baf: add eax, 0xd324c; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x0000000000114b02: add eax, 0xd3299; mov eax, 1; add rsp, 8; ret; 
0x000000000010faf2: add eax, 0xd4379; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b798d: add eax, 0xd478d48; ret; 
0x0000000000114f10: add eax, 0xd543b; lea rsi, [rip - 0x3c]; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114ef0: add eax, 0xd566b; add rsp, 8; ret; 
0x0000000000113c47: add eax, 0xd6764; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b77: add eax, 0xd6834; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010cbd2: add eax, 0xd7299; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010cbba: add eax, 0xd72b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb62: add eax, 0xd7309; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c992: add eax, 0xd74d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c93a: add eax, 0xd7531; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8da: add eax, 0xd7591; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c68a: add eax, 0xd77e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c63a: add eax, 0xd7831; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5ea: add eax, 0xd7881; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000111879: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x000000000010bb92: add eax, 0xde7a1; lea rsi, [rsp + 0x2c]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb44: add eax, 0xde7ef; xor esi, esi; mov edi, dword ptr [rsp + 0x2c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010910e: add eax, 0xe1225; xor esi, esi; mov edi, dword ptr [rsp + 0xa8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001019ca: add eax, 0xe24a1; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000010197a: add eax, 0xe24f1; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000010512e: add eax, 0xe521d; lea rsi, [rip - 0x2bda]; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000129434: add eax, 0xe8000000; ret; 
0x00000000001968e2: add eax, 0xe8ea30e8; jmp qword ptr [rsi + 0xf]; 
0x0000000000103ce9: add eax, 0xe9000000; xabort -1; jmp qword ptr [rsi + 0xf]; 
0x000000000009e72b: add eax, 0xea950; lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3db: add eax, 0xeac80; lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e27b: add eax, 0xeae00; lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x0000000000082c29: add eax, 0xeb000000; test eax, 0xe9c68948; sub al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x000000000009e34c: add eax, 0xeb1af; cmove rax, rdx; ret; 
0x000000000019679c: add eax, 0xeb75e800; call 0xffffffffc761c3a5; add eax, 0x510e1; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009e687: add eax, 0xedc4; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e7: add eax, 0xee54; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000013f206: add eax, 0xee610ce8; jmp qword ptr [rsi + 0xf]; 
0x000000000013f1d6: add eax, 0xee613ce8; jmp qword ptr [rsi + 0xf]; 
0x000000000013f1a3: add eax, 0xee616fe8; jmp qword ptr [rsi + 0xf]; 
0x000000000013f173: add eax, 0xee619fe8; jmp qword ptr [rsi + 0xf]; 
0x000000000013f143: add eax, 0xee61cfe8; jmp qword ptr [rsi + 0xf]; 
0x000000000016b70a: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e77a: add eax, 0xef651; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000012c071: add eax, 0xef92a1e8; jmp qword ptr [rsi + 0xf]; 
0x000000000009e42a: add eax, 0xef981; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2ca: add eax, 0xefb01; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e38a: add eax, 0xeffd1; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000012e118: add eax, 0xf24ee2e9; call qword ptr [rax - 0x18]; 
0x000000000016b713: add eax, 0xf7f0ff3; ret; 
0x000000000012ec88: add eax, 0xf8cef2e9; call qword ptr [rax - 0x18]; 
0x0000000000103e25: add eax, 0xf9830000; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000012e6c1: add eax, 0xf9834800; add al, 0x48; cmovne eax, edx; ret; 
0x000000000012e054: add eax, 0xfdd2a6e9; call qword ptr [rax - 0x18]; 
0x000000000012e044: add eax, 0xfdd2b6e9; call qword ptr [rax - 0x18]; 
0x000000000012e104: add eax, 0xfdf7b6e9; call qword ptr [rax - 0x18]; 
0x000000000012ec44: add eax, 0xfdf936e9; call qword ptr [rax - 0x18]; 
0x000000000012e0b4: add eax, 0xfe09a6e9; call qword ptr [rax - 0x18]; 
0x000000000012e0c4: add eax, 0xfe09c6e9; call qword ptr [rax - 0x18]; 
0x000000000012f1a8: add eax, 0xfe2532e9; call qword ptr [rax - 0x18]; 
0x000000000012f1c8: add eax, 0xfe25b2e9; call qword ptr [rax - 0x18]; 
0x000000000012ec54: add eax, 0xfe50d6e9; call qword ptr [rax - 0x18]; 
0x000000000012ec64: add eax, 0xfe5236e9; call qword ptr [rax - 0x18]; 
0x000000000009fd7e: add eax, 0xff2d; cmove rax, rdx; ret; 
0x000000000012d2f6: add eax, 0xfff8cd85; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x000000000012d236: add eax, 0xfff8ce65; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d176: add eax, 0xfff8cf25; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d37b: add eax, 0xfff8d070; cmovne rax, rdx; ret; 
0x0000000000150d23: add eax, 0xffff61d8; lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x000000000015af34: add eax, 0xffff96e9; call qword ptr [rax - 0x18]; 
0x000000000015d314: add eax, 0xffffa6e9; call qword ptr [rax - 0x18]; 
0x000000000007e217: add eax, 0xffffed2f; mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000009b03a: add eax, 0xfffffe81; mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009afd3: add eax, 0xfffffee8; mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c394: add eax, 0xffffff57; cmove rax, rdx; ret; 
0x000000000012080b: add eax, 1; mov dword ptr [rdx], eax; ret; 
0x000000000012090c: add eax, 1; mov word ptr [rdx], ax; ret; 
0x0000000000027abd: add eax, 1; push rax; call rbx; 
0x000000000009e47b: add eax, 1; ret; 
0x000000000013b3b5: add eax, 2; mov dword ptr [r8], r10d; mov qword ptr [r9], rax; mov eax, edx; ret; 
0x00000000000ce478: add eax, 2; ret; 
0x00000000000ce491: add eax, 3; ret; 
0x0000000000155bc7: add eax, 4; bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x0000000000155bf7: add eax, 4; bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x00000000000ecaab: add eax, 8; ret; 
0x0000000000026ec9: add eax, dword ptr [0]; ret; 
0x000000000012d132: add eax, dword ptr [eax]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x00000000000f5fd0: add eax, dword ptr [rax + 0x75040878]; mov edi, 0xf708588b; ret; 
0x00000000000a42cb: add eax, dword ptr [rax]; add bh, dh; ret; 
0x000000000013a0db: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x0000000000043d88: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000004b974: add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x0000000000080b19: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x129b01; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000802c4: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x12a112; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001926ed: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x275c9; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x00000000000e7052: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xc51a8; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000117dfb: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xd025b; add rsp, 0x18; ret; 
0x0000000000117883: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xd0783; add rsp, 8; ret; 
0x000000000006cb28: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x13cb6e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000191a5c: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x2821a; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000140c50: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; xchg dword ptr [rax + 0x31000000], eax; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x00000000000ecdfa: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; or ecx, dword ptr [rax + 0x63]; ret 0x634c; 
0x000000000005566f: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000000c8183: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017a312: add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000a418d: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000017c27d: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017edd1: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c2a1: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000014caee: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000120146: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000152172: add eax, dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000012c676: add eax, dword ptr [rax]; add byte ptr [rax], al; cmovne eax, edx; ret; 
0x0000000000139845: add eax, dword ptr [rax]; add byte ptr [rax], al; mov edi, dword ptr [rbp - 0x60]; syscall; 
0x00000000000ce4d3: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000010d66e: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000139583: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; ret; 
0x0000000000193286: add eax, dword ptr [rax]; add byte ptr [rbp - 0x77], cl; mov dword ptr [rcx - 0x7d], 0x894c07e7; ret 0x8d4f; 
0x0000000000052e2f: add eax, dword ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000086046: add eax, dword ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000d2426: add eax, dword ptr [rax]; add byte ptr [rbx + rcx*4 + 0x15], cl; and byte ptr [rbp + 0x11], dl; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ef352: add eax, dword ptr [rax]; add byte ptr [rbx - 0x72bed3af], cl; add dword ptr [rcx], edi; ret 0x8e0f; 
0x00000000001195ea: add eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 2; 
0x0000000000026624: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000007b8f5: add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], al; out dx, al; add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x00000000001914da: add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], al; test dword ptr [rcx], 0x40003d; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8441; 
0x0000000000120b9a: add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x00000000000a2d09: add eax, dword ptr [rax]; add byte ptr [rcx - 9], al; ret 0xf800; 
0x000000000012f184: add eax, dword ptr [rax]; add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x0000000000127673: add eax, dword ptr [rax]; add byte ptr [rdx], al; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000012be75: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000010bd3e: add eax, dword ptr [rax]; add dh, dh; ret 0xf02; 
0x000000000010bd2c: add eax, dword ptr [rax]; add dh, dh; ret 0xf20; 
0x000000000010bd35: add eax, dword ptr [rax]; add dh, dh; ret 0xf80; 
0x000000000012d13a: add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000ba63c: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000012d2b3: add eax, dword ptr [rax]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d133: add eax, dword ptr [rax]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1f3: add eax, dword ptr [rax]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x00000000000dc873: add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x1075f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114717: add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x00000000000ba621: add eax, dword ptr [rax]; ret; 
0x0000000000058e7d: add eax, dword ptr [rbp - 0x77]; ret; 
0x000000000012d5a3: add eax, dword ptr [rbp - 0x7c]; sal byte ptr [rbp - 0x6b], 0x48; mov eax, edi; ret; 
0x000000000014712a: add eax, dword ptr [rbx - 0x1d7c0320]; cld; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x0000000000147127: add eax, dword ptr [rbx - 0x1f7cfc3e]; cld; and edx, 0xfffffffc; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x0000000000035ae0: add eax, dword ptr [rbx - 0x4288f508]; lea rdx, [rip + 0x16f093]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000175fb9: add eax, dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x0000000000121b21: add eax, dword ptr [rcx + rdx]; ret; 
0x00000000001132e8: add eax, dword ptr [rcx]; add byte ptr [rax], al; add bl, ch; out 0x90, al; mov eax, 0xc; syscall; 
0x00000000000b1f4e: add eax, dword ptr [rcx]; add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000010c90b: add eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001218f9: add eax, dword ptr [rdx + rcx]; ret; 
0x00000000001760b9: add eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x0000000000168c40: add eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000017a3a8: add eax, dword ptr fs:[rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000012d2b2: add eax, dword ptr gs:[rax]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x00000000000eca88: add eax, eax; pop rbx; pop rbp; ret; 
0x0000000000182641: add eax, eax; vzeroupper; ret; 
0x00000000001605f8: add eax, ebp; and cl, byte ptr [rsp + rbp*8 - 1]; xor eax, eax; add rsp, 8; ret; 
0x000000000010b935: add eax, ebp; in eax, 7; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000010bd9c: add eax, ebp; jmp rax; 
0x00000000000f93de: add eax, ebx; jmp rax; 
0x000000000012d3e7: add eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000185d48: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x0000000000064072: add eax, ecx; jmp rax; 
0x00000000000aa589: add eax, ecx; ret; 
0x00000000001815a0: add eax, ecx; sub rax, rdi; ret; 
0x000000000018aa1d: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860dd: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa6: add eax, ecx; vzeroupper; ret; 
0x000000000018263e: add eax, edi; add rax, r8; vzeroupper; ret; 
0x00000000000aa586: add eax, edi; add rax, rcx; ret; 
0x000000000018aa1a: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860da: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa3: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x00000000000aadaa: add eax, edi; add rax, rsi; ret; 
0x0000000000080a46: add eax, edi; jmp rax; 
0x00000000000a7045: add eax, edi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a705d: add eax, edi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a7026: add eax, edi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a6ff9: add eax, edi; ret; 
0x000000000018aad5: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186195: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000018211a: add eax, edi; vzeroupper; ret; 
0x000000000002729b: add eax, edx; jmp rax; 
0x000000000007d139: add eax, edx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0b1: add eax, edx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfc9: add eax, edx; mov dword ptr [rbp - 0x4e8], 1; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007deb9: add eax, edx; mov dword ptr [rbp - 0x53c], 1; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x000000000013b85c: add eax, edx; mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x0000000000148094: add eax, edx; pop rbx; pop rbp; ret; 
0x00000000000b0346: add eax, edx; sub rax, rdi; ret; 
0x00000000000ce17b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000114715: add eax, esi; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x0000000000065cf2: add eax, esi; jmp rax; 
0x000000000007718f: add eax, esi; mov dword ptr [rbp - 0x4f0], 1; mov r10, rdx; xor esi, esi; jmp rax; 
0x00000000000777ff: add eax, esi; mov dword ptr [rbp - 0x548], 0; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000048aac: add eax, esi; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000077727: add eax, esi; mov r10, rdx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x000000000007776f: add eax, esi; mov r10, rdx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x00000000000aadad: add eax, esi; ret; 
0x000000000005c5e4: add ebp, 0x30; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000d0da9: add ebp, dword ptr [rbx + 0x11]; add byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0x8341; 
0x00000000000d984d: add ebp, dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000cefac: add ebp, dword ptr [rcx]; ret 0x48d; 
0x00000000000f3cd4: add ebp, eax; adc eax, 0xab89fff3; nop; add byte ptr [rax], al; add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x0000000000148853: add ebp, eax; sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000000551ac: add ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000015df12: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000008425e: add ebx, dword ptr [rax]; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000151976: add ebx, dword ptr [rbx - 0x39]; add eax, 0x9829e; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000043a8c: add ebx, dword ptr [rdx]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000011db17: add ebx, eax; xor ebp, ebp; pop rax; pop rdi; call rax; 
0x0000000000133b73: add ebx, ebp; cwde; xor eax, eax; ret; 
0x000000000013be6b: add ebx, ebp; ret 0x9066; 
0x000000000016b8d3: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000010b812: add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000015d3c8: add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000485de: add ecx, 0x3039; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x00000000000e6782: add ecx, dword ptr [r8 - 0x7d]; ret; 
0x00000000000b205a: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000134fbc: add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x00000000000fae33: add ecx, dword ptr [rax + 0x29]; ret 0x148; 
0x00000000000a6242: add ecx, dword ptr [rax + 0x29]; ret 0x14c; 
0x0000000000128dd5: add ecx, dword ptr [rax + 0x29]; ret 0x3948; 
0x000000000013f7f6: add ecx, dword ptr [rax + 0x29]; ret 0x3949; 
0x000000000009496c: add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000012a3e2: add ecx, dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xc083; 
0x000000000012fc79: add ecx, dword ptr [rax + 9]; ret 0x850f; 
0x000000000013b5bc: add ecx, dword ptr [rax - 0x3f]; call 0x7ff438c8; ret; 
0x0000000000151cae: add ecx, dword ptr [rax - 0x73]; add eax, 0x97cca; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bce: add ecx, dword ptr [rax - 0x73]; add eax, 0x97db2; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151aee: add ecx, dword ptr [rax - 0x73]; add eax, 0x97eaa; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a26: add ecx, dword ptr [rax - 0x73]; add eax, 0x97f92; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x000000000017a353: add ecx, dword ptr [rax - 0x73]; add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000001966ee: add ecx, dword ptr [rax - 0x73]; insb byte ptr [rdi], dx; ret; 
0x00000000000b205e: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x00000000000d2005: add ecx, dword ptr [rax - 0x77]; or r9b, bpl; ret; 
0x0000000000147227: add ecx, dword ptr [rax - 0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000004b7b7: add ecx, dword ptr [rax - 0x77]; ret 0xf641; 
0x000000000007bd7f: add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0x8348; 
0x000000000007e6ef: add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0x8349; 
0x00000000000f1594: add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000a5f05: add ecx, dword ptr [rax - 0x77]; test dword ptr [rax - 0x7d], 0x840f06ef; ret; 
0x0000000000150fb4: add ecx, dword ptr [rax - 0x7b]; sal byte ptr [rsp + rbx + 0x48], 0x8b; cmp byte ptr [rax - 0x7b], cl; push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000139c89: add ecx, dword ptr [rax - 0x7d]; call qword ptr [rcx]; 
0x00000000000d8d5a: add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000004738f: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x000000000016b642: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000156fc1: add ecx, dword ptr [rbx - 0x7483dbac]; or byte ptr [rcx], dil; ret 0x5375; 
0x00000000001488df: add ecx, dword ptr [rbx - 0x74b7b7ad]; cmp ecx, dword ptr [rbp + 1]; out 0x44, eax; sub edx, esp; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x00000000000fca57: add ecx, dword ptr [rbx]; add byte ptr [rax + 0xf], al; mov dh, 0xf6; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000fc7d5: add ecx, dword ptr [rbx]; add byte ptr [rbp + 0xf], al; mov dh, 0xed; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000b6aa4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000000b78e4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 7]; ret; 
0x00000000000b5494: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000b9514: add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000081991: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000000b205b: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x0000000000046599: add ecx, dword ptr [rcx - 0x7d]; mov byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000005fde3: add ecx, dword ptr [rcx - 0x7d]; ret 0x8b05; 
0x00000000000d9540: add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000420f8: add ecx, dword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x000000000012e069: add ecx, dword ptr [rdi + rdi*8]; call qword ptr [rax - 0x18]; 
0x000000000015abf0: add ecx, dword ptr [rdi]; fmul dword ptr [rax - 0x75]; add eax, 0x8a955; call qword ptr [rax + 0x28]; 
0x00000000000eff32: add ecx, dword ptr [rdi]; test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000003a7da: add ecx, dword ptr [rdi]; test dl, dl; and byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fe07], al; jmp qword ptr [rax]; 
0x0000000000187e51: add ecx, dword ptr [rdi]; test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b5cc0: add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000017a357: add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000546d1: add ecx, dword ptr [rdi]; xchg eax, edi; ret 0x8545; 
0x00000000000c91ef: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x00000000000c9245: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000000d9bfb: add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015e1fb: add ecx, dword ptr [rsp + 8]; call rax; 
0x0000000000191a6b: add ecx, eax; jmp rcx; 
0x000000000005f469: add ecx, eax; mov eax, r9d; ret; 
0x00000000001818d0: add ecx, eax; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000010bfa1: add ecx, ebp; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000001103e4: add ecx, ebp; paddw mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000049b9f: add ecx, ebp; ret 0xfffd; 
0x000000000012718c: add ecx, ebp; sar dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000018aef2: add ecx, ebx; jmp rcx; 
0x0000000000117fa0: add ecx, ebx; ret 0x3941; 
0x0000000000118274: add ecx, ebx; ret; 
0x00000000000a6fe2: add ecx, ecx; jmp rcx; 
0x00000000000fe235: add ecx, edi; jmp rcx; 
0x00000000000ba5f4: add ecx, esi; jmp rcx; 
0x000000000014c80d: add edi, 0x10; jmp rcx; 
0x00000000000b900d: add edi, 0x10; lea r11, [rip + 0xf1e9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b868d: add edi, 0x10; lea r11, [rip + 0xf279d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dd6: add edi, 0x10; lea r11, [rip + 0xf3010]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7db7: add edi, 0x10; lea r11, [rip + 0xf302f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69dd: add edi, 0x10; lea r11, [rip + 0xf426d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65b6: add edi, 0x10; lea r11, [rip + 0xf4650]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6597: add edi, 0x10; lea r11, [rip + 0xf466f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000015e2b6: add edi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000000b9042: add edi, 0x20; lea r11, [rip + 0xf1e68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c2: add edi, 0x20; lea r11, [rip + 0xf2768]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a12: add edi, 0x20; lea r11, [rip + 0xf4238]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5412: add edi, 0x20; lea r11, [rip + 0xf5664]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001478ab: add edi, 0x23b0; pop rbp; jmp rcx; 
0x0000000000115b9d: add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000012be72: add edi, 0x308; mov esi, 0x80; syscall; 
0x00000000000b8f00: add edi, 0x30; lea r11, [rip + 0xf1faa]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68df: add edi, 0x30; lea r11, [rip + 0xf436b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014f264: add edi, 0x58; jmp rcx; 
0x000000000014e924: add edi, 0x68; jmp rcx; 
0x000000000014bc47: add edi, 0xc8; jmp rcx; 
0x00000000000a0991: add edi, 1; mov eax, 0; test dl, dl; cmovne rax, rdi; ret; 
0x00000000000bb008: add edi, 4; xor esi, esi; call 0x25220; mov rax, rbx; pop rbx; ret; 
0x000000000009c79e: add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000013b087: add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000065899: add edi, dword ptr [rsp + rdx]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000115494: add edi, eax; add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000005e024: add edi, eax; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000011e23d: add edi, ebp; xor eax, eax; ret; 
0x00000000000b911e: add edi, ecx; add rsi, rcx; lea r11, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b728e: add edi, ecx; add rsi, rcx; lea r11, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bde: add edi, ecx; add rsi, rcx; lea r11, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000016d0d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf51: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc52: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c951: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c651: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c351: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c051: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd51: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a471: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a172: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e71: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b71: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169871: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169571: add edi, edx; add rsi, rdx; lea r11, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169271: add edi, edx; add rsi, rdx; lea r11, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166587: add edi, edx; add rsi, rdx; lea r11, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bb7: add edi, edx; add rsi, rdx; lea r11, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000418a5: add edi, edx; jmp rdi; 
0x000000000018cf71: add edi, edx; lea r11, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cef7: add edi, edx; lea r11, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce68: add edi, edx; lea r11, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc5d: add edi, edx; lea r11, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb2b: add edi, edx; lea r11, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca65: add edi, edx; lea r11, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9e7: add edi, edx; lea r11, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c950: add edi, edx; lea r11, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c754: add edi, edx; lea r11, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c623: add edi, edx; lea r11, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c522: add edi, edx; lea r11, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b941: add edi, edx; lea r11, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8c7: add edi, edx; lea r11, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b838: add edi, edx; lea r11, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b62d: add edi, edx; lea r11, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4fb: add edi, edx; lea r11, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b435: add edi, edx; lea r11, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3b7: add edi, edx; lea r11, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b320: add edi, edx; lea r11, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b124: add edi, edx; lea r11, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff3: add edi, edx; lea r11, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee4: add edi, edx; lea r11, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d33c: add edi, edx; lea r11, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba97: add edi, edx; lea r11, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b93b: add edi, edx; lea r11, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a848: add edi, edx; lea r11, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c3a: add edi, edx; lea r11, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fb7: add edi, edx; lea r11, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e45: add edi, edx; lea r11, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016649b: add edi, edx; lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d6: add edi, edx; lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163acb: add edi, edx; lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a06: add edi, edx; lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000013b3ed: add edi, edx; mov qword ptr [r9], rdi; ret; 
0x0000000000167180: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b0: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b6c: add edi, edx; sfence; lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166184: add edi, edx; sfence; lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000454f9: add edi, esi; mov rdx, rbp; mov rsi, r15; mov rdi, r12; call rbx; 
0x00000000001933f9: add edi, esi; ret 0x7ffe; 
0x00000000001488e7: add edi, esp; sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x00000000000b8fc8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf1edf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8648: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf27df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70e8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf3beb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6998: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf42af]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a48: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf50ab]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5398: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf56db]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000013dfcb: add edx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x000000000013cc38: add edx, 1; syscall; 
0x000000000013b141: add edx, 2; mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013b35a: add edx, 2; mov dword ptr [r8], eax; mov eax, edx; mov qword ptr [r9], r10; ret; 
0x0000000000147128: add edx, 3; and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x000000000013b44b: add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x00000000001164d4: add edx, 8; mov qword ptr [rip + 0xd1a52], rdx; add rsp, 8; ret; 
0x00000000001164a5: add edx, 8; mov qword ptr [rip + 0xd1a81], rdx; ret; 
0x00000000001840d9: add edx, dword ptr [rcx + rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000011f681: add edx, eax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000a70b6: add edx, eax; jmp rdx; 
0x00000000000576c2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000004179a: add edx, edi; jmp rdx; 
0x000000000011fddc: add edx, edx; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x0000000000055f7f: add edx, esi; cmp ecx, 0x2f; jmp rdx; 
0x00000000001926fc: add edx, esp; jmp rdx; 
0x00000000000b9009: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0xf1e9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8689: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0xf279d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69d9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0xf426d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b903e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf1e68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86be: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf2768]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a0e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf4238]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b540e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf5664]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8efc: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0xf1faa]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68db: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0xf436b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014da45: add esi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000088a5a: add esi, 0x58; sub r8, qword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x00000000000b9519: add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x000000000004896c: add esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001474db: add esi, dword ptr [rsi + 0xa]; mov eax, 2; ret; 
0x0000000000026faf: add esi, eax; add byte ptr [rdi], ch; mov byte ptr [rdi], 0; ret; 
0x00000000000a6d5e: add esi, eax; add dword ptr [rax], eax; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x0000000000032c7b: add esi, eax; jmp rsi; 
0x0000000000114fe1: add esi, eax; lcall [r8 + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x0000000000155ba5: add esi, eax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000eaa89: add esi, eax; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000011e268: add esi, ebp; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000013b4ca: add esi, ebx; movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000016b7f3: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000000ba06a: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015d3d3: add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000097f92: add esi, ebx; stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000044879: add esi, ebx; stosq qword ptr [rdi], rax; ret; 
0x00000000000b8f81: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf1f26]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f64: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf1f43]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8601: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf2826]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85e4: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf2843]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7091: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf3c42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6951: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf42f6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6934: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf4313]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f1: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf5102]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5351: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf5722]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5334: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0xf573f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b916a: add esi, ecx; lea r11, [rip + 0xf1dc1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b914a: add esi, ecx; lea r11, [rip + 0xf1de1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9121: add esi, ecx; lea r11, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72da: add esi, ecx; lea r11, [rip + 0xf3a7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72ba: add esi, ecx; lea r11, [rip + 0xf3a9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7291: add esi, ecx; lea r11, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c2a: add esi, ecx; lea r11, [rip + 0xf4f4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c0a: add esi, ecx; lea r11, [rip + 0xf4f6d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5be1: add esi, ecx; lea r11, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000537a7: add esi, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ba738: add esi, edi; int1; mov eax, eax; ret; 
0x0000000000045811: add esi, edi; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000018cf6e: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cef4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce65: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc5a: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb28: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca62: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9e4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c94d: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c751: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c620: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c51f: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b93e: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8c4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b835: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b62a: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4f8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b432: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3b4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b31d: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b121: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff0: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee1: add esi, edx; add rdi, rdx; lea r11, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d339: add esi, edx; add rdi, rdx; lea r11, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba94: add esi, edx; add rdi, rdx; lea r11, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b938: add esi, edx; add rdi, rdx; lea r11, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a845: add esi, edx; add rdi, rdx; lea r11, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c37: add esi, edx; add rdi, rdx; lea r11, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fb4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e42: add esi, edx; add rdi, rdx; lea r11, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166498: add esi, edx; add rdi, rdx; lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d3: add esi, edx; add rdi, rdx; lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ac8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a03: add esi, edx; add rdi, rdx; lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d0d4: add esi, edx; lea r11, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf54: add esi, edx; lea r11, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd4: add esi, edx; lea r11, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc55: add esi, edx; lea r11, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad4: add esi, edx; lea r11, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c954: add esi, edx; lea r11, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d4: add esi, edx; lea r11, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c654: add esi, edx; lea r11, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d4: add esi, edx; lea r11, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c354: add esi, edx; lea r11, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d4: add esi, edx; lea r11, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c054: add esi, edx; lea r11, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed4: add esi, edx; lea r11, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd54: add esi, edx; lea r11, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd4: add esi, edx; lea r11, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f4: add esi, edx; lea r11, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a474: add esi, edx; lea r11, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f4: add esi, edx; lea r11, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a175: add esi, edx; lea r11, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff4: add esi, edx; lea r11, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e74: add esi, edx; lea r11, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf4: add esi, edx; lea r11, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b74: add esi, edx; lea r11, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f4: add esi, edx; lea r11, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169874: add esi, edx; lea r11, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f4: add esi, edx; lea r11, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169574: add esi, edx; lea r11, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f4: add esi, edx; lea r11, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169274: add esi, edx; lea r11, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f4: add esi, edx; lea r11, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167ab0: add esi, edx; lea r11, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167960: add esi, edx; lea r11, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167810: add esi, edx; lea r11, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676c0: add esi, edx; lea r11, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167570: add esi, edx; lea r11, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167420: add esi, edx; lea r11, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672d0: add esi, edx; lea r11, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167030: add esi, edx; lea r11, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ee0: add esi, edx; lea r11, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d90: add esi, edx; lea r11, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c40: add esi, edx; lea r11, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166af0: add esi, edx; lea r11, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001669a0: add esi, edx; lea r11, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166850: add esi, edx; lea r11, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016658a: add esi, edx; lea r11, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650e0: add esi, edx; lea r11, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f90: add esi, edx; lea r11, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e40: add esi, edx; lea r11, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cf0: add esi, edx; lea r11, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ba0: add esi, edx; lea r11, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a50: add esi, edx; lea r11, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164900: add esi, edx; lea r11, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164660: add esi, edx; lea r11, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164510: add esi, edx; lea r11, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643c0: add esi, edx; lea r11, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164270: add esi, edx; lea r11, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164120: add esi, edx; lea r11, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fd0: add esi, edx; lea r11, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e80: add esi, edx; lea r11, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bba: add esi, edx; lea r11, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001475e2: add esi, esi; ret 0x7402; 
0x0000000000101eac: add esi, esi; ret 0xf01; 
0x00000000000c8e4e: add esi, esi; ret 0xf02; 
0x00000000000f7770: add esi, esi; ret 0xf04; 
0x00000000000ecb58: add esi, esi; ret; 
0x00000000000b9e6d: add esp, 0x100; sub rax, rdx; ret; 
0x00000000000b9f0d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000010e043: add esp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x0000000000063366: add esp, 0x1010; pop rbx; ret; 
0x0000000000063196: add esp, 0x1018; pop rbx; pop rbp; ret; 
0x0000000000117824: add esp, 0x10; lea rax, [rip + 0xd0802]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056454: add esp, 0x10; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055cbb: add esp, 0x10; mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000031646: add esp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d3d6: add esp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000000090c01: add esp, 0x10; pop rbx; jmp rax; 
0x0000000000031623: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000476e0: add esp, 0x10; pop rbx; pop rbp; pop r14; ret; 
0x00000000000437fd: add esp, 0x10; pop rbx; ret; 
0x000000000008e9c0: add esp, 0x10; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000008953e: add esp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196dc1: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000001510c8: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000015e608: add esp, 0x110; pop rbx; ret; 
0x0000000000043eee: add esp, 0x118; ret; 
0x000000000010e0f4: add esp, 0x130; pop rbx; ret; 
0x0000000000044690: add esp, 0x140; pop rbx; ret; 
0x0000000000043db5: add esp, 0x148; ret; 
0x000000000013ca5c: add esp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000012c007: add esp, 0x18; and eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000008923f: add esp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008925b: add esp, 0x18; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000137170: add esp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000009ae66: add esp, 0x18; mov rax, rcx; pop rbx; pop rbp; ret; 
0x000000000009434c: add esp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000083ee8: add esp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000001458f5: add esp, 0x18; mov rsi, r12; call qword ptr [rax + 0x10]; 
0x00000000000639c6: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000745c7: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000044e79: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000029db5: add esp, 0x18; ret; 
0x0000000000113f55: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000062ece: add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009182d: add esp, 0x20; mov ecx, edx; xor edx, edx; pop rbx; jmp rax; 
0x0000000000082706: add esp, 0x20; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009137d: add esp, 0x20; pop rbx; jmp rax; 
0x0000000000030f6b: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043958: add esp, 0x20; pop rbx; ret; 
0x000000000004528b: add esp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000124116: add esp, 0x260; pop rbx; pop rbp; pop r12; ret; 
0x0000000000026eb2: add esp, 0x28; jmp rax; 
0x000000000008a204: add esp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000026a1e: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052905: add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000047d72: add esp, 0x28; ret; 
0x0000000000086043: add esp, 0x300; pop rbx; pop rbp; pop r12; ret; 
0x000000000009baf6: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000001946c7: add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000005c3e0: add esp, 0x30; pop rbx; ret; 
0x00000000000288e2: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052a93: add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000ddade: add esp, 0x38; ret; 
0x0000000000089ce2: add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044735: add esp, 0x40; pop rbx; ret; 
0x0000000000121178: add esp, 0x40; ret; 
0x0000000000062f52: add esp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x000000000011a92e: add esp, 0x418; ret; 
0x000000000014e81d: add esp, 0x428; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000014e400: add esp, 0x448; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005c232: add esp, 0x450; pop rbx; ret; 
0x00000000000e3938: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000150af3: add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000008cfd7: add esp, 0x48; ret; 
0x000000000014d4e7: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055ff5: add esp, 0x50; pop rbx; ret; 
0x000000000015aa84: add esp, 0x520; pop rbx; ret; 
0x000000000013cc52: add esp, 0x58; pop rbx; pop rbp; ret; 
0x000000000010e995: add esp, 0x58; ret; 
0x0000000000100225: add esp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000145ee6: add esp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000114116: add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010ccef: add esp, 0x68; ret; 
0x00000000000bb684: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112f09: add esp, 0x70; pop rbx; ret; 
0x000000000010ce74: add esp, 0x78; ret; 
0x0000000000141e83: add esp, 0x80; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000137169: add esp, 0x80; add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000081f37: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008206b: add esp, 0x80; add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000084063: add esp, 0x80; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x00000000000dc9a1: add esp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047f63: add esp, 0x80; add rsp, 8; ret; 
0x00000000000de29c: add esp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de366: add esp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000de445: add esp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbda: add esp, 0x80; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000015c7ac: add esp, 0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000124219: add esp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c3e: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3dc: add esp, 0x80; mov eax, edx; ret; 
0x0000000000081480: add esp, 0x80; mov eax, esi; pop rbx; ret; 
0x000000000008a600: add esp, 0x80; mov eax, r10d; pop rbx; ret; 
0x0000000000085718: add esp, 0x80; mov eax, r8d; pop rbx; ret; 
0x00000000000929db: add esp, 0x80; mov qword ptr [rip + 0x154b80], rdx; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000094bda: add esp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000015c700: add esp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b5c3: add esp, 0x80; mov rax, qword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b503: add esp, 0x80; mov rax, qword ptr [rip + 0x8a040]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b34d: add esp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2b0: add esp, 0x80; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b213: add esp, 0x80; mov rax, qword ptr [rip + 0x8a330]; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b17d: add esp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015abb0: add esp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x0000000000094d59: add esp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000833ce: add esp, 0x80; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000480b8: add esp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000015b2f6: add esp, 0x80; mov rax, rdx; add rsp, 8; ret; 
0x000000000005f517: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000821f9: add esp, 0x80; pop rbx; mov rax, rdx; pop rbp; pop r12; ret; 
0x00000000000993f5: add esp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052f8e: add esp, 0x80; pop rbx; ret; 
0x0000000000063bf9: add esp, 0x80; ret; 
0x0000000000047481: add esp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000004711f: add esp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000004794a: add esp, 0x80; xor esi, esi; mov rdi, r9; call rdx; 
0x000000000011b54d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x000000000004430d: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044fc5: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004447c: add esp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000026cff: add esp, 0x98; ret; 
0x0000000000044825: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f6fc: add esp, 0xa0; pop rbx; ret; 
0x000000000008dd3d: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000045140: add esp, 0xa8; ret; 
0x0000000000030e46: add esp, 0xb8; pop rbx; pop r12; ret; 
0x00000000001163d1: add esp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001504ec: add esp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000120701: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000815d3: add esp, 0xd0; pop rbx; ret; 
0x0000000000081772: add esp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000538e4: add esp, 0xd8; ret; 
0x000000000011aaf8: add esp, 0xe0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000cf97f: add esp, 0xe0; pop rbx; ret; 
0x0000000000125f3e: add esp, 0xe8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000eca85: add esp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148091: add esp, 8; add eax, edx; pop rbx; pop rbp; ret; 
0x000000000013b2fd: add esp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000145137: add esp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x00000000000dbe9d: add esp, 8; lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000145701: add esp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x000000000010b499: add esp, 8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000000084aa9: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000144759: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000005c588: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000027408: add esp, 8; mov eax, edi; neg eax; ret; 
0x0000000000053814: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000082072: add esp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000119083: add esp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000009d61a: add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000039521: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000d3344: add esp, 8; mov rax, rdx; ret; 
0x000000000008406a: add esp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000146ea9: add esp, 8; mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000086c32: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000014cab3: add esp, 8; movzx eax, al; add eax, 1; ret; 
0x000000000011dd56: add esp, 8; movzx eax, al; neg eax; ret; 
0x000000000014798b: add esp, 8; movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000000052ff6: add esp, 8; movzx eax, al; ret; 
0x000000000014013a: add esp, 8; movzx eax, ax; ret; 
0x00000000001562c2: add esp, 8; not eax; shr eax, 0x1f; ret; 
0x000000000015439c: add esp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000147863: add esp, 8; pop rbx; pop rbp; jmp rcx; 
0x0000000000098c46: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000004704f: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000027bf1: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000029b91: add esp, 8; ret; 
0x000000000009d523: add esp, 8; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015a8c1: add esp, 8; sar eax, 0x1f; ret; 
0x000000000014807b: add esp, 8; sub esi, eax; pop rbx; pop rbp; mov eax, esi; ret; 
0x0000000000047616: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000b1fe4: add esp, dword ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000dcd80: add esp, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000011426b: add esp, edi; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d6b72: add qword ptr [r8 - 0x7d], rcx; ret; 
0x0000000000152507: add qword ptr [r8], r8; add byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x00000000001171c0: add qword ptr [r8], rax; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000e4afc: add qword ptr [r9 + 0xf], r8; xchg eax, esp; ret 0x894c; 
0x000000000008aaec: add qword ptr [rax - 0x77], rcx; or byte ptr [r15], r9b; mov dh, 0x10; pop rbx; mov eax, edx; ret; 
0x000000000008a61c: add qword ptr [rax - 0x77], rcx; sub byte ptr [rax - 0x78], r8b; cmp byte ptr [rcx + rcx*4 - 0x30], al; ret; 
0x00000000000eb03f: add qword ptr [rax - 0x7d], rcx; ret; 
0x000000000009d36d: add qword ptr [rax], r8; cmovne rax, rdx; ret; 
0x000000000006f4d6: add qword ptr [rax], rax; add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x0000000000155c9c: add qword ptr [rbp + 0x18], rbx; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000001260bb: add qword ptr [rbp + 0x38], rbx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bb737: add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x38; call rbx; 
0x000000000008c944: add qword ptr [rbx + 0x18], rbp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000145894: add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000175f6d: add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000017a30d: add qword ptr [rdi], rcx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000475b1: add qword ptr [rip + 0x1a2b47], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b140: add r10, 2; mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013b359: add r10, 2; mov dword ptr [r8], eax; mov eax, edx; mov qword ptr [r9], r10; ret; 
0x000000000016b8d2: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x00000000001458f4: add r12, 0x18; mov rsi, r12; call qword ptr [rax + 0x10]; 
0x0000000000148852: add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000000c8dca: add r13b, cl; ret; 
0x000000000013b4c9: add r14, r11; movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x0000000000045810: add r14, r15; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000016b862: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000113e0f: add r14b, r14b; ret 0x7402; 
0x000000000016b7f2: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000001488e6: add r15, r12; sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x00000000000454f8: add r15, r14; mov rdx, rbp; mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000005372f: add r15b, r14b; dec dword ptr [rax - 0x77]; ret; 
0x00000000000b7dea: add r8, 0x10; lea r11, [rip + 0xf2ffb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65ca: add r8, 0x10; lea r11, [rip + 0xf463b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000180e60: add r8, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a0da: add r8, qword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x000000000017d2f4: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001885b7: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b27: add r8b, byte ptr [r8]; vzeroupper; ret; 
0x000000000015e1fa: add r9, qword ptr [rsp + 8]; call rax; 
0x000000000013a905: add r9b, byte ptr [r8 + 0x39]; ret 0x1472; 
0x00000000000a70fe: add r9b, byte ptr [r8 - 0x77]; clc; ret; 
0x000000000002ac00: add r9b, byte ptr [r8 - 0x7d]; ret 0x4d02; 
0x00000000000ebfd6: add r9b, byte ptr [r9 + 0x39]; ret; 
0x0000000000102b27: add r9b, byte ptr [rbp - 0x77]; ret 0x8d4c; 
0x00000000000485dd: add r9d, 0x3039; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x000000000005f468: add r9d, eax; mov eax, r9d; ret; 
0x000000000006f4cf: add rax, -0x74b40000; xchg eax, edx; add qword ptr [rax], rax; add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x0000000000185522: add rax, -0x7cb80000; ret 0xe910; 
0x0000000000163e86: add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000035535: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000018aaf4: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861a4: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182129: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000175ff3: add rax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x00000000000fa444: add rax, 0x2c890000; and al, 0xeb; ret; 
0x000000000017a3a4: add rax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018ab14: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861c4: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182149: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018ab60: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186210: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182169: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000151ba1: add rax, 0xa0; pop rbx; ret; 
0x0000000000151c81: add rax, 0xa8; pop rbx; ret; 
0x00000000000ce480: add rax, 1; ret; 
0x000000000013b3b4: add rax, 2; mov dword ptr [r8], r10d; mov qword ptr [r9], rax; mov eax, edx; ret; 
0x00000000000ce477: add rax, 2; ret; 
0x00000000000ce490: add rax, 3; ret; 
0x0000000000155bc6: add rax, 4; bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x0000000000155bf6: add rax, 4; bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x0000000000026ec8: add rax, qword ptr [0]; ret; 
0x0000000000026ec7: add rax, qword ptr fs:[0]; ret; 
0x000000000010bd9b: add rax, r13; jmp rax; 
0x0000000000077642: add rax, r14; jmp rax; 
0x000000000007718e: add rax, r14; mov dword ptr [rbp - 0x4f0], 1; mov r10, rdx; xor esi, esi; jmp rax; 
0x00000000000777fe: add rax, r14; mov dword ptr [rbp - 0x548], 0; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000077726: add rax, r14; mov r10, rdx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x000000000007776e: add rax, r14; mov r10, rdx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000182640: add rax, r8; vzeroupper; ret; 
0x00000000000f93dd: add rax, rbx; jmp rax; 
0x000000000012d3e6: add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000185d47: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000064071: add rax, rcx; jmp rax; 
0x00000000000aa588: add rax, rcx; ret; 
0x000000000018159f: add rax, rcx; sub rax, rdi; ret; 
0x000000000018aa1c: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860dc: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa5: add rax, rcx; vzeroupper; ret; 
0x000000000018263d: add rax, rdi; add rax, r8; vzeroupper; ret; 
0x00000000000aa585: add rax, rdi; add rax, rcx; ret; 
0x000000000018aa19: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860d9: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa2: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000aada9: add rax, rdi; add rax, rsi; ret; 
0x0000000000080a45: add rax, rdi; jmp rax; 
0x00000000000a7044: add rax, rdi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a705c: add rax, rdi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a7025: add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a6ff8: add rax, rdi; ret; 
0x000000000018aad4: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186194: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182119: add rax, rdi; vzeroupper; ret; 
0x000000000002729a: add rax, rdx; jmp rax; 
0x000000000007d138: add rax, rdx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0b0: add rax, rdx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfc8: add rax, rdx; mov dword ptr [rbp - 0x4e8], 1; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007deb8: add rax, rdx; mov dword ptr [rbp - 0x53c], 1; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000000b0345: add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce17a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000065cf1: add rax, rsi; jmp rax; 
0x0000000000048aab: add rax, rsi; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000aadac: add rax, rsi; ret; 
0x00000000000420f7: add rcx, qword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x000000000017a356: add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000018aef1: add rcx, r11; jmp rcx; 
0x00000000001818cf: add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000a6fe1: add rcx, r9; jmp rcx; 
0x0000000000191a6a: add rcx, rax; jmp rcx; 
0x00000000000fe234: add rcx, rdi; jmp rcx; 
0x00000000000ba5f3: add rcx, rsi; jmp rcx; 
0x000000000014c80c: add rdi, 0x10; jmp rcx; 
0x00000000000b900c: add rdi, 0x10; lea r11, [rip + 0xf1e9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b868c: add rdi, 0x10; lea r11, [rip + 0xf279d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dd5: add rdi, 0x10; lea r11, [rip + 0xf3010]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7db6: add rdi, 0x10; lea r11, [rip + 0xf302f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69dc: add rdi, 0x10; lea r11, [rip + 0xf426d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65b5: add rdi, 0x10; lea r11, [rip + 0xf4650]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6596: add rdi, 0x10; lea r11, [rip + 0xf466f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000015e2b5: add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000000b9041: add rdi, 0x20; lea r11, [rip + 0xf1e68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c1: add rdi, 0x20; lea r11, [rip + 0xf2768]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a11: add rdi, 0x20; lea r11, [rip + 0xf4238]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5411: add rdi, 0x20; lea r11, [rip + 0xf5664]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001478aa: add rdi, 0x23b0; pop rbp; jmp rcx; 
0x000000000012be71: add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000b8eff: add rdi, 0x30; lea r11, [rip + 0xf1faa]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68de: add rdi, 0x30; lea r11, [rip + 0xf436b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014f263: add rdi, 0x58; jmp rcx; 
0x000000000014e923: add rdi, 0x68; jmp rcx; 
0x000000000014bc46: add rdi, 0xc8; jmp rcx; 
0x00000000000a0990: add rdi, 1; mov eax, 0; test dl, dl; cmovne rax, rdi; ret; 
0x00000000000bb007: add rdi, 4; xor esi, esi; call 0x25220; mov rax, rbx; pop rbx; ret; 
0x00000000000418a4: add rdi, r10; jmp rdi; 
0x00000000000b911d: add rdi, rcx; add rsi, rcx; lea r11, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b728d: add rdi, rcx; add rsi, rcx; lea r11, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bdd: add rdi, rcx; add rsi, rcx; lea r11, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000016d0d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf50: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc51: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c950: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c650: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c350: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c050: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd50: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a470: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a171: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e70: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b70: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169870: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169570: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169270: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166586: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bb6: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018cf70: add rdi, rdx; lea r11, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cef6: add rdi, rdx; lea r11, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce67: add rdi, rdx; lea r11, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc5c: add rdi, rdx; lea r11, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb2a: add rdi, rdx; lea r11, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca64: add rdi, rdx; lea r11, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9e6: add rdi, rdx; lea r11, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c94f: add rdi, rdx; lea r11, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c753: add rdi, rdx; lea r11, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c622: add rdi, rdx; lea r11, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c521: add rdi, rdx; lea r11, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b940: add rdi, rdx; lea r11, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8c6: add rdi, rdx; lea r11, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b837: add rdi, rdx; lea r11, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b62c: add rdi, rdx; lea r11, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4fa: add rdi, rdx; lea r11, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b434: add rdi, rdx; lea r11, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3b6: add rdi, rdx; lea r11, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b31f: add rdi, rdx; lea r11, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b123: add rdi, rdx; lea r11, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff2: add rdi, rdx; lea r11, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee3: add rdi, rdx; lea r11, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d33b: add rdi, rdx; lea r11, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba96: add rdi, rdx; lea r11, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b93a: add rdi, rdx; lea r11, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a847: add rdi, rdx; lea r11, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c39: add rdi, rdx; lea r11, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fb6: add rdi, rdx; lea r11, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e44: add rdi, rdx; lea r11, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016649a: add rdi, rdx; lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d5: add rdi, rdx; lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163aca: add rdi, rdx; lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a05: add rdi, rdx; lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000013b3ec: add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000016717f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647af: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b6b: add rdi, rdx; sfence; lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166183: add rdi, rdx; sfence; lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b8fc7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf1edf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8647: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf27df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70e7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf3beb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6997: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf42af]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a47: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf50ab]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5397: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0xf56db]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000013dfca: add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x00000000001164d3: add rdx, 8; mov qword ptr [rip + 0xd1a52], rdx; add rsp, 8; ret; 
0x00000000001164a4: add rdx, 8; mov qword ptr [rip + 0xd1a81], rdx; ret; 
0x00000000001926fb: add rdx, r12; jmp rdx; 
0x00000000000a7186: add rdx, r8; jmp rdx; 
0x00000000000576c1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000011f680: add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000a70b5: add rdx, rax; jmp rdx; 
0x0000000000041799: add rdx, rdi; jmp rdx; 
0x0000000000055f7e: add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x00000000000b9008: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0xf1e9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8688: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0xf279d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69d8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0xf426d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b903d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf1e68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86bd: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf2768]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a0d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf4238]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b540d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0xf5664]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8efb: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0xf1faa]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68da: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0xf436b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014da44: add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000088a59: add rsi, 0x58; sub r8, qword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x0000000000032c7a: add rsi, r8; jmp rsi; 
0x0000000000155ba4: add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000b8f80: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf1f26]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f63: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf1f43]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8600: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf2826]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85e3: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf2843]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7090: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf3c42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6950: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf42f6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6933: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf4313]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f0: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5102]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5350: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf5722]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5333: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0xf573f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9169: add rsi, rcx; lea r11, [rip + 0xf1dc1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9149: add rsi, rcx; lea r11, [rip + 0xf1de1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9120: add rsi, rcx; lea r11, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72d9: add rsi, rcx; lea r11, [rip + 0xf3a7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72b9: add rsi, rcx; lea r11, [rip + 0xf3a9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7290: add rsi, rcx; lea r11, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c29: add rsi, rcx; lea r11, [rip + 0xf4f4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c09: add rsi, rcx; lea r11, [rip + 0xf4f6d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5be0: add rsi, rcx; lea r11, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018cf6d: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cef3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce64: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc59: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb27: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca61: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9e3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c94c: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c750: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c61f: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c51e: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b93d: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8c3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b834: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b629: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4f7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b431: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3b3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b31c: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b120: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018afef: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee0: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d338: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba93: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b937: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a844: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c36: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fb3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e41: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166497: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d2: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ac7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a02: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d0d3: add rsi, rdx; lea r11, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf53: add rsi, rdx; lea r11, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd3: add rsi, rdx; lea r11, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc54: add rsi, rdx; lea r11, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad3: add rsi, rdx; lea r11, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c953: add rsi, rdx; lea r11, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d3: add rsi, rdx; lea r11, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c653: add rsi, rdx; lea r11, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d3: add rsi, rdx; lea r11, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c353: add rsi, rdx; lea r11, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d3: add rsi, rdx; lea r11, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c053: add rsi, rdx; lea r11, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed3: add rsi, rdx; lea r11, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd53: add rsi, rdx; lea r11, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd3: add rsi, rdx; lea r11, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f3: add rsi, rdx; lea r11, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a473: add rsi, rdx; lea r11, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f3: add rsi, rdx; lea r11, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a174: add rsi, rdx; lea r11, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff3: add rsi, rdx; lea r11, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e73: add rsi, rdx; lea r11, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf3: add rsi, rdx; lea r11, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b73: add rsi, rdx; lea r11, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f3: add rsi, rdx; lea r11, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169873: add rsi, rdx; lea r11, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f3: add rsi, rdx; lea r11, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169573: add rsi, rdx; lea r11, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f3: add rsi, rdx; lea r11, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169273: add rsi, rdx; lea r11, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f3: add rsi, rdx; lea r11, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167aaf: add rsi, rdx; lea r11, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016795f: add rsi, rdx; lea r11, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016780f: add rsi, rdx; lea r11, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676bf: add rsi, rdx; lea r11, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016756f: add rsi, rdx; lea r11, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016741f: add rsi, rdx; lea r11, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672cf: add rsi, rdx; lea r11, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016702f: add rsi, rdx; lea r11, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166edf: add rsi, rdx; lea r11, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d8f: add rsi, rdx; lea r11, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c3f: add rsi, rdx; lea r11, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166aef: add rsi, rdx; lea r11, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016699f: add rsi, rdx; lea r11, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016684f: add rsi, rdx; lea r11, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166589: add rsi, rdx; lea r11, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650df: add rsi, rdx; lea r11, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f8f: add rsi, rdx; lea r11, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e3f: add rsi, rdx; lea r11, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cef: add rsi, rdx; lea r11, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164b9f: add rsi, rdx; lea r11, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a4f: add rsi, rdx; lea r11, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001648ff: add rsi, rdx; lea r11, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016465f: add rsi, rdx; lea r11, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016450f: add rsi, rdx; lea r11, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643bf: add rsi, rdx; lea r11, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016426f: add rsi, rdx; lea r11, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016411f: add rsi, rdx; lea r11, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fcf: add rsi, rdx; lea r11, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e7f: add rsi, rdx; lea r11, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bb9: add rsi, rdx; lea r11, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b9e6c: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b9f0c: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000010e042: add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x0000000000063365: add rsp, 0x1010; pop rbx; ret; 
0x0000000000063195: add rsp, 0x1018; pop rbx; pop rbp; ret; 
0x0000000000117823: add rsp, 0x10; lea rax, [rip + 0xd0802]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056453: add rsp, 0x10; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055cba: add rsp, 0x10; mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000031645: add rsp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d3d5: add rsp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000000090c00: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000031622: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000476df: add rsp, 0x10; pop rbx; pop rbp; pop r14; ret; 
0x00000000000437fc: add rsp, 0x10; pop rbx; ret; 
0x000000000008e9bf: add rsp, 0x10; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000008953d: add rsp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196dc0: add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000001510c7: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000015e607: add rsp, 0x110; pop rbx; ret; 
0x0000000000043eed: add rsp, 0x118; ret; 
0x000000000010e0f3: add rsp, 0x130; pop rbx; ret; 
0x000000000004468f: add rsp, 0x140; pop rbx; ret; 
0x0000000000043db4: add rsp, 0x148; ret; 
0x000000000013ca5b: add rsp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000012c006: add rsp, 0x18; and eax, 0xc; pop rbx; pop rbp; ret; 
0x000000000008923e: add rsp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008925a: add rsp, 0x18; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000013716f: add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000009ae65: add rsp, 0x18; mov rax, rcx; pop rbx; pop rbp; ret; 
0x000000000009434b: add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000083ee7: add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000000639c5: add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000745c6: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000044e78: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000029db4: add rsp, 0x18; ret; 
0x0000000000113f54: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000062ecd: add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009182c: add rsp, 0x20; mov ecx, edx; xor edx, edx; pop rbx; jmp rax; 
0x0000000000082705: add rsp, 0x20; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009137c: add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000030f6a: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043957: add rsp, 0x20; pop rbx; ret; 
0x000000000004528a: add rsp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000124115: add rsp, 0x260; pop rbx; pop rbp; pop r12; ret; 
0x0000000000026eb1: add rsp, 0x28; jmp rax; 
0x000000000008a203: add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000026a1d: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052904: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000047d71: add rsp, 0x28; ret; 
0x0000000000086042: add rsp, 0x300; pop rbx; pop rbp; pop r12; ret; 
0x000000000009baf5: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000001946c6: add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000005c3df: add rsp, 0x30; pop rbx; ret; 
0x00000000000288e1: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052a92: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000ddadd: add rsp, 0x38; ret; 
0x0000000000089ce1: add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044734: add rsp, 0x40; pop rbx; ret; 
0x0000000000121177: add rsp, 0x40; ret; 
0x0000000000062f51: add rsp, 0x410; pop rbx; pop rbp; pop r12; ret; 
0x000000000011a92d: add rsp, 0x418; ret; 
0x000000000014e81c: add rsp, 0x428; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000014e3ff: add rsp, 0x448; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005c231: add rsp, 0x450; pop rbx; ret; 
0x00000000000e3937: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000150af2: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000008cfd6: add rsp, 0x48; ret; 
0x000000000014d4e6: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055ff4: add rsp, 0x50; pop rbx; ret; 
0x000000000015aa83: add rsp, 0x520; pop rbx; ret; 
0x000000000013cc51: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000010e994: add rsp, 0x58; ret; 
0x0000000000100224: add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000145ee5: add rsp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000114115: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010ccee: add rsp, 0x68; ret; 
0x00000000000bb683: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112f08: add rsp, 0x70; pop rbx; ret; 
0x000000000010ce73: add rsp, 0x78; ret; 
0x0000000000141e82: add rsp, 0x80; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000137168: add rsp, 0x80; add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000081f36: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008206a: add rsp, 0x80; add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000084062: add rsp, 0x80; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x00000000000dc9a0: add rsp, 0x80; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047f62: add rsp, 0x80; add rsp, 8; ret; 
0x00000000000de29b: add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de365: add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000de444: add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbd9: add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000015c7ab: add rsp, 0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000124218: add rsp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c3d: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3db: add rsp, 0x80; mov eax, edx; ret; 
0x000000000008147f: add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x000000000008a5ff: add rsp, 0x80; mov eax, r10d; pop rbx; ret; 
0x0000000000085717: add rsp, 0x80; mov eax, r8d; pop rbx; ret; 
0x00000000000929da: add rsp, 0x80; mov qword ptr [rip + 0x154b80], rdx; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000094bd9: add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000015c6ff: add rsp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b5c2: add rsp, 0x80; mov rax, qword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b502: add rsp, 0x80; mov rax, qword ptr [rip + 0x8a040]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b34c: add rsp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2af: add rsp, 0x80; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b212: add rsp, 0x80; mov rax, qword ptr [rip + 0x8a330]; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b17c: add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015abaf: add rsp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x0000000000094d58: add rsp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000833cd: add rsp, 0x80; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000480b7: add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000015b2f5: add rsp, 0x80; mov rax, rdx; add rsp, 8; ret; 
0x000000000005f516: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000000821f8: add rsp, 0x80; pop rbx; mov rax, rdx; pop rbp; pop r12; ret; 
0x00000000000993f4: add rsp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052f8d: add rsp, 0x80; pop rbx; ret; 
0x0000000000063bf8: add rsp, 0x80; ret; 
0x0000000000047480: add rsp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000004711e: add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000047949: add rsp, 0x80; xor esi, esi; mov rdi, r9; call rdx; 
0x000000000011b54c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000004430c: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044fc4: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004447b: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000026cfe: add rsp, 0x98; ret; 
0x0000000000044824: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f6fb: add rsp, 0xa0; pop rbx; ret; 
0x000000000008dd3c: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000004513f: add rsp, 0xa8; ret; 
0x0000000000030e45: add rsp, 0xb8; pop rbx; pop r12; ret; 
0x00000000001163d0: add rsp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001504eb: add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000120700: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000815d2: add rsp, 0xd0; pop rbx; ret; 
0x0000000000081771: add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000538e3: add rsp, 0xd8; ret; 
0x000000000011aaf7: add rsp, 0xe0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000cf97e: add rsp, 0xe0; pop rbx; ret; 
0x0000000000125f3d: add rsp, 0xe8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000eca84: add rsp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148090: add rsp, 8; add eax, edx; pop rbx; pop rbp; ret; 
0x000000000013b2fc: add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000145136: add rsp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x00000000000dbe9c: add rsp, 8; lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000145700: add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x000000000010b498: add rsp, 8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000000084aa8: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000144758: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000005c587: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000027407: add rsp, 8; mov eax, edi; neg eax; ret; 
0x0000000000053813: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000082071: add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000119082: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000009d619: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000039520: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000d3343: add rsp, 8; mov rax, rdx; ret; 
0x0000000000084069: add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000146ea8: add rsp, 8; mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000086c31: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000014cab2: add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x000000000011dd55: add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000014798a: add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000000052ff5: add rsp, 8; movzx eax, al; ret; 
0x0000000000140139: add rsp, 8; movzx eax, ax; ret; 
0x00000000001562c1: add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x000000000015439b: add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000147862: add rsp, 8; pop rbx; pop rbp; jmp rcx; 
0x0000000000098c45: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000004704e: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000027bf0: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000029b90: add rsp, 8; ret; 
0x000000000009d522: add rsp, 8; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015a8c0: add rsp, 8; sar eax, 0x1f; ret; 
0x000000000014807a: add rsp, 8; sub esi, eax; pop rbx; pop rbp; mov eax, esi; ret; 
0x0000000000047615: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000dcc9e: add sil, sil; ret 0x7504; 
0x0000000000120923: add word ptr [rax], 1; ret; 
0x00000000001205ba: add word ptr [rdx + rax*2], 1; ret; 
0x0000000000043431: addps xmm0, xmm0; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000004310b: addps xmm0, xmm0; ret; 
0x000000000004310a: addsd xmm0, xmm0; ret; 
0x0000000000043430: addss xmm0, xmm0; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043486: addss xmm0, xmm0; ret; 
0x0000000000138446: and al, 0; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b2811: and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000bb1e6: and al, 0; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000d2981: and al, 0; add byte ptr [rax], al; syscall; 
0x00000000000e3493: and al, 0; add byte ptr [rdx + 0x7f], bh; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x000000000014e31a: and al, 0x10; call qword ptr [rax + 0x10]; 
0x0000000000147f5b: and al, 0x10; call qword ptr [rax + 8]; 
0x0000000000154e97: and al, 0x10; call qword ptr [rax]; 
0x0000000000088e72: and al, 0x10; call qword ptr [rbp + 0x18]; 
0x000000000015d553: and al, 0x10; call rax; 
0x000000000015e5cb: and al, 0x10; call rdx; 
0x0000000000042ab7: and al, 0x10; fld xword ptr [rsp + 8]; ret; 
0x000000000014eb5f: and al, 0x10; lea r12d, [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014e36b: and al, 0x10; lea rdx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000147f07: and al, 0x10; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x0000000000118913: and al, 0x10; mov dword ptr [rsp], r8d; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000141f47: and al, 0x10; mov eax, 0x81; syscall; 
0x0000000000112978: and al, 0x10; mov eax, r10d; mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x000000000010ced7: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000000a70c3: and al, 0x10; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x00000000000a7193: and al, 0x10; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x0000000000154e4d: and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012c7ff: and al, 0x10; mov r8d, eax; mov esi, dword ptr [rsp + 0xc]; mov edi, dword ptr [rsp + 8]; mov eax, 0xe6; syscall; 
0x00000000000bbfad: and al, 0x10; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000154e52: and al, 0x10; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001547ae: and al, 0x10; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x0000000000031a0a: and al, 0x10; mov rax, qword ptr [rip + 0x1b894d]; lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014dc4e: and al, 0x10; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000012110b: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012116c: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000111818: and al, 0x10; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x0000000000045d44: and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000088712: and al, 0x10; mov rdi, r13; call rax; 
0x000000000014579f: and al, 0x10; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000bc24d: and al, 0x10; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000001546df: and al, 0x10; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000154686: and al, 0x10; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000080092: and al, 0x10; mov rdx, rbx; mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f7a: and al, 0x10; mov rdx, rbx; mov rsi, qword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000148c93: and al, 0x10; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000046533: and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000046390: and al, 0x10; mov rsi, r12; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000126685: and al, 0x10; mov rsi, r13; xor r15d, r15d; call rax; 
0x00000000000462d3: and al, 0x10; mov rsi, r15; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000042a92: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000bbc4b: and al, 0x10; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb897: and al, 0x10; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bbcc5: and al, 0x10; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000ddb01: and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c8d: and al, 0x10; xor edx, edx; lea rsi, [rip - 0x1a88]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f93: and al, 0x10; xor edx, edx; lea rsi, [rip - 0x1d8e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000126406: and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rcx; 
0x0000000000115a5f: and al, 0x10; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x0000000000027a48: and al, 0x10; xor r8d, r8d; call rbx; 
0x00000000001102cb: and al, 0x14; add byte ptr [rdi], cl; test byte ptr [rsi + rdi*8 - 1], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000141f43: and al, 0x14; mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x0000000000044f9d: and al, 0x14; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000000026b5f: and al, 0x14; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000a707c: and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x000000000011415d: and al, 0x14; syscall; 
0x0000000000083418: and al, 0x16; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0x7520; 
0x00000000000a7085: and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x000000000002a4f5: and al, 0x18; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000fbf13: and al, 0x18; add dword ptr [rax], eax; add al, ch; ret; 
0x00000000001522b1: and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000015230d: and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x0000000000129645: and al, 0x18; add dword ptr [rdi], ecx; test byte ptr [rdx - 0x17ffffff], ch; lodsd eax, dword ptr [rsi]; ret; 
0x000000000012a3a0: and al, 0x18; add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x0000000000099273: and al, 0x18; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000117df7: and al, 0x18; call 0x118110; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000147f0c: and al, 0x18; call qword ptr [rax]; 
0x0000000000026b67: and al, 0x18; call rax; 
0x00000000000454ae: and al, 0x18; call rbx; 
0x0000000000096622: and al, 0x18; call rdx; 
0x0000000000146699: and al, 0x18; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000a70a8: and al, 0x18; lea rax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x0000000000152101: and al, 0x18; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x000000000015237c: and al, 0x18; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x00000000001523f1: and al, 0x18; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x000000000015216c: and al, 0x18; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521dc: and al, 0x18; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x000000000015224c: and al, 0x18; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x000000000010cedb: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000114154: and al, 0x18; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000015d546: and al, 0x18; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000150443: and al, 0x18; mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000015040a: and al, 0x18; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000000a6ff3: and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000965ed: and al, 0x18; mov qword ptr [rsp + 8], r11; call rcx; 
0x00000000000e2b95: and al, 0x18; mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af5: and al, 0x18; mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113c43: and al, 0x18; mov rax, qword ptr [rip + 0xd6764]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b73: and al, 0x18; mov rax, qword ptr [rip + 0xd6834]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009628b: and al, 0x18; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000014d547: and al, 0x18; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000014bf20: and al, 0x18; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000015e5c6: and al, 0x18; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000011da93: and al, 0x18; movaps xmmword ptr [rsp + 0x20], xmm0; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x0000000000117df3: and al, 0x18; push qword ptr [rsp + 0x18]; call 0x118110; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000113a17: and al, 0x18; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001103e2: and al, 0x1c; add ecx, ebp; paddw mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x000000000010cecf: and al, 0x1c; mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000001503ff: and al, 0x20; call qword ptr [rax + 0x28]; 
0x0000000000145c22: and al, 0x20; call qword ptr [rax]; 
0x000000000002c3ba: and al, 0x20; call rax; 
0x0000000000089a61: and al, 0x20; call rbx; 
0x000000000014c161: and al, 0x20; call rdx; 
0x0000000000114946: and al, 0x20; mov eax, 0x65; syscall; 
0x00000000001503ed: and al, 0x20; mov esi, 4; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x00000000000965e8: and al, 0x20; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x000000000011da98: and al, 0x20; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x00000000000dd6a5: and al, 0x20; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000148dcb: and al, 0x20; mov rcx, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000011414f: and al, 0x20; mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000002bdca: and al, 0x20; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000052e4f: and al, 0x20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x000000000005599d: and al, 0x24; call rax; 
0x00000000000559fa: and al, 0x24; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010cae8: and al, 0x27; add al, byte ptr [rax]; nop dword ptr [rax]; mov eax, 0x5f; syscall; 
0x000000000010cae8: and al, 0x27; add al, byte ptr [rax]; nop dword ptr [rax]; mov eax, 0x5f; syscall; ret; 
0x000000000002d473: and al, 0x28; call rax; 
0x0000000000089967: and al, 0x28; call rbx; 
0x000000000014bf52: and al, 0x28; call rcx; 
0x00000000001560a5: and al, 0x28; call rdx; 
0x00000000000965e3: and al, 0x28; mov qword ptr [rsp + 0x20], r10; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x000000000015e1f2: and al, 0x28; mov r9d, dword ptr [rdx]; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x0000000000152373: and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152163: and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d3: and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152243: and al, 0x28; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x00000000000dd6a0: and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000099cd3: and al, 0x28; mov rdi, rbp; call rax; 
0x0000000000145c1d: and al, 0x28; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x000000000002efde: and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000014ff9d: and al, 0x28; push rax; call 0x14fcb0; add rsp, 0x28; ret; 
0x0000000000112add: and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, ecx; syscall; 
0x0000000000145f8d: and al, 0x2c; call qword ptr [rax]; 
0x00000000001460cd: and al, 0x2c; call qword ptr [rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000010bb9a: and al, 0x2c; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb4d: and al, 0x2c; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001521e0: and al, 0x30; add al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000001523f5: and al, 0x30; add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x0000000000152105: and al, 0x30; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x0000000000152380: and al, 0x30; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x0000000000152170: and al, 0x30; add eax, dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000000cf243: and al, 0x30; call rax; 
0x000000000002acdd: and al, 0x30; call rbx; 
0x000000000014f605: and al, 0x30; call rcx; 
0x0000000000112908: and al, 0x30; mov eax, 0x10; syscall; 
0x000000000008b61b: and al, 0x30; mov qword ptr [rbx + 0x18], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000011da9d: and al, 0x30; mov qword ptr [rsp + 0x38], r9; syscall; 
0x000000000002a070: and al, 0x30; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000014bf4a: and al, 0x30; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x0000000000145c18: and al, 0x30; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000108438: and al, 0x30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001460bc: and al, 0x30; push qword ptr [rip + 0x72164]; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f7c: and al, 0x30; push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001516e1: and al, 0x30; push r14; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x0000000000083b9a: and al, 0x30; xor edx, edx; lea rsi, [rip - 0x3e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010c42f: and al, 0x31; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; mov eax, 0x135; syscall; 
0x00000000000cbcb4: and al, 0x38; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002beaa: and al, 0x38; add byte ptr [rdi + rsi - 0xa], dh; ret; 
0x000000000013f658: and al, 0x38; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 5; ret 0xa47; 
0x000000000015210e: and al, 0x38; call qword ptr [rax + 0x18]; 
0x000000000002bdd4: and al, 0x38; call rbx; 
0x000000000005e576: and al, 0x38; mov dword ptr [rbp - 0xe0], r8d; mov rdx, r13; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000002acd8: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000002a06b: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000011daa2: and al, 0x38; syscall; 
0x0000000000154413: and al, 0x38; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x00000000001516ea: and al, 0x3a; call qword ptr [rax]; 
0x000000000014eca6: and al, 0x3c; add dword ptr [rax + rbp*4 + 0x49], esi; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000014c04c: and al, 0x3c; add dword ptr [rsi + 0x49], esi; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000014dc45: and al, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000002f0ac: and al, 0x40; add byte ptr [rsi + rdx*2 - 0xa], dh; ret; 
0x00000000001523fe: and al, 0x40; call qword ptr [rax + 0x18]; 
0x000000000014669e: and al, 0x40; call qword ptr [rax]; 
0x000000000002efe8: and al, 0x40; call rbx; 
0x0000000000052e4a: and al, 0x40; lea rdx, [rsp + 0x20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x000000000002c3b5: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002bdcf: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000014c159: and al, 0x40; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x000000000002a061: and al, 0x40; mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002d45f: and al, 0x40; mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000002acd3: and al, 0x40; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000000454d9: and al, 0x40; nop dword ptr [rax + rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000000052d7b: and al, 0x40; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136f06: and al, 0x41; call rsp; 
0x000000000008695c: and al, 0x44; mov esi, esp; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000043637: and al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043956: and al, 0x48; add esp, 0x20; pop rbx; ret; 
0x00000000001515d2: and al, 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000121115: and al, 0x48; add esp, 0x38; ret; 
0x0000000000121176: and al, 0x48; add esp, 0x40; ret; 
0x000000000014dc53: and al, 0x48; call qword ptr [rax + 0x28]; 
0x00000000000cea6b: and al, 0x48; lea eax, [rip + 0x118d8d]; add rsp, 8; ret; 
0x00000000001401fc: and al, 0x48; mov dword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000118918: and al, 0x48; mov dword ptr [rsp + 8], ebx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000015d97d: and al, 0x48; mov eax, dword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000147ea1: and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000003731d: and al, 0x48; mov eax, dword ptr [rip + 0x1b3043]; lea rdi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f90: and al, 0x48; mov eax, dword ptr [rip + 0x1b33d0]; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a4b: and al, 0x48; mov eax, dword ptr [rip + 0x1b8915]; lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009cc6b: and al, 0x48; mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x00000000000bb1b4: and al, 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009117b: and al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000008e14c: and al, 0x48; mov edi, ebx; call rax; 
0x0000000000146c69: and al, 0x48; mov edi, ebx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000009cc6f: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbda: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000014646b: and al, 0x48; mov esi, dword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000002d46e: and al, 0x48; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000002efe3: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000002c3b0: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002a066: and al, 0x48; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001552a3: and al, 0x49; mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 8]; 
0x00000000001120cb: and al, 0x49; mov edx, ecx; mov eax, 0x146; syscall; 
0x00000000000a6fd3: and al, 0x4c; lea ecx, [rip + 0x103839]; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x000000000008eca5: and al, 0x4c; mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000008e83c: and al, 0x4c; mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000b5c58: and al, 0x4f; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000cec7d: and al, 0x50; call rbx; 
0x000000000002d469: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000002c3ab: and al, 0x50; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000000ced11: and al, 0x50; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000014de80: and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000015d541: and al, 0x58; mov rdx, qword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000002d464: and al, 0x58; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000112901: and al, 0x58; xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x00000000000cec76: and al, 0x58; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x00000000000f4d1b: and al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000009afdb: and al, 0x5b; pop rbp; pop r12; ret; 
0x000000000014fc48: and al, 0x60; lea rsi, [rbp + 0x18]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014f5d9: and al, 0x60; mov r15, qword ptr [rsp + 0x80]; mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000014fa85: and al, 0x60; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000010bab1: and al, 0x60; movaps xmmword ptr [rsp + 0x70], xmm0; movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000012ac9c: and al, 0x60; movdqu xmm4, xmmword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000012b164: and al, 0x60; movdqu xmm6, xmmword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b590: and al, 0x60; movdqu xmm7, xmmword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x0000000000043964: and al, 0x66; movq mm0, mm1; call 0x1905e0; add rsp, 0x20; pop rbx; ret; 
0x0000000000146d15: and al, 0x66; rol eax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000004adc6: and al, 0x67; add dword ptr [rcx - 0x77], ecx; ret 0x8944; 
0x000000000014f5fd: and al, 0x68; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x00000000000bb732: and al, 0x6a; add byte ptr [rax - 0x73], cl; add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x38; call rbx; 
0x000000000010981e: and al, 0x6c; lea rdx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095f2: and al, 0x6c; lea rdx, [rip + 0xa41ed]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004de4e: and al, 0x6f; add dword ptr [rcx - 0x77], ecx; ret 0x8944; 
0x000000000010bab6: and al, 0x70; movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x00000000000ea13e: and al, 0x77; sbb eax, 0xfff02ae9; jmp qword ptr [rsi + 0x2e]; 
0x000000000012b16b: and al, 0x78; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b597: and al, 0x78; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012aca3: and al, 0x78; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x00000000000c5bbd: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000fc882: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000013e8f3: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x000000000014f5de: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [rcx + rcx*4 - 2], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000097242: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0xf04; 
0x000000000008e923: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x88; ret; 
0x000000000013e5f2: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x1f0f; 
0x000000000013efb6: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x33e9; 
0x000000000013e4ee: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xf41; 
0x000000000013f0f4: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xfee9; 
0x000000000013ee8c: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8944; 
0x000000000013f08a: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x93e9; 
0x000000000013f00e: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x43e9; 
0x000000000005b01f: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4840; 
0x0000000000054909: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b44; 
0x00000000000547ab: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b4c; 
0x000000000010babb: and al, 0x80; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x90], eax; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x0000000000097268: and al, 0x80; add byte ptr [rax], al; add dh, dh; ret 0x7504; 
0x000000000009c12f: and al, 0x80; movsxd rdx, dword ptr [rax - 2]; movsxd rdi, esi; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x000000000009c209: and al, 0x80; push r8; add dword ptr [rdi], ecx; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rsi; call rcx; 
0x0000000000034dcc: and al, 0x83; ret 0x8b05; 
0x0000000000107ce3: and al, 0x83; sti; add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x00000000000f7314: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x000000000004bf7a: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000014f5bc: and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000004b222: and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4418; 
0x0000000000096d58: and al, 0x88; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x4e72; 
0x0000000000026c63: and al, 0x88; sbb byte ptr [rax], al; ret; 
0x00000000000d44cd: and al, 0x89; ret 0x44c7; 
0x00000000000d42ed: and al, 0x89; ret 0x894c; 
0x00000000000bcfac: and al, 0x89; ret; 
0x0000000000140164: and al, 0x8b; adc byte ptr [r13 + 0x5b0c75c0], al; pop rbp; pop r12; ret; 
0x00000000001087b3: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000010bac3: and al, 0x90; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xa0], eax; syscall; 
0x0000000000146d1d: and al, 0x92; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x00000000000a1c87: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8348; 
0x00000000000a197b: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x00000000000f8073: and al, 0x98; add dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000f6e83: and al, 0x9c; add byte ptr [rax], al; add byte ptr [rdi], cl; pushfq; ret 0xd108; 
0x00000000000f6e4c: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xe2c1; 
0x00000000001926f9: and al, 0xa2; add rdx, r12; jmp rdx; 
0x00000000000cf14e: and al, 0xa4; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000008bad0: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x5e; 
0x00000000000a112a: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x860f; 
0x000000000002ae1d: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0xf685; 
0x00000000001090bb: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rdi + 1], bh; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013eda2: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000133c08: and al, 0xb9; add byte ptr [rax + rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax; 
0x00000000000fee3e: and al, 0xb; add al, ch; mov ah, byte ptr [rcx - 0xd]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000559fb: and al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000435ac: and al, 0xc8; and rax, rcx; or rdx, rax; mov qword ptr [rsp - 0x30], rdx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x00000000000435bd: and al, 0xc8; ret; 
0x00000000000e13d0: and al, 0xc; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000004426b: and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x00000000000e1685: and al, 0xc; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e15f5: and al, 0xc; add rsp, 0x18; ret; 
0x0000000000044262: and al, 0xc; call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000000e15ec: and al, 0xc; call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000112bd8: and al, 0xc; lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x000000000011aa6b: and al, 0xc; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c806: and al, 0xc; mov edi, dword ptr [rsp + 8]; mov eax, 0xe6; syscall; 
0x0000000000112bdd: and al, 0xc; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x00000000001504c7: and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000010d4c7: and al, 0xc; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000014d428: and al, 0xc; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x000000000014d4c0: and al, 0xc; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x00000000000a7149: and al, 0xc; mov word ptr [rdi + 4], ax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x00000000000a722e: and al, 0xc; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7064: and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x000000000014d466: and al, 0xc; or al, 0; add byte ptr [rax], al; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000011ab13: and al, 0xc; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000043e7f: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000000435b7: and al, 0xd0; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x000000000012aa03: and al, 0xd0; movdqu xmm1, xmmword ptr [r12 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000008350a: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000194ca8: and al, 0xd8; ret; 
0x0000000000043e87: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000134ca0: and al, 0xe0; add dword ptr [rax], eax; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000bb358: and al, 0xe6; or al, 0; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x0000000000194416: and al, 0xe8; add al, 8; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000042b5e: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000146691: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x18; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000cebcc: and al, 0xe8; fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042b84: and al, 0xe8; fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000058755: and al, 0xe8; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042bd4: and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x00000000000cebd0: and al, 0xe8; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000437f6: and al, 0xe8; in al, 0xed; adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x0000000000110f43: and al, 0xe8; iretd; int1; jmp qword ptr [rsi - 0x7d]; 
0x00000000000a01d9: and al, 0xe8; jno 0xa022b; clc; dec dword ptr [rcx - 0x77]; ret 0xcb8; 
0x00000000000a720a: and al, 0xe8; lea rax, [rdi + rax - 1]; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], dx; ret; 
0x000000000012aa0a: and al, 0xe8; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x00000000000a712a: and al, 0xe8; mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x000000000012f112: and al, 0xe8; mov eax, 0x83; syscall; 
0x000000000004356d: and al, 0xe8; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042c7d: and al, 0xe8; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005bd57: and al, 0xe8; pinsrw xmm0, eax, 6; ret; 
0x0000000000040050: and al, 0xe8; ret 0xfe52; 
0x000000000003bef7: and al, 0xe8; ret; 
0x0000000000150565: and al, 0xe9; imul edi, edi, 0xa0e8ffff; in al, dx; std; call qword ptr [rbx - 0x42]; 
0x00000000000408a5: and al, 0xe9; ret 0xfff3; 
0x0000000000139da0: and al, 0xe9; ret 0xfffb; 
0x000000000008edd7: and al, 0xe9; ret 0xfffe; 
0x000000000003d611: and al, 0xe9; ret; 
0x00000000001019cc: and al, 0xe; add bh, dh; fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; ret; 
0x000000000009fd39: and al, 0xe; add byte ptr [rax - 0x73], cl; add eax, 0xaaed; cmove rax, rdx; ret; 
0x000000000010197c: and al, 0xe; add byte ptr [rcx - 9], al; fsub dword ptr [rsp + rax*2 - 0x77]; add byte ptr [rax - 1], bh; ret; 
0x00000000000a7152: and al, 0xe; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x00000000000a7237: and al, 0xe; mov byte ptr [rdi + 6], dl; ret; 
0x0000000000030f95: and al, 0xeb; ret 0xffb8; 
0x00000000000fa44a: and al, 0xeb; ret; 
0x00000000000a7131: and al, 0xec; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x00000000000a7216: and al, 0xec; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a7042: and al, 0xf0; add rax, rdi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x0000000000043572: and al, 0xf0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042bd0: and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042c82: and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042b14: and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000a71f2: and al, 0xf0; lea rax, [rdi + rax - 1]; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a7112: and al, 0xf0; mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x0000000000115bcd: and al, 0xf0; mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042b59: and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000058750: and al, 0xf0; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005bd51: and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000485c8: and al, 0xf0; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000115bc7: and al, 0xf0; movq xmm0, qword ptr [rsp - 0x10]; mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000cebd6: and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005880a: and al, 0xf0; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000485cd: and al, 0xf0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000cebdc: and al, 0xf0; ret; 
0x00000000000485c1: and al, 0xf0; xor eax, eax; mov qword ptr [rsp - 0x10], r8; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000a7119: and al, 0xf4; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x00000000000a704c: and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a7023: and al, 0xf8; add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a71c3: and al, 0xf8; lea rax, [rdi + rax - 1]; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000043078: and al, 0xf8; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000a70f3: and al, 0xf8; mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x0000000000042e2d: and al, 0xf8; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e91: and al, 0xf8; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042e97: and al, 0xf8; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042f20: and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e33: and al, 0xf8; ret; 
0x0000000000196dab: and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x000000000006f80e: and al, 0xf; test byte ptr [rdi], dl; adc byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x00000000000446f7: and al, 0xf; xchg eax, ebp; ret 0x8948; 
0x0000000000044ecf: and al, 0xf; xchg eax, ebp; ret 0xd321; 
0x000000000010daed: and al, 0xf; xchg eax, esp; ret 0x2044; 
0x00000000000a70fb: and al, 0xfa; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000000a702e: and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000042c12: and al, 0xfc; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000042c16: and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000043402: and al, 0xfc; mov dword ptr [rdi], edx; ret; 
0x0000000000043221: and al, 0xfc; movd xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043236: and al, 0xfc; movd xmm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x000000000004323c: and al, 0xfc; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x00000000000433fc: and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x00000000000432ec: and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043227: and al, 0xfc; ret; 
0x00000000000bce96: and al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010d741: and al, 1; add byte ptr [rax], al; syscall; 
0x0000000000147226: and al, 3; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000015592f: and al, 4; call qword ptr [rax + 0x40]; 
0x0000000000155956: and al, 4; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000112100: and al, 4; mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov eax, 0x146; syscall; 
0x000000000015595a: and al, 4; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000015559b: and al, 4; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000015575b: and al, 4; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x0000000000155565: and al, 4; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000001555b6: and al, 4; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000f4dfe: and al, 4; pop r12; pop r13; pop r14; ret; 
0x0000000000166b94: and al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000045493: and al, 6; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000001408cf: and al, 7; add al, ch; stc; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000b5e08: and al, 7; add byte ptr [rax], al; ret; 
0x000000000004b96e: and al, 8; adc byte ptr [rdi], cl; test dh, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x0000000000150767: and al, 8; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8b48; 
0x00000000000fdf1d: and al, 8; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd020; 
0x00000000000a705a: and al, 8; add rax, rdi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000048b41: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000009cc73: and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbde: and al, 8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000359c4: and al, 8; add rsp, 0x18; ret; 
0x00000000001376a3: and al, 8; call 0x15d990; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001369c4: and al, 8; call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000014589f: and al, 8; call qword ptr [rax + 0x18]; 
0x00000000001546cb: and al, 8; call qword ptr [rax + 8]; 
0x0000000000096293: and al, 8; call qword ptr [rax]; 
0x00000000000462de: and al, 8; call rax; 
0x00000000000965f2: and al, 8; call rcx; 
0x0000000000042cba: and al, 8; fadd st(0); ret; 
0x0000000000042c1a: and al, 8; fscale; fstp st(1); ret; 
0x0000000000042b8c: and al, 8; fsubrp st(1); ret; 
0x0000000000042cc2: and al, 8; fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000004639b: and al, 8; lea r13, [r14 + rbp]; call rax; 
0x000000000010cd46: and al, 8; mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000011181d: and al, 8; mov eax, 0x10f; syscall; 
0x000000000011db08: and al, 8; mov eax, 0x38; syscall; 
0x000000000010d4ce: and al, 8; mov eax, 0x48; syscall; 
0x000000000012c80a: and al, 8; mov eax, 0xe6; syscall; 
0x00000000001466a7: and al, 8; mov ebx, eax; mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x0000000000026b5b: and al, 8; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000112483: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000147557: and al, 8; mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000147f48: and al, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000147f4d: and al, 8; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x00000000000e2857: and al, 8; mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c7: and al, 8; mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011891c: and al, 8; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000cf23e: and al, 8; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000121110: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000121171: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000014c0fa: and al, 8; mov rdi, qword ptr [r15]; lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000082545: and al, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000151441: and al, 8; mov rdi, qword ptr [rsp]; call rax; 
0x0000000000145f9a: and al, 8; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014db53: and al, 8; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000015abc9: and al, 8; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000145088: and al, 8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001376ad: and al, 8; mov rdi, rbx; call rax; 
0x0000000000148dd0: and al, 8; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x00000000001551f8: and al, 8; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x0000000000147f56: and al, 8; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000145f77: and al, 8; movaps xmmword ptr [rsp + 0x30], xmm0; push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000043950: and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x00000000000910ec: and al, 8; movups xmmword ptr [rbx + 0x38], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091027: and al, 8; movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000091279: and al, 8; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000042abb: and al, 8; ret; 
0x00000000001172e5: and al, 8; syscall; 
0x0000000000087df1: and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000096525: and al, 8; xor edi, edi; call qword ptr [rax]; 
0x00000000000359b8: and al, 8; xor edx, edx; call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000359e8: and al, 8; xor esi, esi; call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000014588e: and al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; out dx, eax; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000043a96: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000000042d34: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000e15be: and al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000145898: and al, byte ptr [rax]; add byte ptr [rcx], al; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000e2dc0: and al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000008098a: and al, byte ptr [rcx]; add byte ptr [rax], al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000011dd11: and al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x0000000000145f81: and al, byte ptr [rdi]; add bh, bh; xor eax, 0x72296; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f87: and al, byte ptr [rdi]; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x0000000000166d96: and al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b4fda: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x0000000000101038: and al, ch; ret 0xf349; 
0x00000000000351f2: and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351d2: and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351b2: and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000035132: and ax, 0x200; movzx eax, ax; ret; 
0x0000000000035172: and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350d2: and ax, 0x400; movzx eax, ax; ret; 
0x0000000000042bc9: and ax, 0x8000; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042b52: and ax, 0x8000; mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000035152: and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000035112: and ax, 0x800; movzx eax, ax; ret; 
0x000000000007aa1f: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000007ed0b: and bh, al; add dword ptr [rax], esp; add byte ptr [rax], al; add cl, ch; imul esi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000c9b00: and bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c9ac4: and bh, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000c9aab: and bh, bh; jmp qword ptr [rsi - 0x70]; 
0x00000000000536da: and bh, byte ptr [rip + 0x4c60019]; adc byte ptr [rax], al; ret; 
0x00000000000dc9b3: and bl, al; nop word ptr cs:[rax + rax]; nop; mov eax, 0xd9; syscall; 
0x00000000000b63db: and bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b63da: and bl, r14b; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000aac61: and byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x000000000012621e: and byte ptr [r15 + 0x16], r14b; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000008cd56: and byte ptr [r15 + 0xe], r14b; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cca6: and byte ptr [r15 + 0xe], r14b; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000010b4bf: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x0000000000088b52: and byte ptr [r8 + 1], r9b; ret; 
0x000000000011bffa: and byte ptr [r8 + 2], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001459f0: and byte ptr [r8 - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000001457dc: and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000013e8fa: and byte ptr [r8 - 0x7d], cl; ret; 
0x00000000000b9836: and byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x0000000000110047: and byte ptr [r8], r8b; add byte ptr [rax], al; add al, ch; ficom word ptr [rax - 0xf]; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000009575c: and byte ptr [r9 + 0x39], cl; ret 0x850f; 
0x00000000000cfbc1: and byte ptr [r9 + 0x5e], r8b; pop r15; ret; 
0x0000000000097280: and byte ptr [r9 - 0x75], cl; push rcx; or dh, dh; ret 0x7404; 
0x00000000000eb037: and byte ptr [r9], r15b; push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add qword ptr [rax - 0x7d], rcx; ret; 
0x0000000000090b52: and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000145876: and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f0: and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000011d90d: and byte ptr [rax + 0x21], cl; clc; or rax, rsi; ret; 
0x0000000000097adf: and byte ptr [rax + 0x39], cl; ret 0x4273; 
0x0000000000047a00: and byte ptr [rax + 0x39], cl; ret 0xea76; 
0x0000000000086afe: and byte ptr [rax + 0x3b], cl; push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000008575b: and byte ptr [rax + 0x3b], cl; sub byte ptr [rbx + 0xe], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000bf36c: and byte ptr [rax + 0x63], cl; ret; 
0x0000000000114947: and byte ptr [rax + 0x65], bh; syscall; 
0x000000000014f305: and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000000eaee6: and byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000018aaf7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861a7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018212c: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000001825a6: and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000aace6: and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000007473b: and byte ptr [rax + 1], cl; ret; 
0x000000000011bffb: and byte ptr [rax + 2], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001026f0: and byte ptr [rax + rax*8 - 0x76b2248b], al; ret 0x894d; 
0x00000000000ff00b: and byte ptr [rax - 0x39], cl; or byte ptr [r8], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rdx - 0xe]; 
0x0000000000077636: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x0000000000074ff8: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdx + rax]; lea rdx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000077fb1: and byte ptr [rax - 0x68], cl; movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b1: and byte ptr [rax - 0x68], cl; movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000780dd: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da1: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x00000000001351b0: and byte ptr [rax - 0x75], cl; adc byte ptr [rcx], dh; shr al, 0xe5; ret 0xfff4; 
0x00000000000dd6a6: and byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000148dcc: and byte ptr [rax - 0x75], cl; and al, 8; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x00000000001459f1: and byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x000000000007518b: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff750; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000097260: and byte ptr [rax - 0x75], cl; push rdi; or byte ptr [rax - 0x77], cl; mov esp, 0x8024; add dh, dh; ret 0x7504; 
0x00000000000965e9: and byte ptr [rax - 0x77], cl; and al, 0x18; mov qword ptr [rsp + 8], r11; call rcx; 
0x0000000000082708: and byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001457dd: and byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000001546c7: and byte ptr [rax - 0x77], cl; push rsp; and al, 8; call qword ptr [rax + 8]; 
0x000000000009dfdb: and byte ptr [rax - 0x77], cl; ret 0x148; 
0x0000000000053b47: and byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000015b2c2: and byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x0000000000134823: and byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000df722: and byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000001068e5: and byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000013ff2b: and byte ptr [rax - 0x77], cl; ret; 
0x0000000000125ae3: and byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4801; 
0x0000000000182367: and byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000029166: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000008dc82: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x00000000000a3f64: and byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000110048: and byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ficom word ptr [rax - 0xf]; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x0000000000103e1b: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x217bf037], al; add eax, 0xf9830000; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x00000000000e361a: and byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000007dfde: and byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000000e35d7: and byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xff; cmovne rax, rdx; ret; 
0x000000000007cf2d: and byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x0000000000147196: and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000ba701: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000010d6e1: and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000006dcd0: and byte ptr [rax], al; add byte ptr [rbp - 0x76b70088], cl; ret; 
0x000000000003a7de: and byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fe07], al; jmp qword ptr [rax]; 
0x0000000000190de6: and byte ptr [rax], al; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x0000000000190cc6: and byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0x2041; 
0x00000000000b752c: and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000000b9837: and byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000d242c: and byte ptr [rbp + 0x11], dl; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000103543: and byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x000000000011ee9f: and byte ptr [rbp + 0x31], al; leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec7f: and byte ptr [rbp + 0x31], al; leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000012d2a8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d128: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1e8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000009e748: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3f8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e298: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x00000000000b6a14: and byte ptr [rbp + rcx*4 + 0x1d], cl; cmp byte ptr [rdx + 0xf], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000163dd5: and byte ptr [rbp + rcx*4 + 0x1d], cl; movabs dword ptr [0x4993146349000550], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000000b9044: and byte ptr [rbp + rcx*4 + 0x1d], cl; push 0x49000f1e; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c4: and byte ptr [rbp + rcx*4 + 0x1d], cl; push 0x49000f27; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5414: and byte ptr [rbp + rcx*4 + 0x1d], cl; push rsi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001667a5: and byte ptr [rbp + rcx*4 + 0x1d], cl; xchg eax, ebx; sub byte ptr [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000189cad: and byte ptr [rbp - 0x1f], dh; vzeroupper; ret; 
0x00000000000ce97e: and byte ptr [rbp - 0x7cca8740], al; clc; sbb dword ptr [rdi + 0x18], edi; mov rax, rbx; pop rbx; ret; 
0x00000000000448ff: and byte ptr [rbx + 0x137601fe], al; mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000004493f: and byte ptr [rbx + 0x137601fe], al; mov rax, -2; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000112454: and byte ptr [rbx + 0x267409fe], al; mov eax, 0x48; syscall; 
0x000000000009c130: and byte ptr [rbx + 0x50], 0xfe; movsxd rdi, esi; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x00000000000d01c7: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000030f6d: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000043c72: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x0000000000147923: and byte ptr [rbx - 0x48], bl; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000777bc: and byte ptr [rbx], 0x13; add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, r14; jmp rax; 
0x0000000000137718: and byte ptr [rbx], bl; or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006bc1c: and byte ptr [rcx + 0x11e9ffff], cl; test al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000116e25: and byte ptr [rcx + 0x358d48c7], cl; ret; 
0x000000000009575d: and byte ptr [rcx + 0x39], cl; ret 0x850f; 
0x000000000009182f: and byte ptr [rcx + 0x5bd231d1], cl; jmp rax; 
0x00000000000cfbc2: and byte ptr [rcx + 0x5e], al; pop r15; ret; 
0x00000000000901f9: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000089271: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000011d8af: and byte ptr [rcx + 0xfffe2], al; add byte ptr [rip - 0x1000], ah; or eax, edx; ret; 
0x000000000011da99: and byte ptr [rcx + rcx*4 + 0x44], cl; and al, 0x30; mov qword ptr [rsp + 0x38], r9; syscall; 
0x000000000007af1c: and byte ptr [rcx + rcx*4 - 0x11], cl; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000000472d7: and byte ptr [rcx - 0x353eb711], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000084a9b: and byte ptr [rcx - 0x3b7cb7d7], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000011dc1f: and byte ptr [rcx - 0x47], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x119; syscall; 
0x00000000000e5240: and byte ptr [rcx - 0x4df7b], cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000097281: and byte ptr [rcx - 0x75], cl; push rcx; or dh, dh; ret 0x7404; 
0x0000000000088d1c: and byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000011f451: and byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000000e1705: and byte ptr [rcx], al; mov eax, 0x38; syscall; 
0x00000000000eb038: and byte ptr [rcx], bh; push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add qword ptr [rax - 0x7d], rcx; ret; 
0x00000000000c895f: and byte ptr [rcx], bh; ret; 
0x000000000005bcd9: and byte ptr [rcx], cl; ret 0x9574; 
0x0000000000090b53: and byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000145877: and byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f1: and byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x00000000000e183c: and byte ptr [rcx], dl; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000012621f: and byte ptr [rdi + 0x16], dh; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000ff530: and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000000ba0bc: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000ba4a1: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008cd57: and byte ptr [rdi + 0xe], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cca7: and byte ptr [rdi + 0xe], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000010b4c0: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2d1: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x000000000011f94d: and byte ptr [rdi], cl; add byte ptr [rbp + 0x2e], dh; mov eax, 0x42; syscall; 
0x00000000000351b5: and byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x00000000001817b4: and byte ptr [rdi], cl; mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000127144: and byte ptr [rdi], cl; mov esi, 0x24448900; sbb byte ptr [rbp - 0x6371f040], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x000000000013f34e: and byte ptr [rdi], cl; test dword ptr [rax + 0x3c000001], esi; and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0x2c3c; 
0x00000000000b60d9: and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x0000000000075eac: and byte ptr [rdi], cl; test dword ptr [rbx + rdi*8 - 1], esi; inc dword ptr [rbp - 0x71f025]; or eax, 0x634c0000; ret; 
0x0000000000038fcf: and byte ptr [rdi], cl; test ebx, edi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000018e570: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000000ba421: and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000157fc2: and byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x00000000001154b9: and byte ptr [rdi], cl; xchg eax, esp; ret 0xd108; 
0x00000000001153ef: and byte ptr [rdi], cl; xchg eax, esp; sar dword ptr [rsp + rbx*2], 0xf; xchg eax, esp; ret 0xd108; 
0x000000000018d476: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018db68: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000000bb72c: and byte ptr [rdx + 1], ch; mov rdi, qword ptr [r12]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000166f84: and byte ptr [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000155f40: and byte ptr [rsi + 0xd], dh; add dword ptr [rdi + 0x28], esi; ret; 
0x000000000011fc16: and byte ptr [rsi + 0xf], 0x66; ret 0x894c; 
0x000000000018af8a: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000159f6d: and byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf66; 
0x000000000018af85: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000043a06: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000aac62: and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000001503ee: and byte ptr [rsi + 4], bh; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x0000000000194c91: and byte ptr [rsi + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x23de8]; divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000ef187: and byte ptr [rsi + rsi*2 + 0xf], dh; mov dh, 0x7b; or byte ptr [rbx - 0x76bac7b2], cl; ret 0x418d; 
0x0000000000042bcc: and byte ptr [rsi - 0x77], 0x44; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042b55: and byte ptr [rsi - 0x77], 0x44; and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000c8d44: and byte ptr [rsi], dl; adc al, byte ptr [rax]; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000115cf1: and byte ptr [rsp + rbp*8 + 0x41], dh; mov byte ptr [rax - 1], 0; ret; 
0x000000000012a5c1: and byte ptr [rsp + rcx + 0x5b], dh; ret; 
0x000000000013e9a9: and byte ptr [rsp + rsi*8 + 0x3c], dh; or dword ptr [rax + rsi*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x00000000000ba698: and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000bb3a0: and ch, 2; lea rax, [rip + 0x115d6]; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009e632: and ch, 2; lea rax, [rip + 0xcbd4]; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e200: and ch, 2; lea rax, [rip + 0xcbf6]; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009e592: and ch, 2; lea rax, [rip + 0xcc64]; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e682: and ch, 2; lea rax, [rip + 0xedc4]; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e2: and ch, 2; lea rax, [rip + 0xee54]; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x00000000001823b3: and ch, al; std; xlatb; ret; 
0x00000000001820fc: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000186ee4: and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x000000000013417b: and ch, bh; jmp qword ptr [rsi - 0x70]; 
0x00000000001150fa: and cl, al; idiv bh; mov eax, 1; add rsp, 8; ret; 
0x00000000000952a4: and cl, byte ptr [rax - 0x75]; add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000088dbd: and cl, byte ptr [rax - 0x75]; and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000005c572: and cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000000d6a95: and cl, byte ptr [rax - 0x7d]; ret; 
0x000000000010bd93: and cl, byte ptr [rbx + 0x44634901]; test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x00000000000a70a5: and cl, byte ptr [rbx + 0x48182454]; lea eax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x000000000009e924: and cl, byte ptr [rcx + rcx*4 - 0x28]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aaedd: and cl, byte ptr [rcx - 0x77]; ret; 
0x000000000005a908: and cl, byte ptr [rcx - 0x7d]; in al, dx; add dword ptr [rcx + 0xf], eax; mov esi, 0x89412404; ret; 
0x00000000001200ff: and cl, byte ptr [rcx]; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000f6ae1: and cl, byte ptr [rdi]; mov dh, 0x57; cmp dh, dh; ret 0xf08; 
0x0000000000108a93: and cl, byte ptr [rdi]; test byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rdi]; 
0x0000000000115d09: and cl, byte ptr [rip + 0x40c64100]; inc dword ptr [rax]; ret; 
0x00000000001605fa: and cl, byte ptr [rsp + rbp*8 - 1]; xor eax, eax; add rsp, 8; ret; 
0x000000000002c3f7: and cl, ch; ret; 
0x00000000000600b1: and cl, ch; xchg eax, ebx; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000ba603: and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000009d3c9: and dh, 2; lea rax, [rip + 0xb8dd]; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x00000000000e191d: and dh, ah; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000036afc: and dh, bh; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000141bf2: and dh, byte ptr [rdi]; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x000000000007aa1e: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x000000000013cfca: and dil, dil; jmp qword ptr [rsi - 0x70]; 
0x00000000000b535a: and dl, byte ptr [rdi + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000002f0e5: and dword ptr [rax + 0x29], ecx; ret 0x8b41; 
0x0000000000088dc0: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007a88b: and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010d711: and dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000e1893: and dword ptr [rbx - 0x76b3fff0], ecx; iretd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008722c: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087288: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e134b: and dword ptr [rbx], ebp; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001896da: and dword ptr [rcx], 2; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000011dcd4: and dword ptr [rcx], eax; add byte ptr [rax], al; mov edx, 8; syscall; 
0x000000000015e7a6: and dword ptr [rdi + rdx*8], eax; xor eax, eax; ret; 
0x000000000008d2e0: and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000001460c1: and dword ptr [rdi], eax; add bh, bh; xor eax, 0x72156; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001460c7: and dword ptr [rdi], eax; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x0000000000044950: and dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000092a8e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x00000000000bd64b: and dword ptr [rdx - 0x38b60007], ebx; ret 0xfc01; 
0x00000000001896db: and dword ptr [rdx], eax; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000166ee6: and dword ptr [rip + 0x14634900], eax; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000111d67: and dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001161e3: and dword ptr [rip - 0x7ab7fff3], ebx; push qword ptr [rbp + 0xc]; mov eax, 1; ret; 
0x00000000000b5f0b: and dword ptr [rsi], eax; add byte ptr [rax], al; ret; 
0x000000000011e24b: and dword ptr [rsp + rcx], ebx; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000d953b: and dword ptr [rsp + rsi*8 + 0x903c7ff], edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001460c0: and dword ptr fs:[rdi], eax; add bh, bh; xor eax, 0x72156; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000026ecb: and eax, 0; ret; 
0x000000000006275c: and eax, 0x100; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000112783: and eax, 0x100f; ret; 
0x000000000012c384: and eax, 0x10; ret; 
0x000000000018a921: and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000e1901: and eax, 0x19eb0010; nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000042cca: and eax, 0x200; ret; 
0x00000000000cec6e: and eax, 0x28; mov qword ptr [rsp + 0x58], rax; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000010c6bd: and eax, 0x28; mov qword ptr [rsp + 0x98], rax; xor eax, eax; mov eax, 0x14c; syscall; 
0x0000000000087de9: and eax, 0x28; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000001407c6: and eax, 0x2e80007; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000026eac: and eax, 0x30; add rsp, 0x28; jmp rax; 
0x0000000000026b9d: and eax, 0x30; call rax; 
0x000000000014510b: and eax, 0x30; call rax; lea rax, [rip + 0xa47e7]; add rsp, 8; ret; 
0x00000000000472e2: and eax, 0x30; call rdx; 
0x0000000000029b67: and eax, 0x30; jmp rax; 
0x0000000000052e59: and eax, 0x30; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055996: and eax, 0x30; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba31: and eax, 0x30; mov qword ptr [rsp], 0; call rax; 
0x0000000000047bcf: and eax, 0x30; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000472a1: and eax, 0x30; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000835e8: and eax, 0x30; mov rdi, rbp; call rax; 
0x00000000000dbb75: and eax, 0x30; pop r13; pop r14; jmp rax; 
0x0000000000026412: and eax, 0x30; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x000000000013581a: and eax, 0x38c48348; ret; 
0x00000000000ba61e: and eax, 0x3fc00; ret; 
0x00000000000ba734: and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000ba669: and eax, 0x3fffc00; ret; 
0x00000000001019b8: and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000834e1: and eax, 0x441f0f66; add byte ptr [rax], al; mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000114f1f: and eax, 0x48000d2f; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e64ef: and eax, 0x48fff3ee; mov dword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012d177: and eax, 0x48fff8cf; lea edx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x0000000000166a44: and eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000431b4: and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000352c2: and eax, 0x7f; ret; 
0x00000000000ba74e: and eax, 0x7ff80000; div esi; mov eax, eax; ret; 
0x00000000000ba6b7: and eax, 0x7ff80000; ret; 
0x0000000000042aae: and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000586c0: and eax, 0x7fffff; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000008c1b2: and eax, 0x804; ret; 
0x00000000000430d4: and eax, 0x80; ret; 
0x000000000006f61f: and eax, 0x83000005; ret 0x3901; 
0x000000000015b0ec: and eax, 0x88647; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000034f55: and eax, 0x8948000e; ret; 
0x00000000000f2c35: and eax, 0x8948fff3; ret; 
0x0000000000080fd5: and eax, 0x894cf801; ret 0x8b44; 
0x0000000000042bca: and eax, 0x89668000; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042b53: and eax, 0x89668000; and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000151874: and eax, 0x8d480009; adc eax, 0x983c2; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012c00a: and eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000000101874: and eax, 0xd8f7000e; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e18d5: and eax, 0xd8f70010; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ba5ec: and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000101c04: and eax, 0xf; ret; 
0x000000000018c500: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018bc33: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000001127c9: and eax, 0xffffeff0; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000112812: and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x000000000011d8b6: and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000112cf7: and eax, 0xfffffecf; or eax, 0x30; mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000012f31a: and eax, 0xffffff; or eax, edi; bswap eax; ret; 
0x000000000012f302: and eax, 0xffffff; ret; 
0x00000000001148bd: and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000093283: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x000000000013a473: and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000014712b: and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x000000000009a209: and eax, 1; cmovne rax, rdx; ret; 
0x000000000008a3eb: and eax, 1; mov edx, eax; mov eax, edx; ret; 
0x00000000001187fe: and eax, 1; or rdi, rax; mov qword ptr [rdx], rdi; pop rbx; pop rbp; ret; 
0x0000000000035272: and eax, 1; ret; 
0x00000000000ecaa8: and eax, 2; add eax, 8; ret; 
0x00000000000350f2: and eax, 2; movzx eax, ax; ret; 
0x0000000000142f2c: and eax, 2; pop r14; sub eax, 1; ret; 
0x00000000000568cc: and eax, 2; sub eax, 1; ret; 
0x000000000011e26f: and eax, 3; ret; 
0x0000000000035192: and eax, 4; movzx eax, ax; ret; 
0x00000000000350b2: and eax, 8; movzx eax, ax; ret; 
0x0000000000043454: and eax, 8; ret; 
0x00000000001409ea: and eax, dword ptr [edi]; add al, ch; fld qword ptr [rbp - 0x11]; jmp qword ptr [rsi + 0x66]; 
0x00000000000dd2e1: and eax, dword ptr [rax - 0x76b7000c]; ret 0x8948; 
0x00000000001478f5: and eax, dword ptr [rax]; add bh, al; xor dword ptr [rax + 0x23], 0; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000000a3fcb: and eax, dword ptr [rax]; add bh, dh; ret; 
0x000000000014791b: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000001581df: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001479f1: and eax, dword ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x00000000001478fb: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x00000000000e163e: and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000111abc: and eax, dword ptr [rbx + 0xe74a1f8]; neg eax; pop rbx; ret; 
0x00000000000e2ca2: and eax, dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011e481: and eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001409eb: and eax, dword ptr [rdi]; add al, ch; fld qword ptr [rbp - 0x11]; jmp qword ptr [rsi + 0x66]; 
0x0000000000176099: and eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x0000000000166c46: and eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000121a3d: and eax, dword ptr [rsi + 0x10]; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000435af: and eax, ecx; or rdx, rax; mov qword ptr [rsp - 0x30], rdx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x0000000000042a3f: and eax, ecx; ret; 
0x000000000011d90f: and eax, edi; or rax, rsi; ret; 
0x0000000000043232: and eax, edx; mov dword ptr [rsp - 4], eax; movd xmm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000042e8c: and eax, edx; mov qword ptr [rsp - 8], rax; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042d6f: and eax, edx; ret; 
0x0000000000042db0: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000058706: and eax, esi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000003548d: and eax, esi; ret; 
0x0000000000034da3: and eax, esi; sbb al, byte ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000152f2e: and ebp, ebp; dec dword ptr [rax - 0x77]; ret; 
0x000000000008722d: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087289: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013431a: and ebx, 0x840f2000; ret; 
0x0000000000115aeb: and ebx, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000105e49: and ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000ba638: and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000048662: and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000000485e4: and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x00000000000ecb82: and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x000000000018c505: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018bc38: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000008a2f0: and ecx, 0xffffffcf; mov dword ptr [rdi], ecx; ret; 
0x000000000012d2ab: and ecx, 8; lea rax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d12b: and ecx, 8; lea rax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1eb: and ecx, 8; lea rax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000009e74b: and ecx, 8; lea rax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3fb: and ecx, 8; lea rax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e29b: and ecx, 8; lea rax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x000000000009c7fa: and ecx, dword ptr [rax - 0x39]; or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000146352: and ecx, dword ptr [rax - 0x75]; sbb ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000025359: and ecx, dword ptr [rax - 0x76b7ffed]; ret; 
0x00000000000e12dc: and ecx, dword ptr [rax - 0x77]; inc byte ptr [rbp + 0x31]; sal byte ptr [rcx], cl; sar byte ptr [rdi - 1], cl; mov eax, 0x3d; syscall; 
0x00000000000a2704: and ecx, dword ptr [rbp + 0x63490e78]; ret 0xf41; 
0x000000000008c391: and ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000012c26b: and ecx, dword ptr [rdi]; mov cl, 0x35; lodsd eax, dword ptr [rsi]; ret; 
0x000000000013f356: and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0x2c3c; 
0x0000000000116422: and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xc084; 
0x0000000000116349: and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xd189; 
0x000000000013f772: and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xfb80; 
0x0000000000121b1a: and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000bb44a: and ecx, eax; lea rax, [rip + 0xd2e6d]; cmp rcx, 4; cmovne rax, rdx; ret; 
0x0000000000187ce7: and ecx, ebp; ret; 
0x00000000000352d2: and edi, 0xffffff80; sete al; ret; 
0x0000000000115b9a: and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000010b80c: and edi, 0xfffffff8; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000004486e: and edi, 0xfffffff8; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000010d48c: and edi, dword ptr [rax + 0x48]; syscall; 
0x00000000000e3ba9: and edi, dword ptr [rcx + 3]; add byte ptr [rax - 0x77], cl; ret 0x6be9; 
0x0000000000036439: and edi, dword ptr [rdi]; sbb eax, dword ptr [rax]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000112bfc: and edi, dword ptr [rdx + 1]; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000000149c9b: and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x0000000000043199: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000043250: and edx, 0x80000000; mov dword ptr [rdi], edx; ret; 
0x0000000000043280: and edx, 0x80000000; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043215: and edx, 0x80000000; movss dword ptr [rdi], xmm0; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042aa8: and edx, 0x8000; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000432df: and edx, 0x807fffff; shl edi, 0x17; or edx, edi; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000012f2ef: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012f36d: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000ba67e: and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000011d8b0: and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000011f67d: and edx, 0xfffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000014712e: and edx, 0xfffffffc; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x00000000000ecb7f: and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000000ecaa0: and edx, 2; cmp edx, 1; sbb eax, eax; and eax, 2; add eax, 8; ret; 
0x00000000000777bd: and edx, dword ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, r14; jmp rax; 
0x00000000000e35d1: and edx, dword ptr [rcx - 0x453dc6b8]; and byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xff; cmovne rax, rdx; ret; 
0x00000000000b009e: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000042eb3: and edx, eax; mov qword ptr [rdi], rdx; ret; 
0x0000000000042e28: and edx, eax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f18: and edx, eax; or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000092e31: and edx, edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000190887: and esi, 0x89497fff; ret 0xc148; 
0x000000000014722b: and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000144e92: and esi, 7; movsxd rax, dword ptr [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x0000000000034df8: and esi, dword ptr [rdi + 0x10]; lea rax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x00000000001218f2: and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000014d06b: and esi, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000000f0f04: and esi, esi; ret; 
0x000000000015e7a5: and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x000000000004494f: and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000432de: and r10d, 0x807fffff; shl edi, 0x17; or edx, edi; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000dc9b2: and r11b, r8b; nop word ptr cs:[rax + rax]; nop; mov eax, 0xd9; syscall; 
0x0000000000134319: and r11d, 0x840f2000; ret; 
0x00000000001820fb: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000012d2aa: and r9d, 8; lea rax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d12a: and r9d, 8; lea rax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1ea: and r9d, 8; lea rax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000009e74a: and r9d, 8; lea rax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3fa: and r9d, 8; lea rax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e29a: and r9d, 8; lea rax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x0000000000093282: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x00000000000435ae: and rax, rcx; or rdx, rax; mov qword ptr [rsp - 0x30], rdx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x000000000011d90e: and rax, rdi; or rax, rsi; ret; 
0x0000000000042e8b: and rax, rdx; mov qword ptr [rsp - 8], rax; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042daf: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000058705: and rax, rsi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000bb449: and rcx, rax; lea rax, [rip + 0xd2e6d]; cmp rcx, 4; cmovne rax, rdx; ret; 
0x000000000010b80b: and rdi, 0xfffffffffffffff8; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000004486d: and rdi, 0xfffffffffffffff8; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000011f67c: and rdx, 0xfffffffffffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000b009d: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000042eb2: and rdx, rax; mov qword ptr [rdi], rdx; ret; 
0x0000000000042e27: and rdx, rax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f17: and rdx, rax; or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000008fabd: andnps xmm7, xmm2; jmp qword ptr [rsi + 0x66]; 
0x0000000000042dc0: andpd xmm0, xmmword ptr [rip + 0x174fc8]; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x0000000000042dc8: andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x0000000000042dc1: andps xmm0, xmmword ptr [rip + 0x174fc8]; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x0000000000042dc9: andps xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x000000000013b3b1: bnd ja 0x13b3fd; add rax, 2; mov dword ptr [r8], r10d; mov qword ptr [r9], rax; mov eax, edx; ret; 
0x000000000012f1e6: bnd jb 0x12f200; mov rdx, rsi; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x000000000013b336: bnd jb 0x13b324; mov eax, 0xffffffff; ret; 
0x000000000012e69e: bnd je 0x12e6a8; ret; 
0x000000000009cdab: bnd je 0x9cdc7; test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x00000000000a6e89: bnd je 0xa6e80; ret; 
0x00000000000bb42e: bnd je 0xbb438; ret; 
0x00000000000bc67b: bnd je 0xbc694; test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11b57]; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x00000000000e1285: bnd je 0xe12a0; cmp rax, -1; mov edx, 0; cmovne rdx, rax; mov rax, rdx; ret; 
0x00000000001861a1: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821a1: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001861c1: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821b1: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018620d: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821df: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000185d44: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000000aa88a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000001860d6: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000182236: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000aa7b0: bsf eax, eax; add rax, rdi; ret; 
0x000000000018aad1: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186191: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182191: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000aa7c0: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aa7d0: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aa7a0: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000aa6ff: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000afcf3: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000afad3: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000009e475: bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000009e486: bsf eax, edi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000b01e6: bsf eax, edx; ret; 
0x00000000000ce067: bsf eax, edx; shr rax, 2; ret; 
0x0000000000182a41: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a61: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a27: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000001827b1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000a8baa: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000a8c70: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000181784: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000001817e9: bsf ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000001817ad: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001817cd: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000a8a3c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000181621: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000181641: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181661: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000181603: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000b0342: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce177: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b8fe1: bsf edx, edx; lea r11, [rip + 0xf1ec9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fa9: bsf edx, edx; lea r11, [rip + 0xf1f01]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f84: bsf edx, edx; lea r11, [rip + 0xf1f26]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f67: bsf edx, edx; lea r11, [rip + 0xf1f43]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8661: bsf edx, edx; lea r11, [rip + 0xf27c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8629: bsf edx, edx; lea r11, [rip + 0xf2801]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8604: bsf edx, edx; lea r11, [rip + 0xf2826]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85e7: bsf edx, edx; lea r11, [rip + 0xf2843]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70bd: bsf edx, edx; lea r11, [rip + 0xf3c19]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7094: bsf edx, edx; lea r11, [rip + 0xf3c42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b1: bsf edx, edx; lea r11, [rip + 0xf4299]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6979: bsf edx, edx; lea r11, [rip + 0xf42d1]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6954: bsf edx, edx; lea r11, [rip + 0xf42f6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6937: bsf edx, edx; lea r11, [rip + 0xf4313]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a1d: bsf edx, edx; lea r11, [rip + 0xf50d9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f4: bsf edx, edx; lea r11, [rip + 0xf5102]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53b1: bsf edx, edx; lea r11, [rip + 0xf56c5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5354: bsf edx, edx; lea r11, [rip + 0xf5722]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5337: bsf edx, edx; lea r11, [rip + 0xf573f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a89d1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000afe10: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000afbf0: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000009e485: bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000b0232: bsf rax, rdx; ret; 
0x00000000000ce066: bsf rax, rdx; shr rax, 2; ret; 
0x00000000000a8ba9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000a8c6f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000181853: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000a8a3b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000b0341: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce176: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b8fe0: bsf rdx, rdx; lea r11, [rip + 0xf1ec9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fa8: bsf rdx, rdx; lea r11, [rip + 0xf1f01]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f83: bsf rdx, rdx; lea r11, [rip + 0xf1f26]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f66: bsf rdx, rdx; lea r11, [rip + 0xf1f43]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8660: bsf rdx, rdx; lea r11, [rip + 0xf27c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8628: bsf rdx, rdx; lea r11, [rip + 0xf2801]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8603: bsf rdx, rdx; lea r11, [rip + 0xf2826]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85e6: bsf rdx, rdx; lea r11, [rip + 0xf2843]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70bc: bsf rdx, rdx; lea r11, [rip + 0xf3c19]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7093: bsf rdx, rdx; lea r11, [rip + 0xf3c42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b0: bsf rdx, rdx; lea r11, [rip + 0xf4299]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6978: bsf rdx, rdx; lea r11, [rip + 0xf42d1]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6953: bsf rdx, rdx; lea r11, [rip + 0xf42f6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6936: bsf rdx, rdx; lea r11, [rip + 0xf4313]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a1c: bsf rdx, rdx; lea r11, [rip + 0xf50d9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f3: bsf rdx, rdx; lea r11, [rip + 0xf5102]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53b0: bsf rdx, rdx; lea r11, [rip + 0xf56c5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5353: bsf rdx, rdx; lea r11, [rip + 0xf5722]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5336: bsf rdx, rdx; lea r11, [rip + 0xf573f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a89d0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000182550: bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000182560: bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000182570: bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x000000000018263a: bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x00000000000aada6: bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000aabd6: bsr eax, eax; add rax, rdi; ret; 
0x000000000018245f: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000aac80: bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aac90: bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aaca0: bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000186001: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000b019b: bsr eax, esi; add rax, rdi; ret; 
0x00000000000b00a9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x00000000000affa5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x00000000000aff16: bsr rax, rax; add rax, rdi; ret; 
0x00000000000b019a: bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b00a8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000affa4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000018281c: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000155c5a: bswap eax; cdqe; mov qword ptr [rsi], rax; mov eax, 1; mov qword ptr [rdi + 0x18], rdx; ret; 
0x000000000014ea4e: bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014e9b3: bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ea7b: bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014bdce: bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014bce3: bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014bdfb: bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000014f3aa: bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000014f2aa: bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000014f36d: bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000014bdb7: bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000012f2c2: bswap eax; ret; 
0x000000000018281e: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000155bca: bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x00000000001480f6: bswap edx; mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x0000000000155bfa: bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x000000000014eb6e: bswap esp; call qword ptr [rax + 0x18]; 
0x000000000014bf06: bswap esp; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x000000000014eb6d: bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014bf05: bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x000000000014ea33: bswap rax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000042d90: btr edx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042d8f: btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000058821: bts eax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000b0503: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce173: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000585e1: bts esi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000058820: bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000b0502: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce172: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000585e0: bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000010174b: call 0x101090; add rsp, 0x18; ret; 
0x00000000001016ee: call 0x101680; add rsp, 0x18; ret; 
0x0000000000121a3b: call 0x10583d45; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000001222ab: call 0x105845b5; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000010c142: call 0x10b940; add rsp, 0x18; ret; 
0x000000000010b926: call 0x10c120; add rsp, 0x18; ret; 
0x000000000008e95f: call 0x10cd6cac; pop rbx; pop rbp; pop r12; ret; 
0x000000000015a8bb: call 0x10d420; add rsp, 8; sar eax, 0x1f; ret; 
0x0000000000146997: call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000011c157: call 0x111c15c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011c357: call 0x111c35c; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000112893: call 0x1127b0; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000009aa94: call 0x113350; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000112be4: call 0x113410; add rsp, 0x18; ret; 
0x0000000000145d34: call 0x113ce0; mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x0000000000116544: call 0x116220; mov qword ptr [rip + 0xd19e0], rax; add rsp, 8; ret; 
0x0000000000117881: call 0x117ba0; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000117df9: call 0x118110; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000196583: call 0x1190c0; pop rbx; mov qword ptr [rip + 0x5048c], 0; ret; 
0x00000000001203a8: call 0x11fad0; movsxd rbx, ebx; mov qword ptr [rip + 0xc3fa9], rbx; pop rbx; ret; 
0x000000000012a24c: call 0x129e70; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000012a176: call 0x129e70; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012766a: call 0x12b6c0; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000012700b: call 0x12b6c0; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x0000000000094bd4: call 0x12bd80; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000015c6fa: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b5bd: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b4fd: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a040]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b347: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2aa: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b20d: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a330]; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b177: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015abaa: call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x0000000000047f5d: call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000de296: call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de360: call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000e025f: call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbd4: call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x0000000000124213: call 0x12bdb0; add rsp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c38: call 0x12bdb0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3d6: call 0x12bdb0; add rsp, 0x80; mov eax, edx; ret; 
0x000000000008147a: call 0x12bdb0; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x000000000008a5fa: call 0x12bdb0; add rsp, 0x80; mov eax, r10d; pop rbx; ret; 
0x0000000000085712: call 0x12bdb0; add rsp, 0x80; mov eax, r8d; pop rbx; ret; 
0x00000000000480b2: call 0x12bdb0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x000000000015b2f0: call 0x12bdb0; add rsp, 0x80; mov rax, rdx; add rsp, 8; ret; 
0x00000000000993ef: call 0x12bdb0; add rsp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052f88: call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x0000000000063bf3: call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047119: call 0x12bdb0; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x0000000000047944: call 0x12bdb0; add rsp, 0x80; xor esi, esi; mov rdi, r9; call rdx; 
0x00000000000e15d4: call 0x12bdd0; mov edi, eax; mov eax, 0x22; syscall; 
0x0000000000114237: call 0x12bdd0; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x00000000001142e7: call 0x12bdd0; mov edi, ebx; mov edx, eax; mov eax, 0x4b; syscall; 
0x000000000010d687: call 0x12bdd0; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000044240: call 0x12bdd0; mov esi, 8; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x000000000012c3f6: call 0x12bdd0; mov rsi, rbp; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x0000000000044264: call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000010d81c: call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e15ee: call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000012d45e: call 0x12dbd0; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000012e4ed: call 0x12dbd0; nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000012e452: call 0x12dbd0; nop word ptr [rax + rax]; ret; 
0x000000000011254b: call 0x12f210; mov eax, 0x23; syscall; 
0x000000000011f9bb: call 0x12f210; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000155e93: call 0x12f210; nop dword ptr [rax + rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000001126b3: call 0x12f210; nop dword ptr [rax + rax]; mov eax, 0x22; syscall; 
0x00000000000e26d6: call 0x12f210; nop dword ptr [rax + rax]; mov eax, 0x27; syscall; 
0x00000000000e26d6: call 0x12f210; nop dword ptr [rax + rax]; mov eax, 0x27; syscall; ret; 
0x0000000000101b56: call 0x12f210; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x00000000000e1234: call 0x12f210; nop dword ptr [rax]; mov eax, 0x3f; syscall; 
0x000000000010cae7: call 0x12f210; nop dword ptr [rax]; mov eax, 0x5f; syscall; 
0x000000000010cae7: call 0x12f210; nop dword ptr [rax]; mov eax, 0x5f; syscall; ret; 
0x0000000000113fb7: call 0x12f210; nop dword ptr [rax]; mov eax, 0xab; syscall; 
0x0000000000154438: call 0x12f210; nop dword ptr [rax]; mov eax, 1; ret; 
0x00000000000287e4: call 0x12f210; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x000000000010d505: call 0x12f210; nop word ptr [rax + rax]; mov eax, 0x49; syscall; 
0x0000000000044752: call 0x12f210; nop word ptr [rax + rax]; mov eax, 0x83; syscall; 
0x000000000014c7e5: call 0x12f210; nop word ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000030ce2: call 0x12f210; nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x000000000012d0b2: call 0x12f210; nop word ptr [rax + rax]; ret; 
0x0000000000113201: call 0x12f210; nop word ptr cs:[rax + rax]; mov eax, 0x8c; syscall; 
0x0000000000113e61: call 0x12f210; nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x00000000001560dc: call 0x12f210; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000155b0d: call 0x12f210; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000010e140: call 0x12f210; nop word ptr cs:[rax + rax]; nop; mov eax, 0x5c; syscall; 
0x00000000000e292f: call 0x12f210; nop word ptr cs:[rax + rax]; nop; mov eax, 0x79; syscall; 
0x00000000001477ee: call 0x12f210; nop word ptr cs:[rax + rax]; nop; mov eax, 2; ret; 
0x000000000009be7f: call 0x12f210; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000010e999: call 0x12f210; nop; mov eax, 0x56; syscall; 
0x00000000001141a9: call 0x12f210; nop; mov eax, 0xa3; syscall; 
0x000000000013957a: call 0x12f210; nop; mov edi, dword ptr [rdi]; mov eax, 3; syscall; 
0x000000000013957a: call 0x12f210; nop; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x0000000000111869: call 0x12f210; nop; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000000145129: call 0x132316; inc dword ptr [rbx + 0xa47aa0d]; add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x0000000000135599: call 0x134b30; add rsp, 0x18; ret; 
0x0000000000135ee6: call 0x135940; add rsp, 0x18; ret; 
0x000000000013fc04: call 0x13f630; or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x000000000014512a: call 0x145000; or dword ptr [rip + 0xa47aa], 2; add rsp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x0000000000145080: call 0x146ec0; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000014ca7e: call 0x148b90; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000001461a5: call 0x14e600; nop word ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014ffa0: call 0x14fcb0; add rsp, 0x28; ret; 
0x00000000001563b8: call 0x151c60; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000149cd9: call 0x154d20; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000149cf9: call 0x1551a0; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000147a05: call 0x155d00; mov rax, rbx; pop rbx; ret; 
0x00000000001376a5: call 0x15d990; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000000dd50f: call 0x15d990; mov rax, r14; call rax; 
0x0000000000028360: call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x0000000000028412: call 0x15d990; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x00000000001369c6: call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000314ec: call 0x15de30; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000019695b: call 0x15de30; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x00000000000eaa24: call 0x1616f1ef; mov eax, 1; ret; 
0x0000000000043840: call 0x1905e0; add rsp, 0x10; pop rbx; ret; 
0x0000000000043969: call 0x1905e0; add rsp, 0x20; pop rbx; ret; 
0x00000000000437f7: call 0x1925e0; add rsp, 0x10; pop rbx; ret; 
0x0000000000194417: call 0x194c20; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000008a3e9: call 0x1e926f2; mov edx, eax; mov eax, edx; ret; 
0x000000000008a4d9: call 0x1e927e3; mov edx, eax; mov eax, edx; ret; 
0x000000000008d2f3: call 0x1e955fc; ret; 
0x000000000008d303: call 0x1e9560d; ret; 
0x000000000012b748: call 0x1f33a5b; ret; 
0x000000000007df85: call 0x207df84; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdx; jmp rax; 
0x000000000007eea2: call 0x207eea1; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; jmp rax; 
0x00000000001896d8: call 0x23a19ec; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000001446f0: call 0x25150; test rax, rax; sete al; add rsp, 8; ret; 
0x000000000013b2f7: call 0x25190; add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000147244: call 0x25190; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000009e6e1: call 0x25190; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000a74a9: call 0x25220; add rsp, 8; ret; 
0x0000000000147ab3: call 0x25220; mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000000bb00d: call 0x25220; mov rax, rbx; pop rbx; ret; 
0x0000000000101962: call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x00000000001376d9: call 0x25308; mov qword ptr [rip + 0xb2f3b], rax; add rsp, 8; ret; 
0x0000000000114ee9: call 0x25308; mov qword ptr [rip + 0xd566b], rax; add rsp, 8; ret; 
0x000000000010b536: call 0x25318; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000140882: call 0x25318; mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000081a34: call 0x25318; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e64ee: call 0x25318; mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000155f0f: call 0x25318; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000000ff025: call 0x25318; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000001563ac: call 0x25318; mov qword ptr [rbx], 0; call 0x151c60; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001183fc: call 0x25318; mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000001967f9: call 0x25318; mov qword ptr [rip + 0x514bf], 0; add rsp, 8; ret; 
0x0000000000196a8e: call 0x25318; mov qword ptr [rip + 0x52d82], 0; pop rbx; ret; 
0x000000000015191d: call 0x25318; mov qword ptr fs:[rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000083ca5: call 0x25318; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042139: call 0x25318; mov rdi, rbx; call 0x25318; xor eax, eax; pop rbx; ret; 
0x000000000019679e: call 0x25318; pop rbx; mov qword ptr [rip + 0x510e1], 0; ret; 
0x0000000000110e40: call 0x25318; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042141: call 0x25318; xor eax, eax; pop rbx; ret; 
0x00000000000808a8: call 0x2949c8ae; rol byte ptr [rcx], 1; ret 0x3944; 
0x0000000000029b84: call 0x295c0; or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x0000000000182764: call 0x2adaa78; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000000f081d: call 0x30529166; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002884d: call 0x31710; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008d2db: call 0x34fd0; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000cf773: call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0x60; syscall; 
0x00000000000cf853: call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000d2975: call 0x34fd0; nop word ptr [rax + rax]; mov eax, 0x24; syscall; 
0x000000000004760d: call 0x34fd0; xor eax, eax; ret; 
0x00000000000359bc: call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000196873: call 0x387877; add rsp, 8; ret; 
0x0000000000196c6b: call 0x387c6f; ret; 
0x0000000000196c9b: call 0x387c9f; ret; 
0x0000000000196ccb: call 0x387ccf; ret; 
0x0000000000196cfb: call 0x387cff; ret; 
0x0000000000196d2b: call 0x387d2f; ret; 
0x000000000005c56a: call 0x3c890d70; mov dword ptr [rax], 0x89482275; ret 0x8948; 
0x0000000000042b85: call 0x3fdfec63; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000042bb1: call 0x3fdfec8f; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x00000000000349e1: call 0x415f8b43; pop rbp; pop r14; ret; 
0x0000000000046b23: call 0x4160ac83; pop rbp; pop rbp; ret; 
0x000000000008235b: call 0x416464bd; pop rbp; pop r14; ret; 
0x000000000008236d: call 0x416464cf; pop rbp; pop r14; ret; 
0x0000000000082395: call 0x416464f7; pop rbp; pop r14; ret; 
0x0000000000082479: call 0x416465db; pop rbp; ret; 
0x000000000008502a: call 0x4164918c; pop rbp; pop r14; ret; 
0x000000000008c86a: call 0x416509cc; pop rbp; pop r14; ret; 
0x000000000009cb30: call 0x41660c92; pop rbp; pop r14; ret; 
0x00000000000e1c48: call 0x416a5da8; pop rbp; pop rbp; ret; 
0x00000000000e291a: call 0x416a6a7a; pop rbp; pop rbp; ret; 
0x00000000001167d6: call 0x416da936; pop rbp; pop rbp; ret; 
0x0000000000077635: call 0x419fbe5a; movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x0000000000077695: call 0x419fbeba; movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000776df: call 0x419fbf04; movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000777b0: call 0x419fbfd5; movzx ecx, byte ptr [rax + rax]; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077c9f: call 0x419fc4c4; movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x0000000000077ce6: call 0x419fc50b; movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x0000000000077da0: call 0x419fc5c5; movzx edx, byte ptr [rax + rax]; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077fb0: call 0x419fc7d5; movzx ecx, byte ptr [rax + rax]; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000780dc: call 0x419fc901; movzx edx, byte ptr [rax + rax]; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000078227: call 0x419fca4c; movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x000000000014bdcc: call 0x41dcccd2; mov dword ptr [rax + 0xa8], eax; mov eax, 1; ret; 
0x000000000014ea4c: call 0x41dcf952; mov dword ptr [rax + 0x48], eax; mov eax, 1; ret; 
0x0000000000042b0c: call 0x42b11; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042b5f: call 0x42b64; fld xword ptr [rsp - 0x18]; ret; 
0x000000000010fb8f: call 0x42d8439c; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000058823: call 0x478ed058; or byte ptr [rax + 2], bh; ret; 
0x0000000000065cdf: call 0x48065d2b; lea esi, [rip + 0x143866]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000009ba94: call 0x4809ba99; mov esi, ebp; mov rdi, rbx; call rax; 
0x0000000000048614: call 0x480d0; add rsp, 8; ret; 
0x00000000000d11b2: call 0x480d11b7; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e34d2: call 0x480e35d4; cmovne eax, edx; ret; 
0x000000000004886b: call 0x48a00; lea rax, [rip + 0x1a18af]; add rsp, 8; ret; 
0x00000000000b4fe4: call 0x48f43af9; mov eax, edi; ret; 
0x00000000000b50c4: call 0x48f43bd9; mov eax, edx; ret; 
0x00000000000b80b4: call 0x48f46bc9; mov eax, edi; ret; 
0x00000000000452cb: call 0x49340; add rsp, 8; ret; 
0x000000000009afd4: call 0x4a09afd7; mov dword ptr [rsp], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000175d73: call 0x4aa4a588; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000175f69: call 0x4aa4a76f; add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x0000000000175fef: call 0x4aa4a7f9; add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x0000000000176051: call 0x4aa4a85f; or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x0000000000176071: call 0x4aa4a880; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x00000000001760d3: call 0x4aa4a8e5; or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000017a352: call 0x4aa4eb5a; add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017a37a: call 0x4aa4eb83; add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017a3a0: call 0x4aa4ebaa; add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017a462: call 0x4aa4ec71; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017a4f4: call 0x4aa4ed06; or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000146692: call 0x4c146697; mov dword ptr [rsp + 0x18], edx; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x000000000012aa0b: call 0x4c92ff99; mov edx, esi; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012ac39: call 0x4c9301c7; mov edx, esi; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x0000000000155299: call 0x4cfbdbe6; mov edi, esp; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000155439: call 0x4cfbdd86; mov edi, esp; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x00000000000785c1: call 0x4d0785c0; mov edx, edi; mov rsi, r8; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x000000000018c005: call 0x4e87cffd; call 0xf7fa8c1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d1d5: call 0x4e87e1cd; call 0xf7fba91; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016ae50: call 0x4f06be47; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d970: call 0x4f06e967; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000009328c: call 0x50967a95; add dword ptr [rax - 0x77], ecx; adc eax, 0x151037; ret; 
0x0000000000052feb: call 0x52b00; test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x00000000000a70a3: call 0x5495931f; and al, 0x18; lea rax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x0000000000125f40: call 0x5b125f45; pop rbp; pop r12; pop r13; ret; 
0x0000000000035a8a: call 0x5c44b7ea; ret; 
0x0000000000081a3a: call 0x5c49779a; ret; 
0x000000000008245f: call 0x5c4981bf; pop r13; ret; 
0x0000000000082498: call 0x5c4981f8; pop r13; ret; 
0x000000000008ef83: call 0x5c4a4ce3; ret; 
0x00000000000a7500: call 0x5c4bd260; pop r13; ret; 
0x00000000000e6626: call 0x5c4fc386; ret; 
0x00000000000e6718: call 0x5c4fc478; ret; 
0x00000000000ec771: call 0x5c5024d1; pop r13; ret; 
0x0000000000118a5f: call 0x5c52e7bf; pop r13; ret; 
0x000000000012db44: call 0x5c5438a4; pop r13; ret; 
0x000000000014c326: call 0x5c562086; pop r13; ret; 
0x0000000000152db6: call 0x5c568b16; pop r13; ret; 
0x00000000000cebd1: call 0x5cead5b4; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000034a07: call 0x5d44a64d; pop r14; ret; 
0x000000000008b5c0: call 0x5d4a1206; pop r14; ret; 
0x000000000012f3d1: call 0x62900; pop rax; mov rax, rbx; pop rdx; pop rbx; ret; 
0x00000000001178be: call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x0000000000133ecb: call 0x629b0; pop rax; mov rax, rbx; pop rdx; pop rbx; ret; 
0x000000000005b64d: call 0x6352b651; ret 0x8349; 
0x000000000016a9e1: call 0x635fa9ea; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000004738e: call 0x6491bf96; ret; 
0x000000000011fc15: call 0x6621629a; ret 0x894c; 
0x00000000001966ed: call 0x6ca6aef5; ret; 
0x000000000019673d: call 0x6ca6af45; ret; 
0x0000000000042bd5: call 0x6cdf6bb5; and al, 8; ret; 
0x00000000000ce455: call 0x74df685c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000000a720b: call 0x74eff58; dec dword ptr [rcx + 0x54b70f17]; and al, 0xec; mov word ptr [rdi + 4], dx; ret; 
0x000000000018c4e8: call 0x75e0fcfd; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000080161: call 0x77313d86; sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000018aa24: call 0x78116f2b; ret; 
0x000000000018aadc: call 0x78116fe3; ret; 
0x000000000018ab00: call 0x78117007; ret; 
0x000000000018ab20: call 0x78117027; ret; 
0x000000000018ab6c: call 0x78117073; ret; 
0x000000000018ac0d: call 0x78117114; ret; 
0x000000000018ad48: call 0x7811724f; ret; 
0x000000000018ad7a: call 0x78117281; ret; 
0x000000000018ad91: call 0x78117298; ret; 
0x000000000018adb5: call 0x781172bc; ret; 
0x000000000018add5: call 0x781172dc; ret; 
0x000000000018adf5: call 0x781172fc; ret; 
0x000000000018ae05: call 0x7811730c; ret; 
0x000000000018ae2c: call 0x78117333; ret; 
0x000000000018ae50: call 0x78117357; ret; 
0x000000000018ae70: call 0x78117377; ret; 
0x000000000018aebc: call 0x781173c3; ret; 
0x00000000000fdf18: call 0x7c93271f; and al, 8; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd020; 
0x00000000000b5cbb: call 0x7f98a4c3; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000b5cd6: call 0x7f98a4df; add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x00000000000b5cf9: call 0x7f98a503; add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x00000000000b5dbe: call 0x7f98a5ce; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b5dde: call 0x7f98a5ef; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000b5e00: call 0x7f98a612; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x00000000000b5f03: call 0x7f98a71d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000000b5fba: call 0x7f98a7d9; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b6044: call 0x7f98a866; sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x00000000000b60d4: call 0x7f98a8f9; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x00000000000b73ad: call 0x7f98bbb7; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000b74c4: call 0x7f98bcd6; or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x00000000000b75f4: call 0x7f98be0d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b7627: call 0x7f98be41; adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x00000000000b76e9: call 0x7f98bf07; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000b77a8: call 0x7f98bfca; sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x0000000000187e4c: call 0x7fa5c654; add ecx, dword ptr [rdi]; test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000188992: call 0x7fa5d198; add dword ptr [rdi], ecx; test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000188b5c: call 0x7fa5d363; add cl, byte ptr [rdi]; test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000013b5bf: call 0x7ff438c8; ret; 
0x00000000001150f9: call 0x81920; mov eax, 1; add rsp, 8; ret; 
0x00000000001562d8: call 0x82af0; add rsp, 8; ret; 
0x0000000000031505: call 0x8469e0b; pop rbx; ret; 
0x00000000001562bc: call 0x8a930; add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000114aaa: call 0x8af30; mov eax, 1; add rsp, 8; ret; 
0x0000000000160ea7: call 0x8c730; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x82fb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000091271: call 0x8cf60; mov rax, qword ptr [rsp + 8]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000086954: call 0x8cf60; mov rax, qword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000008e834: call 0x8cf60; mov rdx, qword ptr [rsp]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000008ee2d: call 0x905d0; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008f11f: call 0x905d0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000092f83: call 0x92e90; or dword ptr [rbx], 8; pop rbx; ret; 
0x000000000012ae28: call 0x92f3f4; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbp - 0x78], edi; call rcx; 
0x0000000000141113: call 0xa39627; add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000012e354: call 0xbbb80; add rsp, 8; ret; 
0x0000000000047e7d: call 0xbbb80; pop rbx; ret; 
0x0000000000140134: call 0xe26e0; add rsp, 8; movzx eax, ax; ret; 
0x000000000010bfc5: call 0xe2700; or edx, 0xffffffff; mov esi, eax; mov edi, edx; mov eax, 0x75; syscall; 
0x000000000015047f: call 0xe2710; mov dword ptr [rbx + 0xc], eax; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000010bfed: call 0xe2720; or edx, 0xffffffff; mov esi, eax; mov edi, edx; mov eax, 0x77; syscall; 
0x00000000000f078b: call 0xeb100; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000010c19d: call 0xf10c1a2; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x00000000000e9c61: call 0xf26d8c7; xchg dword ptr [rsi + rdi*8 - 0x7cb70001], esi; ret 0xf01; 
0x000000000018c00a: call 0xf7fa8c1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d1da: call 0xf7fba91; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000ff2de: call 0xfe830; add rsp, 0x18; ret; 
0x00000000000ba5ea: call 0xfec28fb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000f0f56: call 0xffffffff8350feda; ret 0x4901; 
0x00000000000882a5: call 0xffffffff8351eb1f; call qword ptr [rax]; 
0x00000000000f1571: call 0xffffffff835901eb; ret; 
0x00000000000d97c5: call 0xffffffff83dde0d9; ret 0x4801; 
0x000000000013b856: call 0xffffffff8913b85e; clc; add eax, edx; mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x0000000000086a72: call 0xffffffff89516a70; ret; 
0x000000000009913f: call 0xffffffff89529143; ret 0x8548; 
0x0000000000099169: call 0xffffffff8952916d; ret 0x854d; 
0x0000000000153e57: call 0xffffffff895e05e5; ret; 
0x0000000000153fe7: call 0xffffffff895e0775; ret; 
0x00000000001485de: call 0xffffffff89dc94e7; add cl, byte ptr [rcx + 0x55ff41da]; adc byte ptr [rcx], bh; ret; 
0x000000000014f36b: call 0xffffffff89dd0271; add bh, byte ptr [rax + 1]; ret; 
0x0000000000138d04: call 0xffffffff8a138b6d; ret; 
0x00000000000dbaf9: call 0xffffffff8d55bb0e; cmp eax, 0x10ac1d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000115090: call 0xffffffff98fa10c6; add cl, dh; dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x00000000000b280c: call 0xffffffffa7913721; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000a712b: call 0xffffffffb71978b9; and al, 0xec; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x000000000012c3e0: call 0xffffffffc4960be7; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000182a12: call 0xffffffffc542a016; std; xlatb; ret; 
0x0000000000189912: call 0xffffffffc5430f16; std; xlatb; ret; 
0x0000000000127bb4: call 0xffffffffc64abbd8; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000127b77: call 0xffffffffc74abb9b; mov eax, edx; cmove eax, ecx; ret; 
0x00000000001967a1: call 0xffffffffc761c3a5; add eax, 0x510e1; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000196a90: call 0xffffffffc7626a7d; add eax, 0x52d82; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000004548c: call 0xffffffffc7b363d9; lea r12, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000076681: call 0xffffffffc807667c; test dword ptr [rax], ebp; idiv edi; call qword ptr [rax]; 
0x000000000005bd49: call 0xffffffffca0f056e; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x000000000014b27d: call 0xffffffffcbfcb28b; popfq; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001966e6: call 0xffffffffd842aeec; shr rax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000119088: call 0xffffffffe110ede8; nop dword ptr [rax]; ret; 
0x000000000013201c: call 0xffffffffe8132b8f; sub esi, dword ptr [rax]; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000058756: call 0xffffffffe829f436; ret; 
0x00000000000cebcd: call 0xffffffffe83158b1; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000093288: call 0xffffffffe8ca7a9e; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x0000000000128e93: call 0xffffffffe9d46021; adc bh, dh; ret 0x8080; 
0x0000000000151051: call 0xffffffffe9d6e1df; adc bh, dh; ret 0x8080; 
0x0000000000134fe3: call 0xffffffffeed52671; adc bh, dh; ret 0x8080; 
0x0000000000165303: call 0xfffffffff074de54; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167cd3: call 0xfffffffff0750824; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651d3: call 0xfffffffff075db24; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165211: call 0xfffffffff075db62; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165249: call 0xfffffffff075db9a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165287: call 0xfffffffff075dbd8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001652bf: call 0xfffffffff075dc10; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001652e7: call 0xfffffffff075dc38; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016530f: call 0xfffffffff075dc60; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167ba3: call 0xfffffffff07604f4; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167be1: call 0xfffffffff0760532; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167c19: call 0xfffffffff076056a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167c57: call 0xfffffffff07605a8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167c8f: call 0xfffffffff07605e0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167cb7: call 0xfffffffff0760608; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167cdf: call 0xfffffffff0760630; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000010c231: call 0xfffffffff310c236; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000194c98: call 0xfffffffff3194eda; divps xmm0, xmmword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000ba61c: call 0xfffffffffc0bcb2f; add eax, dword ptr [rax]; ret; 
0x00000000000ba667: call 0xfffffffffc0bcb72; inc dword ptr [rbx]; ret; 
0x000000000011d8ae: call 0xfffffffffff459d3; sldt word ptr [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000061097: call 0xfffffffffff6b285; jmp qword ptr [rsi + 0x3d]; 
0x00000000001458fb: call qword ptr [rax + 0x10]; 
0x00000000000867bc: call qword ptr [rax + 0x18]; 
0x000000000015da07: call qword ptr [rax + 0x1c0]; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000008201e: call qword ptr [rax + 0x20]; 
0x0000000000099cce: call qword ptr [rax + 0x24748b48]; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x00000000001457fe: call qword ptr [rax + 0x28]; 
0x0000000000147139: call qword ptr [rax + 0x30]; 
0x0000000000075bf2: call qword ptr [rax + 0x38]; 
0x0000000000155557: call qword ptr [rax + 0x40]; 
0x0000000000094c38: call qword ptr [rax + 0x48]; 
0x0000000000036910: call qword ptr [rax + 0x50]; 
0x0000000000061f2e: call qword ptr [rax + 0x56b60f41]; or al, 0xf6; ret 0x7401; 
0x0000000000084354: call qword ptr [rax + 0x58]; 
0x00000000001157ce: call qword ptr [rax + 0x5c5cbe]; add byte ptr [rax - 0x7d], cl; ret 0x6602; 
0x00000000000869d5: call qword ptr [rax + 0x68]; 
0x000000000008ecac: call qword ptr [rax + 0x78]; 
0x00000000001457a4: call qword ptr [rax + 8]; 
0x00000000000263e7: call qword ptr [rax - 0x18]; 
0x00000000000a0a0e: call qword ptr [rax - 0x1f8b3f7c]; pop rbx; pop rbp; ret; 
0x0000000000042eee: call qword ptr [rax - 0x3d]; 
0x00000000001132ce: call qword ptr [rax - 0x48]; lcall [rbx + 0x5d]; pop r12; ret; 
0x000000000007d1a7: call qword ptr [rax - 0x75]; 
0x00000000000daece: call qword ptr [rax - 0x76b3c475]; dec byte ptr [rax - 0x7d]; ret; 
0x000000000007725c: call qword ptr [rax - 1]; 
0x0000000000050d1d: call qword ptr [rax]; 
0x000000000009a861: call qword ptr [rax]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000001460cf: call qword ptr [rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000015abbd: call qword ptr [rax]; mov rax, qword ptr [rip + 0x8a98a]; lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000001485e7: call qword ptr [rbp + 0x10]; 
0x0000000000087e64: call qword ptr [rbp + 0x18]; 
0x00000000000866af: call qword ptr [rbp + 0x20]; 
0x000000000012701b: call qword ptr [rbp + 0x28]; 
0x0000000000087224: call qword ptr [rbp + 0x30]; 
0x0000000000074583: call qword ptr [rbp + 0x38]; 
0x000000000012fa8a: call qword ptr [rbp + 0x44]; 
0x0000000000063f13: call qword ptr [rbp + 0x48]; 
0x0000000000039f2e: call qword ptr [rbp + 0x53]; 
0x000000000008432b: call qword ptr [rbp + 0x58]; 
0x0000000000081eea: call qword ptr [rbp + 0x60]; 
0x00000000000845b3: call qword ptr [rbp + 0x68]; 
0x00000000000881ea: call qword ptr [rbp + 0x70]; 
0x0000000000100451: call qword ptr [rbp + 4]; 
0x0000000000093e15: call qword ptr [rbp]; 
0x00000000001480fc: call qword ptr [rbx + 0x10]; 
0x0000000000146478: call qword ptr [rbx + 0x18]; 
0x000000000012767a: call qword ptr [rbx + 0x28]; 
0x0000000000075196: call qword ptr [rbx + 0x38]; 
0x000000000008e65f: call qword ptr [rbx + 0x40]; 
0x0000000000044526: call qword ptr [rbx + 0x48]; 
0x000000000008d3cd: call qword ptr [rbx + 0x60]; 
0x0000000000077498: call qword ptr [rbx + 0xf]; 
0x000000000010045f: call qword ptr [rbx + 4]; 
0x000000000015056f: call qword ptr [rbx - 0x42]; 
0x0000000000047398: call qword ptr [rbx]; 
0x000000000012947c: call qword ptr [rcx + 0x28]; 
0x0000000000075368: call qword ptr [rcx + 0x38]; 
0x00000000001002a1: call qword ptr [rcx + 4]; 
0x0000000000094fe6: call qword ptr [rcx]; 
0x000000000008fef9: call qword ptr [rdi + 0x18]; 
0x00000000000889f3: call qword ptr [rdi + 0x20]; 
0x0000000000088bf6: call qword ptr [rdi + 0x30]; 
0x0000000000076e0d: call qword ptr [rdi + 0x38]; 
0x00000000001481a5: call qword ptr [rdi + 0x40]; 
0x000000000015d60d: call qword ptr [rdi + 0xf08]; 
0x0000000000088d4b: call qword ptr [rdi + 8]; 
0x00000000000d2635: call qword ptr [rdx + 0x11]; 
0x0000000000150558: call qword ptr [rdx + 0x20]; 
0x0000000000093ed8: call qword ptr [rdx + 0x48]; 
0x000000000002da04: call qword ptr [rdx]; 
0x00000000000e4837: call qword ptr [rsi + 0x20]; 
0x00000000000e4591: call qword ptr [rsi + 0x28]; 
0x00000000000e484b: call qword ptr [rsi + 0x30]; 
0x0000000000077c0a: call qword ptr [rsi + 0x38]; 
0x00000000000fff65: call qword ptr [rsi + 0x40]; 
0x0000000000094e88: call qword ptr [rsi + 0x48]; 
0x000000000012a591: call qword ptr [rsi + 0x74]; 
0x000000000012a591: call qword ptr [rsi + 0x74]; or edi, dword ptr [rax + 7]; ret; 
0x000000000008fc2e: call qword ptr [rsi + 0x78]; 
0x0000000000073eb1: call qword ptr [rsi]; 
0x0000000000026b69: call rax; 
0x000000000003951e: call rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000145110: call rax; lea rax, [rip + 0xa47e7]; add rsp, 8; ret; 
0x0000000000152637: call rax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000011db1d: call rax; mov rdi, rax; mov eax, 0x3c; syscall; 
0x0000000000027a4d: call rbx; 
0x000000000002836c: call rcx; 
0x000000000002aa72: call rdi; 
0x00000000000472aa: call rdx; 
0x0000000000028cdc: call rsi; 
0x0000000000027d3f: call rsp; 
0x000000000008a514: cdq; adc eax, 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000c776b: cdq; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000013a51b: cdq; add byte ptr [rax], al; add byte ptr [rbp + 0x39850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000001018d3: cdq; and eax, 0xd8f7000e; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008b663: cdq; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000113fd3: cdq; dec byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000047c62: cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret; 
0x0000000000047c74: cdq; idiv rsi; ret; 
0x00000000000e1633: cdq; lea edx, [rax]; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x23]; syscall; 
0x000000000012e5ea: cdq; mov rax, rdi; ret; 
0x000000000011f8d3: cdq; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000085713: cdq; or al, byte ptr [rax]; add rsp, 0x80; mov eax, r8d; pop rbx; ret; 
0x000000000013fbdc: cdq; or al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013b99f: cdq; out dx, al; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000010ead3: cdq; push rbx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b53e3: cdq; push rsi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000007b6a4: cdq; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000b69b7: cdq; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000015a8d3: cdq; xchg eax, ebp; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114b03: cdq; xor cl, byte ptr [rip + 0x1b800]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000155c5c: cdqe; mov qword ptr [rsi], rax; mov eax, 1; mov qword ptr [rdi + 0x18], rdx; ret; 
0x0000000000077637: cdqe; movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000eaa83: cdqe; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x0000000000074ff9: cdqe; movzx eax, byte ptr [rdx + rax]; lea rdx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000077fb2: cdqe; movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b2: cdqe; movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000780de: cdqe; movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da2: cdqe; movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000010bd27: clc; adc byte ptr [rdi], cl; test byte ptr [rdi - 0x9fffffd], bl; ret 0xf20; 
0x0000000000169937: clc; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001045f4: clc; add al, 0xf; xchg eax, esp; ret; 
0x000000000010c1a9: clc; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000011f9bd: clc; add byte ptr [rax], al; mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000000bb4fc: clc; add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000baffc: clc; add cl, byte ptr [rax + 0x29]; ret 0xf74; 
0x0000000000087c64: clc; add cl, byte ptr [rax - 0x77]; ret; 
0x00000000001045e9: clc; add cl, byte ptr [rdi]; test byte ptr [rbp + 0x31000004], bh; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x0000000000104b98: clc; add cl, byte ptr [rdi]; xchg eax, ebp; ret; 
0x000000000010462c: clc; add dh, byte ptr [rax + rcx + 0x31]; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x00000000000289f6: clc; add dh, byte ptr [rsi - 0x77]; ret 0x3d83; 
0x00000000000e0f48: clc; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000a295d: clc; add dword ptr [rbp + 0x19], eax; fild dword ptr [rcx - 0x7d]; ret; 
0x0000000000093426: clc; add dword ptr [rbp + 0xe], esi; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000154571: clc; add dword ptr [rbp - 0x14], esi; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax]; 
0x000000000004158e: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x000000000013b233: clc; add dword ptr [rcx + rcx - 0x7b], esi; sal byte ptr [rbp + 0x15], 0x44; mov eax, eax; ret; 
0x00000000000a3b15: clc; add dword ptr [rcx - 0x7c2de63f], ecx; ret 0x8305; 
0x0000000000093301: clc; add dword ptr [rdi + rcx + 0x44], eax; ret 0xf641; 
0x00000000000a02bb: clc; add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a475: clc; add eax, 0x10; ret; 
0x000000000013b85b: clc; add eax, edx; mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x000000000012a3e1: clc; add ecx, dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xc083; 
0x00000000000eff31: clc; add ecx, dword ptr [rdi]; test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000546d0: clc; add ecx, dword ptr [rdi]; xchg eax, edi; ret 0x8545; 
0x00000000001474da: clc; add esi, dword ptr [rsi + 0xa]; mov eax, 2; ret; 
0x000000000018263f: clc; add rax, r8; vzeroupper; ret; 
0x00000000000aa587: clc; add rax, rcx; ret; 
0x000000000018aa1b: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860db: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000181fa4: clc; add rax, rcx; vzeroupper; ret; 
0x00000000000a7024: clc; add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000aadab: clc; add rax, rsi; ret; 
0x000000000011f67f: clc; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000ef186: clc; and byte ptr [rsi + rsi*2 + 0xf], dh; mov dh, 0x7b; or byte ptr [rbx - 0x76bac7b2], cl; ret 0x418d; 
0x00000000000352c1: clc; and eax, 0x7f; ret; 
0x000000000012f301: clc; and eax, 0xffffff; ret; 
0x000000000012f2c1: clc; bswap eax; ret; 
0x000000000012ec8c: clc; call qword ptr [rax - 0x18]; 
0x0000000000047c61: clc; cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret; 
0x0000000000047c72: clc; cqo; idiv rsi; ret; 
0x00000000000a02a8: clc; dec dword ptr [rax + 0x29]; ret; 
0x000000000009e130: clc; dec dword ptr [rax + 1]; ret; 
0x000000000012d2f9: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ccbe; cmove rax, rdx; ret; 
0x000000000012d239: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8cd9e; cmove rax, rdx; ret; 
0x000000000012d179: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ce5e; cmove rax, rdx; ret; 
0x000000000012d377: clc; dec dword ptr [rax - 0x73]; add eax, 0xfff8d070; cmovne rax, rdx; ret; 
0x000000000009c5fe: clc; dec dword ptr [rax - 0x75]; add eax, 0x147869; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009d1d9: clc; dec dword ptr [rax - 0x77]; ret 0x394d; 
0x00000000000964df: clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x000000000009c64f: clc; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000082d9a: clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000076300: clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000009710c: clc; dec dword ptr [rax - 0x77]; shr ecx, 0x5c; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000001158c5: clc; dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + rdx + 0x48], 0x39; ret; 
0x00000000000a01dd: clc; dec dword ptr [rcx - 0x77]; ret 0xcb8; 
0x0000000000146b77: clc; dec dword ptr [rdi]; test byte ptr [rcx], bl; add dword ptr [rax], eax; add byte ptr [rbp - 0x7ed28a40], al; ret; 
0x0000000000106673: clc; dec dword ptr [rdi]; test byte ptr [rip - 0x76fffffd], dh; ret 0xc085; 
0x000000000007690d: clc; dec dword ptr [rdi]; test dword ptr [rax - 0x16000015], ebx; scasb al, byte ptr [rdi]; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000069c34: clc; dec dword ptr [rdi]; test dword ptr [rdi], ecx; ret; 
0x000000000007ca60: clc; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000006], edx; ret; 
0x0000000000044e67: clc; dec dword ptr [rdi]; xchg eax, ebp; ret 0xd321; 
0x000000000015e81b: clc; dec dword ptr [rdi]; xchg eax, esp; ret 0x1389; 
0x000000000008a9ad: clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x00000000000dbabe: clc; fidiv dword ptr [rbp + 0xc]; mov rsi, rbx; xor edi, edi; mov eax, 0xe4; syscall; 
0x0000000000072143: clc; imul ecx, dword ptr [rdi], 0x174285; add byte ptr [rcx], dh; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000000955d4: clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000009d055: clc; jmp qword ptr [rsi + 0xf]; 
0x000000000009bfec: clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000080a47: clc; jmp rax; 
0x00000000000cea68: clc; jno 0xceaea; and al, 0x48; lea eax, [rip + 0x118d8d]; add rsp, 8; ret; 
0x000000000009e6e4: clc; lcall [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000196586: clc; lcall [rbx + 0x48]; mov dword ptr [rip + 0x5048c], 0; ret; 
0x0000000000168d26: clc; lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b70: clc; lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166262: clc; lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166188: clc; lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000188cdf: clc; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000000a71c4: clc; lea rax, [rdi + rax - 1]; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000e1dd4: clc; leave; ret; 
0x00000000001873ff: clc; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000115d05: clc; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x0000000000084f04: clc; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085622: clc; mov dword ptr [rcx], edi; ret; 
0x0000000000043079: clc; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000a7046: clc; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a705e: clc; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000165327: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c7b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e7b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016607b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016530b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c4f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e4f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016604f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001652df: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c97: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016abe7: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165e97: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016ab57: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000166097: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aac7: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165343: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000188cd7: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873f7: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fa7: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000ba54e: clc; mov qword ptr [rdi], rcx; ret; 
0x00000000001895ed: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000018d4ac: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000ba11a: clc; mov qword ptr [rdi], rsi; ret; 
0x0000000000151437: clc; mov rcx, r14; mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x00000000000ba112: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000a70f4: clc; mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000000a7027: clc; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000042e2e: clc; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e92: clc; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042e98: clc; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042f21: clc; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000004189f: clc; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000000aaef2: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000011d8c2: clc; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000002740c: clc; neg eax; ret; 
0x00000000000bad29: clc; or al, 0; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x0000000000114654: clc; or al, 0; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000035ae2: clc; or dh, byte ptr [rdi - 0x43]; lea rdx, [rip + 0x16f093]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000011d910: clc; or rax, rsi; ret; 
0x00000000000eac96: clc; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000094fa4: clc; pop rbp; pop r12; ret; 
0x000000000005c0e4: clc; pop rbx; cmovb rax, rdi; ret; 
0x00000000000a7566: clc; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000091bcf: clc; push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082551: clc; push qword ptr [rbx + rcx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000dcde3: clc; push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x0000000000117da5: clc; push qword ptr [rdi + rcx + 0x5b]; lea rax, [rip + 0xd02ef]; pop rbp; pop r12; ret; 
0x0000000000120908: clc; push qword ptr [rsi + rax - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000106d10: clc; push qword ptr [rsp + rbx*8 - 0x77]; ret 0xc085; 
0x000000000002741f: clc; ret; 
0x000000000012f2d1: clc; rol ax, 8; ret; 
0x0000000000047c13: clc; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000012f18b: clc; sar rax, 6; ret; 
0x0000000000047c25: clc; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x00000000000e83fe: clc; sbb byte ptr [rcx], bh; ret; 
0x0000000000153d47: clc; sbb cl, byte ptr [rcx + 0x430f41c8]; ret 0xf801; 
0x00000000000ce984: clc; sbb dword ptr [rdi + 0x18], edi; mov rax, rbx; pop rbx; ret; 
0x0000000000064062: clc; sbb dword ptr [rdi + 0x1a], esi; lea rcx, [rip + 0x144db3]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035564: clc; sbb r8, qword ptr [r8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005705a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000012f381: clc; shr eax, 0x18; ret; 
0x000000000011d8ab: clc; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000000ce17f: clc; shr rax, 2; ret; 
0x000000000018aad6: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186196: clc; sub rax, rdx; vzeroupper; ret; 
0x000000000010b80e: clc; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000044870: clc; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000009a204: clc; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000018211b: clc; vzeroupper; ret; 
0x0000000000082b60: cld; adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x0000000000084a52: cld; adc dl, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c5bd0: cld; add al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e3562: cld; add byte ptr [rax], al; ret; 
0x000000000007cdc2: cld; add cl, byte ptr [rcx + rcx*4 - 0x1e]; call qword ptr [rax + 0x38]; 
0x0000000000054643: cld; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x7c8b; 
0x00000000000ba63b: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000ba620: cld; add eax, dword ptr [rax]; ret; 
0x000000000014712d: cld; and edx, 0xfffffffc; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x000000000014722d: cld; call qword ptr [rax + 0x30]; 
0x00000000001484aa: cld; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000148049: cld; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000010f18b: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000014699a: cld; dec dword ptr [rcx - 0x75]; cmp byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x00000000000f0546: cld; dec dword ptr [rcx]; ret 0x5189; 
0x0000000000042c13: cld; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x000000000016b940: cld; fild word ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000042c17: cld; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000e99b6: cld; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000ba736: cld; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000ba66b: cld; inc dword ptr [rbx]; ret; 
0x000000000013c164: cld; inc dword ptr [rcx]; add byte ptr [rax + 0x29], cl; ret 0x149; 
0x00000000000dcd61: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000160c10: cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000059148: cld; jmp qword ptr [rsi + 0xf]; 
0x000000000005de0e: cld; jmp qword ptr [rsi - 0x7b]; 
0x000000000014c857: cld; jmp qword ptr [rsi - 0x7d]; 
0x000000000019695e: cld; lcall [rbp + 0x48]; mov dword ptr [rip + 0x522fc], 0; ret; 
0x0000000000147130: cld; lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x0000000000188cbd: cld; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873dd: cld; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000165ab2: cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165cb5: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165eb5: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001660b5: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000188cb6: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873d6: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f86: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000ba556: cld; mov dword ptr [rdi], ecx; ret; 
0x00000000001895f8: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000043403: cld; mov dword ptr [rdi], edx; ret; 
0x000000000018d4be: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000ba128: cld; mov dword ptr [rdi], esi; ret; 
0x00000000000ba122: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000155bce: cld; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x00000000001654ea: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656ca: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658aa: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a8a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656ae: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016588e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a6e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656e6: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ad76: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001658c6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016acf6: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165aa6: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ac76: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165506: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016adf6: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000043222: cld; movd xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043237: cld; movd xmm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x000000000004323d: cld; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x00000000000433fd: cld; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x00000000000432ed: cld; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000001141c4: cld; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011426c: cld; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bb520: cld; pushfq; idiv bh; mov rax, rbx; pop rbx; ret; 
0x0000000000043228: cld; ret; 
0x000000000007cdbf: cld; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000036a27: cld; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000441c4: cld; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044194: cld; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000018d62d: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f3: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d8ef: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018db1b: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000187f8d: cld; vzeroupper; ret; 
0x00000000000c5008: cld; xor ecx, dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000000481ed: cli; adc byte ptr [rcx], ch; ret 0xc269; 
0x00000000000cf8d7: cli; adc cl, byte ptr [rax + 0x29]; ret 0x148; 
0x00000000001697b7: cli; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000013cc2d: cli; add al, 0x48; mov dword ptr [rbx + 0x10], eax; mov eax, 0x14; add edx, 1; syscall; 
0x000000000010c283: cli; add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; 
0x000000000010c283: cli; add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x0000000000111571: cli; add al, 0x77; or esp, dword ptr [rsi - 0x77]; push rsi; xor ax, ax; ret; 
0x00000000000cfb38: cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x00000000000d7672: cli; add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000d76ca: cli; add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x000000000018db9e: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000a430e: cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4006; 
0x000000000013b3f9: cli; add dword ptr [rbp - 0x71], esi; mov eax, 0xffffffff; ret; 
0x00000000000ecaa4: cli; add dword ptr [rcx], ebx; rol byte ptr [rbx - 0x3f7cfd20], 8; ret; 
0x000000000012c002: cli; add dword ptr [rcx], ebx; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d5b0ce0], al; ret; 
0x0000000000051ef1: cli; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x2041; 
0x000000000018dbab: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000018d4dc: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000cefab: cli; add ebp, dword ptr [rcx]; ret 0x48d; 
0x00000000000c91ee: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x00000000000c9244: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000001546c6: cli; and byte ptr [rax - 0x77], cl; push rsp; and al, 8; call qword ptr [rax + 8]; 
0x00000000000ba4a0: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000075eab: cli; and byte ptr [rdi], cl; test dword ptr [rbx + rdi*8 - 1], esi; inc dword ptr [rbp - 0x71f025]; or eax, 0x634c0000; ret; 
0x00000000000ba420: cli; and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000018db67: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000115cf0: cli; and byte ptr [rsp + rbp*8 + 0x41], dh; mov byte ptr [rax - 1], 0; ret; 
0x0000000000116421: cli; and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xc084; 
0x000000000007742c: cli; call qword ptr [rax + 0x38]; 
0x00000000000e36e2: cli; cmp eax, 0x517428cd; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000a098c: cli; cmp eax, 0x8348f075; mov dword ptr [rcx], 0xb8; add byte ptr [rdx + rdx*8 - 0x38baf0b8], al; ret; 
0x0000000000083ca8: cli; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000e0da7: cli; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000007c56a: cli; dec dword ptr [rax - 0x77]; ret 0x86e9; 
0x000000000007b0f5: cli; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000007cc79: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000081a37: cli; dec dword ptr [rcx + 0x415d5be8]; pop rsp; ret; 
0x000000000007fc63: cli; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x00000000000e7754: cli; dec dword ptr [rdi]; xchg eax, esp; ret; 
0x00000000000ba63f: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x000000000007ab44: cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000879a0: cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000081b68: cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000076fdc: cli; jmp qword ptr [rsi - 0x70]; 
0x000000000004179b: cli; jmp rdx; 
0x000000000015fbeb: cli; jnp 0x15fbfd; xchg eax, esp; ret 0xb60f; 
0x000000000015fd0b: cli; jnp 0x15fd1d; xchg eax, esp; ret 0xb60f; 
0x00000000000e5aeb: cli; jnp 0xe5afd; xchg eax, esp; ret 0xb60f; 
0x00000000000e5c0b: cli; jnp 0xe5c1d; xchg eax, esp; ret 0xb60f; 
0x0000000000097f89: cli; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000a70fc: cli; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000000a702f: cli; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000165eb8: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000432e9: cli; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000047c11: cli; mov eax, edi; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000012f10a: cli; mov ebx, esi; xor edi, edi; lea rsi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x0000000000165eb2: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000114371: cli; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x0000000000042f1c: cli; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000047c22: cli; mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000009b1a0: cli; mov rdi, r13; call rax; 
0x000000000006c958: cli; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064970: cli; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007e47f: cli; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000133c10: cli; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000007751e: cli; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000785c7: cli; mov rsi, r8; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x00000000000aaef8: cli; movzx edx, dl; sub eax, edx; ret; 
0x0000000000114394: cli; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000017cb46: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018db80: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000104753: cli; or cl, byte ptr [rcx - 0x77]; ret 0xf44; 
0x000000000005a50c: cli; or dword ptr [rdi], ecx; xchg dword ptr [rax], eax; add eax, 0x63480000; ret 0x8d48; 
0x000000000009cf34: cli; or dword ptr [rdi], ecx; xchg eax, esi; ret 0x3145; 
0x000000000009cede: cli; or dword ptr [rdi], ecx; xchg eax, esi; ret 0xf631; 
0x000000000013e97c: cli; or dword ptr [rdi], ecx; xchg eax, esp; ret 0x841; 
0x000000000004829c: cli; push qword ptr [rbp - 0x4c]; xor eax, eax; ret; 
0x0000000000082bd4: cli; push qword ptr [rcx + rdi + 0x48]; mov eax, edx; pop rbx; ret; 
0x00000000000e36ed: cli; push rsp; push rbx; setne al; ret; 
0x00000000000ba462: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000012b7cf: cli; setae al; ret; 
0x000000000018d8fd: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000012d39c: clts; add byte ptr [rax - 0x73], cl; adc eax, 0x60f3a; cmove rax, rdx; ret; 
0x000000000002c472: cmc; add al, 0; add bh, dh; ret 0; 
0x0000000000169c37: cmc; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001810b8: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000012d763: cmc; call qword ptr [rax - 0x18]; 
0x0000000000147e0e: cmc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000ca0b8: cmc; jmp qword ptr [rsi + 0xf]; 
0x000000000016acfa: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016573e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016acf3: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001658a7: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658c3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000018fa53: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000125d6e: cmc; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000037329: cmc; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000044882: cmc; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018fa57: cmc; sub eax, edx; ret; 
0x0000000000111888: cmova eax, edx; ret; 
0x0000000000092f99: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000087ae0: cmovae eax, dword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000011493f: cmovae edx, dword ptr [rax + 0x18]; mov qword ptr [rsp + 0x20], rax; mov eax, 0x65; syscall; 
0x000000000011493e: cmovae r10, qword ptr [rax + 0x18]; mov qword ptr [rsp + 0x20], rax; mov eax, 0x65; syscall; 
0x0000000000092f98: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000087adf: cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000005c04d: cmovb eax, edi; ret; 
0x000000000011f68c: cmovb eax, edx; ret; 
0x00000000001873d8: cmovb ecx, dword ptr [rcx + 0x42fc0754]; mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x0000000000188cb8: cmovb ecx, dword ptr [rcx + 0x4afc0754]; lea eax, [rdi + rax]; vzeroupper; ret; 
0x000000000005c04c: cmovb rax, rdi; ret; 
0x000000000011f68b: cmovb rax, rdx; ret; 
0x000000000012c7be: cmovbe eax, edx; add rsp, 0x20; pop rbx; ret; 
0x000000000009cfbd: cmovbe eax, edx; ret; 
0x000000000012b7c8: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000101938: cmovbe esi, ecx; mov eax, ecx; syscall; 
0x000000000012b7c7: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000101937: cmovbe rsi, r9; mov eax, ecx; syscall; 
0x00000000000ba645: cmove eax, ecx; ret; 
0x000000000009e478: cmove eax, edx; add eax, 1; ret; 
0x00000000000cf751: cmove eax, edx; add rsp, 0x28; ret; 
0x000000000009aaa3: cmove eax, edx; add rsp, 8; ret; 
0x0000000000034c9b: cmove eax, edx; ret; 
0x000000000015abf1: cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x0000000000048014: cmove ebx, eax; mov rax, rbx; pop rbx; ret; 
0x00000000000bb579: cmove ebx, edx; mov rax, rbx; pop rbx; ret; 
0x00000000000eae58: cmove ecx, dword ptr [rcx - 0x3fcecb9d]; pop rbx; pop rbp; pop r12; ret; 
0x000000000011b68b: cmove edx, eax; mov byte ptr [rdx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000008c2ac: cmove edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000ba644: cmove rax, rcx; ret; 
0x000000000009e489: cmove rax, rdx; add eax, 1; ret; 
0x00000000000cf750: cmove rax, rdx; add rsp, 0x28; ret; 
0x000000000009aaa2: cmove rax, rdx; add rsp, 8; ret; 
0x0000000000034c9a: cmove rax, rdx; ret; 
0x0000000000048013: cmove rbx, rax; mov rax, rbx; pop rbx; ret; 
0x00000000000bb578: cmove rbx, rdx; mov rax, rbx; pop rbx; ret; 
0x000000000011b68a: cmove rdx, rax; mov byte ptr [rdx], 0; mov rax, rbx; pop rbx; ret; 
0x00000000000cdaea: cmovg eax, edx; ret; 
0x000000000018860a: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001496f8: cmovl ecx, dword ptr [rcx]; ror byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x00000000000898b1: cmovne eax, ecx; ret; 
0x00000000000a009f: cmovne eax, edi; ret; 
0x000000000015aad6: cmovne eax, edx; add rsp, 8; ret; 
0x00000000000863f2: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000ecb88: cmovne eax, edx; pop rbx; ret; 
0x000000000009a20d: cmovne eax, edx; ret; 
0x0000000000185b24: cmovne eax, edx; vzeroupper; ret; 
0x0000000000127bf3: cmovne eax, esi; ret; 
0x00000000000b00a1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000033965: cmovne edx, eax; lea rax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x00000000000e1292: cmovne edx, eax; mov rax, rdx; ret; 
0x00000000000b00a5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000898b0: cmovne rax, rcx; ret; 
0x00000000000a009e: cmovne rax, rdi; ret; 
0x000000000015aad5: cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009a20c: cmovne rax, rdx; ret; 
0x0000000000185b23: cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b00a0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000e1291: cmovne rdx, rax; mov rax, rdx; ret; 
0x00000000000b00a4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000012622d: cmovns eax, dword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000007d5fc: cmovns eax, dword ptr [rbx - 0x76b20f20]; ret 0x8d48; 
0x0000000000032f55: cmovns eax, dword ptr [rcx]; ror byte ptr [rax - 0x77], 1; ret 0x8349; 
0x0000000000113228: cmovns eax, edx; ret; 
0x000000000012622c: cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000001873fa: cmovp ecx, dword ptr [rcx + 0x42f80754]; mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x0000000000188cda: cmovp ecx, dword ptr [rcx + 0x4af80754]; lea eax, [rdi + rax]; vzeroupper; ret; 
0x00000000000e4247: cmovs eax, dword ptr [rbx + 0x394810c2]; ret; 
0x0000000000150f87: cmovs eax, dword ptr [rbx + 0x5d5b28c4]; ret; 
0x0000000000029e3c: cmovs eax, edx; ret; 
0x000000000008d380: cmovs ecx, dword ptr [rbp - 0x76b7feb0]; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000b7525: cmovs ecx, dword ptr [rbp - 0x7af0f081]; and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000000b5e41: cmovs ecx, dword ptr [rbp - 0x7af0f081]; in al, 6; add byte ptr [rax], al; ret; 
0x000000000017a555: cmovs ecx, dword ptr [rbp - 0x7af0f0b6]; mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b73a6: cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f98bbb7; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x000000000010eb69: cmovs ecx, dword ptr [rbx + 0x48c03116]; cmp ecx, edx; seta al; sbb eax, 0; ret; 
0x000000000018d4a5: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000b95f9: cmovs ecx, dword ptr [rcx - 0x12cff8a9]; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000b95d9: cmovs ecx, dword ptr [rcx - 0x12cff9a9]; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b95b9: cmovs ecx, dword ptr [rcx - 0x12cffaa9]; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b5df9: cmovs ecx, dword ptr [rcx - 0x7cb6faa9]; call 0x7f98a612; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x00000000000ba5ee: cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x00000000000ba680: cmovs esp, dword ptr [rbx + 4]; xchg eax, esi; add rax, rsi; jmp rax; 
0x0000000000076fda: cmp ah, bl; cli; jmp qword ptr [rsi - 0x70]; 
0x00000000001817b8: cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000181404: cmp ah, byte ptr [rbx + 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ret 0xf40; 
0x000000000018153f: cmp ah, byte ptr [rbx - 0x25]; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000018132a: cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x0000000000181240: cmp ah, byte ptr [rbx - 0x2e]; cmp cl, byte ptr [rax - 0x7d]; ret 0x2910; 
0x000000000017e5aa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017f10a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e8ea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017e0ca: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000017ec2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e40a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017dbea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017edca: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000017df2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e060: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ed60: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e880: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f0a0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e3a0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000017dec0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ebc0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000181596: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000156a08: cmp al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000026bc3: cmp al, 0; add byte ptr [rax], al; nop word ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000011db23: cmp al, 0; add byte ptr [rax], al; syscall; 
0x000000000006589a: cmp al, 0x14; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000901f4: cmp al, 0x15; add byte ptr [rbx + 0xf8920c9], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000537b1: cmp al, 0x19; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000028b33: cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xf4e9; 
0x00000000000a00f1: cmp al, 0x24; add byte ptr [rdx + rdx + 0x5b], dh; pop rbp; pop r12; ret; 
0x0000000000151445: cmp al, 0x24; call rax; 
0x0000000000044eb6: cmp al, 0x24; mov eax, ecx; syscall; 
0x000000000015d97c: cmp al, 0x24; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x00000000000bb731: cmp al, 0x24; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000146d14: cmp al, 0x24; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000014263e: cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000036d28: cmp al, 0x36; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015de97: cmp al, 0x48; add esp, 0x38; ret; 
0x000000000015db31: cmp al, 0x48; add esp, 0x58; ret; 
0x000000000014616a: cmp al, 0x4c; lea eax, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000014622a: cmp al, 0x4c; lea eax, [rip + 0xbe]; xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000011a98c: cmp al, 0x5b; pop rbp; pop r12; ret; 
0x000000000013f1d8: cmp al, 0x61; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x000000000012eb1f: cmp al, 0x78; out dx, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000111437: cmp al, 0x85; ror byte ptr [rdi], 0x88; ret; 
0x00000000001081b4: cmp al, 0x89; ret; 
0x0000000000148423: cmp al, 0x8b; or cl, byte ptr [rax - 0x7d]; ret 0xf04; 
0x00000000001549d0: cmp al, 0xa8; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000418a2: cmp al, 0xba; add rdi, r10; jmp rdi; 
0x00000000001486c8: cmp al, 0xcc; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001522d0: cmp al, 0xcf; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000f150f: cmp al, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x00000000000b709b: cmp al, 0xf; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000009a860: cmp al, 0xff; adc byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000033963: cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000003166e: cmp al, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x000000000011afbd: cmp al, 0xff; dec dword ptr [rax - 0x7f]; ret; 
0x000000000004379e: cmp al, 0xff; dec dword ptr [rdi]; mov word ptr [rcx - 0x7f000000], gs; sti; push rax; ret; 
0x000000000013b5a2: cmp al, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000063a79: cmp al, 1; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000001605f7: cmp al, 1; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x000000000018d0d3: cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000101960: cmp al, 2; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x00000000000b5ff0: cmp al, 5; add byte ptr [rax], al; ret; 
0x0000000000165184: cmp al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000047cbc: cmp al, 7; add byte ptr [rdx - 1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x00000000000e18c2: cmp al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000107cbd: cmp al, byte ptr [rbx - 0x6af0fd05]; ret; 
0x0000000000188ba2: cmp al, byte ptr [rdx]; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000039575: cmp al, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000057a38: cmp al, ch; ret 0xffec; 
0x00000000000aa7a6: cmp al, dh; ret; 
0x00000000000aa7a5: cmp al, r14b; ret; 
0x0000000000042a96: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x0000000000127b7a: cmp bh, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000141727: cmp bh, ch; jmp qword ptr [rsi + 0xf]; 
0x0000000000127bf1: cmp bh, cl; cmovne eax, esi; ret; 
0x0000000000091882: cmp bh, cl; dec dword ptr [rax - 0x77]; ret; 
0x0000000000081b67: cmp bh, dl; jmp qword ptr [rsi + 0xf]; 
0x000000000006f7f9: cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x0000000000096284: cmp bl, bl; adc al, 0; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x0000000000118806: cmp bl, byte ptr [rbx + 0x5d]; ret; 
0x000000000003689d: cmp bl, byte ptr [rbx]; add byte ptr [rax - 0x73], cl; mov ebx, 0x80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091adc: cmp bl, ch; movabs dword ptr [0xffffffffc0c74890], eax; ret; 
0x0000000000127824: cmp bl, ch; ret; 
0x00000000000cd9e6: cmp byte ptr [r11], r15b; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x0000000000129110: cmp byte ptr [r13 - 0x77], r9b; sbb byte ptr gs:[rax - 0x77], cl; ret 0x2b49; 
0x0000000000126326: cmp byte ptr [r15], cl; xchg eax, esp; ret 0x2144; 
0x00000000000fdaef: cmp byte ptr [r8 + 0x127710f9], r8b; movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000125ec8: cmp byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000087f90: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000128c55: cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x0000000000148be8: cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx - 0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x00000000000fe819: cmp byte ptr [r8], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000014699e: cmp byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x00000000000fdaf0: cmp byte ptr [rax + 0x127710f9], al; movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000cf41e: cmp byte ptr [rax + 0x29], cl; ret 0x348; 
0x000000000008dc59: cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000008db3f: cmp byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000083d8d: cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000000a5b07: cmp byte ptr [rax + 0x63], cl; ret 0x8d41; 
0x000000000014bde2: cmp byte ptr [rax + 0xf000000], 0xc8; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000aa7e7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x0000000000082f28: cmp byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000026b92: cmp byte ptr [rax + rax], bl; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000065ce7: cmp byte ptr [rax + rax], dl; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000eaa82: cmp byte ptr [rax - 0x68], cl; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000eaa81: cmp byte ptr [rax - 0x68], r9b; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000010ed08: cmp byte ptr [rax - 0x73], cl; sub byte ptr [r8 - 0x75], cl; jnp 0x10ed29; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x000000000011229d: cmp byte ptr [rax - 0x75], cl; push rax; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000087f91: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000011229c: cmp byte ptr [rax - 0x75], r9b; push rax; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000073480: cmp byte ptr [rax - 0x77], cl; lea ecx, [rax - 0x17000006]; ret; 
0x000000000008d74b: cmp byte ptr [rax - 0x77], cl; ret 0x1b8; 
0x0000000000128c56: cmp byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000129b5a: cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000012954f: cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x0000000000150fbc: cmp byte ptr [rax - 0x7b], cl; push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000001459f5: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x000000000014758e: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x000000000014bc7e: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x000000000014e95b: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x14e9cd; call rax; 
0x000000000014f3fb: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x14f45d; call rax; 
0x0000000000082d97: cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000032bd9: cmp byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000002bd54: cmp byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000418e5: cmp byte ptr [rax - 0x7d], cl; ret; 
0x00000000000880b1: cmp byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xa3c; 
0x0000000000115ba2: cmp byte ptr [rax - 1], bh; ret; 
0x000000000017a0a8: cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b4c09: cmp byte ptr [rax], 1; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001817b3: cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa7d6: cmp byte ptr [rax], ah; ret; 
0x00000000001474d0: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xa7603f8], r8b; mov eax, 2; ret; 
0x0000000000148be9: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x00000000000e1708: cmp byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000160614: cmp byte ptr [rax], cl; add byte ptr [rcx - 9], al; fsub dword ptr [rsp + rax*2 - 0x77]; add byte ptr [rax - 1], bh; ret; 
0x00000000000fe81a: cmp byte ptr [rax], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000afae0: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x00000000000aaca6: cmp byte ptr [rax], dh; ret; 
0x00000000000a6fd8: cmp byte ptr [rax], dl; add byte ptr [rcx + 0xc6349c1], cl; mov dword ptr [rcx + rax - 0x37], ecx; jmp rcx; 
0x00000000000aa7c6: cmp byte ptr [rax], dl; ret; 
0x00000000000aa7c5: cmp byte ptr [rax], r10b; ret; 
0x00000000001817b2: cmp byte ptr [rax], r12b; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa7d5: cmp byte ptr [rax], r12b; ret; 
0x00000000000aaca5: cmp byte ptr [rax], r14b; ret; 
0x00000000000afadf: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cd9ea: cmp byte ptr [rbp + 0x13], dh; ret; 
0x00000000000cd9e9: cmp byte ptr [rbp + 0x13], r14b; ret; 
0x0000000000088e6e: cmp byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x000000000011b7ae: cmp byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000000ef190: cmp byte ptr [rbp - 0x77], al; ret 0x418d; 
0x0000000000129743: cmp byte ptr [rbp - 0x77], cl; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000129111: cmp byte ptr [rbp - 0x77], cl; sbb byte ptr gs:[rax - 0x77], cl; ret 0x2b49; 
0x00000000000ef18f: cmp byte ptr [rbp - 0x77], r8b; ret 0x418d; 
0x0000000000129742: cmp byte ptr [rbp - 0x77], r9b; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x00000000000288e4: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000052a95: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001811a4: cmp byte ptr [rbx + 0xc8b0001], al; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000cd9e7: cmp byte ptr [rbx], bh; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x0000000000036af6: cmp byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1afe20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036aaf: cmp byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1afe67; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000196584: cmp byte ptr [rbx], ch; clc; lcall [rbx + 0x48]; mov dword ptr [rip + 0x5048c], 0; ret; 
0x000000000015717d: cmp byte ptr [rcx + 0x39], cl; ret; 
0x00000000000ef1cb: cmp byte ptr [rcx + 0x63], cl; ret 0x4c6; 
0x00000000000ef1ca: cmp byte ptr [rcx + 0x63], r9b; ret 0x4c6; 
0x000000000008a624: cmp byte ptr [rcx + rcx*4 - 0x30], al; ret; 
0x000000000014699f: cmp byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x000000000014f5e5: cmp byte ptr [rcx + rcx*4 - 2], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000096c86: cmp byte ptr [rcx - 0x7d], al; ret 0x4d01; 
0x000000000002c216: cmp byte ptr [rcx - 0xa], al; ret 0x7501; 
0x000000000017a0a9: cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000b4c0a: cmp byte ptr [rcx], al; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000b7414: cmp byte ptr [rcx], cl; add byte ptr [rax], al; ret; 
0x00000000001260be: cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000006d054: cmp byte ptr [rcx], dh; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x0000000000154414: cmp byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe7; mov dword ptr [rsp], 2; call rdx; 
0x00000000000d056b: cmp byte ptr [rcx], dl; add byte ptr [rdi], cl; sub dword ptr [rax], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000e1834: cmp byte ptr [rcx], dl; sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000000431b7: cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x0000000000140c2f: cmp byte ptr [rdi], cl; mov bh, 0x40; add cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x00000000000f0eed: cmp byte ptr [rdi], cl; test byte ptr [rcx + rax], ah; add dh, dh; ret; 
0x000000000014a990: cmp byte ptr [rdi], cl; xchg eax, edx; ret 0xc75; 
0x0000000000126327: cmp byte ptr [rdi], cl; xchg eax, esp; ret 0x2144; 
0x000000000018c490: cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000018c479: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018c462: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018af1e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018b97d: cmp byte ptr [rdi], dl; ret; 
0x00000000000b6a18: cmp byte ptr [rdx + 0xf], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001127c8: cmp byte ptr [rip - 0x1010], ah; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x00000000000339b9: cmp byte ptr [rsi + 0x13], dh; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000e3690: cmp byte ptr [rsi], ah; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e3540: cmp byte ptr [rsi], ah; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e3749: cmp byte ptr [rsi], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000163d0a: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000181542: cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000013fa72: cmp ch, byte ptr [rdi - 0x10]; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 0x10; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000001519c4: cmp ch, ch; dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000065594: cmp cl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000686b6: cmp cl, 0xff; jmp qword ptr [rbp]; 
0x0000000000091ad2: cmp cl, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000ff532: cmp cl, bh; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x000000000018132d: cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x00000000001535b5: cmp cl, byte ptr [rax - 0x75]; sbb byte ptr [r9 + r9*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000181243: cmp cl, byte ptr [rax - 0x7d]; ret 0x2910; 
0x000000000002c9d8: cmp cl, byte ptr [rbp + 0x39]; ret; 
0x00000000000b7272: cmp cl, byte ptr [rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000e0f45: cmp cl, byte ptr [rdi]; test eax, edi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000005b5cf: cmp cl, ch; push rsi; out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x000000000012687c: cmp dh, al; add cl, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001268d1: cmp dh, al; add dword ptr [rax], esp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127bb7: cmp dh, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000185b21: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000047c95: cmp dh, byte ptr [rcx]; rol byte ptr [rax + 0x375003f], 0x5b; ret; 
0x000000000018e46a: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000127c28: cmp dh, cl; cmovne eax, edx; ret; 
0x00000000000b07d5: cmp dh, dh; ret 0x7501; 
0x00000000000f6ae5: cmp dh, dh; ret 0xf08; 
0x000000000002e9c3: cmp dh, dh; ret; 
0x0000000000133a46: cmp di, -1; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x0000000000127b79: cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000127bf0: cmp dil, cl; cmovne eax, esi; ret; 
0x00000000000a08ad: cmp dl, 0x3d; mov edx, 0; cmovne rax, rdx; ret; 
0x0000000000081a36: cmp dl, bh; dec dword ptr [rcx + 0x415d5be8]; pop rsp; ret; 
0x0000000000101a2f: cmp dl, dh; jmp qword ptr [rsi + 0x66]; 
0x00000000000811d7: cmp dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x0000000000147919: cmp dword ptr [rax + 0x48000023], -0x77; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000000768e6: cmp dword ptr [rax + 0x63], ecx; ret; 
0x00000000000811d8: cmp dword ptr [rax - 0x7d], ecx; ret 0x8908; 
0x00000000000e368f: cmp dword ptr [rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e353f: cmp dword ptr [rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e3748: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000a6fd7: cmp dword ptr [rax], edi; adc byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x00000000000485e0: cmp dword ptr [rax], esi; add byte ptr [rax], al; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x00000000000811d1: cmp dword ptr [rbp + 0xf48ff47], ecx; cmp dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x00000000000a0c2c: cmp dword ptr [rbp - 0x7c], eax; rol byte ptr [rcx + 0xf], 0x95; ret 0x3841; 
0x0000000000126223: cmp dword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000010eb33: cmp dword ptr [rbx + 0xd], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000016a838: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000036a20: cmp dword ptr [rbx], ebx; add byte ptr [rax - 0x73], cl; cmp eax, 0x1afcf6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a49: cmp dword ptr [rbx], ebx; add byte ptr [rax - 0x73], cl; cmp eax, 0x1afe4d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113233: cmp dword ptr [rcx + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005526d: cmp dword ptr [rcx - 0x76b7ffeb], ebp; ret; 
0x0000000000092f95: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000101bed: cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x000000000008c194: cmp dword ptr [rdi + 0x18], 0; setne al; ret; 
0x00000000000c8687: cmp dword ptr [rdi + rcx], edx; xchg eax, ebx; ret 0x3948; 
0x000000000007b0f3: cmp dword ptr [rdi - 0x76b70006], ebx; ret 0xb848; 
0x000000000014302d: cmp dword ptr [rdi], eax; add al, ch; sti; xchg eax, esi; hlt; jmp qword ptr [rsi + 0x66]; 
0x00000000000c50d9: cmp dword ptr [rdi], ecx; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000898ae: cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000011e433: cmp dword ptr [rdx + 0xc], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc33: cmp dword ptr [rdx + 0xd], esi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000164c43: cmp dword ptr [rdx + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000087adc: cmp dword ptr [rdx + 8], eax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000091881: cmp dword ptr [rdx], -7; dec dword ptr [rax - 0x77]; ret; 
0x000000000011f833: cmp dword ptr [rsi + 0xc], eax; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000010d833: cmp dword ptr [rsi + 0xd], esp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000011b833: cmp dword ptr [rsi - 0x2708fff4], eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000167a03: cmp dword ptr [rsi], edx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011fa33: cmp dword ptr [rsp + rcx], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e368e: cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e353e: cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e3747: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x000000000012c672: cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x000000000009aa9f: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000e1289: cmp eax, -1; mov edx, 0; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000015e81a: cmp eax, -1; sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x00000000000dc2d9: cmp eax, 0x10a442; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc293: cmp eax, 0x10a488; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e9: cmp eax, 0x10a632; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0bc: cmp eax, 0x10a65f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff9: cmp eax, 0x10a722; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfd0: cmp eax, 0x10a74b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbafe: cmp eax, 0x10ac1d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8d4a: cmp eax, 0x11d9d1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b9a: cmp eax, 0x11db81; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000080a3c: cmp eax, 0x129b27; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000007e1e6: cmp eax, 0x12bfb5; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e15d: cmp eax, 0x12c03e; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e104: cmp eax, 0x12c097; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df7e: cmp eax, 0x12c21d; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007de4e: cmp eax, 0x12c34d; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e351f: cmp eax, 0x138f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000009d6ed: cmp eax, 0x14a032; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d6a2: cmp eax, 0x14a07d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d566: cmp eax, 0x14a135; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4d4: cmp eax, 0x14a24b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009a1d8: cmp eax, 0x14d3ea; add dword ptr [rax - 0x77], ecx; ret 0x4574; 
0x000000000009890c: cmp eax, 0x14ecc7; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000092a22: cmp eax, 0x154b39; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000090256: cmp eax, 0x157305; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000041790: cmp eax, 0x16342b; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000837f2: cmp eax, 0x163d29; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047608: cmp eax, 0x168493; call 0x34fd0; xor eax, eax; ret; 
0x000000000005563d: cmp eax, 0x191e86; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052f7c: cmp eax, 0x19431f; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x00000000000837eb: cmp eax, 0x1a740016; lea rdi, [rip + 0x163d29]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000003950c: cmp eax, 0x1ad38f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394ac: cmp eax, 0x1ad3ef; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375fc: cmp eax, 0x1af35f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037592: cmp eax, 0x1af3c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037460: cmp eax, 0x1af4fb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373ff: cmp eax, 0x1af55c; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037327: cmp eax, 0x1af5f4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370d3: cmp eax, 0x1af648; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000372d0: cmp eax, 0x1af64b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f9a: cmp eax, 0x1af781; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370a1: cmp eax, 0x1af7fa; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f6c: cmp eax, 0x1af92f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d2e: cmp eax, 0x1af9ed; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d07: cmp eax, 0x1afb94; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a25: cmp eax, 0x1afcf6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036afb: cmp eax, 0x1afe20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a4e: cmp eax, 0x1afe4d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036ab4: cmp eax, 0x1afe67; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003556a: cmp eax, 0x1b1331; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034b11: cmp eax, 0x1b1c0a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a37: cmp eax, 0x1b1ce4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349ca: cmp eax, 0x1b1d51; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003492e: cmp eax, 0x1b1ded; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034354: cmp eax, 0x1b23c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003431d: cmp eax, 0x1b23fe; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034136: cmp eax, 0x1b25e5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032361: cmp eax, 0x1b43ba; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f2d: cmp eax, 0x1b47ee; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031deb: cmp eax, 0x1b4930; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031d13: cmp eax, 0x1b4a08; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c91: cmp eax, 0x1b4a8a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a55: cmp eax, 0x1b4cc6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a15: cmp eax, 0x1b4d06; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b5a: cmp eax, 0x1bcb95; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000e3490: cmp eax, 0x2478; mov edx, 0x7f; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x000000000005373a: cmp eax, 0x39480019; ret; 
0x000000000009d30f: cmp eax, 0x48000130; cmove eax, edx; ret; 
0x0000000000145d3b: cmp eax, 0x48000a3c; add esp, 8; ret; 
0x0000000000031f27: cmp eax, 0x48001b84; lea edi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000536db: cmp eax, 0x4c60019; adc byte ptr [rax], al; ret; 
0x0000000000196692: cmp eax, 0x50fd8; add byte ptr [rsi + rax - 0x17], dh; adc dword ptr [rax], eax; add byte ptr [rax], al; nop; ret; 
0x0000000000196799: cmp eax, 0x510f2; call 0x25318; pop rbx; mov qword ptr [rip + 0x510e1], 0; ret; 
0x00000000000e36e4: cmp eax, 0x517428cd; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x0000000000196a08: cmp eax, 0x5290b; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000e3500: cmp eax, 0x54190100; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000014f28f: cmp eax, 0x60150; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014e99f: cmp eax, 0x60a00; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014bccf: cmp eax, 0x632ac; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x00000000001650e6: cmp eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a098d: cmp eax, 0x8348f075; mov dword ptr [rcx], 0xb8; add byte ptr [rdx + rdx*8 - 0x38baf0b8], al; ret; 
0x0000000000185f14: cmp eax, 0x89000001; ret 0x8948; 
0x0000000000093716: cmp eax, 0x89480008; ret; 
0x000000000013adcf: cmp eax, 0x89fffe3e; ret; 
0x00000000000e15ef: cmp eax, 0x8b0004a8; and al, 0xc; add rsp, 0x18; ret; 
0x00000000000536d4: cmp eax, 0x8d480019; add eax, 0x193d22; mov byte ptr [rax + rdx], 0; ret; 
0x000000000015b16b: cmp eax, 0x8f368; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x0000000000151cd8: cmp eax, 0x97f43; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bf8: cmp eax, 0x98023; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b18: cmp eax, 0x98103; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a50: cmp eax, 0x981cb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151998: cmp eax, 0x98283; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450fe: cmp eax, 0xa47dd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001413de: cmp eax, 0xa8435; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000013fbda: cmp eax, 0xa99e5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013c4a8: cmp eax, 0xace6b; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000fca55: cmp eax, 0xb030a; movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000fc7d3: cmp eax, 0xb03bc; movzx r13d, r13b; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x0000000000137717: cmp eax, 0xb1b20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136e63: cmp eax, 0xb2378; call rax; 
0x0000000000136e29: cmp eax, 0xb240a; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000f9bae: cmp eax, 0xb2cb5; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f6efa: cmp eax, 0xb58ad; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f8a48: cmp eax, 0xb60f000b; ror dword ptr [rax + 0x63], 1; add al, 0x96; mov r11, rdi; add rax, rsi; jmp rax; 
0x000000000012c9e0: cmp eax, 0xbc27b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c13c: cmp eax, 0xbc4df; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000e910a: cmp eax, 0xc3265; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000001172bb: cmp eax, 0xcd088; ret; 
0x0000000000117260: cmp eax, 0xd0d8b; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000d8e50: cmp eax, 0xd2ad3; mov esi, ecx; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000d8e95: cmp eax, 0xd2c7a; mov edx, eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000114f1e: cmp eax, 0xd2f25; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010513c: cmp eax, 0xe2be3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cf84e: cmp eax, 0xe3a35; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000ff087: cmp eax, 0xe8000e8c; mov byte ptr [rdx - 0xe], ah; jmp qword ptr [rsi + 0xf]; 
0x00000000001158d8: cmp eax, 0xf49cb77; movabs dword ptr [0x5b08c48348c573d5], eax; pop rbp; pop r12; pop r13; ret; 
0x00000000000a2d16: cmp eax, 0xf7410000; ret 0; 
0x0000000000194c99: cmp eax, 0xff30002; pop rsi; add eax, 0x25060; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000011187e: cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x00000000000dbace: cmp eax, 0xfffff000; pop rbx; setbe al; movzx eax, al; ret; 
0x000000000012c98b: cmp eax, 0xfffffea0; call rax; 
0x00000000000aaddf: cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000000154561: cmp eax, 2; sete al; movzx eax, al; ret; 
0x00000000001569d7: cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e1951: cmp eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000013ac84: cmp eax, dword ptr [rbx + 0x16741cfe]; cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000002ce15: cmp eax, dword ptr [rcx - 0xa]; ret 0x7508; 
0x00000000001871b1: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000000f0755: cmp eax, dword ptr [rcx]; ret 0xc083; 
0x0000000000047da9: cmp eax, dword ptr [rdi]; add byte ptr [rdx - 1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x00000000000b65d1: cmp eax, dword ptr [rsi + 0xf]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000117633: cmp eax, ecx; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000018ff33: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000148be6: cmp eax, edi; cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx - 0xdd6b7ff], cl; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x000000000005c0e3: cmp eax, edi; pop rbx; cmovb rax, rdi; ret; 
0x00000000000bb353: cmp eax, edx; lea rdx, [rip + 0xce624]; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad63: cmp eax, edx; lea rdx, [rip + 0xceee4]; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf73: cmp eax, edx; lea rdx, [rip + 0xcf114]; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f3: cmp eax, edx; lea rdx, [rip + 0xcf6e4]; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad23: cmp eax, edx; lea rdx, [rip + 0xcf884]; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae53: cmp eax, edx; lea rdx, [rip + 0xcfb74]; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x00000000000a7263: cmp eax, edx; lea rdx, [rip + 0xdb0c4]; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000009fd33: cmp eax, edx; lea rdx, [rip + 0xe24b4]; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009fd73: cmp eax, edx; lea rdx, [rip + 0xe5f54]; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d463: cmp eax, edx; lea rdx, [rip + 0xe8a54]; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c3: cmp eax, edx; lea rdx, [rip + 0xe8dc4]; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d303: cmp eax, edx; lea rdx, [rip + 0xe8f14]; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x0000000000034c91: cmp eax, edx; mov rdx, -1; cmove rax, rdx; ret; 
0x0000000000132811: cmp ebp, dword ptr [rax]; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000122511: cmp ebp, dword ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001376e1: cmp ebp, dword ptr [rdi]; or eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000001484a6: cmp ebp, eax; add al, 0x4c; cld; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000152ab3: cmp ebp, eax; cmpsd dword ptr [rsi], dword ptr [rdi]; stosd dword ptr [rdi], eax; sti; jmp qword ptr [rsi - 0x7d]; 
0x0000000000148045: cmp ebp, eax; push rax; cld; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x00000000001504fa: cmp ebp, ebx; ret; 
0x00000000001317df: cmp ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012c7b8: cmp ebx, 0xfffff000; cmovbe eax, edx; add rsp, 0x20; pop rbx; ret; 
0x000000000015abee: cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x00000000000367d0: cmp ebx, dword ptr [rbx]; add byte ptr [rax - 0x73], cl; mov ebx, 0x80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000145081: cmp ebx, dword ptr [rsi]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000015dc4b: cmp ebx, eax; or byte ptr [rax], al; call qword ptr [rax + 8]; 
0x0000000000055f81: cmp ecx, 0x2f; jmp rdx; 
0x000000000009e42b: cmp ecx, 0x8d48000e; adc eax, 0xef90a; cmove rax, rdx; ret; 
0x000000000005867e: cmp ecx, 0xb4757fff; mov eax, 1; ret; 
0x0000000000101c12: cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000bb454: cmp ecx, 4; cmovne rax, rdx; ret; 
0x0000000000150406: cmp ecx, dword ptr [rax - 0x73]; push rsp; and al, 0x18; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000004653a: cmp ecx, dword ptr [rax - 0x75]; and al, 8; call rax; 
0x0000000000145cf4: cmp ecx, dword ptr [rax - 0x7b]; push qword ptr [rdi + rax + 0x48]; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x00000000000f4ecc: cmp ecx, dword ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000027b78: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000001488e5: cmp ecx, dword ptr [rbp + 1]; out 0x44, eax; sub edx, esp; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x00000000000b7207: cmp ecx, dword ptr [rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70f2: cmp ecx, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7236: cmp ecx, dword ptr es:[rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000cdae8: cmp ecx, eax; cmovg eax, edx; ret; 
0x00000000000568c8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000000cca10: cmp ecx, eax; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cc9c8: cmp ecx, eax; setl al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x0000000000058372: cmp ecx, ecx; ret; 
0x0000000000109696: cmp ecx, edi; dec dword ptr [rcx - 0x77]; ret 0x8948; 
0x000000000011f684: cmp ecx, edx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000010eb70: cmp ecx, edx; seta al; sbb eax, 0; ret; 
0x00000000000cdae7: cmp ecx, r8d; cmovg eax, edx; ret; 
0x0000000000133a47: cmp edi, -1; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x0000000000192f2a: cmp edi, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000005de01: cmp edi, 0x840f0c00; xor eax, 0xe8fffffc; add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x000000000013acaa: cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013accf: cmp edi, 5; mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000012144d: cmp edi, 9; setbe al; ret; 
0x000000000012c7a4: cmp edi, dword ptr [rax + 0xe6]; syscall; 
0x0000000000139631: cmp edi, dword ptr [rax + 3]; syscall; 
0x0000000000117733: cmp edi, eax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000131710: cmp edi, ebp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001535af: cmp edi, edi; inc dword ptr [rbp + 0x483a74c0]; mov eax, dword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000013b6bf: cmp edi, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000043f33: cmp edi, edi; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000d2a8d: cmp edi, edx; sete al; add eax, 0x16d; ret; 
0x000000000012c3a3: cmp edi, esi; sete al; ret; 
0x0000000000048010: cmp edx, -1; cmove rbx, rax; mov rax, rbx; pop rbx; ret; 
0x00000000000e360e: cmp edx, 0x27e0eb; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000e372b: cmp edx, 0x2f; setne al; ret; 
0x00000000000e36d6: cmp edx, 0x414a53; setne al; ret; 
0x00000000000e3667: cmp edx, 0x52654973; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000e36ec: cmp edx, 0x5346544e; setne al; ret; 
0x00000000000e3719: cmp edx, 0x7275; setne al; ret; 
0x000000000012f2f5: cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000ba63e: cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000ecaa3: cmp edx, 1; sbb eax, eax; and eax, 2; add eax, 8; ret; 
0x0000000000114f11: cmp edx, dword ptr [rbp + rcx]; lea rsi, [rip - 0x3c]; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000189729: cmp edx, dword ptr [rsi + rcx]; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x00000000000e35d4: cmp edx, eax; mov edx, 0x20; mov eax, 0xff; cmovne rax, rdx; ret; 
0x000000000013a916: cmp edx, eax; sbb eax, eax; ret; 
0x000000000011b688: cmp edx, ecx; cmove rdx, rax; mov byte ptr [rdx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000012b7ce: cmp edx, edi; setae al; ret; 
0x000000000009486e: cmp esi, -1; jmp qword ptr [rsi + 0x66]; 
0x00000000000d2d36: cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000087642: cmp esi, -1; setne al; neg eax; ret; 
0x000000000013ac8a: cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000013b44e: cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000009b03b: cmp esi, 0x8949ffff; add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x000000000008c2a9: cmp esi, 2; cmove edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000009cfb5: cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000009f7cd: cmp esi, dword ptr [rax + rbx - 0x17]; ret; 
0x000000000018a630: cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000049fe1: cmp esi, dword ptr [rbp + rdx + 0xc8b4800]; ret 0x8b49; 
0x000000000012c737: cmp esi, dword ptr [rdi + 0x2e]; mov eax, 0xe3; syscall; 
0x00000000001890e5: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000005c04a: cmp esi, edi; cmovb rax, rdi; ret; 
0x000000000014b8e4: cmp esi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000010494a: cmp esi, esi; ret 0xf02; 
0x00000000000a45e3: cmp esp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000126222: cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000092f94: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008c193: cmp qword ptr [rdi + 0x18], 0; setne al; ret; 
0x00000000000898ad: cmp qword ptr [rdx + 0x48], r8; cmovne eax, ecx; ret; 
0x0000000000087adb: cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000091adb: cmp r11b, bpl; movabs dword ptr [0xffffffffc0c74890], eax; ret; 
0x00000000001519c3: cmp r13b, bpl; dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000012687b: cmp r14b, al; add cl, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001268d0: cmp r14b, al; add dword ptr [rax], esp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b6be: cmp r15, rdi; jmp qword ptr [rsi + 0x2e]; 
0x000000000013aca9: cmp r15d, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000e351e: cmp r8, 0x138f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e348f: cmp r8, 0x2478; mov edx, 0x7f; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x00000000000e34ff: cmp r8, 0x54190100; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x0000000000091ad1: cmp r9b, dil; jmp qword ptr [rsi + 0xf]; 
0x000000000009aa9e: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000e1288: cmp rax, -1; mov edx, 0; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000005c0e2: cmp rax, rdi; pop rbx; cmovb rax, rdi; ret; 
0x00000000000bb352: cmp rax, rdx; lea rdx, [rip + 0xce624]; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad62: cmp rax, rdx; lea rdx, [rip + 0xceee4]; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf72: cmp rax, rdx; lea rdx, [rip + 0xcf114]; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f2: cmp rax, rdx; lea rdx, [rip + 0xcf6e4]; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad22: cmp rax, rdx; lea rdx, [rip + 0xcf884]; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae52: cmp rax, rdx; lea rdx, [rip + 0xcfb74]; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x00000000000a7262: cmp rax, rdx; lea rdx, [rip + 0xdb0c4]; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000009fd32: cmp rax, rdx; lea rdx, [rip + 0xe24b4]; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009fd72: cmp rax, rdx; lea rdx, [rip + 0xe5f54]; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d462: cmp rax, rdx; lea rdx, [rip + 0xe8a54]; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c2: cmp rax, rdx; lea rdx, [rip + 0xe8dc4]; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d302: cmp rax, rdx; lea rdx, [rip + 0xe8f14]; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x0000000000034c90: cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret; 
0x00000000000bb453: cmp rcx, 4; cmovne rax, rdx; ret; 
0x00000000000568c7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000011f683: cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000010eb6f: cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x000000000012c3a2: cmp rdi, rsi; sete al; ret; 
0x00000000000e360d: cmp rdx, 0x27e0eb; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000e372a: cmp rdx, 0x2f; setne al; ret; 
0x00000000000e36d5: cmp rdx, 0x414a53; setne al; ret; 
0x00000000000e3666: cmp rdx, 0x52654973; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000e36eb: cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000e3718: cmp rdx, 0x7275; setne al; ret; 
0x00000000000e35d3: cmp rdx, rax; mov edx, 0x20; mov eax, 0xff; cmovne rax, rdx; ret; 
0x000000000013a915: cmp rdx, rax; sbb eax, eax; ret; 
0x000000000011b687: cmp rdx, rcx; cmove rdx, rax; mov byte ptr [rdx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000012b7cd: cmp rdx, rdi; setae al; ret; 
0x000000000005c049: cmp rsi, rdi; cmovb rax, rdi; ret; 
0x0000000000127bb6: cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000185b20: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000127c27: cmp sil, cl; cmovne eax, edx; ret; 
0x00000000001845c7: cmpsb byte ptr [rsi], byte ptr [rdi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000dc0be: cmpsb byte ptr [rsi], byte ptr [rdi]; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001848c7: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001857c7: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000e6706: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001854c7: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x83480000; ret 0x4910; 
0x000000000018bf29: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000011f9ba: cmpsb byte ptr [rsi], byte ptr [rdi]; call 0x12f210; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000141726: cmpsb byte ptr [rsi], byte ptr [rdi]; cmp bh, ch; jmp qword ptr [rsi + 0xf]; 
0x0000000000155966: cmpsb byte ptr [rsi], byte ptr [rdi]; cwde; std; jmp qword ptr [rsi + 0xf]; 
0x00000000000ea9a0: cmpsb byte ptr [rsi], byte ptr [rdi]; hlt; jmp qword ptr [rsi + 0x2e]; 
0x0000000000191116: cmpsb byte ptr [rsi], byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000381d3: cmpsb byte ptr [rsi], byte ptr [rdi]; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000e2816: cmpsb byte ptr [rsi], byte ptr [rdi]; jnp 0xe2829; add byte ptr [rbp - 0x47d58a40], al; push 0; add byte ptr [rax], al; syscall; 
0x000000000014c050: cmpsb byte ptr [rsi], byte ptr [rdi]; mov rdi, qword ptr [r15]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000117346: cmpsb byte ptr [rsi], byte ptr [rdi]; movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000009e759: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, 0; cmovne rax, rdx; ret; 
0x000000000011f0c6: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017e6e6: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001851c7: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000093506: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, 0x10015; add byte ptr [rax], al; mov qword ptr [rip + 0x150d73], rax; ret; 
0x0000000000184ec7: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000012e0b6: cmpsb byte ptr [rsi], byte ptr [rdi]; or esi, edi; call qword ptr [rax - 0x18]; 
0x0000000000105876: cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000012e056: cmpsb byte ptr [rsi], byte ptr [rdi]; sar ch, cl; call qword ptr [rax - 0x18]; 
0x0000000000026c74: cmpsb byte ptr [rsi], byte ptr [rdi]; sbb byte ptr [rax], al; ret; 
0x00000000000dbfd2: cmpsd dword ptr [rsi], dword ptr [rdi]; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e15d6: cmpsd dword ptr [rsi], dword ptr [rdi]; add al, 0; mov edi, eax; mov eax, 0x22; syscall; 
0x00000000000e6615: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009ce16: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x0000000000163fd5: cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b2810: cmpsd dword ptr [rsi], dword ptr [rdi]; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000166d95: cmpsd dword ptr [rsi], dword ptr [rdi]; and al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000007ab43: cmpsd dword ptr [rsi], dword ptr [rdi]; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000125d6d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000009ce15: cmpsd dword ptr [rsi], dword ptr [rdi]; cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000017a995: cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000146cd5: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0xfff1; 
0x0000000000043c9d: cmpsd dword ptr [rsi], dword ptr [rdi]; sbb al, byte ptr [rax]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000154aed: cmpsd dword ptr [rsi], dword ptr [rdi]; std; call qword ptr [rbp + 0x53]; 
0x0000000000154a5e: cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000152ab5: cmpsd dword ptr [rsi], dword ptr [rdi]; stosd dword ptr [rdi], eax; sti; jmp qword ptr [rsi - 0x7d]; 
0x00000000000dbfd1: cmpsq qword ptr [rsi], qword ptr [rdi]; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4ad: cpuid; adc al, 0; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x0000000000047c73: cqo; idiv rsi; ret; 
0x0000000000117da8: cvtdq2ps xmm1, xmmword ptr [rax - 0x73]; add eax, 0xd02ef; pop rbp; pop r12; ret; 
0x000000000009bc3c: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; call rax; 
0x0000000000088828: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000014efc2: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000044fc7: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000004447e: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000a1c88: cwde; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8348; 
0x00000000000a197c: cwde; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x0000000000115094: cwde; add cl, dh; dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000113f57: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000f8074: cwde; add dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000e18d4: cwde; and eax, 0xd8f70010; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018a97b: cwde; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000028411: cwde; call 0x15d990; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000014b27c: cwde; call 0xffffffffcbfcb28b; popfq; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000002841d: cwde; call rax; 
0x0000000000155c5d: cwde; mov qword ptr [rsi], rax; mov eax, 1; mov qword ptr [rdi + 0x18], rdx; ret; 
0x000000000012ae22: cwde; movdqu xmm7, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x0000000000077638: cwde; movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000eaa84: cwde; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x0000000000074ffa: cwde; movzx eax, byte ptr [rdx + rax]; lea rdx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000077fb3: cwde; movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b3: cwde; movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000780df: cwde; movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da3: cwde; movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000154e88: cwde; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x000000000013b7ab: cwde; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000000c8904: cwde; pop qword ptr [rip + 0x75db8500]; fsubr qword ptr [rcx]; ret; 
0x00000000000ebe04: cwde; ret 0xc; 
0x00000000000b9198: cwde; sbb eax, 0x634b000f; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000155967: cwde; std; jmp qword ptr [rsi + 0xf]; 
0x00000000001226b4: cwde; sub eax, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000133b75: cwde; xor eax, eax; ret; 
0x00000000000b3d59: dec byte ptr [r8 + 0x29]; ret 0x149; 
0x00000000000b1d41: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x00000000000b3d5a: dec byte ptr [rax + 0x29]; ret 0x149; 
0x00000000000b1d42: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x000000000009efc4: dec byte ptr [rax + 0x39]; ret 0x4876; 
0x00000000000562a9: dec byte ptr [rax + 0x39]; ret 0x874; 
0x00000000000563c8: dec byte ptr [rax + 0x39]; ret; 
0x000000000009c133: dec byte ptr [rax + 0x63]; dec byte ptr [rdi]; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rdi; call rcx; 
0x000000000018da52: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000018e046: dec byte ptr [rax + 0x7f]; jns 0x18e049; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000018e1d1: dec byte ptr [rax + 0x7f]; jns 0x18e1d4; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000018e04d: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000118816: dec byte ptr [rax + 9]; ret; 
0x000000000009e5a0: dec byte ptr [rax + rax]; cmovne rax, rdx; ret; 
0x0000000000113fd4: dec byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015d979: dec byte ptr [rax - 0x75]; cmp al, 0x24; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000146d11: dec byte ptr [rax - 0x75]; cmp al, 0x24; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000005e584: dec byte ptr [rax - 0x75]; mov ebp, 0xffffff40; call rax; 
0x0000000000118723: dec byte ptr [rax - 0x75]; or byte ptr [r11 + r9*4 + 0x57], r9b; adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000462d7: dec byte ptr [rax - 0x77]; fisttp word ptr [rax - 0x75]; and al, 8; call rax; 
0x000000000008e65b: dec byte ptr [rax - 0x77]; out dx, eax; call qword ptr [rbx + 0x40]; 
0x000000000009b716: dec byte ptr [rax - 0x77]; ret 0x41e8; 
0x00000000000d4389: dec byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000000d5fc8: dec byte ptr [rax - 0x77]; ret 0x8949; 
0x000000000009b699: dec byte ptr [rax - 0x77]; ret 0xbee8; 
0x0000000000129477: dec byte ptr [rax - 0x77]; ret 0xff41; 
0x000000000002e85d: dec byte ptr [rax - 0x7d]; ret 0xf01; 
0x00000000000daed4: dec byte ptr [rax - 0x7d]; ret; 
0x0000000000120ac7: dec byte ptr [rcx + rcx*4 + 0x34]; ret; 
0x000000000007ae83: dec byte ptr [rcx + rcx*4 - 0x11]; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x0000000000045500: dec byte ptr [rcx + rcx*4 - 0x19]; call rbx; 
0x00000000001526e2: dec byte ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x18]; 
0x000000000010d937: dec byte ptr [rcx + rcx*4 - 9]; mov eax, 0x4f; syscall; 
0x0000000000118837: dec byte ptr [rcx - 0x77]; adc byte ptr [r9 + 9], cl; ror dword ptr [rcx + rcx*4 + 0x48], 1; or bl, ch; ret 0x1f0f; 
0x00000000000e8894: dec byte ptr [rcx - 0x77]; ret 0x8b41; 
0x000000000009cfb6: dec byte ptr [rcx]; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000009c136: dec byte ptr [rdi]; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rdi; call rcx; 
0x00000000000ba130: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000188ca1: dec byte ptr [rdx - 0x73]; add al, 7; vzeroupper; ret; 
0x00000000000811d3: dec dword ptr [r8 + 0xf]; cmp dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x000000000005db86: dec dword ptr [r8 - 0x77]; ret 0xf748; 
0x00000000000b3eda: dec dword ptr [rax + 0x29]; ret 0x149; 
0x00000000000b1e82: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000000e509c: dec dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000007b8ae: dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000007c364: dec dword ptr [rax + 0x29]; ret 0xf48; 
0x0000000000088ab2: dec dword ptr [rax + 0x29]; ret; 
0x000000000009ae4a: dec dword ptr [rax + 0x31]; ret 0x8948; 
0x000000000005c0e1: dec dword ptr [rax + 0x39]; clc; pop rbx; cmovb rax, rdi; ret; 
0x00000000000811ce: dec dword ptr [rax + 0x39]; cmp dword ptr [rbp + 0xf48ff47], ecx; cmp dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x0000000000095a3c: dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000000e81e8: dec dword ptr [rax + 0x39]; ret 0x840f; 
0x000000000008df2d: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000000551e4: dec dword ptr [rax + 0x39]; ret; 
0x0000000000081049: dec dword ptr [rax + 0x39]; xor dword ptr [rbp + 0xf48ff46], ecx; xor dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x000000000009272c: dec dword ptr [rax + 0x63]; adc r11b, r13b; ret; 
0x0000000000064d65: dec dword ptr [rax + 0x63]; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000075005: dec dword ptr [rax + 0x63]; add al, 0x86; add rax, rdx; jmp rax; 
0x000000000006cd21: dec dword ptr [rax + 0x63]; add al, 0x86; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x000000000007de1b: dec dword ptr [rax + 0x63]; add al, 0x88; add rax, rdx; jmp rax; 
0x00000000001203ac: dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0xc3fa9; pop rbx; ret; 
0x0000000000076203: dec dword ptr [rax + 0x63]; ret 0xc985; 
0x0000000000032608: dec dword ptr [rax + 0x63]; ret; 
0x00000000000811d4: dec dword ptr [rax + 0xf]; cmp dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x00000000000b0199: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x00000000001528cc: dec dword ptr [rax + 0xf]; mov ebx, 0xbc0f48eb; ret; 
0x000000000009e484: dec dword ptr [rax + 0xf]; mov esp, 0x440f48c7; ret 0xc083; 
0x00000000000453d0: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000008104f: dec dword ptr [rax + 0xf]; xor dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x00000000001260ba: dec dword ptr [rax + 1]; pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000675b2: dec dword ptr [rax + 1]; ret 0x148; 
0x00000000000656d3: dec dword ptr [rax + 1]; ret 0x14c; 
0x00000000000e61bb: dec dword ptr [rax + 1]; ret 0x820f; 
0x000000000006823d: dec dword ptr [rax + 1]; ret 0x8948; 
0x0000000000053189: dec dword ptr [rax + 1]; ret; 
0x000000000019116f: dec dword ptr [rax + 9]; ret 0x3b74; 
0x0000000000190a27: dec dword ptr [rax + 9]; ret 0x840f; 
0x00000000001919d7: dec dword ptr [rax + 9]; ret; 
0x0000000000113e84: dec dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000004494b: dec dword ptr [rax - 0x2d]; ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x0000000000153e54: dec dword ptr [rax - 0x2f]; call 0xffffffff895e05e5; ret; 
0x0000000000153fe4: dec dword ptr [rax - 0x2f]; call 0xffffffff895e0775; ret; 
0x00000000000a0110: dec dword ptr [rax - 0x39]; add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000130baa: dec dword ptr [rax - 0x39]; add byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000001960a6: dec dword ptr [rax - 0x39]; add eax, 0x50666; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001967fd: dec dword ptr [rax - 0x39]; add eax, 0x514bf; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000196a92: dec dword ptr [rax - 0x39]; add eax, 0x52d82; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000e3b85: dec dword ptr [rax - 0x39]; ret 0; 
0x00000000000e3b9b: dec dword ptr [rax - 0x39]; ret 0x8000; 
0x00000000000e3b3d: dec dword ptr [rax - 0x39]; ret 0xff80; 
0x0000000000044a2d: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000004a5fe: dec dword ptr [rax - 0x39]; ret; 
0x00000000000d6012: dec dword ptr [rax - 0x41]; ret; 
0x0000000000065895: dec dword ptr [rax - 0x73]; adc eax, 0x143c03; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000150d27: dec dword ptr [rax - 0x73]; adc eax, 0x3711; call qword ptr [rax]; 
0x000000000012d2fa: dec dword ptr [rax - 0x73]; adc eax, 0xfff8ccbe; cmove rax, rdx; ret; 
0x000000000012d23a: dec dword ptr [rax - 0x73]; adc eax, 0xfff8cd9e; cmove rax, rdx; ret; 
0x000000000012d17a: dec dword ptr [rax - 0x73]; adc eax, 0xfff8ce5e; cmove rax, rdx; ret; 
0x00000000000e67af: dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x0000000000054177: dec dword ptr [rax - 0x73]; add cl, byte ptr [rdi]; mov esi, 0x89410252; ret; 
0x000000000011f63d: dec dword ptr [rax - 0x73]; add eax, 0x8e57b; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012d378: dec dword ptr [rax - 0x73]; add eax, 0xfff8d070; cmovne rax, rdx; ret; 
0x00000000000ebfd3: dec dword ptr [rax - 0x73]; add r9b, byte ptr [r9 + 0x39]; ret; 
0x000000000013481f: dec dword ptr [rax - 0x73]; and byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000009d563: dec dword ptr [rax - 0x73]; cmp eax, 0x14a135; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005563a: dec dword ptr [rax - 0x73]; cmp eax, 0x191e86; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b57: dec dword ptr [rax - 0x73]; cmp eax, 0x1bcb95; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000151cd5: dec dword ptr [rax - 0x73]; cmp eax, 0x97f43; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bf5: dec dword ptr [rax - 0x73]; cmp eax, 0x98023; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b15: dec dword ptr [rax - 0x73]; cmp eax, 0x98103; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a4d: dec dword ptr [rax - 0x73]; cmp eax, 0x981cb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151995: dec dword ptr [rax - 0x73]; cmp eax, 0x98283; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450fb: dec dword ptr [rax - 0x73]; cmp eax, 0xa47dd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013fbd7: dec dword ptr [rax - 0x73]; cmp eax, 0xa99e5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000137714: dec dword ptr [rax - 0x73]; cmp eax, 0xb1b20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c9dd: dec dword ptr [rax - 0x73]; cmp eax, 0xbc27b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114f1b: dec dword ptr [rax - 0x73]; cmp eax, 0xd2f25; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000105139: dec dword ptr [rax - 0x73]; cmp eax, 0xe2be3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e66bf: dec dword ptr [rax - 0x73]; or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000006d4f3: dec dword ptr [rax - 0x73]; or eax, 0x13c3b1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000fa0b7: dec dword ptr [rax - 0x73]; sbb eax, 0xb2979; movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000d4af8: dec dword ptr [rax - 0x73]; xor eax, 0xd6b60; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d429a: dec dword ptr [rax - 0x73]; xor eax, 0xd72de; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d36b2: dec dword ptr [rax - 0x73]; xor eax, 0xd7d6e; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000008e838: dec dword ptr [rax - 0x75]; adc al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000017647a: dec dword ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000009c5ff: dec dword ptr [rax - 0x75]; add eax, 0x147869; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009c470: dec dword ptr [rax - 0x75]; add eax, 0x147ad8; call qword ptr [rax]; 
0x000000000009651a: dec dword ptr [rax - 0x75]; add eax, 0x14d89e; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x0000000000036f62: dec dword ptr [rax - 0x75]; add eax, 0x1b33fe; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034313: dec dword ptr [rax - 0x75]; add eax, 0x1b604d; lea rdi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032357: dec dword ptr [rax - 0x75]; add eax, 0x1b8009; lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000026b8d: dec dword ptr [rax - 0x75]; add eax, 0x1c3813; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000117b79: dec dword ptr [rax - 0x75]; add eax, 0xcc2ef; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000014f601: dec dword ptr [rax - 0x75]; and al, 0x30; call rcx; 
0x000000000014de7c: dec dword ptr [rax - 0x75]; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014fc44: dec dword ptr [rax - 0x75]; and al, 0x60; lea rsi, [rbp + 0x18]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014fa81: dec dword ptr [rax - 0x75]; and al, 0x60; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000359c0: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x18; ret; 
0x000000000014c0f6: dec dword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [r15]; lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000091275: dec dword ptr [rax - 0x75]; and al, 8; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000087f8d: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x00000000001563a5: dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000014eb64: dec dword ptr [rax - 0x75]; jo 0x14ebae; mov dword ptr [rbx + 0x48], esp; bswap r12d; call qword ptr [rax + 0x18]; 
0x00000000000a5233: dec dword ptr [rax - 0x75]; mov byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000075aef: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff750; call qword ptr [rbx + 0x38]; 
0x000000000007571a: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff750; call qword ptr [rcx + 0x38]; 
0x00000000000e5ef8: dec dword ptr [rax - 0x75]; mov ebp, 0xfffffb38; call qword ptr [rbx + 0x40]; 
0x0000000000138442: dec dword ptr [rax - 0x75]; mov esp, 0x20024; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009723e: dec dword ptr [rax - 0x75]; mov esp, 0x8024; add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0xf04; 
0x000000000004bf76: dec dword ptr [rax - 0x75]; mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000147248: dec dword ptr [rax - 0x75]; or byte ptr [r14 + 8], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000008e9ff: dec dword ptr [rax - 0x75]; or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x000000000015043b: dec dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000014657b: dec dword ptr [rax - 0x75]; or byte ptr [r9 + r9*4 - 0xa], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000015054f: dec dword ptr [rax - 0x75]; push rdi; or byte ptr [rax - 0x77], cl; add al, 0x24; call qword ptr [rdx + 0x20]; 
0x0000000000151f72: dec dword ptr [rax - 0x75]; test al, 0xe8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000013ed9e: dec dword ptr [rax - 0x75]; test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000007bd76: dec dword ptr [rax - 0x75]; test dword ptr [rax - 0x1400000a], edi; add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0x8348; 
0x0000000000060908: dec dword ptr [rax - 0x75]; test dword ptr [rax - 0x7d000000], esp; ret; 
0x000000000005b01b: dec dword ptr [rax - 0x75]; xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4840; 
0x00000000001376dd: dec dword ptr [rax - 0x77]; add eax, 0xb2f3b; add rsp, 8; ret; 
0x0000000000116548: dec dword ptr [rax - 0x77]; add eax, 0xd19e0; add rsp, 8; ret; 
0x0000000000114eed: dec dword ptr [rax - 0x77]; add eax, 0xd566b; add rsp, 8; ret; 
0x000000000009661e: dec dword ptr [rax - 0x77]; and al, 0x18; call rdx; 
0x000000000011bff7: dec dword ptr [rax - 0x77]; and byte ptr [r8 + 2], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000084f31: dec dword ptr [rax - 0x77]; clc; ret; 
0x0000000000188fcf: dec dword ptr [rax - 0x77]; clc; vzeroupper; ret; 
0x0000000000083ca9: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000007d0dd: dec dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x75]; xor eax, 0x166e80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007712d: dec dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x75]; xor eax, 0x16ce30; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009bdb8: dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 0x1a]; call rax; 
0x0000000000115097: dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000155d4c: dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x77]; out dx, eax; call rcx; 
0x0000000000073175: dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x77]; ret 0xdfe8; 
0x000000000007b1ec: dec dword ptr [rax - 0x77]; fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x38]; 
0x0000000000125d67: dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000014801d: dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; int1; shr ch, cl; jmp qword ptr [rsi + 0xf]; 
0x00000000000a2196: dec dword ptr [rax - 0x77]; fisttp word ptr [rax - 0x77]; ret; 
0x000000000007cc72: dec dword ptr [rax - 0x77]; fucomip st(0); lea eax, [rsi - 0x76b70006]; ret; 
0x0000000000159a76: dec dword ptr [rax - 0x77]; fucomip st(0); mov dword ptr [rax - 0x76b70014], edi; ret; 
0x00000000000893b4: dec dword ptr [rax - 0x77]; fucomip st(0); ret; 
0x000000000008c7e7: dec dword ptr [rax - 0x77]; fucomip st(0); sub byte ptr [rbx - 0x3fce0007], cl; pop rbx; ret; 
0x000000000010373c: dec dword ptr [rax - 0x77]; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000012c3fa: dec dword ptr [rax - 0x77]; out dx, al; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x00000000000e55bf: dec dword ptr [rax - 0x77]; ret 0x11eb; 
0x00000000000e3b03: dec dword ptr [rax - 0x77]; ret 0x14e9; 
0x00000000000e3a16: dec dword ptr [rax - 0x77]; ret 0x1e9; 
0x0000000000128695: dec dword ptr [rax - 0x77]; ret 0x2b49; 
0x000000000011024a: dec dword ptr [rax - 0x77]; ret 0x348; 
0x000000000008bdb3: dec dword ptr [rax - 0x77]; ret 0x38b; 
0x000000000009d1da: dec dword ptr [rax - 0x77]; ret 0x394d; 
0x0000000000110051: dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x00000000000e2069: dec dword ptr [rax - 0x77]; ret 0x3d48; 
0x000000000013b7ee: dec dword ptr [rax - 0x77]; ret 0x66c3; 
0x00000000000964e0: dec dword ptr [rax - 0x77]; ret 0x840f; 
0x0000000000097f24: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000009916b: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000007c56b: dec dword ptr [rax - 0x77]; ret 0x86e9; 
0x00000000000551ae: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000042294: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000786b7: dec dword ptr [rax - 0x77]; ret 0x894c; 
0x00000000000c8796: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000007f305: dec dword ptr [rax - 0x77]; ret 0x8ce9; 
0x000000000009e016: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000d2589: dec dword ptr [rax - 0x77]; ret 0x8d4a; 
0x00000000000e4376: dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x00000000000a6180: dec dword ptr [rax - 0x77]; ret 0x9ceb; 
0x00000000000a4688: dec dword ptr [rax - 0x77]; ret 0xa3eb; 
0x00000000001039a6: dec dword ptr [rax - 0x77]; ret 0xabf; 
0x000000000007b0f6: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000036df8: dec dword ptr [rax - 0x77]; ret 0xc031; 
0x000000000019410e: dec dword ptr [rax - 0x77]; ret 0xc148; 
0x000000000010f6ee: dec dword ptr [rax - 0x77]; ret 0xc3f6; 
0x000000000014e6ee: dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x000000000009aa17: dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x0000000000082d9b: dec dword ptr [rax - 0x77]; ret 0xf41; 
0x00000000000e3b21: dec dword ptr [rax - 0x77]; ret 0xf6e9; 
0x000000000012e1e5: dec dword ptr [rax - 0x77]; ret 0xf741; 
0x00000000000396b7: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x00000000000f196d: dec dword ptr [rax - 0x77]; ret 0xff3; 
0x0000000000100d20: dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x0000000000028240: dec dword ptr [rax - 0x77]; ret; 
0x00000000000dbf03: dec dword ptr [rax - 0x77]; sbb byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x000000000009710d: dec dword ptr [rax - 0x77]; shr ecx, 0x5c; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000047afe: dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x00000000001935de: dec dword ptr [rax - 0x7b]; rol byte ptr [rax + 0xf], 1; xchg eax, esp; mov dword ptr [rbx + 0x1f0f02c7], 0x80; add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x00000000000cf74c: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret 0x8348; 
0x000000000012c90f: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret 0x8948; 
0x00000000001183a7: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x00000000001609a7: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add dword ptr [rcx], 0x89480000; ret; 
0x000000000015d61a: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; imul eax, dword ptr [rcx], 0x89480000; ret; 
0x00000000000823b9: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a0670: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000822ba: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000012dc16: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011fea8: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000136624: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; rol dword ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x000000000008ad28: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000008a158: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000008c983: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017a98f: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000017a949: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000b41fe: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000039c58: dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + 0xa], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000001519c6: dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x00000000001158c6: dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + rdx + 0x48], 0x39; ret; 
0x0000000000083c77: dec dword ptr [rax - 0x7b]; sal byte ptr [rbx + rbx + 0x48], 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000013fa75: dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 0x10; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000013fa9f: dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000000badcb: dec dword ptr [rax - 0x7b]; sal byte ptr [rdi + 0x48], 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000a0aa4: dec dword ptr [rax - 0x7b]; sal byte ptr [rsi + rcx + 0x48], 0x89; ret 0x8948; 
0x000000000013fac9: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x000000000011fafe: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret; 
0x00000000000762fd: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000139c85: dec dword ptr [rax - 0x7d]; out dx, eax; add ecx, dword ptr [rax - 0x7d]; call qword ptr [rcx]; 
0x00000000000788b3: dec dword ptr [rax - 0x7d]; ret 0x4420; 
0x0000000000054bb8: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000006f7fc: dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x000000000005669f: dec dword ptr [rax - 0x7d]; ret 0x4808; 
0x00000000000d26fa: dec dword ptr [rax - 0x7d]; ret 0x4809; 
0x0000000000039c12: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000000e0c6d: dec dword ptr [rax - 0x7d]; ret 0xe901; 
0x0000000000038792: dec dword ptr [rax - 0x7d]; ret 0xeb04; 
0x00000000000e9c6a: dec dword ptr [rax - 0x7d]; ret 0xf01; 
0x000000000002cfde: dec dword ptr [rax - 0x7d]; ret; 
0x000000000016a83c: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000011afc0: dec dword ptr [rax - 0x7f]; ret; 
0x0000000000050057: dec dword ptr [rax - 0x7f]; sti; ret 0xffbf; 
0x00000000000b9918: dec dword ptr [rbp + rcx*4 + 0x1d]; adc al, 0x16; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c54: dec dword ptr [rbp + rcx*4 + 0x1d]; and al, 0x4f; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9194: dec dword ptr [rbp + rcx*4 + 0x1d]; cwde; sbb eax, 0x634b000f; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bbd: dec dword ptr [rbp + rcx*4 + 0x1d]; mov ebx, 0x4b000f4f; movsxd rcx, dword ptr [rbx + rax*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b66b8: dec dword ptr [rbp + rcx*4 + 0x1d]; rol byte ptr [rdi + rcx], 0x4b; movsxd rcx, dword ptr [rbx + rax*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7ed8: dec dword ptr [rbp + rcx*4 + 0x1d]; sub byte ptr [rsi], 0xf; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000010ef3b: dec dword ptr [rbp + rcx*4 + 0x2c]; sub byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000001601a7: dec dword ptr [rbp + rcx*4 + 0x2d]; in eax, dx; syscall; 
0x000000000019413f: dec dword ptr [rbp - 0x76b73fb2]; ret; 
0x00000000000e8891: dec dword ptr [rbp - 0x77]; dec byte ptr [rcx - 0x77]; ret 0x8b41; 
0x000000000004c94a: dec dword ptr [rbp - 0x77]; ret 0x8949; 
0x000000000010981b: dec dword ptr [rbx + 0x486c2444]; lea edx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095ef: dec dword ptr [rbx + 0x486c2444]; lea edx, [rip + 0xa41ed]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001113ee: dec dword ptr [rbx + 0x69e83c7d]; ret 0xffff; 
0x0000000000089fd7: dec dword ptr [rbx + 0xc083]; add byte ptr [rbx - 0x760e76cd], cl; ret 0xe181; 
0x00000000000bcc26: dec dword ptr [rbx + 0xeb80853]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000065590: dec dword ptr [rbx + rbp - 0x53]; cmp cl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000047235: dec dword ptr [rbx + rcx*4 + 0x2d]; ret; 
0x00000000000f4186: dec dword ptr [rbx + rcx*4 + 0x3c]; ret 0xe8; 
0x00000000000f806f: dec dword ptr [rbx + rcx*4 - 0x4c]; and al, 0x98; add dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000e4370: dec dword ptr [rbx - 0x2e743]; dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x000000000007e6c4: dec dword ptr [rbx - 0x4df73]; inc dword ptr [rcx + 1]; ret; 
0x0000000000152ab1: dec dword ptr [rbx - 0x545817c5]; sti; jmp qword ptr [rsi - 0x7d]; 
0x0000000000104681: dec dword ptr [rbx - 0x76b6ebb0]; ret 0xc748; 
0x00000000000312f2: dec dword ptr [rbx - 0x76f7dbbc]; ret; 
0x00000000000549a7: dec dword ptr [rbx - 0x7a97db8c]; test byte ptr [rdi], 0x8e; ret; 
0x0000000000060d7c: dec dword ptr [rbx - 0x7ad7dbbc]; ror byte ptr [rdi], 0x8e; ret 0xfff4; 
0x00000000000ed07e: dec dword ptr [rbx - 0x7cb7d3ad]; rol byte ptr [rcx], 0x39; ret 0xee7f; 
0x000000000007b8a8: dec dword ptr [rbx - 0x8f74b]; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000012b463: dec dword ptr [rbx - 0xa76b]; inc dword ptr [rbx + rcx*4 - 0x43]; push -0x16000001; xchg eax, ecx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f1dd7: dec dword ptr [rbx - 0xb37b]; inc dword ptr [rbp - 0x517bf040]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000013acab: dec dword ptr [rbx]; mov edx, 0x104; cmove eax, edx; ret; 
0x0000000000192db9: dec dword ptr [rcx + 0x21]; ret 0x949; 
0x00000000000ec05d: dec dword ptr [rcx + 0x29]; ret; 
0x00000000000ec00f: dec dword ptr [rcx + 0x39]; ret 0x860f; 
0x00000000000c069c: dec dword ptr [rcx + 0x39]; ret 0x870f; 
0x00000000000ec10c: dec dword ptr [rcx + 0x39]; ret 0xe76; 
0x00000000000787cc: dec dword ptr [rcx + 0x39]; ret; 
0x0000000000081a38: dec dword ptr [rcx + 0x415d5be8]; pop rsp; ret; 
0x00000000000a71f8: dec dword ptr [rcx + 0x54b60f17]; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a7228: dec dword ptr [rcx + 0x54b70f17]; and al, 0xc; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7210: dec dword ptr [rcx + 0x54b70f17]; and al, 0xec; mov word ptr [rdi + 4], dx; ret; 
0x00000000000e8107: dec dword ptr [rcx + 0x63]; ret; 
0x0000000000113b2b: dec dword ptr [rcx + 0x75b8fe]; add byte ptr [rax], al; mov edi, edx; syscall; 
0x0000000000113bfb: dec dword ptr [rcx + 0x77b8fe]; add byte ptr [rax], al; mov edi, edx; syscall; 
0x00000000000f3cd9: dec dword ptr [rcx + 0x90ab]; add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x000000000012a1d2: dec dword ptr [rcx + 0xbe42b15]; add byte ptr [rbp + 0x31e37fc0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000006f77a: dec dword ptr [rcx + 1]; ret 0x3b45; 
0x00000000000c6a6b: dec dword ptr [rcx + 1]; ret; 
0x0000000000192659: dec dword ptr [rcx + 9]; ret 0x8d4c; 
0x000000000013b146: dec dword ptr [rcx + r9*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013b147: dec dword ptr [rcx + rcx*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000007245a: dec dword ptr [rcx + rcx*4 + 0x24]; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000001654ce: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000103d44: dec dword ptr [rcx + rcx*4 + 0x78]; and byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x000000000009c4c5: dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x000000000005e57e: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000007e7f5: dec dword ptr [rcx + rcx*4 - 0x2a]; mov rdi, rbx; mov qword ptr [rbp - 0x508], r9; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x00000000000783ec: dec dword ptr [rcx + rcx*4 - 0x32]; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007d38f: dec dword ptr [rcx + rcx*4 - 0x32]; mov rdi, rbx; sub r15, r9; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000011ff69: dec dword ptr [rcx + rcx*4 - 0x3a]; mov edi, ebx; mov eax, r14d; syscall; 
0x00000000000750f2: dec dword ptr [rcx + rcx*4 - 0xa]; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x0000000000155164: dec dword ptr [rcx + rcx*4 - 0xa]; mov rdi, rbp; xor eax, eax; call rcx; 
0x0000000000077373: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007ae80: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, r13; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x000000000006c955: dec dword ptr [rcx + rcx*4 - 6]; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006496d: dec dword ptr [rcx + rcx*4 - 6]; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007e47c: dec dword ptr [rcx + rcx*4 - 6]; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007751b: dec dword ptr [rcx + rcx*4 - 6]; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000785c4: dec dword ptr [rcx + rcx*4 - 6]; mov rsi, r8; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x00000000000bfffe: dec dword ptr [rcx - 0x39]; ret 0xc001; 
0x00000000000bd64e: dec dword ptr [rcx - 0x39]; ret 0xfc01; 
0x00000000000c282e: dec dword ptr [rcx - 0x39]; ret 0xff81; 
0x000000000010f632: dec dword ptr [rcx - 0x73]; push rdi; add dword ptr [rax + 0x39], ecx; ret 0xd72; 
0x000000000012910d: dec dword ptr [rcx - 0x75]; cmp byte ptr [r13 - 0x77], r9b; sbb byte ptr gs:[rax - 0x77], cl; ret 0x2b49; 
0x000000000014699b: dec dword ptr [rcx - 0x75]; cmp byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012954c: dec dword ptr [rcx - 0x75]; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x000000000012973f: dec dword ptr [rcx - 0x75]; cmp byte ptr [rbp - 0x77], r9b; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x00000000000795fa: dec dword ptr [rcx - 0x75]; push rbp; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfff4; 
0x000000000009afd7: dec dword ptr [rcx - 0x77]; add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000000068dfa: dec dword ptr [rcx - 0x77]; fucomip st(1); test dword ptr [rdx - 0x7a380001], edi; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x000000000013ecc3: dec dword ptr [rcx - 0x77]; jmp qword ptr [rsi + 0xf]; 
0x000000000007e21b: dec dword ptr [rcx - 0x77]; leave; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x00000000000d6fcc: dec dword ptr [rcx - 0x77]; ret 0x5a58; 
0x0000000000108de1: dec dword ptr [rcx - 0x77]; ret 0x8545; 
0x000000000007fc64: dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000007d548: dec dword ptr [rcx - 0x77]; ret 0x854d; 
0x0000000000109698: dec dword ptr [rcx - 0x77]; ret 0x8948; 
0x000000000007d8a1: dec dword ptr [rcx - 0x77]; ret 0x8b48; 
0x000000000007d86b: dec dword ptr [rcx - 0x77]; ret 0xbd83; 
0x00000000000e82a8: dec dword ptr [rcx - 0x77]; ret 0xbde9; 
0x00000000000a01de: dec dword ptr [rcx - 0x77]; ret 0xcb8; 
0x0000000000125b7e: dec dword ptr [rcx - 0x77]; ror byte ptr [rcx - 0x73], 0x40; dec dword ptr [rax + 0x39]; ret; 
0x0000000000194008: dec dword ptr [rcx - 0x7b]; ret 0xf40; 
0x0000000000095e0e: dec dword ptr [rcx - 0x7b]; ret; 
0x00000000000f238f: dec dword ptr [rcx - 0x7c25d636]; ret 0x7401; 
0x00000000000a00ee: dec dword ptr [rcx - 0x7d]; cmp al, 0x24; add byte ptr [rdx + rdx + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000000bb305: dec dword ptr [rcx - 0x7d]; ret 0x4908; 
0x00000000000c8e5f: dec dword ptr [rcx - 0x7d]; ret 0x4917; 
0x00000000000e7837: dec dword ptr [rcx - 0x7d]; ret 0x4d01; 
0x000000000002c071: dec dword ptr [rcx - 0x7d]; ret; 
0x000000000006f7ce: dec dword ptr [rcx - 0x7d]; rol dword ptr [rcx + rcx*2], 1; ret; 
0x0000000000075b76: dec dword ptr [rcx - 0x8cf7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000093353: dec dword ptr [rcx - 9]; ret; 
0x00000000000f0547: dec dword ptr [rcx]; ret 0x5189; 
0x0000000000128924: dec dword ptr [rcx]; ret; 
0x000000000012144e: dec dword ptr [rcx]; setbe al; ret; 
0x00000000000c784c: dec dword ptr [rdi + rcx + 0x46]; ret 0x8548; 
0x0000000000042e5b: dec dword ptr [rdi]; add byte ptr [rax - 0x7b], cl; ret 0x574; 
0x000000000011d8b2: dec dword ptr [rdi]; add byte ptr [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000006800d: dec dword ptr [rdi]; lahf; ret 0xd729; 
0x00000000000321e0: dec dword ptr [rdi]; mov dh, 0x35; jmp qword ptr [rdx + 0x16]; 
0x00000000000e5527: dec dword ptr [rdi]; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000fe22b: dec dword ptr [rdi]; mov dh, 0x4a; or byte ptr [rax + 0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x000000000005de4e: dec dword ptr [rdi]; mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x000000000005d002: dec dword ptr [rdi]; mov dh, 0x58; or al, 0xf6; ret; 
0x0000000000182683: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000aada5: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000000100d18: dec dword ptr [rdi]; mov esi, 0x441fe830; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000009e474: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 1; ret; 
0x00000000000437a0: dec dword ptr [rdi]; mov word ptr [rcx - 0x7f000000], gs; sti; push rax; ret; 
0x000000000006200f: dec dword ptr [rdi]; push rax; ret 0xf41; 
0x0000000000033964: dec dword ptr [rdi]; ror byte ptr [r8 - 0x73], 1; add eax, 0x1b2ed1; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x00000000000f0002: dec dword ptr [rdi]; test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000193282: dec dword ptr [rdi]; test bh, dh; add eax, dword ptr [rax]; add byte ptr [rbp - 0x77], cl; mov dword ptr [rcx - 0x7d], 0x894c07e7; ret 0x8d4f; 
0x0000000000048486: dec dword ptr [rdi]; test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret 0; 
0x0000000000188fc9: dec dword ptr [rdi]; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000007b8f1: dec dword ptr [rdi]; test byte ptr [rbx + rax - 0x7cbf0000], al; out dx, al; add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x0000000000193426: dec dword ptr [rdi]; test byte ptr [rbx], al; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000104b8e: dec dword ptr [rdi]; test byte ptr [rbx], bh; add dword ptr [rax], eax; add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x00000000000a2d1f: dec dword ptr [rdi]; test byte ptr [rbx], bl; cmp eax, 0xf7410000; ret 0; 
0x0000000000146b78: dec dword ptr [rdi]; test byte ptr [rcx], bl; add dword ptr [rax], eax; add byte ptr [rbp - 0x7ed28a40], al; ret; 
0x0000000000145862: dec dword ptr [rdi]; test byte ptr [rdi + 0x48000000], al; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000006f29f: dec dword ptr [rdi]; test byte ptr [rdi], bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000071cdf: dec dword ptr [rdi]; test byte ptr [rdi], ch; ret; 
0x0000000000106674: dec dword ptr [rdi]; test byte ptr [rip - 0x76fffffd], dh; ret 0xc085; 
0x00000000000a3fd3: dec dword ptr [rdi]; test byte ptr [rip - 0x8ffffd6], ch; ret; 
0x00000000000a3fdf: dec dword ptr [rdi]; test byte ptr [rip - 0x8ffffd6], cl; ret; 
0x00000000000a42d3: dec dword ptr [rdi]; test byte ptr [rsi - 0x8ffffdb], al; ret; 
0x000000000002c46f: dec dword ptr [rdi]; test ch, dh; add al, 0; add bh, dh; ret 0; 
0x0000000000104bc4: dec dword ptr [rdi]; test ch, dl; add dword ptr [rax], eax; add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x0000000000069d14: dec dword ptr [rdi]; test dh, cl; ret 0xffff; 
0x000000000007690e: dec dword ptr [rdi]; test dword ptr [rax - 0x16000015], ebx; scasb al, byte ptr [rdi]; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000182a06: dec dword ptr [rdi]; test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x0000000000069c35: dec dword ptr [rdi]; test dword ptr [rdi], ecx; ret; 
0x000000000018fdc0: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007ca61: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000006], edx; ret; 
0x0000000000075bde: dec dword ptr [rdi]; xchg byte ptr [rdi + 0x4800000b], al; mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x0000000000075354: dec dword ptr [rdi]; xchg byte ptr [rip + 0x4c000015], dl; mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000007570a: dec dword ptr [rdi]; xchg byte ptr [rsi + 0x4c00000e], dh; mov edx, ebp; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000009949f: dec dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x0000000000044e68: dec dword ptr [rdi]; xchg eax, ebp; ret 0xd321; 
0x000000000011620e: dec dword ptr [rdi]; xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000087644: dec dword ptr [rdi]; xchg eax, ebp; sal bh, 0xd8; ret; 
0x00000000000c6aa8: dec dword ptr [rdi]; xchg eax, edi; ret 0x1489; 
0x000000000015e81c: dec dword ptr [rdi]; xchg eax, esp; ret 0x1389; 
0x000000000008a9ae: dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x00000000000e7755: dec dword ptr [rdi]; xchg eax, esp; ret; 
0x000000000007e030: dec dword ptr [rdx]; add byte ptr [rax], al; add cl, ch; pop rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000075eb7: dec dword ptr [rip + 0x634c0000]; ret; 
0x00000000000341a2: dec dword ptr [rip - 0x7cb79d8c]; ret; 
0x000000000009e38c: dec dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0xeff5a; cmove rax, rdx; ret; 
0x00000000000b3ed9: dec qword ptr [r8 + 0x29]; ret 0x149; 
0x00000000000b1e81: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000039c11: dec qword ptr [r8 - 0x7d]; ret 0x4901; 
0x00000000000b41fd: dec qword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000058635: div byte ptr [rbp + 0x10]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000119020: div byte ptr [rbp + 0xd]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b0352: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000088705: div byte ptr [rbp + 7]; mov rdx, qword ptr [r13 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x0000000000043b55: div byte ptr [rbp + 8]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000037586: div byte ptr [rbp + rbx + 0x48]; mov eax, dword ptr [rip + 0x1b2dd0]; lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000360bf: div byte ptr [rbp + rbx + 0x48]; mov eax, dword ptr [rip + 0x1b429f]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a6c0e: div byte ptr [rbp - 0x11]; mov qword ptr [rdx], rcx; ret; 
0x0000000000112826: div byte ptr [rbp - 0x21]; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x000000000015e7d2: div byte ptr [rbx + rcx - 0x17]; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000036433: div byte ptr [rcx + rbx + 0x48]; mov eax, dword ptr [rip + 0x1b3f23]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ff732: div byte ptr [rcx + rbx - 0x17]; not dh; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000e4032: div byte ptr [rcx + rbx - 0x17]; test byte ptr [rbp + 0xf66fffb], 0x1f; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x00000000000933e6: div byte ptr [rcx + rcx*2 + 0x48]; mov dword ptr [rsi], edi; ret; 
0x0000000000055dd1: div byte ptr [rcx]; inc dword ptr [rcx - 0x46]; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000051f05: div byte ptr [rcx]; inc dword ptr [rcx - 0x47]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x0000000000028dff: div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x00000000000f6adf: div byte ptr [rdx + 0xf]; mov dh, 0x57; cmp dh, dh; ret 0xf08; 
0x00000000001121a5: div byte ptr [rdx + rbp - 0x48]; sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000001812ab: div byte ptr [rdx + rdx*8 + 0x48]; movsxd rax, ecx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000dd509: div byte ptr [rsp + rbx*4 + 0x4c]; mov edi, esi; call 0x15d990; mov rax, r14; call rax; 
0x0000000000129acb: div dword ptr [rcx]; shr al, 0x6d; ret; 
0x000000000010c311: div dword ptr [rdi - 0x14]; ret; 
0x000000000018dc74: div dword ptr [rdx - 0x27]; vmovups zmmword ptr [rsi], zmm2; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000005f466: div eax; add r9d, eax; mov eax, r9d; ret; 
0x00000000000ba739: div ecx; mov eax, eax; ret; 
0x00000000000ba753: div esi; mov eax, eax; ret; 
0x000000000005f465: div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000194c9d: divps xmm0, xmmword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x0000000000194c9c: divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000016be17: fadd dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008d980: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000008228b: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x0000000000081774: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000538e6: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000001176c4: fadd dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010eb76: fadd dword ptr [rax]; ret; 
0x00000000000e3d54: fadd dword ptr [rbx - 0x976fff4]; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000017a334: fadd dword ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000ead13: fadd dword ptr [rcx + 0x5c]; pop r13; pop r14; pop r15; ret; 
0x00000000000750eb: fadd dword ptr [rcx + rcx*4 - 0x73]; mov eax, 0x4cfffff6; mov esi, esi; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000000cdae6: fadd dword ptr [rcx + rdi - 0x3f]; cmovg eax, edx; ret; 
0x00000000000d5d15: fadd dword ptr [rcx - 0x77]; ret; 
0x000000000018b326: fadd dword ptr [rdx]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000011f9c4: fadd qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000ec04c: fadd qword ptr [rcx + 0xf]; xchg eax, ebx; ret; 
0x000000000018aff9: fadd qword ptr [rdx]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000042cf4: fadd st(0); add rsp, 8; ret; 
0x0000000000042cbc: fadd st(0); ret; 
0x00000000000e83f9: fadd st(1); sti; sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x000000000011dd87: fadd st(3); nop dword ptr [rax]; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000000058dee: faddp st(1); std; jmp qword ptr [rsi + 0x66]; 
0x000000000008313f: fbld tbyte ptr [rdi]; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b8651: fbld tbyte ptr [rdi]; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018bb21: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000075f22: fbstp tbyte ptr [rcx]; fucomi st(1); ret; 
0x00000000000840e3: fbstp tbyte ptr [rcx]; rcr byte ptr [rbx + 0x5d], cl; pop r12; pop r13; jmp rax; 
0x0000000000146c6c: fbstp tbyte ptr [rcx]; ror byte ptr [rax - 0x75], 0x4c; and al, 8; call rcx; 
0x000000000018bb1f: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018cc62: fcmovb st(0), st(0); add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000044c6a: fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001861fb: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000009651f: fcom dword ptr [rax + rax]; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x000000000009717c: fcom dword ptr [rcx]; add al, ch; cld; ret; 
0x00000000000bca25: fcomp dword ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000a0dd7: fcomp dword ptr [rbx + 0x48]; cmovne eax, edi; ret; 
0x0000000000082994: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000008d5e9: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000003164b: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000039526: fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000117e3b: fcomp dword ptr [rdx + 0x5b]; ret; 
0x0000000000056217: fcomp qword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000159730: fcomp qword ptr [rdx - 3]; jmp qword ptr [rsi + 0x66]; 
0x0000000000098d7e: fcos; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000128922: fcos; dec dword ptr [rcx]; ret; 
0x00000000001131ed: fdiv dword ptr [rbp + 0x11]; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000015aa80: fdiv dword ptr [rbp + 0x1b]; add rsp, 0x520; pop rbx; ret; 
0x000000000015e604: fdiv dword ptr [rbp + 0x1e]; add rsp, 0x110; pop rbx; ret; 
0x00000000001515d0: fdiv dword ptr [rbp + 0x24]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000010e03f: fdiv dword ptr [rbp + 0x3f]; add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x0000000000124112: fdiv dword ptr [rbp + 0x62]; add rsp, 0x260; pop rbx; pop rbp; pop r12; ret; 
0x000000000018bfef: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bdef: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a717c: fdiv qword ptr [rsi]; adc byte ptr [rax], al; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000005de54: fdiv st(6); ret; 
0x00000000000c8794: fdiv st(7), st(0); dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000015d332: fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x00000000000a624b: fdiv st(7), st(0); jmp qword ptr [rsi - 0x70]; 
0x000000000004bf74: fdivp st(7); dec dword ptr [rax - 0x75]; mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004c948: fdivp st(7); dec dword ptr [rbp - 0x77]; ret 0x8949; 
0x000000000015d322: fdivp st(7); jmp qword ptr [rsi + 0x2e]; 
0x00000000000bfa17: fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000000a60eb: fdivp st(7); jmp qword ptr [rsi - 0x70]; 
0x00000000001140f1: fdivr dword ptr [rax + 0x10e]; syscall; 
0x000000000010f18a: fdivr st(4); dec dword ptr [rax - 0x77]; ret; 
0x000000000008a12f: fdivr st(7); jmp qword ptr [rsi + 0x66]; 
0x000000000005bc27: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000095d6b: fdivr st(7); jmp qword ptr [rsi - 0x70]; 
0x000000000017a0ad: fdivr st(7); ret; 
0x00000000000b4c0e: fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000012c13d: ffreep st(4); or eax, dword ptr [rax]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000a74ed: ffreep st(6); add al, 3; add byte ptr [rax - 0x77], cl; ret 0x96e8; 
0x00000000000de361: fiadd dword ptr [r8 + r8]; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000de362: fiadd dword ptr [rax + rax]; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x000000000016bc97: fiadd dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000049a80: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x000000000005abed: fiadd dword ptr [rbp + 0x450f48f6]; ret 0x8948; 
0x00000000000a2563: fiadd dword ptr [rcx + 0xf]; xchg eax, ebx; ret; 
0x00000000001137b5: fiadd dword ptr [rcx - 0x77]; mov dword ptr [rcx + rcx*4 - 0xe], 0x44ee894c; mov edi, esp; mov eax, 0x147; syscall; 
0x0000000000113915: fiadd dword ptr [rcx - 0x77]; mov dword ptr [rcx + rcx*4 - 0xe], 0x44ee894c; mov edi, esp; mov eax, 0x148; syscall; 
0x0000000000111811: fiadd dword ptr [rcx - 0x77]; ror dword ptr [rax - 0x75], 0x74; and al, 0x10; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x00000000001485e5: fiadd dword ptr [rcx - 1]; push rbp; adc byte ptr [rcx], bh; ret; 
0x0000000000188c02: fiadd dword ptr [rcx]; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b12a: fiadd dword ptr [rdx]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000016ba9d: fiadd word ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a686d: fiadd word ptr [rbx + 0x558880ca]; ret 0x2ba; 
0x000000000008c39d: fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x000000000005f451: fiadd word ptr [rcx + rcx*4 - 0x38]; ret; 
0x0000000000181f9e: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000187ece: fiadd word ptr [rcx]; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000489e0: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a2f: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000103e24: fiadd word ptr [rip - 0x67d0000]; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x00000000000eae7e: ficom dword ptr [rax + 0xcb85b]; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000112c52: ficom dword ptr [rcx + 0x448b0001]; and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x0000000000092e2c: ficom dword ptr [rcx]; add al, ch; pushfq; and edx, edi; jmp qword ptr [rsi + 0x66]; 
0x000000000011004e: ficom word ptr [rax - 0xf]; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x0000000000075d4f: ficom word ptr [rbx]; add al, ch; jns 0x75d47; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000160e55: ficomp dword ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000011e192: ficomp dword ptr [rsp + rcx]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000299f6: ficomp word ptr [rdi - 0x7cb7ffe5]; ret 0x4901; 
0x00000000000dbabf: fidiv dword ptr [rbp + 0xc]; mov rsi, rbx; xor edi, edi; mov eax, 0xe4; syscall; 
0x0000000000181e0f: fidiv dword ptr [rbx - 0x32]; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000941e2: fidiv dword ptr [rbx]; adc eax, 0xe8834800; add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x00000000001563a2: fidiv dword ptr [rdi - 0x74b70001]; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000011af12: fidiv dword ptr [rdi - 1]; dec dword ptr [rax - 0x77]; ret; 
0x000000000018beef: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d429e: fidiv word ptr [rdx + 0xd]; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000018bbef: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000001117c2: fidivr dword ptr [rax + 0x10f]; syscall; 
0x000000000015d955: fidivr dword ptr [rax + 1]; ret; 
0x00000000001580a0: fidivr dword ptr [rax - 1]; ret; 
0x00000000000d056a: fidivr dword ptr [rax]; adc dword ptr [rax], eax; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x000000000011187d: fidivr dword ptr [rip - 0x1000]; mov eax, 0; cmova eax, edx; ret; 
0x00000000000de298: fild dword ptr [rax + rax]; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x000000000016bb1e: fild dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bfa05: fild dword ptr [rax]; verw ax; ret 0xf755; 
0x000000000002e61a: fild dword ptr [rbx + 0x634807e3]; fild dword ptr [rcx - 0xa]; ret; 
0x0000000000104b96: fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x00000000001045f2: fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x0000000000104751: fild dword ptr [rbx - 0x76b6f506]; ret 0xf44; 
0x00000000001909ed: fild dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x3145; 
0x000000000002a596: fild dword ptr [rcx - 0x7d]; ret; 
0x000000000012a39c: fild dword ptr [rcx - 0xa]; and al, 0x18; add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x000000000002e620: fild dword ptr [rcx - 0xa]; ret; 
0x0000000000042c14: fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000cebce: fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000016b941: fild word ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e1236: fild word ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x3f; syscall; 
0x00000000000754ea: fild word ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e7bf2: fild word ptr [rbx - 0x6bf0bf06]; ret 0xf883; 
0x000000000002a298: fild word ptr [rcx + 0xf]; xchg eax, esp; ret; 
0x000000000011ff2a: fild word ptr [rcx + rcx*4 - 0x10]; syscall; 
0x000000000010cfac: fild word ptr [rcx - 0x77]; sal byte ptr [rcx], 0xc0; syscall; 
0x000000000008d747: fild word ptr [rcx - 1]; push rbp; cmp byte ptr [rax - 0x77], cl; ret 0x1b8; 
0x0000000000082d93: fild word ptr [rcx - 1]; push rdi; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000093e02: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000029fa8: fimul dword ptr [rax + 0x29]; ret; 
0x00000000000b0505: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000ce175: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000043534: fimul dword ptr [rax + 9]; ret 0x8948; 
0x000000000017c966: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000056069: fimul dword ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x77]; push rdi; push -0xcd17; jmp qword ptr [rsi + 0x2e]; 
0x0000000000080096: fimul dword ptr [rax - 0x75]; xor eax, 0x163eca; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0e0: fimul dword ptr [rax - 0x75]; xor eax, 0x166e80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f7e: fimul dword ptr [rax - 0x75]; xor eax, 0x169fe2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077130: fimul dword ptr [rax - 0x75]; xor eax, 0x16ce30; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000134fbf: fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x0000000000044f98: fimul dword ptr [rcx + 0x244489ee]; adc al, 0x44; mov edi, esp; mov eax, 0x81; syscall; 
0x000000000008c50b: fimul dword ptr [rcx + 0x29]; fmul dword ptr [rax - 0x77]; ret; 
0x0000000000075be7: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x000000000009bdbb: fimul dword ptr [rcx + rcx*4 - 0x1a]; call rax; 
0x000000000009b838: fimul dword ptr [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax; 
0x0000000000042a72: fimul dword ptr [rcx]; ret 0xc889; 
0x000000000012acaa: fimul dword ptr [rdi]; adc dword ptr [rbp - 0x78], esp; call rax; 
0x00000000000c6691: fimul dword ptr [rdi]; xchg eax, ebx; ret; 
0x0000000000043302: fimul dword ptr [rdx + 0x17]; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000165551: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000029fe7: fimul word ptr [rax + 1]; ret; 
0x000000000011509a: fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000155d4f: fimul word ptr [rax - 0x77]; out dx, eax; call rcx; 
0x0000000000073178: fimul word ptr [rax - 0x77]; ret 0xdfe8; 
0x0000000000065748: fimul word ptr [rax - 0x77]; ret; 
0x000000000008c5f5: fimul word ptr [rbx - 0x8343]; inc dword ptr [rcx + rcx*4 - 0x30]; syscall; 
0x00000000000ee835: fimul word ptr [rbx]; add byte ptr [rbp + 0xf], al; mov dh, 0xed; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x0000000000165552: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000007b1ef: fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x38]; 
0x000000000009bc42: fimul word ptr [rcx + rcx*4 - 0x19]; call rax; 
0x0000000000152511: fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x0000000000096285: fist dword ptr [rax + rax]; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x0000000000153e51: fist dword ptr [rdx]; in eax, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e05e5; ret; 
0x000000000008aad1: fist dword ptr [rdx]; or al, byte ptr [rax]; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000000b53a1: fist dword ptr [rsi + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000011e04a: fistp qword ptr [rax + 0x113]; syscall; 
0x000000000011ded5: fistp qword ptr [rax + 0x114]; syscall; 
0x00000000001122f7: fistp qword ptr [rax + 0x115]; syscall; 
0x000000000011df87: fistp qword ptr [rax + 0x116]; syscall; 
0x000000000010b347: fistp qword ptr [rax + 0x11]; syscall; 
0x0000000000112395: fistp qword ptr [rax + 0x11d]; syscall; 
0x000000000011f487: fistp qword ptr [rax + 0x120]; syscall; 
0x00000000001135d2: fistp qword ptr [rax + 0x127]; syscall; 
0x0000000000113682: fistp qword ptr [rax + 0x128]; syscall; 
0x000000000010b3f7: fistp qword ptr [rax + 0x12]; syscall; 
0x000000000011f52d: fistp qword ptr [rax + 0x12b]; syscall; 
0x000000000011f5d7: fistp qword ptr [rax + 0x133]; syscall; 
0x000000000010c436: fistp qword ptr [rax + 0x135]; syscall; 
0x0000000000112109: fistp qword ptr [rax + 0x146]; syscall; 
0x000000000011fda1: fistp qword ptr [rax + 0x14]; syscall; 
0x000000000011403f: fistp qword ptr [rax + 0x17]; syscall; 
0x000000000011eeee: fistp qword ptr [rax + 0x2c]; syscall; 
0x000000000011ecce: fistp qword ptr [rax + 0x2d]; syscall; 
0x00000000000e13b2: fistp qword ptr [rax + 0x3d]; syscall; 
0x000000000011f757: fistp qword ptr [rax + 0x45]; syscall; 
0x000000000011f7ff: fistp qword ptr [rax + 0x46]; syscall; 
0x000000000011de37: fistp qword ptr [rax + 0xe8]; syscall; 
0x00000000000e14b0: fistp qword ptr [rax + 0xf7]; syscall; 
0x00000000001178b8: fistp qword ptr [rax + 1]; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x0000000000081a35: fistp qword ptr [rax]; cli; dec dword ptr [rcx + 0x415d5be8]; pop rsp; ret; 
0x0000000000055e84: fistp word ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000088dc7: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000001186a1: fistp word ptr [rbx + 0x48]; mov eax, ebp; pop rbp; pop r12; jmp rax; 
0x0000000000083eed: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000086730: fistp word ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x000000000008decb: fistp word ptr [rbx + 0x5d]; pop r12; pop r13; jmp rax; 
0x0000000000125d6a: fistp word ptr [rbx - 0x17]; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000148020: fistp word ptr [rbx - 0x17]; int1; shr ch, cl; jmp qword ptr [rsi + 0xf]; 
0x00000000000b8fd1: fistp word ptr [rsi]; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000140c5b: fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x00000000000ceebd: fisttp dword ptr [rax + 1]; ret; 
0x00000000001946aa: fisttp dword ptr [rax + 9]; ror dword ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000008d602: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000000316c7: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000057621: fisttp dword ptr [rax - 0x77]; ret; 
0x00000000001203af: fisttp dword ptr [rax - 0x77]; sbb eax, 0xc3fa9; pop rbx; ret; 
0x0000000000120399: fisttp dword ptr [rax - 0x77]; sbb eax, 0xc3fbf; pop rbx; ret; 
0x000000000015801a: fisttp dword ptr [rax - 0x7d]; in al, dx; or byte ptr [rbx - 0x6bf0f502], al; ret; 
0x00000000001026f4: fisttp dword ptr [rbp - 0x77]; ret 0x894d; 
0x00000000001580bf: fisttp dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x000000000005763b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x000000000013a520: fisttp dword ptr [rdi]; test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000006d658: fisttp dword ptr [rdi]; test dword ptr [rdi], esi; sbb dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000d94c3: fisttp dword ptr [rdi]; test dword ptr [rsi], esi; sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000d9779: fisttp dword ptr [rdi]; test ebp, ebx; adc eax, 0x89480000; ret 0x894c; 
0x000000000013a74a: fisttp dword ptr [rdi]; test edi, ecx; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x00000000000d99b9: fisttp dword ptr [rdi]; test esi, esp; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000a34ac: fisttp dword ptr [rdi]; xchg eax, ebx; ret; 
0x00000000000d5e8b: fisttp dword ptr [rdi]; xchg eax, esp; ret 0x8d48; 
0x000000000009b38b: fisttp dword ptr [rdi]; xchg eax, esp; ret; 
0x0000000000165731: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000125a9b: fisttp qword ptr [rax + 0x29]; fimul word ptr [rax - 0x77]; ret; 
0x0000000000181412: fisttp qword ptr [rax + 0x63]; ror dword ptr [rax + 1], 0xf8; ret; 
0x0000000000039c35: fisttp qword ptr [rax - 0x7d]; ret 0x4401; 
0x00000000000e1b50: fisttp qword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000b9e62: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000ee73e: fisttp qword ptr [rbx]; add byte ptr [rbp + 0xf], al; mov dh, 0xe4; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x0000000000165732: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000e5537: fisttp qword ptr [rdi]; mov dh, 0x42; add dword ptr [rbx - 0x7cb7fb37], eax; ret 0xeb01; 
0x0000000000165381: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016547d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653c9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a00db: fisttp word ptr [rax + 0x29]; ret 0x8d48; 
0x00000000000e19cf: fisttp word ptr [rax + rax]; mov eax, 0x142; syscall; 
0x0000000000146506: fisttp word ptr [rax - 0x39]; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000042022: fisttp word ptr [rax - 0x39]; ret; 
0x000000000015d54f: fisttp word ptr [rax - 0x75]; and al, 0x10; call rax; 
0x00000000000462da: fisttp word ptr [rax - 0x75]; and al, 8; call rax; 
0x0000000000046397: fisttp word ptr [rax - 0x75]; and al, 8; lea r13, [r14 + rbp]; call rax; 
0x0000000000153e66: fisttp word ptr [rax - 0x77]; ret 0x8949; 
0x00000000000671db: fisttp word ptr [rax - 0x77]; ret; 
0x000000000011fe95: fisttp word ptr [rax - 0x77]; test eax, edx; idiv edi; inc dword ptr [rcx + rcx*4 - 0x10]; syscall; 
0x00000000000576bf: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000007d395: fisttp word ptr [rbp + 0x29]; iretd; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007cdb9: fisttp word ptr [rbp + 0x29]; out dx, eax; mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000077426: fisttp word ptr [rbp + 0x29]; xlatb; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000150d20: fisttp word ptr [rbp + rcx*4 + 5]; fsub dword ptr [rcx - 1]; dec dword ptr [rax - 0x73]; adc eax, 0x3711; call qword ptr [rax]; 
0x00000000000e1666: fisttp word ptr [rcx + 0x23b8c2]; add byte ptr [rax], al; syscall; 
0x000000000010d68d: fisttp word ptr [rcx + 0x3b8c2]; add byte ptr [rax], al; syscall; 
0x000000000011423d: fisttp word ptr [rcx + 0x4ab8c2]; add byte ptr [rax], al; syscall; 
0x00000000001142ed: fisttp word ptr [rcx + 0x4bb8c2]; add byte ptr [rax], al; syscall; 
0x000000000010d804: fisttp word ptr [rcx + 0x55b8c2]; add byte ptr [rax], al; syscall; 
0x000000000004424c: fisttp word ptr [rcx + 0x82b8c2]; add byte ptr [rax], al; syscall; 
0x0000000000165382: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016547e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653ca: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000011dc6b: fisttp word ptr [rcx - 0x1576ba3b]; mov edx, r12d; mov rsi, r15; mov eax, 0x119; syscall; 
0x000000000005b10d: fisttp word ptr [rcx - 0x39]; ret 0xffff; 
0x00000000000c7a8b: fisttp word ptr [rdi]; xchg eax, ebx; ret; 
0x0000000000109078: fisttp word ptr [rdx]; add byte ptr [rax], al; lea rcx, [rip + 0xa46a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000018328d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000112828: fisttp word ptr [rip - 0x80000000]; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000001019d0: fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; ret; 
0x000000000018bef1: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000061d75: fisub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000018e51f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000f5ff7: fisub dword ptr [rsi - 0x7f]; loope 0xf5ffb; add esi, esi; ret; 
0x0000000000192ed3: fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x000000000013912e: fisub word ptr [rax - 1]; jmp qword ptr [rsi + 0x66]; 
0x000000000018bbf1: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000001022f2: fisubr dword ptr [rbx + rsi*8]; jmp qword ptr [rsi + 0x2e]; 
0x000000000018e561: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000000de441: fld dword ptr [rax + rax]; add rsp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x0000000000064b85: fld dword ptr [rax - 0x80]; jmp qword ptr [rdx]; 
0x00000000000dc9c1: fld dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001649a3: fld dword ptr [rbp + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011fa93: fld dword ptr [rbx + 0xc]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000802c3: fld dword ptr [rbx]; add byte ptr [rax], al; lea rdx, [rip + 0x12a112]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000190d65: fld dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x3145; 
0x000000000011186b: fld dword ptr [rcx]; add byte ptr [rsi - 0x70], ah; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x00000000000cf793: fld dword ptr [rsi + 0x11]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000031c8b: fld dword ptr [rsi - 0x72b7ffe5]; cmp eax, 0x1b4a8a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000016b91f: fld qword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000cdbbf: fld qword ptr [rax]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000008e74f: fld qword ptr [rax]; add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000111874: fld qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001409ef: fld qword ptr [rbp - 0x11]; jmp qword ptr [rsi + 0x66]; 
0x000000000018aeea: fld qword ptr [rdx]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000042b86: fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000097993: fld st(4); adc al, 0; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000117793: fld st(6); or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d5cec: fld xword ptr [rcx]; ret; 
0x0000000000042cb8: fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000042c18: fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000042b8a: fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000042ab9: fld xword ptr [rsp + 8]; ret; 
0x0000000000042bd2: fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042b18: fld xword ptr [rsp - 0x18]; ret; 
0x00000000000e1693: fldenv [rdi]; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011db93: fldenv [rdx + 0xc]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000018bf71: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000aa5e1: fldenv [rsi + 0xf]; xlatb; ret; 
0x000000000005674d: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000005840d: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000056894: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x00000000000d2582: fmul dword ptr [rax + 0x29]; ror byte ptr [rbp + rcx*4 + 0x60], 1; dec dword ptr [rax - 0x77]; ret 0x8d4a; 
0x000000000009b59f: fmul dword ptr [rax + 0x39]; ret 0x5b74; 
0x0000000000067551: fmul dword ptr [rax + 0x39]; ret 0x9975; 
0x00000000001133c5: fmul dword ptr [rax + 0x39]; ret; 
0x00000000000706b3: fmul dword ptr [rax + 1]; ret 0x8d48; 
0x00000000000502df: fmul dword ptr [rax - 0x39]; ret; 
0x000000000004738b: fmul dword ptr [rax - 0x3f]; call 0x6491bf96; ret; 
0x00000000001966ea: fmul dword ptr [rax - 0x3f]; call 0x6ca6aef5; ret; 
0x000000000019673a: fmul dword ptr [rax - 0x3f]; call 0x6ca6af45; ret; 
0x00000000000baff9: fmul dword ptr [rax - 0x3f]; clc; add cl, byte ptr [rax + 0x29]; ret 0xf74; 
0x000000000015abf3: fmul dword ptr [rax - 0x75]; add eax, 0x8a955; call qword ptr [rax + 0x28]; 
0x0000000000089705: fmul dword ptr [rax - 0x77]; ret; 
0x0000000000102473: fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x000000000007245e: fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000c1a56: fmul dword ptr [rcx - 0x39]; ret 0xffff; 
0x000000000010d934: fmul dword ptr [rcx - 0x77]; dec byte ptr [rcx + rcx*4 - 9]; mov eax, 0x4f; syscall; 
0x0000000000113cc9: fmul dword ptr [rcx]; add al, ch; call qword ptr [rdx]; 
0x00000000000d69ff: fmul dword ptr [rdi]; mov dh, 0x40; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000112f01: fmul dword ptr [rdi]; test dword ptr [rbp + 0x48000000], edi; add esp, 0x70; pop rbx; ret; 
0x000000000009b3a3: fmul dword ptr [rdi]; test dword ptr [rbp + 0x48000000], esp; add esp, 0x10; pop rbx; ret; 
0x000000000015c953: fmul dword ptr [rdi]; test dword ptr [rsi + 0x48000000], edi; add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000165921: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000191b65: fmul qword ptr [rax - 0x77]; ret; 
0x00000000000dce9b: fmul qword ptr [rax - 0x7d]; ret; 
0x000000000012c79c: fmul qword ptr [rbx]; add byte ptr [rbx + 0x75c08500], cl; cmp edi, dword ptr [rax + 0xe6]; syscall; 
0x0000000000165922: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a7799: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000000ab5cf: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000000e2930: fmul st(0), st(0); add al, 0; nop word ptr cs:[rax + rax]; nop; mov eax, 0x79; syscall; 
0x000000000010c357: fnsave dword ptr [rdi - 0x1a]; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000018bcef: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000010c993: fnstenv [rbp + rcx]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018bf6f: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000042cc6: fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x00000000000562e2: fnstsw dword ptr [rax + 1]; ret; 
0x000000000009d3cf: fnstsw dword ptr [rax - 0x72b80000]; adc eax, 0xc4d56; cmovne rax, rdx; ret; 
0x0000000000136e53: fnstsw dword ptr [rbx + 0x44e80007]; mov esi, 0x85480000; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0xb2378; call rax; 
0x0000000000136a53: fnstsw dword ptr [rdi + 0x44e80007]; ret 0; 
0x000000000013ef02: fprem1; jmp qword ptr [rsi + 0xf]; 
0x0000000000044193: frndint; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000018bcf1: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000042c1c: fscale; fstp st(1); ret; 
0x0000000000114393: fsqrt; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b5a23: fst dword ptr [rax + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000015a993: fst dword ptr [rax + rcx + 0xc76400]; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011ad93: fst dword ptr [rax - 0x2708fff4]; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d2993: fst dword ptr [rcx + rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011e793: fst dword ptr [rsi + 0xc]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000d977c: fst qword ptr [rip - 0x76b80000]; ret 0x894c; 
0x0000000000167763: fstp dword ptr [rax]; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000010e193: fstp dword ptr [rbp + rcx]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000140936: fstp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000a02be: fstp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000011e493: fstp dword ptr [rcx + 0xc]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000bad6f: fstp qword ptr [rdi]; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000009e68f: fstp qword ptr [rsi]; or eax, 0x450f4800; ret 0xfc3; 
0x00000000000cebd4: fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042b50: fstp st(0); and ax, 0x8000; mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042cc8: fstp st(0); and eax, 0x200; ret; 
0x0000000000042c1e: fstp st(1); ret; 
0x000000000016bb1d: fstp st(3), st(0); add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000042b88: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000042bd6: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042b16: fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000018132c: fstp xword ptr [rdx]; movsxd rcx, ecx; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x0000000000042c7b: fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000441c8: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010c4af: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000044198: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000048b58: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000113320: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x0000000000150d24: fsub dword ptr [rcx - 1]; dec dword ptr [rax - 0x73]; adc eax, 0x3711; call qword ptr [rax]; 
0x0000000000042cc9: fsub dword ptr [rip + 0x200]; ret; 
0x00000000000f2c34: fsub dword ptr [rip - 0x76b7000d]; ret; 
0x000000000018153c: fsub dword ptr [rsi + 0xf]; cmp ah, byte ptr [rbx - 0x25]; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000018bff1: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b0bb4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000101981: fsub dword ptr [rsp + rax*2 - 0x77]; add byte ptr [rax - 1], bh; ret; 
0x000000000018bdf1: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000005f8ba: fsub qword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000afc4c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000000a77df: fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x00000000001376db: fsub st(6), st(0); dec dword ptr [rax - 0x77]; add eax, 0xb2f3b; add rsp, 8; ret; 
0x00000000001276b3: fsub st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x00000000000cebd2: fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000155d80: fsubp st(3); ret; 
0x00000000000c890b: fsubr qword ptr [rcx]; ret; 
0x0000000000109919: fsubr st(1); ret 0xffe6; 
0x00000000001236da: fsubr st(1); sar ch, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000080cd0: fsubr st(3); ret 0x1f0f; 
0x00000000001124a4: fsubr st(3); ret 0xf66; 
0x0000000000042b8e: fsubrp st(1); ret; 
0x0000000000075f24: fucomi st(1); ret; 
0x00000000000268e7: fucomi st(3); mov bl, 0x66; nop dword ptr [rax + rax]; ret; 
0x000000000013fed5: fucomi st(3); ret; 
0x0000000000082b5e: fucomip st(0); cld; adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x00000000000e1832: fucomip st(0); cmp byte ptr [rcx], dl; sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000007b0f1: fucomip st(0); cmp dword ptr [rdi - 0x76b70006], ebx; ret 0xb848; 
0x000000000014507f: fucomip st(0); cmp ebx, dword ptr [rsi]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000081a33: fucomip st(0); fistp qword ptr [rax]; cli; dec dword ptr [rcx + 0x415d5be8]; pop rsp; ret; 
0x000000000007cc75: fucomip st(0); lea eax, [rsi - 0x76b70006]; ret; 
0x0000000000159a79: fucomip st(0); mov dword ptr [rax - 0x76b70014], edi; ret; 
0x00000000000289ef: fucomip st(0); mov ebx, 0x83000085; clc; add dh, byte ptr [rsi - 0x77]; ret 0x3d83; 
0x0000000000039572: fucomip st(0); pop rax; cmp al, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000005c218: fucomip st(0); ret 0xfc90; 
0x0000000000046e97: fucomip st(0); ret; 
0x00000000001167a9: fucomip st(0); sar dword ptr [rbp - 1], 1; inc dword ptr [rbp - 0x7cd28b40]; ret; 
0x0000000000115e3f: fucomip st(0); sti; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000008c7ea: fucomip st(0); sub byte ptr [rbx - 0x3fce0007], cl; pop rbx; ret; 
0x000000000012f3d0: fucomip st(0); sub dh, byte ptr [rip + 0x4858fff3]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x0000000000097f1f: fucomip st(0); wait; out 0xff, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000010f159: fucomip st(0); xor dword ptr [rcx - 0xf], esp; dec dword ptr [rax + 0x39]; ret; 
0x0000000000068df5: fucomip st(1); lea edi, [rdx - 0x76b60001]; fucomip st(1); test dword ptr [rdx - 0x7a380001], edi; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x000000000012b84d: fucomip st(1); or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000068dfd: fucomip st(1); test dword ptr [rdx - 0x7a380001], edi; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x0000000000147246: fucomip st(5); dec dword ptr [rax - 0x75]; or byte ptr [r14 + 8], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000042cc4: fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x0000000000044993: fxtract; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dc90f: hlt; add al, 0; add rsp, 0x80; pop rbx; ret; 
0x0000000000169db7: hlt; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000194aad: hlt; add byte ptr [rax], al; add byte ptr [rbp + 0x484c75ff], al; add esp, 0x30; pop rbx; ret; 
0x0000000000037328: hlt; cmc; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2068: hlt; dec dword ptr [rax - 0x77]; ret 0x3d48; 
0x00000000000ddcb3: hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000dd2e3: hlt; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000e20e1: hlt; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000dbf4b: hlt; dec dword ptr [rax - 0x77]; ret; 
0x00000000000dbf02: hlt; dec dword ptr [rax - 0x77]; sbb byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x00000000000e436f: hlt; dec dword ptr [rbx - 0x2e743]; dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x00000000000e5b1b: hlt; hlt; jmp qword ptr [rsi - 0x70]; 
0x0000000000103db3: hlt; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000114710: hlt; inc dword ptr [rbp - 0x39fc8640]; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x00000000000d953d: hlt; inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d9bf8: hlt; inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000044c78: hlt; int1; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ea9a1: hlt; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ed851: hlt; jmp qword ptr [rsi + 0x66]; 
0x000000000012da35: hlt; jmp qword ptr [rsi + 0xf]; 
0x00000000000e5b1c: hlt; jmp qword ptr [rsi - 0x70]; 
0x0000000000117e36: hlt; lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x00000000000a711a: hlt; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x00000000000a704d: hlt; mov byte ptr [rdi + 4], dl; ret; 
0x000000000016ac7a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016592e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ac73: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000e191e: hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000165a87: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165aa3: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000018159b: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000018fa43: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000000a6e8b: hlt; ret; 
0x0000000000037462: hlt; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000044994: hlt; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000449b4: hlt; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000018fa47: hlt; sub eax, edx; ret; 
0x0000000000036a26: idiv ah; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a0a0c: idiv bh; call qword ptr [rax - 0x1f8b3f7c]; pop rbx; pop rbp; ret; 
0x000000000007c362: idiv bh; dec dword ptr [rax + 0x29]; ret 0xf48; 
0x000000000006d4f1: idiv bh; dec dword ptr [rax - 0x73]; or eax, 0x13c3b1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000007b1ea: idiv bh; dec dword ptr [rax - 0x77]; fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x38]; 
0x00000000000cb6c9: idiv bh; dec dword ptr [rax - 0x77]; ret 0xf748; 
0x000000000007b878: idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000007b8a6: idiv bh; dec dword ptr [rbx - 0x8f74b]; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x00000000000f1dd5: idiv bh; dec dword ptr [rbx - 0xb37b]; inc dword ptr [rbp - 0x517bf040]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000750f0: idiv bh; dec dword ptr [rcx + rcx*4 - 0xa]; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x000000000007ae7e: idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, r13; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x000000000007b8ef: idiv bh; dec dword ptr [rdi]; test byte ptr [rbx + rax - 0x7cbf0000], al; out dx, al; add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x000000000007bc79: idiv bh; inc dword ptr [rax - 0x90f43]; jmp qword ptr [rax]; 
0x000000000007b13b: idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000076682: idiv bh; inc edi; test dword ptr [rax], ebp; idiv edi; call qword ptr [rax]; 
0x000000000007b2f8: idiv bh; jmp qword ptr [rax]; 
0x000000000003b3a3: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000007ed14: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000003b30b: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000001150fc: idiv bh; mov eax, 1; add rsp, 8; ret; 
0x00000000000bb010: idiv bh; mov rax, rbx; pop rbx; ret; 
0x00000000000cf776: idiv bh; nop dword ptr [rax + rax]; mov eax, 0x60; syscall; 
0x00000000000cf856: idiv bh; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000d2978: idiv bh; nop word ptr [rax + rax]; mov eax, 0x24; syscall; 
0x00000000001121fb: idiv byte ptr [rax + 0x118]; syscall; 
0x00000000000e1701: idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000126409: idiv byte ptr [rdi + 0x2000004]; call rcx; 
0x0000000000034e8d: idiv byte ptr [rdi + 1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029e36: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x000000000013fbae: idiv dh; jmp qword ptr [rsi + 0x66]; 
0x0000000000193e86: idiv di; jmp qword ptr [rsi + 0xf]; 
0x00000000000c6042: idiv dil; jmp qword ptr [rsi + 0x2e]; 
0x000000000003ed7a: idiv dil; jmp qword ptr [rsi - 0x70]; 
0x000000000010d93a: idiv dword ptr [rax + 0x4f]; syscall; 
0x000000000012e107: idiv ebp; call qword ptr [rax - 0x18]; 
0x00000000000a74ac: idiv edi; add rsp, 8; ret; 
0x0000000000075651: idiv edi; call qword ptr [rax]; 
0x000000000007b8ac: idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x00000000001203aa: idiv edi; dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0xc3fa9; pop rbx; ret; 
0x0000000000044a2b: idiv edi; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000075aed: idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff750; call qword ptr [rbx + 0x38]; 
0x0000000000075718: idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff750; call qword ptr [rcx + 0x38]; 
0x000000000007bd74: idiv edi; dec dword ptr [rax - 0x75]; test dword ptr [rax - 0x1400000a], edi; add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0x8348; 
0x0000000000060906: idiv edi; dec dword ptr [rax - 0x75]; test dword ptr [rax - 0x7d000000], esp; ret; 
0x000000000007b42f: idiv edi; dec dword ptr [rax - 0x77]; fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x38]; 
0x00000000000545c3: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000011fea6: idiv edi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000000762fb: idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000107685: idiv edi; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000075b74: idiv edi; dec dword ptr [rcx - 0x8cf7b]; dec dword ptr [rax - 0x77]; ret; 
0x000000000007b73b: idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000075463: idiv edi; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x000000000007af93: idiv edi; inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x000000000011fe9a: idiv edi; inc dword ptr [rcx + rcx*4 - 0x10]; syscall; 
0x000000000005463e: idiv edi; inc dword ptr [rcx - 0x7d]; cld; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x7c8b; 
0x000000000007b2f2: idiv edi; inc esi; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x000000000011fb64: idiv edi; jmp qword ptr [rdi + 0x6d]; 
0x000000000003ec53: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cd68e: idiv edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000381d4: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000005d30b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000114aad: idiv edi; mov eax, 1; add rsp, 8; ret; 
0x000000000007205e: idiv edi; push qword ptr [rcx]; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x0000000000047c76: idiv esi; ret; 
0x0000000000047c63: idiv esi; shl rdx, 0x20; or rax, rdx; ret; 
0x0000000000097123: idiv r15; jmp qword ptr [rsi + 0xf]; 
0x0000000000116192: idiv r15; mov eax, 1; add rsp, 8; ret; 
0x0000000000047c75: idiv rsi; ret; 
0x000000000011af10: imul al; fidiv dword ptr [rdi - 1]; dec dword ptr [rax - 0x77]; ret; 
0x00000000000452ca: imul al; jo 0x4530e; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f3d58: imul al; ret 0xf314; 
0x00000000001346b7: imul al; ret; 
0x0000000000034f52: imul al; sub byte ptr [rip - 0x76b7fff2], ah; ret; 
0x000000000012f1ed: imul al; sub eax, 0x48ffef60; add esp, 8; ret; 
0x0000000000191ffb: imul byte ptr [rcx]; ret 0xd189; 
0x00000000000c9596: imul byte ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000135596: imul byte ptr [rdx + 2]; call 0x134b30; add rsp, 0x18; ret; 
0x0000000000145d07: imul ch; jmp qword ptr [rsi + 0xf]; 
0x00000000000a45e1: imul cl; cmp esp, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000011db41: imul cl; or dword ptr [rax], eax; add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x00000000000b4408: imul cl; ret 8; 
0x0000000000190f30: imul cl; xlatb; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000011f903: imul eax, dword ptr [rbp + 0xc], 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b68e5: imul eax, dword ptr [rbx + 0xf], 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018e5a1: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x000000000009e4e6: imul eax, dword ptr [rcx], 0; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000015d620: imul eax, dword ptr [rcx], 0x89480000; ret; 
0x0000000000144273: imul eax, dword ptr [rcx], 0xbe0f0000; ret 0xe883; 
0x0000000000134b86: imul eax, dword ptr [rdi], 0; add byte ptr [rsi - 0x3f], ah; ret; 
0x000000000015c6a7: imul eax, dword ptr [rip + 0x3d8d4800], 0x48; imul eax, dword ptr [rip - 0x76e51800], -0x13; jmp qword ptr [rsi + 0x2e]; 
0x000000000015c6ae: imul eax, dword ptr [rip - 0x76e51800], -0x13; jmp qword ptr [rsi + 0x2e]; 
0x000000000011b803: imul eax, dword ptr [rsi - 0x2708fff4], 0x48018964; or eax, 0xffffffff; ret; 
0x0000000000117703: imul eax, edi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000004548e: imul eax, edi; lea r12, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000001905d2: imul eax, edx; shr rax, 0x38; ret; 
0x000000000015977d: imul eax; lodsd eax, dword ptr [rsi]; mov ecx, 0x8948ffec; ret 0x8d48; 
0x0000000000129b2a: imul eax; push rax; ret 0xffff; 
0x0000000000044014: imul ebp, dword ptr [rax + 0xf], 0xf787111; adc dword ptr [rcx + 0x88], edi; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000e1603: imul ebp, dword ptr [rax], 0xd8f70010; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000122999: imul ebp, dword ptr [rcx], -0x10; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000e8865: imul ebp, edi, 0x3945ffff; ret 0x870f; 
0x0000000000145a87: imul ebp; dec dword ptr [rax - 0x77]; ret; 
0x00000000001261e0: imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008c946: imul ebx, dword ptr [rax], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000001670d3: imul ebx, dword ptr [rdi], 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011e403: imul ebx, dword ptr [rdx + 0xc], 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112403: imul ebx, dword ptr [rdx], 0xd8f7000d; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116001: imul ebx, dword ptr [rsi], 0xd; add byte ptr [rax - 0x76b7ffc8], al; ret; 
0x00000000000cba1e: imul ecx, dword ptr [rax + rax], -0x17; pop rdx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000112d6f: imul ecx, dword ptr [rax - 0x7d], 0x5d5b10c4; pop r12; ret; 
0x0000000000126140: imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009c660: imul ecx, dword ptr [rax], 0x48; mov dword ptr [rbx], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009c6e2: imul ecx, dword ptr [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000113603: imul ecx, dword ptr [rax], 0xd8f7000d; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000164313: imul ecx, dword ptr [rbx + 5], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e1463: imul ecx, dword ptr [rdi - 0x76befff0], 0x85008bca; sal byte ptr [rbp + 0x18], 0x45; xor eax, eax; mov eax, 0xf7; syscall; 
0x0000000000072144: imul ecx, dword ptr [rdi], 0x174285; add byte ptr [rcx], dh; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000000d197e: imul ecx, dword ptr [rdi], 0xfffc8e85; jmp qword ptr [rsi - 0x7f]; 
0x0000000000113a67: imul ecx, dword ptr [rip + 0x75c08500], 0x72b82a; add byte ptr [rax], al; syscall; 
0x00000000000d4afd: imul ecx, dword ptr [rip - 0x3f49f100], 0x48; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000032b0b: imul ecx; iretd; add eax, 0x1f0f0000; add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000153e1f: imul ecx; or ebx, dword ptr [rsi - 1]; jmp qword ptr [rsi + 0x66]; 
0x0000000000193e40: imul ecx; ret 0xfff7; 
0x000000000006cdba: imul ecx; ret; 
0x000000000009c603: imul edi, dword ptr [rax + 0x14], 0xc76400; or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018d633: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f9: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000efef2: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a77e1: imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000013b854: imul edi, edi, 0x3e8; mov eax, edi; add eax, edx; mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x00000000000f5ff1: imul edi, edi, 0x89d989ff; fisub dword ptr [rsi - 0x7f]; loope 0xf5ffb; add esi, esi; ret; 
0x0000000000150567: imul edi, edi, 0xa0e8ffff; in al, dx; std; call qword ptr [rbx - 0x42]; 
0x00000000000fe1aa: imul edi, esi, -1; jmp qword ptr [rsi - 0x70]; 
0x0000000000153380: imul edx, dword ptr [rax], 0x31; test bh, 0x43; adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x0000000000126190: imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000112e03: imul edx, dword ptr [rax], 0xd8f7000d; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010eb03: imul edx, dword ptr [rbx + 0xd], 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000009e751: imul edx, dword ptr [rcx + 0xc], 0; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000011ed03: imul edx, dword ptr [rcx + 0xc], 0x64d8f700; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x0000000000112703: imul edx, dword ptr [rdi], 0xd8f7000d; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000114ef1: imul edx, dword ptr [rsi + 0xd], 0; add rsp, 8; ret; 
0x000000000010cc03: imul esi, dword ptr [rdx + 0xd], 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000048c03: imul esi, dword ptr [rdx - 0x389bffe7], 0x500; add byte ptr [rax - 1], bh; ret; 
0x000000000007ed13: imul esi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000925ae: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x0000000000101903: imul esp, dword ptr [rip - 0x2708fff2], 0x48018964; or eax, 0xffffffff; ret; 
0x00000000000b530c: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x0000000000115903: imul esp, ebp, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000dbff3: imul esp, ebx, 0x8d480010; cmp eax, 0x10a722; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015c6ad: imul rax, qword ptr [rip - 0x76e51800], -0x13; jmp qword ptr [rsi + 0x2e]; 
0x000000000004548d: imul rax, rdi; lea r12, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000001905d1: imul rax, rdx; shr rax, 0x38; ret; 
0x000000000005eeb2: in al, 0; add al, byte ptr [rax]; add cl, ch; stosd dword ptr [rdi], eax; in al, 0xff; jmp qword ptr [rsi + 0x44]; 
0x000000000012c711: in al, 0; add byte ptr [rax], al; mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x0000000000190468: in al, 0; add byte ptr [rax], al; ret; 
0x00000000000dbac8: in al, 0; add byte ptr [rax], al; syscall; 
0x000000000011e2f1: in al, 0; add byte ptr [rax], al; syscall; ret; 
0x0000000000034a38: in al, 0x1c; sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012694b: in al, 0x48; add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000ee744: in al, 0x4a; movsxd rax, dword ptr [rcx]; add rax, rcx; jmp rax; 
0x0000000000165926: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000010c36a: in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000009feb2: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000b4fdc: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000000ca0b2: in al, 0x74; out 0xe8, al; pop rdx; mov bl, 0xf5; jmp qword ptr [rsi + 0xf]; 
0x000000000011a98a: in al, 0x75; cmp al, 0x5b; pop rbp; pop r12; ret; 
0x0000000000152090: in al, 0x75; or eax, 0x5c415d5b; ret; 
0x00000000001142e8: in al, 0x7a; add dword ptr [rax], eax; mov edi, ebx; mov edx, eax; mov eax, 0x4b; syscall; 
0x00000000001200cf: in al, 0x89; ret; 
0x000000000012a1d6: in al, 0xb; add byte ptr [rbp + 0x31e37fc0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012befb: in al, 0xb; add byte ptr [rbx - 0x39], bl; add eax, 0xbe4b7; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000012d138: in al, 0xbc; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000196f4f: in al, 0xe8; ret; 
0x0000000000039d7a: in al, 0xeb; ret; 
0x00000000000437f8: in al, 0xed; adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x00000000000bad68: in al, 0xee; or al, 0; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x000000000016ac5a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000ba52e: in al, 0xf3; ret; 
0x00000000000bb0f8: in al, 0xf6; or al, 0; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000a6bc7: in al, 0xf8; jmp qword ptr [rsi + 0xf]; 
0x0000000000075468: in al, 0xf; lahf; ret; 
0x000000000004626f: in al, 0xf; xchg eax, ebp; ret 0x8548; 
0x0000000000122bb7: in al, 0xf; xchg eax, ebp; ret 0xdaf7; 
0x0000000000150d71: in al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x000000000009aa15: in al, 0xff; dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x000000000005eeb9: in al, 0xff; jmp qword ptr [rsi + 0x44]; 
0x0000000000076917: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000007696b: in al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000000b5e48: in al, 6; add byte ptr [rax], al; ret; 
0x000000000015b909: in al, 8; add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x00000000000989c9: in al, dx; adc al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009890e: in al, dx; adc al, 0; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000009187e: in al, dx; adc al, ch; cmp dword ptr [rdx], -7; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e1306: in al, dx; adc al, ch; ret; 
0x0000000000086a6e: in al, dx; adc al, ch; xchg eax, ebx; call 0xffffffff89516a70; ret; 
0x000000000010b932: in al, dx; adc byte ptr [rdx + 1], ch; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000160692: in al, dx; adc byte ptr [rdx + 2], ch; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000135ee2: in al, dx; adc byte ptr [rdx + 2], ch; call 0x135940; add rsp, 0x18; ret; 
0x00000000001606a2: in al, dx; adc byte ptr [rdx + 3], ch; call 0x10c120; add rsp, 0x18; ret; 
0x000000000010b922: in al, dx; adc byte ptr [rdx], ch; call 0x10c120; add rsp, 0x18; ret; 
0x000000000016a537: in al, dx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000063bee: in al, dx; add byte ptr [rax], 0; add al, ch; mov eax, 0x48000c81; add esp, 0x80; ret; 
0x0000000000116a05: in al, dx; add byte ptr [rax], 0; add al, ch; movabs eax, dword ptr [0x80c48148000153]; add byte ptr [rax], al; ret; 
0x00000000000880b4: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xa3c; 
0x00000000001505b4: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xfdb7; 
0x00000000000e1d0f: in al, dx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x000000000005a90b: in al, dx; add dword ptr [rcx + 0xf], eax; mov esi, 0x89412404; ret; 
0x000000000017c030: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x0000000000159781: in al, dx; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000159a7d: in al, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000015d619: in al, dx; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; imul eax, dword ptr [rcx], 0x89480000; ret; 
0x00000000000489df: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a2e: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x00000000000f5ff0: in al, dx; imul edi, edi, 0x89d989ff; fisub dword ptr [rsi - 0x7f]; loope 0xf5ffb; add esi, esi; ret; 
0x0000000000156444: in al, dx; jmp qword ptr [rsi + 0x2e]; 
0x000000000016b050: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000115cf3: in al, dx; mov byte ptr [r8 - 1], 0; ret; 
0x000000000016592a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000154574: in al, dx; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax]; 
0x000000000011e18e: in al, dx; mov rdx, qword ptr [rip + 0xc5cda]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a7132: in al, dx; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x00000000000a7217: in al, dx; mov word ptr [rdi + 4], dx; ret; 
0x000000000016b05a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000005372c: in al, dx; or al, ch; add r15b, r14b; dec dword ptr [rax - 0x77]; ret; 
0x00000000001456ca: in al, dx; or al, ch; outsd dx, dword ptr [rsi]; ret 0; 
0x000000000012e153: in al, dx; or byte ptr [rax + 0x39], cl; ret 0x976; 
0x00000000000824f3: in al, dx; or byte ptr [rax - 0x75], cl; mov edi, 0xe0; call rax; 
0x00000000000a74a2: in al, dx; or byte ptr [rax - 0x77], cl; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x000000000017cd54: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000015801d: in al, dx; or byte ptr [rbx - 0x6bf0f502], al; ret; 
0x0000000000094e85: in al, dx; or byte ptr [rcx], dh; call qword ptr [rsi + 0x48]; 
0x0000000000094c34: in al, dx; or byte ptr [rdi + 0x31], dl; call qword ptr [rax + 0x48]; 
0x000000000015976f: in al, dx; push qword ptr [rcx]; ror byte ptr [rax - 0x77], cl; ret; 
0x0000000000098850: in al, dx; ret; 
0x00000000000e15d2: in al, dx; sbb al, ch; mul dword ptr [rdi - 0x3876fffc]; mov eax, 0x22; syscall; 
0x00000000000bb7e4: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000010ca64: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000150781: in al, dx; sbb byte ptr [rbx - 0x3d], 0xe8; xchg dl, ch; std; jmp qword ptr [rsi + 0xf]; 
0x000000000015056d: in al, dx; std; call qword ptr [rbx - 0x42]; 
0x000000000012d2d3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ac1]; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d213: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ba1]; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d153: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60c61]; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000009e773: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef651]; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e423: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef981]; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2c3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefb01]; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x0000000000041f90: in al, dx; xor dh, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000057d77: in eax, 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000011fee3: in eax, 0; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x52], cl; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000e3904: in eax, 0; add byte ptr [rax], al; syscall; 
0x000000000012c656: in eax, 0; add byte ptr [rax], al; xor esi, esi; lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x000000000008a4c7: in eax, 0x18; or al, byte ptr [rax]; add rsp, 0x80; mov eax, edx; ret; 
0x0000000000034137: in eax, 0x25; sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000120173: in eax, 0x41; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000165736: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000110247: in eax, 0x4e; int1; dec dword ptr [rax - 0x77]; ret 0x348; 
0x000000000008cbd5: in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000000296b7: in eax, 0x8c; add eax, 0x45c74800; test al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000013fbdb: in eax, 0x99; or al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000115904: in eax, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000019695a: in eax, 0xe8; sal byte ptr [rsp + rdi*8 - 1], 1; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x0000000000054b02: in eax, 0xe9; ret; 
0x000000000002974c: in eax, 0xeb; or eax, 0xbe0f4890; ret 0xf641; 
0x00000000000ba699: in eax, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000e6dd1: in eax, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x000000000016acda: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000160c0f: in eax, 0xfc; jmp qword ptr [rsi + 0x66]; 
0x0000000000046bb4: in eax, 0xfd; dec dword ptr [rax - 0x77]; ret; 
0x0000000000109819: in eax, 0xff; dec dword ptr [rbx + 0x486c2444]; lea edx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000130cc0: in eax, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000010d7fd: in eax, 1; add byte ptr [rcx - 0x2076b712], cl; mov edx, eax; mov eax, 0x55; syscall; 
0x00000000000bb3a1: in eax, 2; lea rax, [rip + 0x115d6]; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009e633: in eax, 2; lea rax, [rip + 0xcbd4]; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e201: in eax, 2; lea rax, [rip + 0xcbf6]; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009e593: in eax, 2; lea rax, [rip + 0xcc64]; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e683: in eax, 2; lea rax, [rip + 0xedc4]; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e3: in eax, 2; lea rax, [rip + 0xee54]; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000010b937: in eax, 7; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000437f9: in eax, dx; adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x000000000009e689: in eax, dx; add byte ptr [rax], al; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x00000000001171bf: in eax, dx; add qword ptr [r8], rax; add rsp, 0x80; add rsp, 8; ret; 
0x000000000009d681: in eax, dx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000153e53: in eax, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e05e5; ret; 
0x0000000000153fe3: in eax, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e0775; ret; 
0x000000000014de7b: in eax, dx; dec dword ptr [rax - 0x75]; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000147247: in eax, dx; dec dword ptr [rax - 0x75]; or byte ptr [r14 + 8], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014801c: in eax, dx; dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; int1; shr ch, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000014b0e3: in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014b198: in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000145a88: in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001519c5: in eax, dx; dec dword ptr [rax - 0x7b]; sal byte ptr [rbp + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000017a94f: in eax, dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000017aa7f: in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x000000000015208c: in eax, dx; inc dword ptr [rbp - 0x7b]; in al, 0x75; or eax, 0x5c415d5b; ret; 
0x000000000014e003: in eax, dx; inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg eax, edi; ret; 
0x000000000015c6b4: in eax, dx; jmp qword ptr [rsi + 0x2e]; 
0x000000000014d2a2: in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x0000000000145d08: in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x000000000015fc1c: in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x000000000016b0d0: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000b9c52: in eax, dx; lea rax, [rcx - 1]; ret; 
0x00000000000b9619: in eax, dx; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000b962f: in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b9651: in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b966f: in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b968f: in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b96b5: in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b96d1: in eax, dx; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b96f1: in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b9711: in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9737: in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b9759: in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b9777: in eax, dx; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b9797: in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b97b3: in eax, dx; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b97d3: in eax, dx; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b97f3: in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b9813: in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b9839: in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b9889: in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000b955f: in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b957d: in eax, dx; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b959d: in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b95bf: in eax, dx; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b95df: in eax, dx; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b95ff: in eax, dx; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000b9495: in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000b94a7: in eax, dx; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000b94bd: in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b94d5: in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b94eb: in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b94fd: in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b951b: in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b9527: in eax, dx; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b953d: in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b9481: in eax, dx; mov byte ptr [rdi], ch; ret; 
0x000000000016573a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016b0da: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000fc7db: in eax, dx; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000ee83b: in eax, dx; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000001095f7: in eax, dx; or al, byte ptr [r8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000056c28: in eax, dx; or byte ptr [rax - 0x75], cl; add byte ptr [r13 + 0x39], r9b; ret 0xcd74; 
0x00000000001808c0: in eax, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000011db1a: in eax, dx; pop rax; pop rdi; call rax; 
0x0000000000035aa4: in eax, dx; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000063883: in eax, dx; ret; 
0x0000000000036d2f: in eax, dx; stc; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012e6bf: in eax, dx; sti; add eax, 0xf9834800; add al, 0x48; cmovne eax, edx; ret; 
0x000000000009fd3f: in eax, dx; stosb byte ptr [rdi], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000b9da2: in eax, dx; sub rax, 1; ret; 
0x00000000001601ab: in eax, dx; syscall; 
0x000000000009c4f2: in eax, dx; xor eax, eax; ret; 
0x0000000000101c14: inc al; add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000169337: inc byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011e541: inc byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e12df: inc byte ptr [rbp + 0x31]; sal byte ptr [rcx], cl; sar byte ptr [rdi - 1], cl; mov eax, 0x3d; syscall; 
0x00000000000546ce: inc byte ptr [rbx - 0x68f0fc08]; ret 0x8545; 
0x000000000005496d: inc byte ptr [rbx - 0x6bf0021e]; ret 0x8341; 
0x00000000000be243: inc byte ptr [rcx + 0x29]; ret; 
0x00000000000c343d: inc byte ptr [rcx + 0x29]; sar byte ptr [rcx], cl; ret 0x1d74; 
0x000000000011598b: inc byte ptr [rcx - 0x46]; add byte ptr [rcx], al; add byte ptr [rax], al; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x0000000000118c5a: inc byte ptr [rcx - 0x7d]; ret 0x4901; 
0x000000000008c2aa: inc byte ptr [rdx]; cmove edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000a6c19: inc dword ptr [r8]; mov qword ptr [rdx], rcx; ret; 
0x00000000000fe817: inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000005ec9c: inc dword ptr [rax - 0x14343]; jmp qword ptr [rdi + 0x44]; 
0x000000000005ef9a: inc dword ptr [rax - 0x14343]; jmp qword ptr [rdi + 0x75]; 
0x00000000000e6770: inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x000000000005d529: inc dword ptr [rax - 0x7bf09a05]; push rbp; add al, byte ptr [rax]; add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000007bc7b: inc dword ptr [rax - 0x90f43]; jmp qword ptr [rax]; 
0x0000000000192ecf: inc dword ptr [rax]; add bh, dh; fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x000000000019267b: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x0000000000193624: inc dword ptr [rax]; add byte ptr [rax + 0xf], cl; mov edx, 0x21482fea; ret 0x41e9; 
0x000000000007b73d: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000007b13d: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000006f456: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx - 0x1f7cfe10], al; add dword ptr [rax - 0x5b77b], ecx; jmp qword ptr [rsi + 0xf]; 
0x00000000000e73b3: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c04; 
0x00000000000d2d0c: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx - 0x3a], al; add al, 0x28; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e7c70: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000007bf52: inc dword ptr [rax]; add byte ptr [rax], al; add dh, al; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x000000000018c501: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000000ba640: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x00000000000e35dc: inc dword ptr [rax]; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000019044d: inc dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000018c507: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x000000000011e5d1: inc dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000193059: inc dword ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x894d; 
0x0000000000192d62: inc dword ptr [rax]; add byte ptr [rcx], bl; sal bh, cl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000192f00: inc dword ptr [rax]; add byte ptr [rcx], bl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x000000000006dcce: inc dword ptr [rax]; and byte ptr [rax], al; add byte ptr [rbp - 0x76b70088], cl; ret; 
0x00000000000f0544: inc dword ptr [rax]; cld; dec dword ptr [rcx]; ret 0x5189; 
0x00000000000a6c1a: inc dword ptr [rax]; mov qword ptr [rdx], rcx; ret; 
0x000000000005de02: inc dword ptr [rax]; or al, 0xf; test byte ptr [rip - 0x17000004], dh; add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x000000000012f31d: inc dword ptr [rax]; or eax, edi; bswap eax; ret; 
0x0000000000115c9e: inc dword ptr [rax]; ret; 
0x00000000000e7f71: inc dword ptr [rbp + 0x39]; ret 0x850f; 
0x00000000000e8868: inc dword ptr [rbp + 0x39]; ret 0x870f; 
0x0000000000111371: inc dword ptr [rbp + 0x43850fc0]; add dword ptr [rax], eax; add byte ptr [rbx - 0x2117c385], cl; ret 0xffff; 
0x000000000015aee0: inc dword ptr [rbp + 0x480b78c0]; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000147912: inc dword ptr [rbp + 0x481974c0]; mov eax, dword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000001535b1: inc dword ptr [rbp + 0x483a74c0]; mov eax, dword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x00000000001469e7: inc dword ptr [rbp + 0x48a374c0]; mov eax, dword ptr [rsp + 0xc8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001133d8: inc dword ptr [rbp + 0x48b678c0]; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001500f2: inc dword ptr [rbp + 0x497974c0]; mov eax, dword ptr [rsi + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000006c4da: inc dword ptr [rbp + 0x56850fdb]; ret 0xffff; 
0x00000000001062a2: inc dword ptr [rbp + 0x5bac74c0]; mov eax, 5; pop rbp; pop r12; ret; 
0x000000000014de74: inc dword ptr [rbp + 0x61840fc0]; test ebp, ebp; dec dword ptr [rax - 0x75]; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000013b69d: inc dword ptr [rbp - 0x14728b40]; ret 0x1f0f; 
0x000000000014cae8: inc dword ptr [rbp - 0x38ec8a40]; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000114711: inc dword ptr [rbp - 0x39fc8640]; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x000000000014caac: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x0000000000052fef: inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; movzx eax, al; ret; 
0x00000000000f1ddd: inc dword ptr [rbp - 0x517bf040]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000014f067: inc dword ptr [rbp - 0x5f7bf040]; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; jo 0x14f0c1; mov edi, esp; call qword ptr [rax + 0x20]; 
0x0000000000075eb2: inc dword ptr [rbp - 0x71f025]; or eax, 0x634c0000; ret; 
0x000000000015e5bc: inc dword ptr [rbp - 0x76b08a40]; ret; 
0x00000000000654ea: inc dword ptr [rbp - 0x78]; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000006d655: inc dword ptr [rbp - 0x7b]; fisttp dword ptr [rdi]; test dword ptr [rdi], esi; sbb dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000d94c0: inc dword ptr [rbp - 0x7b]; fisttp dword ptr [rdi]; test dword ptr [rsi], esi; sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000d9776: inc dword ptr [rbp - 0x7b]; fisttp dword ptr [rdi]; test ebp, ebx; adc eax, 0x89480000; ret 0x894c; 
0x00000000000d99b6: inc dword ptr [rbp - 0x7b]; fisttp dword ptr [rdi]; test esi, esp; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000011a987: inc dword ptr [rbp - 0x7b]; in al, 0x75; cmp al, 0x5b; pop rbp; pop r12; ret; 
0x000000000015208d: inc dword ptr [rbp - 0x7b]; in al, 0x75; or eax, 0x5c415d5b; ret; 
0x0000000000075465: inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x000000000015f5e6: inc dword ptr [rbp - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xa; 
0x000000000007af95: inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x0000000000107cb9: inc dword ptr [rbp - 0x7cc58b25]; sti; add cl, byte ptr [rdi]; xchg eax, ebp; ret; 
0x00000000001167ae: inc dword ptr [rbp - 0x7cd28b40]; ret; 
0x000000000011680a: inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x0000000000029b88: inc dword ptr [rbx + 0x1bcb640d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000112cfb: inc dword ptr [rbx + 0x478930c8]; or byte ptr [rax + 0x100], bh; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000014512e: inc dword ptr [rbx + 0xa47aa0d]; add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x000000000013fc08: inc dword ptr [rbx + 0xa99b40d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x000000000012b469: inc dword ptr [rbx + rcx*4 - 0x43]; push -0x16000001; xchg eax, ecx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e44f8: inc dword ptr [rbx - 0x30773]; call qword ptr [rax]; 
0x000000000010bfc9: inc dword ptr [rbx - 0x39760036]; mov edi, edx; mov eax, 0x75; syscall; 
0x000000000010bff1: inc dword ptr [rbx - 0x39760036]; mov edi, edx; mov eax, 0x77; syscall; 
0x000000000007e88f: inc dword ptr [rbx - 0x50743]; jmp qword ptr [rax]; 
0x000000000005ecac: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0xf]; 
0x000000000013a44f: inc dword ptr [rbx - 0xc8b0a08]; pop rbx; ret; 
0x0000000000048664: inc dword ptr [rbx]; add byte ptr [rax], al; xor eax, ecx; ret; 
0x00000000000ba737: inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000ba66c: inc dword ptr [rbx]; ret; 
0x000000000012f2ee: inc dword ptr [rcx + 0xe2]; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x000000000006221a: inc dword ptr [rcx + 0xf]; mov dh, 0x56; or al, 0xf6; ret 0x7440; 
0x000000000007c005: inc dword ptr [rcx + 0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x000000000005dc68: inc dword ptr [rcx + 0xf]; xchg eax, esp; ret 0xeb83; 
0x000000000014e004: inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg eax, edi; ret; 
0x0000000000075f1f: inc dword ptr [rcx + 1]; fbstp tbyte ptr [rcx]; fucomi st(1); ret; 
0x000000000007e6ca: inc dword ptr [rcx + 1]; ret; 
0x0000000000058803: inc dword ptr [rcx + rbp - 0x38]; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000064f64: inc dword ptr [rcx + rbp*8]; ret; 
0x000000000011fe9c: inc dword ptr [rcx + rcx*4 - 0x10]; syscall; 
0x000000000008c5fb: inc dword ptr [rcx + rcx*4 - 0x30]; syscall; 
0x00000000000c1a4d: inc dword ptr [rcx - 0x45]; add byte ptr [rax], al; add byte ptr [rcx - 9], cl; fmul dword ptr [rcx - 0x39]; ret 0xffff; 
0x0000000000055dd3: inc dword ptr [rcx - 0x46]; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000051f07: inc dword ptr [rcx - 0x47]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x000000000006dcc8: inc dword ptr [rcx - 0x56743]; inc dword ptr [rax]; and byte ptr [rax], al; add byte ptr [rbp - 0x76b70088], cl; ret; 
0x00000000000e7a1f: inc dword ptr [rcx - 0x75]; or byte ptr [r13 + 0x39], r8b; ret 0x1176; 
0x000000000006754e: inc dword ptr [rcx - 0x77]; fmul dword ptr [rax + 0x39]; ret 0x9975; 
0x0000000000101c87: inc dword ptr [rcx - 0x77]; ret 0x489; 
0x00000000000d3236: inc dword ptr [rcx - 0x77]; ret 0x9ee9; 
0x00000000000e7a6b: inc dword ptr [rcx - 0x77]; ret 0xb9e9; 
0x00000000000e7044: inc dword ptr [rcx - 0x77]; ret; 
0x0000000000054640: inc dword ptr [rcx - 0x7d]; cld; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x7c8b; 
0x00000000000e7751: inc dword ptr [rcx - 0x7d]; cli; dec dword ptr [rdi]; xchg eax, esp; ret; 
0x000000000007be90: inc dword ptr [rcx - 0x7d]; out dx, al; add dword ptr [rbx - 0x8f77b], ecx; inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x0000000000096c3b: inc dword ptr [rcx - 0x7d]; ret 0x4901; 
0x00000000000a2e3f: inc dword ptr [rcx - 0x7d]; ret 0xeb01; 
0x000000000013d2ec: inc dword ptr [rcx - 0x7d]; ret; 
0x000000000013c165: inc dword ptr [rcx]; add byte ptr [rax + 0x29], cl; ret 0x149; 
0x000000000007ef14: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x86; add rax, rdx; jmp rax; 
0x000000000007de58: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdx; jmp rax; 
0x000000000007e260: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, rdx; jmp rax; 
0x000000000007edc5: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; jmp rax; 
0x000000000007d140: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0b8: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd0: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec0: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; int1; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000000d0318: inc dword ptr [rcx]; ret 0xb70f; 
0x00000000001931f0: inc dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0x8548; 
0x000000000007d39b: inc dword ptr [rdx]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000013acd0: inc dword ptr [rip + 0xba]; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x0000000000183a6d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000013accb: inc dword ptr [rsp + rsi*2]; sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000d0317: inc dword ptr ss:[rcx]; ret 0xb70f; 
0x00000000000b9e6a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b9e67: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b9e64: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000042a99: inc eax; shr eax, 0x1f; ret; 
0x0000000000182a0c: inc ebp; std; xlatb; ret 0xe883; 
0x000000000011e28a: inc ebx; nop dword ptr [rax]; mov eax, 0x9e; syscall; 
0x000000000010198a: inc ebx; nop dword ptr [rax]; mov ecx, 0xcb; mov eax, ecx; syscall; 
0x000000000004416a: inc ebx; nop dword ptr [rax]; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000011f9e8: inc ebx; nop word ptr [rax + rax]; mov eax, 0x1e; syscall; 
0x000000000011fa78: inc ebx; nop word ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x0000000000112748: inc ebx; nop word ptr [rax + rax]; mov eax, 1; syscall; 
0x0000000000113404: inc ebx; nop word ptr cs:[rax + rax]; mov eax, 0x10; syscall; 
0x000000000010cc0f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eadf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea1f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e79f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e7ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e46f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d72f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d78f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e58f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e88f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9df: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d75f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x000000000010184f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x000000000011767f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d6ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d299f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f0ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebcf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d87f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb0f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea4f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb1f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e16f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e19f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e125f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5ef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e295f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e298f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e29ef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a1f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a4f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbcf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e34f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e37f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017bf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017ef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000010181f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000010187f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018df: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x000000000011770f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x000000000011773f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x000000000011776f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x000000000011468f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146bf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x000000000011757f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011d9ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011e3df: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e40f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db6f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b92f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b80f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e43f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2df: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e55f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5bf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000011dd00: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441a0: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8e0: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8b0: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f880: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b30: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e50: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x0000000000113240: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x00000000001126e0: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000011e862: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x11f; syscall; 
0x000000000011e8f2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x134; syscall; 
0x000000000011e982: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x13f; syscall; 
0x000000000010d0d2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x000000000011f0d2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x30; syscall; 
0x000000000011ec32: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x32; syscall; 
0x000000000011fa12: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x43; syscall; 
0x000000000010cbe2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x53; syscall; 
0x000000000010eab2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x57; syscall; 
0x000000000010e9f2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x58; syscall; 
0x000000000011e772: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x000000000011dba2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x7a; syscall; 
0x000000000011ddb2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x87; syscall; 
0x000000000010c9a2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x89; syscall; 
0x00000000001176e2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x95; syscall; 
0x0000000000114662: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x99; syscall; 
0x000000000011e322: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x9f; syscall; 
0x000000000011e4d2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xb1; syscall; 
0x000000000011e682: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xb4; syscall; 
0x000000000011b8a2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc2; syscall; 
0x000000000011b902: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc3; syscall; 
0x000000000011b7e2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc4; syscall; 
0x000000000011b992: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc5; syscall; 
0x000000000011e532: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xfe; syscall; 
0x00000000000d984b: inc edi; add ebp, dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d953e: inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d9bf9: inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000076684: inc edi; test dword ptr [rax], ebp; idiv edi; call qword ptr [rax]; 
0x000000000005e972: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000000661a6: inc esi; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000007b2f4: inc esi; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x00000000000b9e69: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b9e66: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b9e63: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000058dea: insb byte ptr [rdi], dx; adc eax, 0xc1dee800; std; jmp qword ptr [rsi + 0x66]; 
0x000000000017d4d4: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000181170: insb byte ptr [rdi], dx; add dword ptr [rcx], 0; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001103e1: insb byte ptr [rdi], dx; and al, 0x1c; add ecx, ebp; paddw mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x000000000014eca5: insb byte ptr [rdi], dx; and al, 0x3c; add dword ptr [rax + rbp*4 + 0x49], esi; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000014c04b: insb byte ptr [rdi], dx; and al, 0x3c; add dword ptr [rsi + 0x49], esi; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000042bd3: insb byte ptr [rdi], dx; and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x00000000000cebcf: insb byte ptr [rdi], dx; and al, 0xe8; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042b19: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000f4dfd: insb byte ptr [rdi], dx; and al, 4; pop r12; pop r13; pop r14; ret; 
0x0000000000042cb9: insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x0000000000042c19: insb byte ptr [rdi], dx; and al, 8; fscale; fstp st(1); ret; 
0x0000000000042b8b: insb byte ptr [rdi], dx; and al, 8; fsubrp st(1); ret; 
0x0000000000042aba: insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000000e1900: insb byte ptr [rdi], dx; and eax, 0x19eb0010; nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000146999: insb byte ptr [rdi], dx; cld; dec dword ptr [rcx - 0x75]; cmp byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x00000000000fe39a: insb byte ptr [rdi], dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000010981f: insb byte ptr [rdi], dx; lea rdx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095f3: insb byte ptr [rdi], dx; lea rdx, [rip + 0xa41ed]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000014bd78: insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x0000000000027290: insb byte ptr [rdi], dx; or eax, 0xc0890017; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000159f70: insb byte ptr [rdi], dx; ret 0xf66; 
0x00000000001966f1: insb byte ptr [rdi], dx; ret; 
0x000000000009450f: insb byte ptr [rdi], dx; rol byte ptr [rcx + 0xf], 0x11; xor byte ptr [rax + 8], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000155d16: insb byte ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x47; or byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000029dae: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; add rsp, 0x18; ret; 
0x0000000000113a12: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; and al, 0x18; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ef5b8: insb byte ptr [rdi], dx; sbb al, byte ptr [rip - 0x7cb7ac8b]; ret; 
0x0000000000074b4c: insb byte ptr [rdi], dx; sbb eax, 0x83480000; ret 0x4817; 
0x000000000013c8a0: insb byte ptr [rdi], dx; sub edi, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000180140: insd dword ptr [rdi], dx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a0010: insd dword ptr [rdi], dx; add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000181040: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000012ac38: insd dword ptr [rdi], dx; call 0x4c9301c7; mov edx, esi; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000009e59f: insd dword ptr [rdi], dx; dec byte ptr [rax + rax]; cmovne rax, rdx; ret; 
0x000000000005b46f: insd dword ptr [rdi], dx; jno 0x5b485; add cl, ch; lahf; loope 0x5b476; jmp qword ptr [rsi + 0xf]; 
0x00000000000c9d5f: insd dword ptr [rdi], dx; mov dl, 0xf6; jmp qword ptr [rsi + 0x66]; 
0x00000000000f829f: insd dword ptr [rdi], dx; mov edi, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000010d0f4: insd dword ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d084: insd dword ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x00000000000bb44f: insd dword ptr [rdi], dx; or eax, 0xf9834800; add al, 0x48; cmovne eax, edx; ret; 
0x0000000000048a2c: insd dword ptr [rdi], dx; out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000012e3cb: insd dword ptr [rdi], dx; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000129acf: insd dword ptr [rdi], dx; ret; 
0x0000000000086394: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000090acd: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000015aa9f: insd dword ptr [rdi], dx; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000b5c0f: insd dword ptr [rdi], dx; str word ptr [r11 + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69e3: insd dword ptr [rdi], dx; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000015c19f: insd dword ptr [rdi], dx; xor ch, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000094347: insd dword ptr [rdi], dx; xor dl, byte ptr [rip - 0x3b7cb800]; sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000015035f: int 0; add byte ptr [rax], al; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000dcd5f: int 0; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000008a2df: int 0x1a; or al, byte ptr [rax]; add rsp, 0x80; ret; 
0x00000000000b9092: int 0x4c; lea ebx, [rip + 0xf1e9a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7202: int 0x4c; lea ebx, [rip + 0xf3b56]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b52: int 0x4c; lea ebx, [rip + 0xf5026]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000011d92a: int 0x53; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi; 
0x000000000008c2a7: int 0x80; 
0x000000000008c2a7: int 0x80; cmp esi, 2; cmove edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000015196f: int 0x82; or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x0000000000043c7e: int 0x90; jmp rdx; 
0x000000000009d4ef: int 0xa1; adc al, 0; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000010d664: int 0xd; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 3]; syscall; 
0x000000000015e624: int 0xe8; out 0xb, al; std; jmp qword ptr [rsi + 0xf]; 
0x000000000012a5d4: int 0xf1; jmp qword ptr [rsi + 0xf]; 
0x00000000000f8508: int 0xf2; dec dword ptr [rax - 0x77]; ret; 
0x000000000012d2f8: int 0xf8; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ccbe; cmove rax, rdx; ret; 
0x000000000012e6d7: int 0xf8; jmp qword ptr [rsi + 0xf]; 
0x00000000000d0b83: int 0xf; pushfq; ret 0x3949; 
0x0000000000142424: int 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000132414: int 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000018bc2f: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000005ce86: int 9; ret; 
0x000000000007ad37: int1; adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x000000000016a0b7: int1; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000049c1a: int1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000010197b: int1; and al, 0xe; add byte ptr [rcx - 9], al; fsub dword ptr [rsp + rax*2 - 0x77]; add byte ptr [rax - 1], bh; ret; 
0x00000000001200fe: int1; and cl, byte ptr [rcx]; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000a8ba8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000018da51: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000010f15d: int1; dec dword ptr [rax + 0x39]; ret; 
0x0000000000114eec: int1; dec dword ptr [rax - 0x77]; add eax, 0xd566b; add rsp, 8; ret; 
0x0000000000115096: int1; dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000110249: int1; dec dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000110050: int1; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x0000000000114bc8: int1; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001108c6: int1; dec dword ptr [rax - 0x77]; ret; 
0x000000000010a0e3: int1; dec dword ptr [rax - 0x7d]; ret; 
0x000000000010ef3a: int1; dec dword ptr [rbp + rcx*4 + 0x2c]; sub byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x000000000010f631: int1; dec dword ptr [rcx - 0x73]; push rdi; add dword ptr [rax + 0x39], ecx; ret 0xd72; 
0x000000000010c3af: int1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001112d0: int1; jmp qword ptr [rsi + 0x44]; 
0x0000000000110d8f: int1; jmp qword ptr [rsi + 0x66]; 
0x0000000000107278: int1; jmp qword ptr [rsi + 0xf]; 
0x000000000011008c: int1; jmp qword ptr [rsi + 3]; 
0x0000000000135dfc: int1; jmp qword ptr [rsi - 0x77]; 
0x0000000000110dc3: int1; jmp qword ptr [rsi - 0x7d]; 
0x000000000007edcc: int1; jmp rax; 
0x00000000000ba5f5: int1; jmp rcx; 
0x0000000000188633: int1; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000007e253: int1; lea rax, [rip + 0x12bcc5]; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e293: int1; lea rax, [rip + 0x12bd85]; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1e3: int1; lea rdi, [rip + 0x12bfb5]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e101: int1; lea rdi, [rip + 0x12c097]; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df7b: int1; lea rdi, [rip + 0x12c21d]; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007de4b: int1; lea rdi, [rip + 0x12c34d]; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000010b37b: int1; mov cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000007d147: int1; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0bf: int1; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd7: int1; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec7: int1; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000000ba73a: int1; mov eax, eax; ret; 
0x000000000010193a: int1; mov eax, ecx; syscall; 
0x000000000007e1ab: int1; mov esi, 0x63480012; add al, 0x88; add rax, rdx; jmp rax; 
0x000000000016aacb: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165eff: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000147fdc: int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000016aac3: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000166077: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166093: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000015143a: int1; mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x00000000001605c7: int1; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x0000000000027a44: int1; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x00000000000bbfb1: int1; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000007e164: int1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000014bcd5: int1; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000018fa13: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000000baf79: int1; or al, 0; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x000000000011e27b: int1; pop rbx; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000005522e: int1; pop rbx; ret; 
0x0000000000110e43: int1; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000028e4b: int1; ret 0xffff; 
0x00000000000bb14e: int1; ret; 
0x0000000000044c79: int1; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008482b: int1; sbb eax, 0xc7480016; ret 0xffff; 
0x0000000000148023: int1; shr ch, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000127b75: int1; shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000018fa17: int1; sub eax, edx; ret; 
0x0000000000188629: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b79: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000186b83: int1; vzeroupper; ret; 
0x0000000000147a1b: int1; xlatb; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000014c806: int1; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000014c826: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f256: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e916: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc36: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000a085e: int1; xor eax, eax; ret; 
0x0000000000142639: iretd; adc dword ptr [rax + rcx*2 + 0x33], esp; cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000182e9d: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000016c717: iretd; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a6aea: iretd; add byte ptr [rax - 0x78], 0x7d; ret 0x2bf; 
0x00000000000a286c: iretd; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x000000000013a74d: iretd; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x000000000018599e: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000009ceb6: iretd; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000032b0d: iretd; add eax, 0x1f0f0000; add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000b911f: iretd; add rsi, rcx; lea r11, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b728f: iretd; add rsi, rcx; lea r11, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bdf: iretd; add rsi, rcx; lea r11, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a734d: iretd; call qword ptr [rax]; 
0x0000000000047954: iretd; call rdx; 
0x000000000012d178: iretd; clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ce5e; cmove rax, rdx; ret; 
0x0000000000127bf2: iretd; cmovne eax, esi; ret; 
0x00000000000b00a3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000110f45: iretd; int1; jmp qword ptr [rsi - 0x7d]; 
0x00000000000d1f3d: iretd; mov ch, 0xfb; dec dword ptr [rax + 0x39]; ret; 
0x000000000008a2f2: iretd; mov dword ptr [rdi], ecx; ret; 
0x000000000010c909: iretd; mov eax, 0x103; syscall; 
0x000000000018ce6d: iretd; mov esi, 0x63490002; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000002835b: iretd; mov qword ptr [rbp - 0x70], rcx; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x00000000000a8c72: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000181786: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000008d2e2: iretd; ret; 
0x00000000000e1899: iretd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d398: iretd; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000014d93d: iretd; sbb dh, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000026ec4: iretd; sbb eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000152270: iretd; std; jmp qword ptr [rsi + 0x66]; 
0x000000000011d931: iretd; sub rsp, 8; call rsi; 
0x000000000015589c: jmp qword ptr [rax + 0x40]; 
0x00000000001558a4: jmp qword ptr [rax + 0x48]; 
0x0000000000100315: jmp qword ptr [rax + 4]; 
0x0000000000154584: jmp qword ptr [rax + 8]; 
0x00000000000c25ad: jmp qword ptr [rax - 7]; 
0x000000000003a7e6: jmp qword ptr [rax]; 
0x0000000000068e15: jmp qword ptr [rbp - 0x17]; 
0x00000000000686c9: jmp qword ptr [rbp - 0x75]; 
0x00000000000686b9: jmp qword ptr [rbp]; 
0x00000000001486e9: jmp qword ptr [rbx + 0x76]; 
0x00000000000dbf77: jmp qword ptr [rbx + 0xf]; 
0x0000000000100301: jmp qword ptr [rbx + 4]; 
0x00000000001501ba: jmp qword ptr [rbx]; 
0x000000000005cf4f: jmp qword ptr [rcx]; 
0x000000000005eca2: jmp qword ptr [rdi + 0x44]; 
0x000000000011fb66: jmp qword ptr [rdi + 0x6d]; 
0x000000000005efa0: jmp qword ptr [rdi + 0x75]; 
0x00000000001080fc: jmp qword ptr [rdi]; 
0x00000000000321e4: jmp qword ptr [rdx + 0x16]; 
0x000000000018d772: jmp qword ptr [rdx + 0x51]; 
0x000000000018d8d3: jmp qword ptr [rdx + 0x71]; 
0x00000000001240cc: jmp qword ptr [rdx + 0xc]; 
0x000000000010030d: jmp qword ptr [rdx + 4]; 
0x000000000018d88b: jmp qword ptr [rdx - 0x2f]; 
0x00000000000ff015: jmp qword ptr [rdx - 0xe]; 
0x000000000018d3d1: jmp qword ptr [rdx - 0xf]; 
0x0000000000064b88: jmp qword ptr [rdx]; 
0x0000000000027165: jmp qword ptr [rsi + 0x2e]; 
0x000000000005019f: jmp qword ptr [rsi + 0x3d]; 
0x00000000000d0395: jmp qword ptr [rsi + 0x41]; 
0x000000000005eebb: jmp qword ptr [rsi + 0x44]; 
0x000000000013bf26: jmp qword ptr [rsi + 0x45]; 
0x0000000000029223: jmp qword ptr [rsi + 0x66]; 
0x0000000000027389: jmp qword ptr [rsi + 0xf]; 
0x000000000011008d: jmp qword ptr [rsi + 3]; 
0x00000000001003db: jmp qword ptr [rsi + 4]; 
0x0000000000103865: jmp qword ptr [rsi - 0x3f]; 
0x00000000000263ed: jmp qword ptr [rsi - 0x70]; 
0x00000000000a71c9: jmp qword ptr [rsi - 0x77]; 
0x000000000005de0f: jmp qword ptr [rsi - 0x7b]; 
0x00000000000310d0: jmp qword ptr [rsi - 0x7d]; 
0x000000000005da08: jmp qword ptr [rsi - 0x7f]; 
0x000000000005def5: jmp qword ptr [rsi]; 
0x0000000000026eb5: jmp rax; 
0x000000000004c387: jmp rbx; 
0x00000000000a6fe4: jmp rcx; 
0x00000000000418a7: jmp rdi; 
0x000000000004179c: jmp rdx; 
0x0000000000032c7d: jmp rsi; 
0x00000000000616a7: jmp rsp; 
0x00000000001139bf: jno 0x1139c1; add byte ptr [rax], al; syscall; 
0x0000000000163a0b: jno 0x163a61; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018927c: jno 0x18925e; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000001893af: jno 0x189391; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bd5e: jno 0x18bd67; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018d400: jno 0x18d400; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d63a: jno 0x18d63a; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d7a1: jno 0x18d7a9; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d8f1: jno 0x18d96f; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d8f8: jno 0x18d976; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d8ff: jno 0x18d97d; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d906: jno 0x18d984; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000035493: jno 0x3547e; sbb al, byte ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000044018: jno 0x44092; movups xmmword ptr [rcx + 0x88], xmm7; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000441fb: jno 0x441f9; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000485fb: jno 0x485b5; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000056fb4: jno 0x56fff; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000005b470: jno 0x5b485; add cl, ch; lahf; loope 0x5b476; jmp qword ptr [rsi + 0xf]; 
0x0000000000081ee6: jno 0x81f30; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000082e5e: jno 0x82e8a; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000085764: jno 0x8576a; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000008589a: jno 0x8589d; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000008d323: jno 0x8d326; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000008d413: jno 0x8d416; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000009cd60: jno 0x9cd64; lea rax, [rip + 0x1b197]; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x000000000009ce10: jno 0x9ce14; lea rax, [rip + 0xa7a7]; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009ce80: jno 0x9ce84; lea rax, [rip + 0x18087]; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009d360: jno 0x9d364; lea rax, [rip + 0xa157]; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000009d420: jno 0x9d424; lea rax, [rip + 0xa147]; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009e4e0: jno 0x9e4e4; lea rax, [rip + 0x16b07]; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009e540: jno 0x9e544; lea rax, [rip + 0x8fc7]; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x00000000000a01db: jno 0xa022b; clc; dec dword ptr [rcx - 0x77]; ret 0xcb8; 
0x00000000000ba244: jno 0xba236; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba332: jno 0xba324; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bad90: jno 0xbad94; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x00000000000bff2a: jno 0xbff25; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000bfffb: jno 0xc006d; stc; dec dword ptr [rcx - 0x39]; ret 0xc001; 
0x00000000000cea69: jno 0xceaea; and al, 0x48; lea eax, [rip + 0x118d8d]; add rsp, 8; ret; 
0x00000000000dde52: jno 0xdde48; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000e3a14: jno 0xe3a13; dec dword ptr [rax - 0x77]; ret 0x1e9; 
0x000000000010ed0f: jnp 0x10ed29; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x0000000000114257: jnp 0x11425a; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000114307: jnp 0x11430a; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000011dbe1: jnp 0x11dbe3; add byte ptr [rax], al; syscall; 
0x000000000011f641: jnp 0x11f628; or byte ptr [rax], al; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000126224: jnp 0x12624e; add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000012c9e1: jnp 0x12c9a5; or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012d131: jnp 0x12d19a; add eax, dword ptr [rax]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012df3f: jnp 0x12dec4; out dx, eax; jmp qword ptr [rsi + 0x2e]; 
0x000000000013616a: jnp 0x136173; add byte ptr [rbx + 0x4804c244], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000014e963: jnp 0x14e9cd; call rax; 
0x000000000014f403: jnp 0x14f45d; call rax; 
0x0000000000156291: jnp 0x156222; std; jmp qword ptr [rsi + 0x66]; 
0x000000000015d618: jnp 0x15d606; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; imul eax, dword ptr [rcx], 0x89480000; ret; 
0x000000000015fbec: jnp 0x15fbfd; xchg eax, esp; ret 0xb60f; 
0x000000000015fd0c: jnp 0x15fd1d; xchg eax, esp; ret 0xb60f; 
0x0000000000196c99: jnp 0x196c81; call 0x387c9f; ret; 
0x0000000000044242: jnp 0x44252; add byte ptr [rsi + 8], bh; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x0000000000044266: jnp 0x44276; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000047bdb: jnp 0x47be5; call rax; 
0x0000000000052e61: jnp 0x52e63; add byte ptr [rax], al; call rax; 
0x000000000009c493: jnp 0x9c4dd; mov rsi, r13; call rax; 
0x000000000009c532: jnp 0x9c57c; call rax; 
0x00000000000dc871: jnp 0xdc8ce; add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x1075f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e2817: jnp 0xe2829; add byte ptr [rbp - 0x47d58a40], al; push 0; add byte ptr [rax], al; syscall; 
0x00000000000e5aec: jnp 0xe5afd; xchg eax, esp; ret 0xb60f; 
0x00000000000e5c0c: jnp 0xe5c1d; xchg eax, esp; ret 0xb60f; 
0x00000000000ed2e9: jnp 0xed350; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xd201; 
0x00000000000f93d5: jnp 0xf940b; or eax, dword ptr [rax]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000ff023: jnp 0xff04d; call 0x25318; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000007e75c: jnp 0xffffffff89497876; adc cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000044b24: jnp 0xffffffffbad6d041; add dword ptr [rax], eax; add byte ptr [rax], al; cmove eax, edx; ret; 
0x000000000010c4f4: jns 0x10c503; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010c4f3: jns 0x10c56e; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9f3: jns 0x10ca69; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d0f3: jns 0x10d162; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6f3: jns 0x10d75c; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f3: jns 0x1141f1; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114714: jns 0x114719; mov byte ptr [rbx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000011d9f3: jns 0x11da59; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbf3: jns 0x11dc57; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dcf3: jns 0x11dd56; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e1f3: jns 0x11e251; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e4f3: jns 0x11e54e; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7f3: jns 0x11e84b; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eaf3: jns 0x11eb48; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebf3: jns 0x11ec47; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0f3: jns 0x11f142; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000134317: jns 0x13437f; and r11d, 0x840f2000; ret; 
0x0000000000138ce5: jns 0x138d2f; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000001500f6: jns 0x150141; mov eax, dword ptr [rsi + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000015467e: jns 0x1546c8; mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000015476e: jns 0x1547b8; mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000015485e: jns 0x1548a8; mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000015494e: jns 0x154998; mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000164703: jns 0x16474c; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674c3: jns 0x1674e0; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000182d47: jns 0x182dac; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d98: jns 0x182dfd; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182e97: jns 0x182efc; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183036: jns 0x18309b; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183287: jns 0x1832ec; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000183428: jns 0x18348d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183527: jns 0x18358c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183578: jns 0x1835dd; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183677: jns 0x1836dc; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183a67: jns 0x183acc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000183d58: jns 0x183dbd; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183e57: jns 0x183ebc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000189281: jns 0x189243; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000001893b4: jns 0x189376; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018d407: jns 0x18d408; ret; 
0x000000000018d641: jns 0x18d642; ret; 
0x000000000018d7a8: jns 0x18d7b1; ret; 
0x000000000018e049: jns 0x18e049; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000018e1d4: jns 0x18e1d4; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000028413: jns 0x2846a; adc eax, dword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x0000000000043df3: jns 0x43df5; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000046bb3: jns 0x46b9a; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000005c195: jns 0x5c15d; or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000075d53: jns 0x75d47; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000901f3: jns 0x90231; adc eax, 0x20c98300; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000093533: jns 0x93542; adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x150d4e; ret; 
0x00000000000ba248: jns 0xba22a; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba336: jns 0xba318; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000dc0e3: jns 0xdc0c7; adc byte ptr [rax], al; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dd9e0: jns 0xdd9d6; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000e2941: jns 0xe2943; add byte ptr [rax], al; syscall; 
0x00000000000e3baa: jns 0xe3baf; add byte ptr [rax - 0x77], cl; ret 0x6be9; 
0x00000000000e3c55: jns 0xe3c5a; add byte ptr [rax - 0x77], cl; ret 0xc0e9; 
0x00000000000fa0bb: jns 0xfa0e6; or eax, dword ptr [rax]; movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000b5db8: jns 0xffffffff83546515; call 0x7f98a5ce; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b9516: jns 0xffffffffed3b9873; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b9578: jns 0xffffffffed3b9cd5; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b9598: jns 0xffffffffed3b9df5; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000010b7b4: jo 0x10b7be; xor eax, eax; mov dword ptr [rbx + 4], edx; add rsp, 0x10; pop rbx; ret; 
0x000000000010b8c4: jo 0x10b8d5; adc dword ptr [rdi + 0x78], edi; ret; 
0x000000000010bab7: jo 0x10bac8; sub dword ptr [rsp + 0x80], eax; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010c239: jo 0x10c24a; adc dword ptr [rdi + 0xf8], edi; ret; 
0x0000000000112f0b: jo 0x112f68; ret; 
0x000000000011a481: jo 0x11a479; jmp qword ptr [rsi + 0x66]; 
0x000000000012b244: jo 0x12b255; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b438: jo 0x12b449; adc dword ptr [rbp - 0x78], edi; call rax; 
0x0000000000145a3f: jo 0x145a9c; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000014c101: jo 0x14c11b; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014cdf4: jo 0x14cdff; add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x000000000014eb68: jo 0x14ebae; mov dword ptr [rbx + 0x48], esp; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014eb7e: jo 0x14ebc8; mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000014ed55: jo 0x14ed6f; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014f073: jo 0x14f0c1; mov edi, esp; call qword ptr [rax + 0x20]; 
0x000000000015c196: jo 0x15c19d; add al, ch; xor cl, byte ptr [rsi + 0x6de8ffed]; xor ch, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000035453: jo 0x3549d; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000003e28f: jo 0x3e28f; jmp qword ptr [rsi + 0xf]; 
0x00000000000452cc: jo 0x4530e; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000045d3c: jo 0x45d4c; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x00000000000472d6: jo 0x472f8; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000008748e: jo 0x874d0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087e62: jo 0x87e9c; call qword ptr [rbp + 0x18]; 
0x0000000000088e6d: jo 0x88ea7; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000008ee34: jo 0x8ee7e; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008ee7f: jo 0x8eec9; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009d3b0: jo 0x9d3a9; ret 0; 
0x00000000000bb686: jo 0xbb6e3; pop rbp; pop r12; ret; 
0x00000000000bbaae: jo 0xbbb0b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000bbca6: jo 0xbbd03; pop rbp; pop r12; ret; 
0x00000000000bfffc: jo 0xbfff7; dec dword ptr [rcx - 0x39]; ret 0xc001; 
0x00000000000cf229: jo 0xcf290; mov qword ptr [rsp + 0xe0], rdx; lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x00000000000e2a01: jo 0xe2a03; add byte ptr [rax], al; syscall; 
0x00000000000ebd34: jo 0xebd1a; add byte ptr [rax + 1], cl; ret 0xf66; 
0x00000000000f49d4: jo 0xf4959; ret 0x4801; 
0x00000000000f9165: jo 0xf90ea; ret 0x4801; 
0x00000000000f959e: jo 0xf9523; ret 0x4801; 
0x00000000000fa6d4: jo 0xfa659; ret 0x4901; 
0x00000000001177ea: jp 0x117819; or eax, 0xc4834800; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000011dbb1: jp 0x11dbb3; add byte ptr [rax], al; syscall; 
0x000000000012a5b5: jp 0x12a607; mov rsi, rdx; call rax; 
0x000000000012d657: jp 0x12d648; jmp qword ptr [rsi + 0xf]; 
0x00000000001477f0: jp 0x1477f0; jmp qword ptr [rsi + 0x66]; 
0x0000000000147fdf: jp 0x148039; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000015e692: jp 0x15e69f; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000015f661: jp 0x15f664; add byte ptr [rdx + rbp + 0xf], dh; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x0000000000187f32: jp 0x187f35; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000044e65: jp 0x44dea; clc; dec dword ptr [rdi]; xchg eax, ebp; ret 0xd321; 
0x0000000000045d38: jp 0x45d48; mov byte ptr [rax + 0xe], sil; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x00000000000869cd: jp 0x86a17; mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000000d8e96: jp 0xd8ec4; or eax, 0x48c28900; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000e19ce: jp 0xe19af; or al, 0; mov eax, 0x142; syscall; 
0x00000000000e5561: jp 0xe5564; add byte ptr [rdx + rbp + 0xf], dh; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x000000000014dd6d: lahf; adc al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x00000000000a2577: lahf; adc al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret; 
0x0000000000181285: lahf; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6610; 
0x000000000017f4e0: lahf; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000010bd2b: lahf; add eax, dword ptr [rax]; add dh, dh; ret 0xf20; 
0x0000000000168e5d: lahf; add eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000094fe5: lahf; call qword ptr [rcx]; 
0x000000000007b0f4: lahf; cli; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000196ab0: lahf; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000014b0e2: lahf; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014b337: lahf; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000005b474: lahf; loope 0x5b476; jmp qword ptr [rsi + 0xf]; 
0x000000000013a7d8: lahf; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001837cd: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000015b5cd: lahf; or byte ptr [rax], al; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x00000000000bb3ad: lahf; or rax, 0x450f4800; ret 0x66c3; 
0x00000000000930a6: lahf; ret 0x3949; 
0x000000000005cb1a: lahf; ret 0x87e; 
0x000000000005d278: lahf; ret 0x8f0f; 
0x0000000000062f6d: lahf; ret 0xc; 
0x0000000000069a98: lahf; ret 0xd629; 
0x000000000006800f: lahf; ret 0xd729; 
0x00000000000931c2: lahf; ret 0xdfe9; 
0x000000000007546a: lahf; ret; 
0x00000000000360c5: lahf; sbb eax, dword ptr [rax]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008c147: lahf; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000160d3d: lahf; xchg eax, ebp; or byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000008b82d: lahf; xchg eax, edi; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000153c45: lahf; xor byte ptr [rsi], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000183e5d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000114fe3: lcall [r8 + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x0000000000117e37: lcall [rax + 0x48]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x0000000000114fe4: lcall [rax + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000013a5cd: lcall [rbp + 0x41]; pop rsp; pop r13; pop r14; ret; 
0x0000000000133de0: lcall [rbp + 0x41]; pop rsp; pop r13; ret; 
0x000000000019695f: lcall [rbp + 0x48]; mov dword ptr [rip + 0x522fc], 0; ret; 
0x000000000009e6e5: lcall [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000196587: lcall [rbx + 0x48]; mov dword ptr [rip + 0x5048c], 0; ret; 
0x00000000001967a2: lcall [rbx + 0x48]; mov dword ptr [rip + 0x510e1], 0; ret; 
0x00000000000dbea3: lcall [rbx + 0x5d]; lea rax, [rax + rdx*8]; ret; 
0x0000000000142fdc: lcall [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000008d775: lcall [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000046f52: lcall [rbx + 0x5d]; pop r12; ret; 
0x00000000000c5333: lcall [rbx + 0x5d]; pop r14; ret; 
0x0000000000084ab0: lcall [rbx + 0x5d]; ret; 
0x0000000000063a04: lcall [rbx - 0x3d]; nop word ptr [rax + rax]; mov eax, 0x52; syscall; 
0x0000000000047cc3: lcall [rbx - 0x7b]; ror byte ptr [rdi], 0x48; ret 0xfc3; 
0x0000000000033a4e: lcall [rdx]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000016b24c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016b4d6: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b466: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b3f6: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b386: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b316: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b2a6: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b8c6: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b856: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b7e6: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b776: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b706: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b696: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b626: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b5b6: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b546: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016aa36: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016b1dc: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b15c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b0cc: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b04c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016afcc: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016af4c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aecc: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ae4c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016adcc: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ad4c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016accc: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ac4c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016abbc: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ab2c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa9c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa2c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016b256: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016b1e1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b161: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b0d1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b051: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016afd1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016af51: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aed1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ae51: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016add1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ad51: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016acd1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ac51: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016abc1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ab31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aaa1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b4db: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b46b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b3fb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b38b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b31b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b2ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b8cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b85b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b7eb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b77b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b70b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b69b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b62b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b5bb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b54b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000008732f: lea eax, [r8 - 1]; ret; 
0x000000000013b14b: lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x00000000000cc9d0: lea eax, [rax + rax - 1]; ret; 
0x0000000000101c1b: lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000aa7c4: lea eax, [rax + rdi + 0x10]; ret; 
0x00000000000aa7d4: lea eax, [rax + rdi + 0x20]; ret; 
0x00000000000aaca4: lea eax, [rax + rdi + 0x30]; ret; 
0x00000000000aa7a4: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000013dfc7: lea eax, [rax + rdx*8]; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x00000000000dbea7: lea eax, [rax + rdx*8]; ret; 
0x0000000000087330: lea eax, [rax - 1]; ret; 
0x000000000009a1fb: lea eax, [rax - 8]; ret; 
0x000000000010d474: lea eax, [rax]; add byte ptr [rax], al; add rsp, 0x68; ret; 
0x000000000011aa9f: lea eax, [rax]; add byte ptr [rax], al; call rax; 
0x0000000000113251: lea eax, [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e67b1: lea eax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e66c1: lea eax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret; 
0x000000000013b300: lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x000000000008561a: lea eax, [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x000000000013b14c: lea eax, [rcx + rax + 2]; pop rbx; ret; 
0x0000000000048530: lea eax, [rcx + rax*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000b00ad: lea eax, [rcx + rsi]; ret; 
0x00000000000b9c54: lea eax, [rcx - 1]; ret; 
0x00000000000b6bac: lea eax, [rdi + 0x10]; ret; 
0x00000000000b6bc1: lea eax, [rdi + 0x11]; ret; 
0x00000000000b6bdf: lea eax, [rdi + 0x12]; ret; 
0x00000000000b6bff: lea eax, [rdi + 0x13]; ret; 
0x00000000000b6c22: lea eax, [rdi + 0x14]; ret; 
0x00000000000b6c41: lea eax, [rdi + 0x15]; ret; 
0x00000000000b6c61: lea eax, [rdi + 0x16]; ret; 
0x00000000000b6c81: lea eax, [rdi + 0x17]; ret; 
0x00000000000b6ca4: lea eax, [rdi + 0x18]; ret; 
0x00000000000b6cc9: lea eax, [rdi + 0x19]; ret; 
0x00000000000b6ce7: lea eax, [rdi + 0x1a]; ret; 
0x00000000000b6d07: lea eax, [rdi + 0x1b]; ret; 
0x00000000000b6d23: lea eax, [rdi + 0x1c]; ret; 
0x00000000000b6d43: lea eax, [rdi + 0x1d]; ret; 
0x00000000000b6d63: lea eax, [rdi + 0x1e]; ret; 
0x00000000000b6d83: lea eax, [rdi + 0x1f]; ret; 
0x00000000000b7be3: lea eax, [rdi + 0x20]; ret; 
0x00000000000b7e49: lea eax, [rdi + 0x40]; ret; 
0x0000000000188d49: lea eax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000188eec: lea eax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b6afd: lea eax, [rdi + 0xa]; ret; 
0x00000000000b6b1d: lea eax, [rdi + 0xb]; ret; 
0x00000000000b6b3f: lea eax, [rdi + 0xc]; ret; 
0x00000000000b6b5f: lea eax, [rdi + 0xd]; ret; 
0x00000000000b6b7f: lea eax, [rdi + 0xe]; ret; 
0x00000000000b6b99: lea eax, [rdi + 0xf]; ret; 
0x0000000000026fa6: lea eax, [rdi + 1]; mov byte ptr [rdi], 0x2f; lea rdi, [rax + 1]; mov byte ptr [rax], 0x2f; mov byte ptr [rdi], 0; ret; 
0x00000000000b6a47: lea eax, [rdi + 1]; ret; 
0x00000000001885a7: lea eax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b6a5a: lea eax, [rdi + 2]; ret; 
0x00000000001885bb: lea eax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b6a65: lea eax, [rdi + 3]; ret; 
0x00000000001885d5: lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b6a78: lea eax, [rdi + 4]; ret; 
0x00000000000b6a8d: lea eax, [rdi + 5]; ret; 
0x00000000000b6aab: lea eax, [rdi + 6]; ret; 
0x00000000000b6ab7: lea eax, [rdi + 7]; ret; 
0x00000000000b6aca: lea eax, [rdi + 8]; ret; 
0x000000000013a470: lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000b6adf: lea eax, [rdi + 9]; ret; 
0x00000000000aa7f9: lea eax, [rdi + rax + 0x10]; ret; 
0x000000000018a767: lea eax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c57: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000aa809: lea eax, [rdi + rax + 0x20]; ret; 
0x00000000000aa703: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000018a787: lea eax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c77: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a7c5: lea eax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185cb5: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000013a911: lea eax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x0000000000186005: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000a71f5: lea eax, [rdi + rax - 1]; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a720d: lea eax, [rdi + rax - 1]; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a71c6: lea eax, [rdi + rax - 1]; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a7199: lea eax, [rdi + rax - 1]; ret; 
0x00000000000afadc: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018a62d: lea eax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185b1d: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000afcf7: lea eax, [rdi + rax]; ret; 
0x0000000000188ca3: lea eax, [rdi + rax]; vzeroupper; ret; 
0x00000000001885ed: lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000013b5f3: lea eax, [rdi + rsi + 8]; ret; 
0x0000000000034dfc: lea eax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x00000000000affa9: lea eax, [rdi + rsi]; ret; 
0x00000000000cde1e: lea eax, [rdi - 0x10]; ret; 
0x00000000000cdf81: lea eax, [rdi - 0xc]; ret; 
0x000000000005f460: lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x00000000000cdfa1: lea eax, [rdi - 4]; ret; 
0x00000000000cdf91: lea eax, [rdi - 8]; ret; 
0x00000000000b6a33: lea eax, [rdi]; ret; 
0x0000000000188525: lea eax, [rdi]; vzeroupper; ret; 
0x000000000017856d: lea eax, [rdx + 0xa]; ret; 
0x000000000017858d: lea eax, [rdx + 0xb]; ret; 
0x00000000001785af: lea eax, [rdx + 0xc]; ret; 
0x00000000001785cf: lea eax, [rdx + 0xd]; ret; 
0x000000000017a837: lea eax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785ef: lea eax, [rdx + 0xe]; ret; 
0x000000000017847f: lea eax, [rdx + 0xf]; ret; 
0x00000000001784a7: lea eax, [rdx + 1]; ret; 
0x00000000001784bd: lea eax, [rdx + 2]; ret; 
0x00000000001784d5: lea eax, [rdx + 3]; ret; 
0x00000000001784eb: lea eax, [rdx + 4]; ret; 
0x00000000001784fd: lea eax, [rdx + 5]; ret; 
0x000000000017851b: lea eax, [rdx + 6]; ret; 
0x000000000017a8e2: lea eax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178427: lea eax, [rdx + 7]; ret; 
0x000000000017852d: lea eax, [rdx + 8]; ret; 
0x000000000017854d: lea eax, [rdx + 9]; ret; 
0x00000000001211e3: lea eax, [rdx + rax*4]; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000181332: lea eax, [rdx + rcx]; sub rax, rdi; ret; 
0x000000000008731e: lea eax, [rdx + rdi]; ret; 
0x00000000000ba6b3: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000009a219: lea eax, [rdx - 0x10]; ret; 
0x0000000000044e20: lea eax, [rdx - 1]; mov dword ptr [rip + 0x19f37f], eax; mov eax, edx; ret; 
0x0000000000178495: lea eax, [rdx]; ret; 
0x00000000000a717a: lea eax, [rip + 0x1036dc]; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000a70ab: lea eax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x00000000000bb3a4: lea eax, [rip + 0x115d6]; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x00000000000bb35d: lea eax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000cea6d: lea eax, [rip + 0x118d8d]; add rsp, 8; ret; 
0x00000000000bc683: lea eax, [rip + 0x11b57]; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x00000000000bad6d: lea eax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x000000000009d46d: lea eax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x00000000000baf7d: lea eax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0fd: lea eax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x000000000007e255: lea eax, [rip + 0x12bcc5]; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e295: lea eax, [rip + 0x12bd85]; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1a9: lea eax, [rip + 0x12bef1]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007de0f: lea eax, [rip + 0x12c30b]; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000009cdb6: lea eax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x00000000000bad93: lea eax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x00000000000bad2d: lea eax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x000000000009d2cd: lea eax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000007ad34: lea eax, [rip + 0x12f166]; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x000000000009d30d: lea eax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x00000000000780e6: lea eax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077fba: lea eax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077daa: lea eax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x00000000000777ba: lea eax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000bae5d: lea eax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x000000000009d4ed: lea eax, [rip + 0x14a1cd]; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000009d4ab: lea eax, [rip + 0x14a20f]; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x000000000009e4e3: lea eax, [rip + 0x16b07]; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x00000000000339c9: lea eax, [rip + 0x17bf7d]; ret; 
0x000000000014616c: lea eax, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000009ce83: lea eax, [rip + 0x18087]; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x0000000000026c61: lea eax, [rip + 0x188824]; ret; 
0x0000000000026c71: lea eax, [rip + 0x18a6ae]; ret; 
0x00000000000536d8: lea eax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000047383: lea eax, [rip + 0x19f346]; sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000048871: lea eax, [rip + 0x1a18af]; add rsp, 8; ret; 
0x000000000009cd63: lea eax, [rip + 0x1b197]; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x0000000000033969: lea eax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000009e0e6: lea eax, [rip + 0x1b854]; cmove rax, rdx; ret; 
0x000000000009e795: lea eax, [rip + 0x1b915]; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e445: lea eax, [rip + 0x1bc45]; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2e5: lea eax, [rip + 0x1bdc5]; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000009e36a: lea eax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x000000000009d733: lea eax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d493: lea eax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009ceb3: lea eax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000012d2af: lea eax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d12f: lea eax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x00000000000a726d: lea eax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000012d1ef: lea eax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000012d28a: lea eax, [rip + 0x5bdc0]; lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1ca: lea eax, [rip + 0x5bea0]; lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d10a: lea eax, [rip + 0x5bf60]; lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d35b: lea eax, [rip + 0x5c18f]; cmove rax, rdx; ret; 
0x000000000012e6bd: lea eax, [rip + 0x5fbed]; cmp rcx, 4; cmovne rax, rdx; ret; 
0x000000000012d2d9: lea eax, [rip + 0x60ac1]; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d219: lea eax, [rip + 0x60ba1]; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d159: lea eax, [rip + 0x60c61]; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000012d399: lea eax, [rip + 0x60fb1]; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x0000000000147076: lea eax, [rip + 0x66e64]; mov ecx, eax; movsxd rdx, dword ptr [r8 + rcx*4]; add rdx, r8; jmp rdx; 
0x000000000011f63f: lea eax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015aaca: lea eax, [rip + 0x8f2b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009e543: lea eax, [rip + 0x8fc7]; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x0000000000151d29: lea eax, [rip + 0x97c51]; pop rbx; ret; 
0x0000000000151cb0: lea eax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151c49: lea eax, [rip + 0x97d39]; pop rbx; ret; 
0x0000000000151bd0: lea eax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151b69: lea eax, [rip + 0x97e31]; pop rbx; ret; 
0x0000000000151af0: lea eax, [rip + 0x97eaa]; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a91: lea eax, [rip + 0x97f29]; pop rbx; ret; 
0x0000000000151a28: lea eax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151ca5: lea eax, [rip + 0x97f95]; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bc5: lea eax, [rip + 0x98075]; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151a1d: lea eax, [rip + 0x9821d]; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x000000000015196d: lea eax, [rip + 0x982cd]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x000000000009d423: lea eax, [rip + 0xa147]; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009d363: lea eax, [rip + 0xa157]; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000014513b: lea eax, [rip + 0xa47bf]; ret; 
0x0000000000145113: lea eax, [rip + 0xa47e7]; add rsp, 8; ret; 
0x000000000009ce13: lea eax, [rip + 0xa7a7]; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009fd3d: lea eax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009d3cd: lea eax, [rip + 0xb8dd]; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x000000000012bef8: lea eax, [rip + 0xbe4d2]; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x000000000014622c: lea eax, [rip + 0xbe]; xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000009e74f: lea eax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3ff: lea eax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e29f: lea eax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x000000000009e636: lea eax, [rip + 0xcbd4]; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e204: lea eax, [rip + 0xcbf6]; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009e596: lea eax, [rip + 0xcc64]; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x0000000000117dff: lea eax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000117dab: lea eax, [rip + 0xd02ef]; pop rbp; pop r12; ret; 
0x0000000000117887: lea eax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000117828: lea eax, [rip + 0xd0802]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bb44d: lea eax, [rip + 0xd2e6d]; cmp rcx, 4; cmovne rax, rdx; ret; 
0x0000000000114bb5: lea eax, [rip + 0xd321d]; add rsp, 8; ret; 
0x000000000009e72a: lea eax, [rip + 0xea950]; lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3da: lea eax, [rip + 0xeac80]; lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e27a: lea eax, [rip + 0xeae00]; lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000009e34b: lea eax, [rip + 0xeb1af]; cmove rax, rdx; ret; 
0x000000000009e686: lea eax, [rip + 0xedc4]; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e6: lea eax, [rip + 0xee54]; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000009e779: lea eax, [rip + 0xef651]; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e429: lea eax, [rip + 0xef981]; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2c9: lea eax, [rip + 0xefb01]; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e389: lea eax, [rip + 0xeffd1]; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000009fd7d: lea eax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009afd2: lea eax, [rip - 0x118]; mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e216: lea eax, [rip - 0x12d1]; mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000009b039: lea eax, [rip - 0x17f]; mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012d37a: lea eax, [rip - 0x72f90]; cmovne rax, rdx; ret; 
0x000000000012d175: lea eax, [rip - 0x730db]; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d235: lea eax, [rip - 0x7319b]; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2f5: lea eax, [rip - 0x7327b]; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x0000000000150d22: lea eax, [rip - 0x9e28]; lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x000000000010c393: lea eax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x0000000000121a41: lea eax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000007cc77: lea eax, [rsi - 0x76b70006]; ret; 
0x0000000000088e70: lea eax, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000015337f: lea ebp, [rbx + 0x10]; xor esi, esi; mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x00000000001478f2: lea ebp, [rbx + 0x23b0]; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000001966f0: lea ebp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000000e20df: lea ebp, [rdi]; hlt; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000012aeb9: lea ebp, [rdx - 0x77000000]; ret 0x2944; 
0x000000000004639e: lea ebp, [rsi + rbp]; call rax; 
0x000000000007b42d: lea ebx, [rax]; idiv edi; dec dword ptr [rax - 0x77]; fimul word ptr [rcx + rcx*4 - 0x11]; call qword ptr [rax + 0x38]; 
0x0000000000076385: lea ebx, [rax]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000762f9: lea ebx, [rax]; idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000075b72: lea ebx, [rax]; idiv edi; dec dword ptr [rcx - 0x8cf7b]; dec dword ptr [rax - 0x77]; ret; 
0x000000000009126e: lea ebx, [rdi + 1]; call 0x8cf60; mov rax, qword ptr [rsp + 8]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000091218: lea ebx, [rdi + 1]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000018cf74: lea ebx, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cefa: lea ebx, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce6b: lea ebx, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc60: lea ebx, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb2e: lea ebx, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca68: lea ebx, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9ea: lea ebx, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c953: lea ebx, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c757: lea ebx, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c626: lea ebx, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c525: lea ebx, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b944: lea ebx, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8ca: lea ebx, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b83b: lea ebx, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b630: lea ebx, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4fe: lea ebx, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b438: lea ebx, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3ba: lea ebx, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b323: lea ebx, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b127: lea ebx, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff6: lea ebx, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee7: lea ebx, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d4f2: lea ebx, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d194: lea ebx, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d33f: lea ebx, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d014: lea ebx, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d0d7: lea ebx, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce94: lea ebx, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf57: lea ebx, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd14: lea ebx, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd7: lea ebx, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb94: lea ebx, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc58: lea ebx, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca14: lea ebx, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad7: lea ebx, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c894: lea ebx, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c957: lea ebx, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c714: lea ebx, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d7: lea ebx, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c594: lea ebx, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c657: lea ebx, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c414: lea ebx, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d7: lea ebx, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c294: lea ebx, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c357: lea ebx, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c114: lea ebx, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d7: lea ebx, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf94: lea ebx, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c057: lea ebx, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be14: lea ebx, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed7: lea ebx, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc94: lea ebx, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb1b: lea ebx, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd57: lea ebx, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd7: lea ebx, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b91c: lea ebx, [rip + 0x4ddde]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba9a: lea ebx, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b93e: lea ebx, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9de: lea ebx, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6b4: lea ebx, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a84b: lea ebx, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a534: lea ebx, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f7: lea ebx, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3b4: lea ebx, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a477: lea ebx, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a234: lea ebx, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f7: lea ebx, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0b4: lea ebx, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a178: lea ebx, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f34: lea ebx, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff7: lea ebx, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169db4: lea ebx, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e77: lea ebx, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c34: lea ebx, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf7: lea ebx, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ab4: lea ebx, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b77: lea ebx, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169934: lea ebx, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f7: lea ebx, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697b4: lea ebx, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169877: lea ebx, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169634: lea ebx, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f7: lea ebx, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694b4: lea ebx, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169577: lea ebx, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169334: lea ebx, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f7: lea ebx, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691b4: lea ebx, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016903b: lea ebx, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169277: lea ebx, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168de5: lea ebx, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168d28: lea ebx, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f7: lea ebx, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e5b: lea ebx, [rip + 0x5039f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c3d: lea ebx, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fba: lea ebx, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b72: lea ebx, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e48: lea ebx, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167b51: lea ebx, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167ab3: lea ebx, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167a01: lea ebx, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167963: lea ebx, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678b1: lea ebx, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167813: lea ebx, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167761: lea ebx, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676c3: lea ebx, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167611: lea ebx, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167573: lea ebx, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674c1: lea ebx, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167423: lea ebx, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167371: lea ebx, [rip + 0x51cc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672d3: lea ebx, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167221: lea ebx, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167188: lea ebx, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670d1: lea ebx, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167033: lea ebx, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f81: lea ebx, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ee3: lea ebx, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e31: lea ebx, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d93: lea ebx, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ce1: lea ebx, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c43: lea ebx, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b91: lea ebx, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166af3: lea ebx, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a41: lea ebx, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001669a3: lea ebx, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668f1: lea ebx, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166853: lea ebx, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001667a7: lea ebx, [rip + 0x52893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001666b6: lea ebx, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001665f7: lea ebx, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016658d: lea ebx, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016649e: lea ebx, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166264: lea ebx, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d9: lea ebx, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016618a: lea ebx, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165181: lea ebx, [rip + 0x53cf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650e3: lea ebx, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165031: lea ebx, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f93: lea ebx, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ee1: lea ebx, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e43: lea ebx, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d91: lea ebx, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cf3: lea ebx, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c41: lea ebx, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ba3: lea ebx, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164af1: lea ebx, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a53: lea ebx, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001649a1: lea ebx, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164903: lea ebx, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164851: lea ebx, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b8: lea ebx, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164701: lea ebx, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164663: lea ebx, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645b1: lea ebx, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164513: lea ebx, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164461: lea ebx, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643c3: lea ebx, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164311: lea ebx, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164273: lea ebx, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641c1: lea ebx, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164123: lea ebx, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164071: lea ebx, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fd3: lea ebx, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f21: lea ebx, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e83: lea ebx, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163dd7: lea ebx, [rip + 0x550a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce6: lea ebx, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c27: lea ebx, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bbd: lea ebx, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ace: lea ebx, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a09: lea ebx, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000fa0b9: lea ebx, [rip + 0xb2979]; movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000f93d3: lea ebx, [rip + 0xb347b]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000b991a: lea ebx, [rip + 0xf1614]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9196: lea ebx, [rip + 0xf1d98]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b916d: lea ebx, [rip + 0xf1dc1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b914d: lea ebx, [rip + 0xf1de1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9124: lea ebx, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90ff: lea ebx, [rip + 0xf1e2f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90e1: lea ebx, [rip + 0xf1e4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9061: lea ebx, [rip + 0xf1e4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9046: lea ebx, [rip + 0xf1e68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90c4: lea ebx, [rip + 0xf1e6a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9094: lea ebx, [rip + 0xf1e9a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9011: lea ebx, [rip + 0xf1e9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fe5: lea ebx, [rip + 0xf1ec9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fcf: lea ebx, [rip + 0xf1edf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fad: lea ebx, [rip + 0xf1f01]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f88: lea ebx, [rip + 0xf1f26]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f6b: lea ebx, [rip + 0xf1f43]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f04: lea ebx, [rip + 0xf1faa]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c6: lea ebx, [rip + 0xf2768]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8691: lea ebx, [rip + 0xf279d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8665: lea ebx, [rip + 0xf27c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b864f: lea ebx, [rip + 0xf27df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b862d: lea ebx, [rip + 0xf2801]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8608: lea ebx, [rip + 0xf2826]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85eb: lea ebx, [rip + 0xf2843]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8593: lea ebx, [rip + 0xf289b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7eda: lea ebx, [rip + 0xf2e80]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7def: lea ebx, [rip + 0xf2ffb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dda: lea ebx, [rip + 0xf3010]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dbb: lea ebx, [rip + 0xf302f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7306: lea ebx, [rip + 0xf3a54]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72dd: lea ebx, [rip + 0xf3a7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72bd: lea ebx, [rip + 0xf3a9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7294: lea ebx, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b726f: lea ebx, [rip + 0xf3aeb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7251: lea ebx, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b71d1: lea ebx, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7234: lea ebx, [rip + 0xf3b26]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7204: lea ebx, [rip + 0xf3b56]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70ef: lea ebx, [rip + 0xf3beb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70c1: lea ebx, [rip + 0xf3c19]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7098: lea ebx, [rip + 0xf3c42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a16: lea ebx, [rip + 0xf4238]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69e1: lea ebx, [rip + 0xf426d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b5: lea ebx, [rip + 0xf4299]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b699f: lea ebx, [rip + 0xf42af]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b697d: lea ebx, [rip + 0xf42d1]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6958: lea ebx, [rip + 0xf42f6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b693b: lea ebx, [rip + 0xf4313]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68e3: lea ebx, [rip + 0xf436b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b66ba: lea ebx, [rip + 0xf44c0]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65cf: lea ebx, [rip + 0xf463b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65ba: lea ebx, [rip + 0xf4650]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b659b: lea ebx, [rip + 0xf466f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c56: lea ebx, [rip + 0xf4f24]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c2d: lea ebx, [rip + 0xf4f4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c0d: lea ebx, [rip + 0xf4f6d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5be4: lea ebx, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bbf: lea ebx, [rip + 0xf4fbb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5ba1: lea ebx, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b21: lea ebx, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b84: lea ebx, [rip + 0xf4ff6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b54: lea ebx, [rip + 0xf5026]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a4f: lea ebx, [rip + 0xf50ab]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a21: lea ebx, [rip + 0xf50d9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f8: lea ebx, [rip + 0xf5102]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5416: lea ebx, [rip + 0xf5664]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53e1: lea ebx, [rip + 0xf5699]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53b5: lea ebx, [rip + 0xf56c5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b539f: lea ebx, [rip + 0xf56db]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b537d: lea ebx, [rip + 0xf56fd]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5358: lea ebx, [rip + 0xf5722]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b533b: lea ebx, [rip + 0xf573f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b52e3: lea ebx, [rip + 0xf5797]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000bb736: lea ecx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000008aaeb: lea ecx, [rax + 1]; mov qword ptr [rdi + 8], rcx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x000000000008a61b: lea ecx, [rax + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x00000000000bbc52: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb89e: lea ecx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000e2ff6: lea ecx, [rax + rax]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000073483: lea ecx, [rax - 0x17000006]; ret; 
0x0000000000047582: lea ecx, [rax - 0x77]; ret 0x2e66; 
0x000000000010ed0a: lea ecx, [rbx + 0x28]; mov rdi, qword ptr [rbx + 0x18]; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x00000000000807b6: lea ecx, [rbx + 0x40]; mov rdi, rbx; call rax; 
0x00000000000b52ee: lea ecx, [rbx + rcx]; jmp rcx; 
0x000000000011e26a: lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000004332f: lea ecx, [rdx + 0x17]; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000097f8a: lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000084bd6: lea ecx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000017b9e7: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000000a6fd5: lea ecx, [rip + 0x103839]; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x0000000000185a2e: lea ecx, [rip + 0x13aac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000006d4f5: lea ecx, [rip + 0x13c3b1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000006cb2c: lea ecx, [rip + 0x13cb6e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000064067: lea ecx, [rip + 0x144db3]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000018434d: lea ecx, [rip + 0x1518d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000182c74: lea ecx, [rip + 0x16866]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018116e: lea ecx, [rip + 0x1836c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017f1a9: lea ecx, [rip + 0x1a331]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017d8d4: lea ecx, [rip + 0x1bc06]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000191a60: lea ecx, [rip + 0x2821a]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000144e8c: lea ecx, [rip + 0x6902e]; and esi, 7; movsxd rax, dword ptr [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x000000000010907d: lea ecx, [rip + 0xa46a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000ee73b: lea ecx, [rip + 0xbdd3f]; movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000011787b: lea ecx, [rip + 0xd078f]; call 0x117ba0; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000121b1e: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000009d2c9: lea ecx, [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0x12edd; cmove rax, rdx; ret; 
0x000000000014617b: lea ecx, [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000089a5f: lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089965: lea ecx, [rsp + 0x28]; call rbx; 
0x0000000000145f8b: lea ecx, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001460cb: lea ecx, [rsp + 0x2c]; call qword ptr [rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000bbe5f: lea ecx, [rsp + 0x30]; call rbx; 
0x00000000000bb73a: lea ecx, [rsp + 0x38]; call rbx; 
0x00000000001516e8: lea ecx, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000014669c: lea ecx, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000750ee: lea edi, [rax + 0x4cfffff6]; mov esi, esi; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x0000000000026fad: lea edi, [rax + 1]; mov byte ptr [rax], 0x2f; mov byte ptr [rdi], 0; ret; 
0x0000000000026f96: lea edi, [rax + 1]; mov byte ptr [rdi], 0; pop rbx; pop r14; ret; 
0x00000000000a0dcf: lea edi, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000008a3cd: lea edi, [rax]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; ret; 
0x000000000014c86e: lea edi, [rbp + 0x10]; call rax; 
0x000000000007d0d8: lea edi, [rbp - 0x460]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077128: lea edi, [rbp - 0x470]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006c950: lea edi, [rbp - 0x500]; mov rdx, r15; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064968: lea edi, [rbp - 0x5e0]; mov rdx, r15; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014f402: lea edi, [rbx + 0x58]; call rax; 
0x000000000014e962: lea edi, [rbx + 0x68]; call rax; 
0x00000000000360ca: lea edi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014bc85: lea edi, [rbx + 0xc8]; call rax; 
0x00000000001605f6: lea edi, [rcx + rax]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x00000000000ba06f: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000168ddd: lea edi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000010195f: lea edi, [rdx + rax]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x0000000000068df7: lea edi, [rdx - 0x76b60001]; fucomip st(1); test dword ptr [rdx - 0x7a380001], edi; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x000000000008afdc: lea edi, [rdx]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x00000000000dc2d8: lea edi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc292: lea edi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e8: lea edi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0bb: lea edi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff8: lea edi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfcf: lea edi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbafd: lea edi, [rip + 0x10ac1d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8d49: lea edi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b99: lea edi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000080a3b: lea edi, [rip + 0x129b27]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000007e1e5: lea edi, [rip + 0x12bfb5]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e15c: lea edi, [rip + 0x12c03e]; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e103: lea edi, [rip + 0x12c097]; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df7d: lea edi, [rip + 0x12c21d]; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007de4d: lea edi, [rip + 0x12c34d]; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d565: lea edi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4d3: lea edi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009890b: lea edi, [rip + 0x14ecc7]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000092a21: lea edi, [rip + 0x154b39]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000090255: lea edi, [rip + 0x157305]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000004178f: lea edi, [rip + 0x16342b]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000837f1: lea edi, [rip + 0x163d29]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047607: lea edi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x000000000005563c: lea edi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052f7b: lea edi, [rip + 0x19431f]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x000000000003950b: lea edi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394ab: lea edi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375fb: lea edi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037591: lea edi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003745f: lea edi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373fe: lea edi, [rip + 0x1af55c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037326: lea edi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370d2: lea edi, [rip + 0x1af648]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000372cf: lea edi, [rip + 0x1af64b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f99: lea edi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370a0: lea edi, [rip + 0x1af7fa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f6b: lea edi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d2d: lea edi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d06: lea edi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a24: lea edi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036afa: lea edi, [rip + 0x1afe20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a4d: lea edi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036ab3: lea edi, [rip + 0x1afe67]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035569: lea edi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034b10: lea edi, [rip + 0x1b1c0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a36: lea edi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c9: lea edi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003492d: lea edi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034353: lea edi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003431c: lea edi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034135: lea edi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032360: lea edi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f2c: lea edi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031dea: lea edi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031d12: lea edi, [rip + 0x1b4a08]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c90: lea edi, [rip + 0x1b4a8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a54: lea edi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a14: lea edi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b59: lea edi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000196a07: lea edi, [rip + 0x5290b]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000014f28e: lea edi, [rip + 0x60150]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014e99e: lea edi, [rip + 0x60a00]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014bcce: lea edi, [rip + 0x632ac]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000015b16a: lea edi, [rip + 0x8f368]; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x0000000000151cd7: lea edi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bf7: lea edi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b17: lea edi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a4f: lea edi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151997: lea edi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450fd: lea edi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001413dd: lea edi, [rip + 0xa8435]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000013fbd9: lea edi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013c4a7: lea edi, [rip + 0xace6b]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000fca54: lea edi, [rip + 0xb030a]; movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000fc7d2: lea edi, [rip + 0xb03bc]; movzx r13d, r13b; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x0000000000137716: lea edi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136e62: lea edi, [rip + 0xb2378]; call rax; 
0x0000000000136e28: lea edi, [rip + 0xb240a]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000f9bad: lea edi, [rip + 0xb2cb5]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f6ef9: lea edi, [rip + 0xb58ad]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000012c9df: lea edi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c13b: lea edi, [rip + 0xbc4df]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000e9109: lea edi, [rip + 0xc3265]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000011725f: lea edi, [rip + 0xd0d8b]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000d8e4f: lea edi, [rip + 0xd2ad3]; mov esi, ecx; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000d8e94: lea edi, [rip + 0xd2c7a]; mov edx, eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000114f1d: lea edi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010513b: lea edi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cf84d: lea edi, [rip + 0xe3a35]; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000012c98a: lea edi, [rip - 0x160]; call rax; 
0x0000000000080090: lea edi, [rsp + 0x10]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f78: lea edi, [rsp + 0x10]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c8b: lea edi, [rsp + 0x10]; xor edx, edx; lea rsi, [rip - 0x1a88]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f91: lea edi, [rsp + 0x10]; xor edx, edx; lea rsi, [rip - 0x1d8e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083b98: lea edi, [rsp + 0x30]; xor edx, edx; lea rsi, [rip - 0x3e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052e48: lea edi, [rsp + 0x40]; lea rdx, [rsp + 0x20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000052d79: lea edi, [rsp + 0x40]; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cf234: lea edi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000009267a: lea edx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000044e09: lea edx, [rax + 1]; mov dword ptr [rip + 0x19f39a], edx; ret; 
0x000000000008d34b: lea edx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000009328f: lea edx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x0000000000087485: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087450: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000000e1634: lea edx, [rax]; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x23]; syscall; 
0x0000000000163a14: lea edx, [rbx + rdx]; jmp rdx; 
0x000000000012b242: lea edx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000018434f: lea edx, [rcx + 1]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000000a6d5c: lea edx, [rcx + 1]; mov byte ptr [rcx], 0; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x00000000000433f1: lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x00000000000dbea1: lea edx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x000000000012c65c: lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x0000000000167b48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679f8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678a8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167758: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167608: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167218: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f78: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e28: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cd8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a38: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668e8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165028: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ed8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c38: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ae8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164998: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164848: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646f8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645a8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164458: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164308: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164068: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f18: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001218f6: lea edx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000009a85e: lea edx, [rip + 0x10ff3c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000bc68a: lea edx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x0000000000080b1d: lea edx, [rip + 0x129b01]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000802c8: lea edx, [rip + 0x12a112]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009cd6a: lea edx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x0000000000185a87: lea edx, [rip + 0x13a53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000185a62: lea edx, [rip + 0x13a78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000065897: lea edx, [rip + 0x143c03]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064bce: lea edx, [rip + 0x1446c0]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d36a: lea edx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x00000000001840d7: lea edx, [rip + 0x15403]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840bd: lea edx, [rip + 0x1541d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000035ae7: lea edx, [rip + 0x16f093]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002728e: lea edx, [rip + 0x170d6c]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001811c7: lea edx, [rip + 0x18313]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001811a2: lea edx, [rip + 0x18338]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000047e77: lea edx, [rip + 0x1a2293]; call 0xbbb80; pop rbx; ret; 
0x000000000017f1f7: lea edx, [rip + 0x1a2e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1dd: lea edx, [rip + 0x1a2fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e79c: lea edx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e44c: lea edx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2ec: lea edx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000009e363: lea edx, [rip + 0x1c117]; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x0000000000172aa7: lea edx, [rip + 0x26a33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172a82: lea edx, [rip + 0x26a58]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001926f1: lea edx, [rip + 0x275c9]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000170547: lea edx, [rip + 0x28f93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017052d: lea edx, [rip + 0x28fad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000150d29: lea edx, [rip + 0x3711]; call qword ptr [rax]; 
0x000000000012d2b6: lea edx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d136: lea edx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1f6: lea edx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000012d291: lea edx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1d1: lea edx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d111: lea edx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d354: lea edx, [rip + 0x5c136]; lea rax, [rip + 0x5c18f]; cmove rax, rdx; ret; 
0x000000000012d2e0: lea edx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d220: lea edx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d160: lea edx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000014e36e: lea edx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000012d3a0: lea edx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000013b9d7: lea edx, [rip + 0x7235b]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000015afcf: lea edx, [rip + 0x8874b]; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x0000000000151878: lea edx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000109821: lea edx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095f5: lea edx, [rip + 0xa41ed]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000010842f: lea edx, [rip + 0xa5233]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000012e34e: lea edx, [rip + 0xbbdbc]; call 0xbbb80; add rsp, 8; ret; 
0x00000000000ee832: lea edx, [rip + 0xbde18]; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000bad88: lea edx, [rip + 0xc04c2]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x00000000000e8b6a: lea edx, [rip + 0xc3784]; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x000000000009ce1a: lea edx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009d3d4: lea edx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x00000000000e7056: lea edx, [rip + 0xc51a8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e6a72: lea edx, [rip + 0xc570c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e39fd: lea edx, [rip + 0xc8351]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e3d52: lea edx, [rip + 0xc83d8]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000e2ff3: lea edx, [rip + 0xc8d07]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000009e756: lea edx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e406: lea edx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e2a6: lea edx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x00000000000bb356: lea edx, [rip + 0xce624]; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad66: lea edx, [rip + 0xceee4]; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf76: lea edx, [rip + 0xcf114]; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f6: lea edx, [rip + 0xcf6e4]; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad26: lea edx, [rip + 0xcf884]; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae56: lea edx, [rip + 0xcfb74]; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x000000000009e63d: lea edx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e59d: lea edx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e68d: lea edx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5ed: lea edx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x00000000000bb3ab: lea edx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009ce8a: lea edx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009d42a: lea edx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009e4ea: lea edx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009e54a: lea edx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x00000000000a7266: lea edx, [rip + 0xdb0c4]; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x0000000000146235: lea edx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000009fd36: lea edx, [rip + 0xe24b4]; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009d728: lea edx, [rip + 0xe3d72]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d488: lea edx, [rip + 0xe3ed2]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009cea8: lea edx, [rip + 0xe4332]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000009fd76: lea edx, [rip + 0xe5f54]; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d466: lea edx, [rip + 0xe8a54]; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c6: lea edx, [rip + 0xe8dc4]; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d306: lea edx, [rip + 0xe8f14]; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x00000000000afa77: lea edx, [rip + 0xe9a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa52: lea edx, [rip + 0xe9a88]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e731: lea edx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3e1: lea edx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e281: lea edx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000009e344: lea edx, [rip + 0xeb156]; lea rax, [rip + 0xeb1af]; cmove rax, rdx; ret; 
0x00000000000ad427: lea edx, [rip + 0xec0b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad40d: lea edx, [rip + 0xec0cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e780: lea edx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e430: lea edx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2d0: lea edx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e390: lea edx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000009e20b: lea edx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009cdbd: lea edx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x000000000007ad3f: lea edx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x0000000000075000: lea edx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000010c388: lea edx, [rip - 0x6e]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x000000000012d373: lea edx, [rip - 0x72f09]; lea rax, [rip - 0x72f90]; cmovne rax, rdx; ret; 
0x000000000012d17c: lea edx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d23c: lea edx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2fc: lea edx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x00000000000cf747: lea edx, [rip - 0x8d]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x00000000000cf827: lea edx, [rip - 0xad]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x0000000000150441: lea edx, [rsp + 0x18]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x0000000000150408: lea edx, [rsp + 0x18]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000001503eb: lea edx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x0000000000052e4d: lea edx, [rsp + 0x20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000112906: lea edx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x0000000000112bdb: lea edx, [rsp + 0xc]; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x00000000001504c5: lea edx, [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000112481: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000015abc7: lea edx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000147223: lea esi, [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000014c100: lea esi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000147131: lea esi, [rax + rdx + 0x28]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x000000000014fc4b: lea esi, [rbp + 0x18]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000008995b: lea esi, [rbp + 0x50]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000089a52: lea esi, [rbp + 0x90]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000089b54: lea esi, [rbp + 0x90]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000147f6d: lea esi, [rbp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012c986: lea esi, [rbp - 0x20]; lea rdi, [rip - 0x160]; call rax; 
0x00000000000e5ef3: lea esi, [rbp - 0x450]; mov rdi, qword ptr [rbp - 0x4c8]; call qword ptr [rbx + 0x40]; 
0x000000000015be68: lea esi, [rbx + 5]; add al, ch; pop rdi; xchg eax, ecx; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x0000000000085899: lea esi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x0000000000085763: lea esi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000144fb0: lea esi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000151705: lea esi, [rdx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000008020f: lea esi, [rip + 0x12a10f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000007ef09: lea esi, [rip + 0x12b291]; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000006d952: lea esi, [rip + 0x13c004]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000065ce4: lea esi, [rip + 0x143866]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000047600: lea esi, [rip + 0x16848d]; lea rdi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x00000000000835da: lea esi, [rip + 0x1e0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x00000000001543c1: lea esi, [rip + 0x5b05d]; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001446ea: lea esi, [rip + 0x6c5a3]; call 0x25150; test rax, rax; sete al; add rsp, 8; ret; 
0x0000000000052e5f: lea esi, [rip + 0x7b]; call rax; 
0x00000000000f8a45: lea esi, [rip + 0xb3d75]; movzx edx, cl; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000e19cc: lea esi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x00000000000d6aef: lea esi, [rip + 0xd4c47]; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d4afa: lea esi, [rip + 0xd6b60]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d429c: lea esi, [rip + 0xd72de]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d36b4: lea esi, [rip + 0xd7d6e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000cf846: lea esi, [rip + 0xe5d94]; lea rdi, [rip + 0xe3a35]; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000ba5e3: lea esi, [rip + 0xf0a1b]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000ba5b3: lea esi, [rip + 0xf0a27]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000151990: lea esi, [rip - 0x126]; lea rdi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c9d8: lea esi, [rip - 0x13e]; lea rdi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c92: lea esi, [rip - 0x1a88]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f98: lea esi, [rip - 0x1d8e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a48: lea esi, [rip - 0x1de]; lea rdi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000922fb: lea esi, [rip - 0x20f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b10: lea esi, [rip - 0x2a6]; lea rdi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000105134: lea esi, [rip - 0x2bda]; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bf0: lea esi, [rip - 0x386]; lea rdi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114f16: lea esi, [rip - 0x3c]; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083b9f: lea esi, [rip - 0x3e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000055635: lea esi, [rip - 0x3fb]; lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013770f: lea esi, [rip - 0x45]; lea rdi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151cd0: lea esi, [rip - 0x466]; lea rdi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b52: lea esi, [rip - 0x598]; lea rdi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013fbd2: lea esi, [rip - 0x5a8]; lea rdi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000009080d: lea esi, [rip - 0x603]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d55e: lea esi, [rip - 0xc4]; lea rdi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902f4: lea esi, [rip - 0xea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450f6: lea esi, [rip - 0xfc]; lea rdi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000056195: lea esi, [rsi + 0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000ba074: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000014e318: lea esi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x0000000000154e95: lea esi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000154e4b: lea esi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001546dd: lea esi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000154684: lea esi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000147f0a: lea esi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000014d545: lea esi, [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000015abcf: lea esi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000000559f8: lea esi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb98: lea esi, [rsp + 0x2c]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011aa69: lea esi, [rsp + 0xc]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014d4be: lea esi, [rsp + 0xc]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000147224: lea esi, [rsp + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000015592d: lea esi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x0000000000155954: lea esi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000155563: lea esi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000001555b4: lea esi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000154675: lea esi, [rsp + 8]; call qword ptr [rax]; 
0x0000000000082543: lea esi, [rsp + 8]; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000000359b6: lea esi, [rsp + 8]; xor edx, edx; call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000012f110: lea esi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x0000000000071cdb: lea esp, [rax + 0xffffffa]; test byte ptr [rdi], ch; ret; 
0x00000000000661a2: lea esp, [rax - 0x39000005]; add al, 1; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000014eb62: lea esp, [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x00000000000dfa49: lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000046b21: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000015358f: lea esp, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000047391: lea esp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000045492: lea esp, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000147f05: lea esp, [rsp + 0x10]; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000018cf73: lea r11, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cef9: lea r11, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce6a: lea r11, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc5f: lea r11, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb2d: lea r11, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca67: lea r11, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9e9: lea r11, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c952: lea r11, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c756: lea r11, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c625: lea r11, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c524: lea r11, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b943: lea r11, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8c9: lea r11, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b83a: lea r11, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b62f: lea r11, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4fd: lea r11, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b437: lea r11, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3b9: lea r11, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b322: lea r11, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b126: lea r11, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff5: lea r11, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee6: lea r11, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d4f1: lea r11, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d193: lea r11, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d33e: lea r11, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d013: lea r11, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d0d6: lea r11, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce93: lea r11, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf56: lea r11, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd13: lea r11, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd6: lea r11, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb93: lea r11, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc57: lea r11, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca13: lea r11, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad6: lea r11, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c893: lea r11, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c956: lea r11, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c713: lea r11, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d6: lea r11, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c593: lea r11, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c656: lea r11, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c413: lea r11, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d6: lea r11, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c293: lea r11, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c356: lea r11, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c113: lea r11, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d6: lea r11, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf93: lea r11, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c056: lea r11, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be13: lea r11, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed6: lea r11, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc93: lea r11, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb1a: lea r11, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd56: lea r11, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd6: lea r11, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b91b: lea r11, [rip + 0x4ddde]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba99: lea r11, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b93d: lea r11, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9dd: lea r11, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6b3: lea r11, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a84a: lea r11, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a533: lea r11, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f6: lea r11, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3b3: lea r11, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a476: lea r11, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a233: lea r11, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f6: lea r11, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0b3: lea r11, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a177: lea r11, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f33: lea r11, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff6: lea r11, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169db3: lea r11, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e76: lea r11, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c33: lea r11, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf6: lea r11, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ab3: lea r11, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b76: lea r11, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169933: lea r11, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f6: lea r11, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697b3: lea r11, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169876: lea r11, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169633: lea r11, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f6: lea r11, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694b3: lea r11, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169576: lea r11, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169333: lea r11, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f6: lea r11, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691b3: lea r11, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016903a: lea r11, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169276: lea r11, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168de4: lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168d27: lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f6: lea r11, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e5a: lea r11, [rip + 0x5039f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c3c: lea r11, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fb9: lea r11, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b71: lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e47: lea r11, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167b50: lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167ab2: lea r11, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167a00: lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167962: lea r11, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678b0: lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167812: lea r11, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167760: lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676c2: lea r11, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167610: lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167572: lea r11, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674c0: lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167422: lea r11, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167370: lea r11, [rip + 0x51cc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672d2: lea r11, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167220: lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167187: lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670d0: lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167032: lea r11, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f80: lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ee2: lea r11, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e30: lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d92: lea r11, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ce0: lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c42: lea r11, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b90: lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166af2: lea r11, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a40: lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001669a2: lea r11, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668f0: lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166852: lea r11, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001667a6: lea r11, [rip + 0x52893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001666b5: lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001665f6: lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016658c: lea r11, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016649d: lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166263: lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d8: lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166189: lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165180: lea r11, [rip + 0x53cf9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650e2: lea r11, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165030: lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f92: lea r11, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ee0: lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e42: lea r11, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d90: lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cf2: lea r11, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c40: lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ba2: lea r11, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164af0: lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a52: lea r11, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001649a0: lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164902: lea r11, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164850: lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b7: lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164700: lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164662: lea r11, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645b0: lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164512: lea r11, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164460: lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643c2: lea r11, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164310: lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164272: lea r11, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641c0: lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164122: lea r11, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164070: lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fd2: lea r11, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f20: lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e82: lea r11, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163dd6: lea r11, [rip + 0x550a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce5: lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c26: lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bbc: lea r11, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163acd: lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a08: lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b9919: lea r11, [rip + 0xf1614]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9195: lea r11, [rip + 0xf1d98]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b916c: lea r11, [rip + 0xf1dc1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b914c: lea r11, [rip + 0xf1de1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9123: lea r11, [rip + 0xf1e0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90fe: lea r11, [rip + 0xf1e2f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90e0: lea r11, [rip + 0xf1e4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9060: lea r11, [rip + 0xf1e4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9045: lea r11, [rip + 0xf1e68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90c3: lea r11, [rip + 0xf1e6a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9093: lea r11, [rip + 0xf1e9a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9010: lea r11, [rip + 0xf1e9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fe4: lea r11, [rip + 0xf1ec9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fce: lea r11, [rip + 0xf1edf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fac: lea r11, [rip + 0xf1f01]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f87: lea r11, [rip + 0xf1f26]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f6a: lea r11, [rip + 0xf1f43]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f03: lea r11, [rip + 0xf1faa]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c5: lea r11, [rip + 0xf2768]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8690: lea r11, [rip + 0xf279d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8664: lea r11, [rip + 0xf27c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b864e: lea r11, [rip + 0xf27df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b862c: lea r11, [rip + 0xf2801]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8607: lea r11, [rip + 0xf2826]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85ea: lea r11, [rip + 0xf2843]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8592: lea r11, [rip + 0xf289b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7ed9: lea r11, [rip + 0xf2e80]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dee: lea r11, [rip + 0xf2ffb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dd9: lea r11, [rip + 0xf3010]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dba: lea r11, [rip + 0xf302f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7305: lea r11, [rip + 0xf3a54]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72dc: lea r11, [rip + 0xf3a7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72bc: lea r11, [rip + 0xf3a9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7293: lea r11, [rip + 0xf3ac6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b726e: lea r11, [rip + 0xf3aeb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7250: lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b71d0: lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7233: lea r11, [rip + 0xf3b26]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7203: lea r11, [rip + 0xf3b56]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70ee: lea r11, [rip + 0xf3beb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70c0: lea r11, [rip + 0xf3c19]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7097: lea r11, [rip + 0xf3c42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a15: lea r11, [rip + 0xf4238]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69e0: lea r11, [rip + 0xf426d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b4: lea r11, [rip + 0xf4299]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b699e: lea r11, [rip + 0xf42af]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b697c: lea r11, [rip + 0xf42d1]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6957: lea r11, [rip + 0xf42f6]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b693a: lea r11, [rip + 0xf4313]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68e2: lea r11, [rip + 0xf436b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b66b9: lea r11, [rip + 0xf44c0]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65ce: lea r11, [rip + 0xf463b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65b9: lea r11, [rip + 0xf4650]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b659a: lea r11, [rip + 0xf466f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c55: lea r11, [rip + 0xf4f24]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c2c: lea r11, [rip + 0xf4f4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c0c: lea r11, [rip + 0xf4f6d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5be3: lea r11, [rip + 0xf4f96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bbe: lea r11, [rip + 0xf4fbb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5ba0: lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b20: lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b83: lea r11, [rip + 0xf4ff6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b53: lea r11, [rip + 0xf5026]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a4e: lea r11, [rip + 0xf50ab]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a20: lea r11, [rip + 0xf50d9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f7: lea r11, [rip + 0xf5102]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5415: lea r11, [rip + 0xf5664]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53e0: lea r11, [rip + 0xf5699]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53b4: lea r11, [rip + 0xf56c5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b539e: lea r11, [rip + 0xf56db]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b537c: lea r11, [rip + 0xf56fd]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5357: lea r11, [rip + 0xf5722]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b533a: lea r11, [rip + 0xf573f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b52e2: lea r11, [rip + 0xf5797]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000015358e: lea r12, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000047390: lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000045491: lea r12, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000147f04: lea r12, [rsp + 0x10]; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000014eb61: lea r12d, [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000004639d: lea r13, [r14 + rbp]; call rax; 
0x000000000015337e: lea r13, [rbx + 0x10]; xor esi, esi; mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x00000000000a7179: lea r8, [rip + 0x1036dc]; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000014616b: lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000147075: lea r8, [rip + 0x66e64]; mov ecx, eax; movsxd rdx, dword ptr [r8 + rcx*4]; add rdx, r8; jmp rdx; 
0x000000000014622b: lea r8, [rip + 0xbe]; xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000150d21: lea r8, [rip - 0x9e28]; lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x0000000000088e6f: lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000000a6fd4: lea r9, [rip + 0x103839]; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x000000000014617a: lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000089a5e: lea r9, [rsp + 0x20]; call rbx; 
0x0000000000089964: lea r9, [rsp + 0x28]; call rbx; 
0x0000000000145f8a: lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001460ca: lea r9, [rsp + 0x2c]; call qword ptr [rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000bbe5e: lea r9, [rsp + 0x30]; call rbx; 
0x00000000000bb739: lea r9, [rsp + 0x38]; call rbx; 
0x00000000001516e7: lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000014669b: lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x000000000004852f: lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000e3751: lea rax, [rax + rax - 1]; ret; 
0x00000000000aa7c3: lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aa7d3: lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aaca3: lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000aa7a3: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000013dfc6: lea rax, [rax + rdx*8]; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x00000000000dbea6: lea rax, [rax + rdx*8]; ret; 
0x000000000009a1fa: lea rax, [rax - 8]; ret; 
0x00000000000e67b0: lea rax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e66c0: lea rax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085619: lea rax, [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x00000000000b00ac: lea rax, [rcx + rsi]; ret; 
0x00000000000b9c53: lea rax, [rcx - 1]; ret; 
0x00000000000b6bab: lea rax, [rdi + 0x10]; ret; 
0x00000000000b6bc0: lea rax, [rdi + 0x11]; ret; 
0x00000000000b6bde: lea rax, [rdi + 0x12]; ret; 
0x00000000000b6bfe: lea rax, [rdi + 0x13]; ret; 
0x00000000000b6c21: lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c40: lea rax, [rdi + 0x15]; ret; 
0x00000000000b6c60: lea rax, [rdi + 0x16]; ret; 
0x00000000000b6c80: lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ca3: lea rax, [rdi + 0x18]; ret; 
0x00000000000b6cc8: lea rax, [rdi + 0x19]; ret; 
0x00000000000b6ce6: lea rax, [rdi + 0x1a]; ret; 
0x00000000000b6d06: lea rax, [rdi + 0x1b]; ret; 
0x00000000000b6d22: lea rax, [rdi + 0x1c]; ret; 
0x00000000000b6d42: lea rax, [rdi + 0x1d]; ret; 
0x00000000000b6d62: lea rax, [rdi + 0x1e]; ret; 
0x00000000000b6d82: lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7be2: lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e48: lea rax, [rdi + 0x40]; ret; 
0x0000000000188d48: lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000188eeb: lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b6afc: lea rax, [rdi + 0xa]; ret; 
0x00000000000b6b1c: lea rax, [rdi + 0xb]; ret; 
0x00000000000b6b3e: lea rax, [rdi + 0xc]; ret; 
0x00000000000b6b5e: lea rax, [rdi + 0xd]; ret; 
0x00000000000b6b7e: lea rax, [rdi + 0xe]; ret; 
0x00000000000b6b98: lea rax, [rdi + 0xf]; ret; 
0x0000000000026fa5: lea rax, [rdi + 1]; mov byte ptr [rdi], 0x2f; lea rdi, [rax + 1]; mov byte ptr [rax], 0x2f; mov byte ptr [rdi], 0; ret; 
0x00000000000b6a46: lea rax, [rdi + 1]; ret; 
0x00000000001885a6: lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b6a59: lea rax, [rdi + 2]; ret; 
0x00000000001885ba: lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b6a64: lea rax, [rdi + 3]; ret; 
0x00000000001885d4: lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b6a77: lea rax, [rdi + 4]; ret; 
0x00000000000b6a8c: lea rax, [rdi + 5]; ret; 
0x00000000000b6aaa: lea rax, [rdi + 6]; ret; 
0x00000000000b6ab6: lea rax, [rdi + 7]; ret; 
0x00000000000b6ac9: lea rax, [rdi + 8]; ret; 
0x00000000000b6ade: lea rax, [rdi + 9]; ret; 
0x0000000000188ca2: lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000000aa7f8: lea rax, [rdi + rax + 0x10]; ret; 
0x000000000018a766: lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c56: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000aa808: lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000aa702: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000018a786: lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c76: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a7c4: lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185cb4: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000013a910: lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x0000000000186004: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000a71f4: lea rax, [rdi + rax - 1]; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a720c: lea rax, [rdi + rax - 1]; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a71c5: lea rax, [rdi + rax - 1]; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a7198: lea rax, [rdi + rax - 1]; ret; 
0x00000000000afadb: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018a62c: lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185b1c: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000afcf6: lea rax, [rdi + rax]; ret; 
0x00000000001885ec: lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000013b5f2: lea rax, [rdi + rsi + 8]; ret; 
0x0000000000034dfb: lea rax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x00000000000affa8: lea rax, [rdi + rsi]; ret; 
0x00000000000cde1d: lea rax, [rdi - 0x10]; ret; 
0x00000000000cdf80: lea rax, [rdi - 0xc]; ret; 
0x00000000000cdfa0: lea rax, [rdi - 4]; ret; 
0x00000000000cdf90: lea rax, [rdi - 8]; ret; 
0x00000000000b6a32: lea rax, [rdi]; ret; 
0x0000000000188524: lea rax, [rdi]; vzeroupper; ret; 
0x000000000017856c: lea rax, [rdx + 0xa]; ret; 
0x000000000017858c: lea rax, [rdx + 0xb]; ret; 
0x00000000001785ae: lea rax, [rdx + 0xc]; ret; 
0x00000000001785ce: lea rax, [rdx + 0xd]; ret; 
0x000000000017a836: lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785ee: lea rax, [rdx + 0xe]; ret; 
0x000000000017847e: lea rax, [rdx + 0xf]; ret; 
0x00000000001784a6: lea rax, [rdx + 1]; ret; 
0x00000000001784bc: lea rax, [rdx + 2]; ret; 
0x00000000001784d4: lea rax, [rdx + 3]; ret; 
0x00000000001784ea: lea rax, [rdx + 4]; ret; 
0x00000000001784fc: lea rax, [rdx + 5]; ret; 
0x000000000017851a: lea rax, [rdx + 6]; ret; 
0x000000000017a8e1: lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178426: lea rax, [rdx + 7]; ret; 
0x000000000017852c: lea rax, [rdx + 8]; ret; 
0x000000000017854c: lea rax, [rdx + 9]; ret; 
0x00000000001211e2: lea rax, [rdx + rax*4]; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000181331: lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x000000000009a218: lea rax, [rdx - 0x10]; ret; 
0x0000000000178494: lea rax, [rdx]; ret; 
0x00000000000a70aa: lea rax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x00000000000bb3a3: lea rax, [rip + 0x115d6]; lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x00000000000bb35c: lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000cea6c: lea rax, [rip + 0x118d8d]; add rsp, 8; ret; 
0x00000000000bc682: lea rax, [rip + 0x11b57]; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x00000000000bad6c: lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x000000000009d46c: lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x00000000000baf7c: lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0fc: lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x000000000007e254: lea rax, [rip + 0x12bcc5]; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e294: lea rax, [rip + 0x12bd85]; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1a8: lea rax, [rip + 0x12bef1]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007de0e: lea rax, [rip + 0x12c30b]; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000009cdb5: lea rax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x00000000000bad92: lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x00000000000bad2c: lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x000000000009d2cc: lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000007ad33: lea rax, [rip + 0x12f166]; movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x000000000009d30c: lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x00000000000780e5: lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077fb9: lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077da9: lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x00000000000777b9: lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000bae5c: lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x000000000009d4ec: lea rax, [rip + 0x14a1cd]; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000009d4aa: lea rax, [rip + 0x14a20f]; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x000000000009e4e2: lea rax, [rip + 0x16b07]; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x00000000000339c8: lea rax, [rip + 0x17bf7d]; ret; 
0x000000000009ce82: lea rax, [rip + 0x18087]; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x0000000000026c60: lea rax, [rip + 0x188824]; ret; 
0x0000000000026c70: lea rax, [rip + 0x18a6ae]; ret; 
0x00000000000536d7: lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000047382: lea rax, [rip + 0x19f346]; sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000048870: lea rax, [rip + 0x1a18af]; add rsp, 8; ret; 
0x000000000009cd62: lea rax, [rip + 0x1b197]; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x0000000000033968: lea rax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000009e0e5: lea rax, [rip + 0x1b854]; cmove rax, rdx; ret; 
0x000000000009e794: lea rax, [rip + 0x1b915]; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e444: lea rax, [rip + 0x1bc45]; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2e4: lea rax, [rip + 0x1bdc5]; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000009e369: lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x000000000009d732: lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d492: lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009ceb2: lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000012d2ae: lea rax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d12e: lea rax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x00000000000a726c: lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000012d1ee: lea rax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000012d289: lea rax, [rip + 0x5bdc0]; lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1c9: lea rax, [rip + 0x5bea0]; lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d109: lea rax, [rip + 0x5bf60]; lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d35a: lea rax, [rip + 0x5c18f]; cmove rax, rdx; ret; 
0x000000000012e6bc: lea rax, [rip + 0x5fbed]; cmp rcx, 4; cmovne rax, rdx; ret; 
0x000000000012d2d8: lea rax, [rip + 0x60ac1]; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d218: lea rax, [rip + 0x60ba1]; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d158: lea rax, [rip + 0x60c61]; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000012d398: lea rax, [rip + 0x60fb1]; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000011f63e: lea rax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015aac9: lea rax, [rip + 0x8f2b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009e542: lea rax, [rip + 0x8fc7]; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x0000000000151d28: lea rax, [rip + 0x97c51]; pop rbx; ret; 
0x0000000000151caf: lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151c48: lea rax, [rip + 0x97d39]; pop rbx; ret; 
0x0000000000151bcf: lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151b68: lea rax, [rip + 0x97e31]; pop rbx; ret; 
0x0000000000151aef: lea rax, [rip + 0x97eaa]; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a90: lea rax, [rip + 0x97f29]; pop rbx; ret; 
0x0000000000151a27: lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151ca4: lea rax, [rip + 0x97f95]; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bc4: lea rax, [rip + 0x98075]; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151a1c: lea rax, [rip + 0x9821d]; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x000000000015196c: lea rax, [rip + 0x982cd]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x000000000009d422: lea rax, [rip + 0xa147]; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009d362: lea rax, [rip + 0xa157]; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000014513a: lea rax, [rip + 0xa47bf]; ret; 
0x0000000000145112: lea rax, [rip + 0xa47e7]; add rsp, 8; ret; 
0x000000000009ce12: lea rax, [rip + 0xa7a7]; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009fd3c: lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009d3cc: lea rax, [rip + 0xb8dd]; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x000000000012bef7: lea rax, [rip + 0xbe4d2]; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x000000000009e74e: lea rax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3fe: lea rax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e29e: lea rax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x000000000009e635: lea rax, [rip + 0xcbd4]; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e203: lea rax, [rip + 0xcbf6]; lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009e595: lea rax, [rip + 0xcc64]; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x0000000000117dfe: lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000117daa: lea rax, [rip + 0xd02ef]; pop rbp; pop r12; ret; 
0x0000000000117886: lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000117827: lea rax, [rip + 0xd0802]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bb44c: lea rax, [rip + 0xd2e6d]; cmp rcx, 4; cmovne rax, rdx; ret; 
0x0000000000114bb4: lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x000000000009e729: lea rax, [rip + 0xea950]; lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3d9: lea rax, [rip + 0xeac80]; lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e279: lea rax, [rip + 0xeae00]; lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000009e34a: lea rax, [rip + 0xeb1af]; cmove rax, rdx; ret; 
0x000000000009e685: lea rax, [rip + 0xedc4]; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5e5: lea rax, [rip + 0xee54]; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000009e778: lea rax, [rip + 0xef651]; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e428: lea rax, [rip + 0xef981]; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2c8: lea rax, [rip + 0xefb01]; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e388: lea rax, [rip + 0xeffd1]; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000009fd7c: lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009afd1: lea rax, [rip - 0x118]; mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e215: lea rax, [rip - 0x12d1]; mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000009b038: lea rax, [rip - 0x17f]; mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012d379: lea rax, [rip - 0x72f90]; cmovne rax, rdx; ret; 
0x000000000012d174: lea rax, [rip - 0x730db]; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d234: lea rax, [rip - 0x7319b]; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2f4: lea rax, [rip - 0x7327b]; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x000000000010c392: lea rax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x0000000000121a40: lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000cdf59: lea rax, es:[rdi - 0x10]; ret; 
0x00000000001478f1: lea rbp, [rbx + 0x23b0]; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000001966ef: lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000009126d: lea rbx, [r15 + 1]; call 0x8cf60; mov rax, qword ptr [rsp + 8]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000091217: lea rbx, [r15 + 1]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000000fa0b8: lea rbx, [rip + 0xb2979]; movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000f93d2: lea rbx, [rip + 0xb347b]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000b52ed: lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000bb735: lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000008aaea: lea rcx, [rax + 1]; mov qword ptr [rdi + 8], rcx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x000000000008a61a: lea rcx, [rax + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x00000000000bbc51: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb89d: lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x000000000010ed09: lea rcx, [rbx + 0x28]; mov rdi, qword ptr [rbx + 0x18]; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x00000000000807b5: lea rcx, [rbx + 0x40]; mov rdi, rbx; call rax; 
0x0000000000084bd5: lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000017b9e6: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000185a2d: lea rcx, [rip + 0x13aac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000006d4f4: lea rcx, [rip + 0x13c3b1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000006cb2b: lea rcx, [rip + 0x13cb6e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000064066: lea rcx, [rip + 0x144db3]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000018434c: lea rcx, [rip + 0x1518d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000182c73: lea rcx, [rip + 0x16866]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018116d: lea rcx, [rip + 0x1836c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017f1a8: lea rcx, [rip + 0x1a331]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017d8d3: lea rcx, [rip + 0x1bc06]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000191a5f: lea rcx, [rip + 0x2821a]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000144e8b: lea rcx, [rip + 0x6902e]; and esi, 7; movsxd rax, dword ptr [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x000000000010907c: lea rcx, [rip + 0xa46a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000ee73a: lea rcx, [rip + 0xbdd3f]; movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000011787a: lea rcx, [rip + 0xd078f]; call 0x117ba0; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000121b1d: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000008a619: lea rcx, cs:[rax + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x000000000008aae9: lea rcx, es:[rax + 1]; mov qword ptr [rdi + 8], rcx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x000000000010195e: lea rdi, [r10 + r8]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x000000000008a3cc: lea rdi, [r8]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; ret; 
0x00000000001605f5: lea rdi, [r9 + r8]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x0000000000026fac: lea rdi, [rax + 1]; mov byte ptr [rax], 0x2f; mov byte ptr [rdi], 0; ret; 
0x0000000000026f95: lea rdi, [rax + 1]; mov byte ptr [rdi], 0; pop rbx; pop r14; ret; 
0x00000000000a0dce: lea rdi, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000014c86d: lea rdi, [rbp + 0x10]; call rax; 
0x000000000007d0d7: lea rdi, [rbp - 0x460]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077127: lea rdi, [rbp - 0x470]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006c94f: lea rdi, [rbp - 0x500]; mov rdx, r15; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064967: lea rdi, [rbp - 0x5e0]; mov rdx, r15; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014f401: lea rdi, [rbx + 0x58]; call rax; 
0x000000000014e961: lea rdi, [rbx + 0x68]; call rax; 
0x00000000000360c9: lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014bc84: lea rdi, [rbx + 0xc8]; call rax; 
0x00000000000ba06e: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000168ddc: lea rdi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008afdb: lea rdi, [rdx]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x00000000000dc2d7: lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc291: lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e7: lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0ba: lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff7: lea rdi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfce: lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbafc: lea rdi, [rip + 0x10ac1d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8d48: lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b98: lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000080a3a: lea rdi, [rip + 0x129b27]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000007e1e4: lea rdi, [rip + 0x12bfb5]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e15b: lea rdi, [rip + 0x12c03e]; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e102: lea rdi, [rip + 0x12c097]; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df7c: lea rdi, [rip + 0x12c21d]; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007de4c: lea rdi, [rip + 0x12c34d]; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d564: lea rdi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4d2: lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009890a: lea rdi, [rip + 0x14ecc7]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000092a20: lea rdi, [rip + 0x154b39]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000090254: lea rdi, [rip + 0x157305]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000004178e: lea rdi, [rip + 0x16342b]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000837f0: lea rdi, [rip + 0x163d29]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047606: lea rdi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x000000000005563b: lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052f7a: lea rdi, [rip + 0x19431f]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x000000000003950a: lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394aa: lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375fa: lea rdi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037590: lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003745e: lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373fd: lea rdi, [rip + 0x1af55c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037325: lea rdi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370d1: lea rdi, [rip + 0x1af648]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000372ce: lea rdi, [rip + 0x1af64b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f98: lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003709f: lea rdi, [rip + 0x1af7fa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f6a: lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d2c: lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d05: lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a23: lea rdi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036af9: lea rdi, [rip + 0x1afe20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a4c: lea rdi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036ab2: lea rdi, [rip + 0x1afe67]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035568: lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034b0f: lea rdi, [rip + 0x1b1c0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a35: lea rdi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c8: lea rdi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003492c: lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034352: lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003431b: lea rdi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034134: lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003235f: lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f2b: lea rdi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031de9: lea rdi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031d11: lea rdi, [rip + 0x1b4a08]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c8f: lea rdi, [rip + 0x1b4a8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a53: lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a13: lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b58: lea rdi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000196a06: lea rdi, [rip + 0x5290b]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000014f28d: lea rdi, [rip + 0x60150]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014e99d: lea rdi, [rip + 0x60a00]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014bccd: lea rdi, [rip + 0x632ac]; mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000015b169: lea rdi, [rip + 0x8f368]; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x0000000000151cd6: lea rdi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bf6: lea rdi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b16: lea rdi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a4e: lea rdi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151996: lea rdi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450fc: lea rdi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001413dc: lea rdi, [rip + 0xa8435]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000013fbd8: lea rdi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013c4a6: lea rdi, [rip + 0xace6b]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000fca53: lea rdi, [rip + 0xb030a]; movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000fc7d1: lea rdi, [rip + 0xb03bc]; movzx r13d, r13b; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x0000000000137715: lea rdi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136e61: lea rdi, [rip + 0xb2378]; call rax; 
0x0000000000136e27: lea rdi, [rip + 0xb240a]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000f9bac: lea rdi, [rip + 0xb2cb5]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f6ef8: lea rdi, [rip + 0xb58ad]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000012c9de: lea rdi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c13a: lea rdi, [rip + 0xbc4df]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000e9108: lea rdi, [rip + 0xc3265]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000011725e: lea rdi, [rip + 0xd0d8b]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000d8e4e: lea rdi, [rip + 0xd2ad3]; mov esi, ecx; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000d8e93: lea rdi, [rip + 0xd2c7a]; mov edx, eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000114f1c: lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010513a: lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cf84c: lea rdi, [rip + 0xe3a35]; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000012c989: lea rdi, [rip - 0x160]; call rax; 
0x000000000008008f: lea rdi, [rsp + 0x10]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f77: lea rdi, [rsp + 0x10]; mov rdx, rbx; mov rsi, qword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c8a: lea rdi, [rsp + 0x10]; xor edx, edx; lea rsi, [rip - 0x1a88]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f90: lea rdi, [rsp + 0x10]; xor edx, edx; lea rsi, [rip - 0x1d8e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083b97: lea rdi, [rsp + 0x30]; xor edx, edx; lea rsi, [rip - 0x3e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052e47: lea rdi, [rsp + 0x40]; lea rdx, [rsp + 0x20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000052d78: lea rdi, [rsp + 0x40]; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cf233: lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000163a13: lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000087484: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000008744f: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000092679: lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000008d34a: lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000009328e: lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x000000000012b241: lea rdx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x00000000000a6d5b: lea rdx, [rcx + 1]; mov byte ptr [rcx], 0; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x00000000000dbea0: lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000167b47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679f7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678a7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167757: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167607: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167217: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f77: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e27: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cd7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a37: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668e7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165027: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ed7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c37: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ae7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164997: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164847: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646f7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645a7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164457: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164307: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164067: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f17: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001218f5: lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000009a85d: lea rdx, [rip + 0x10ff3c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000bc689: lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x0000000000080b1c: lea rdx, [rip + 0x129b01]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000802c7: lea rdx, [rip + 0x12a112]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009cd69: lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x0000000000185a86: lea rdx, [rip + 0x13a53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000185a61: lea rdx, [rip + 0x13a78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000065896: lea rdx, [rip + 0x143c03]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000064bcd: lea rdx, [rip + 0x1446c0]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d369: lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x00000000001840d6: lea rdx, [rip + 0x15403]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840bc: lea rdx, [rip + 0x1541d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000035ae6: lea rdx, [rip + 0x16f093]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002728d: lea rdx, [rip + 0x170d6c]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001811c6: lea rdx, [rip + 0x18313]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001811a1: lea rdx, [rip + 0x18338]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000047e76: lea rdx, [rip + 0x1a2293]; call 0xbbb80; pop rbx; ret; 
0x000000000017f1f6: lea rdx, [rip + 0x1a2e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1dc: lea rdx, [rip + 0x1a2fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e79b: lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e44b: lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2eb: lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000009e362: lea rdx, [rip + 0x1c117]; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x0000000000172aa6: lea rdx, [rip + 0x26a33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172a81: lea rdx, [rip + 0x26a58]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001926f0: lea rdx, [rip + 0x275c9]; movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x0000000000170546: lea rdx, [rip + 0x28f93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017052c: lea rdx, [rip + 0x28fad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000150d28: lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x000000000012d2b5: lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d135: lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1f5: lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000012d290: lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1d0: lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d110: lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d353: lea rdx, [rip + 0x5c136]; lea rax, [rip + 0x5c18f]; cmove rax, rdx; ret; 
0x000000000012d2df: lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d21f: lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d15f: lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000014e36d: lea rdx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000012d39f: lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000013b9d6: lea rdx, [rip + 0x7235b]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000015afce: lea rdx, [rip + 0x8874b]; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x0000000000151877: lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000109820: lea rdx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095f4: lea rdx, [rip + 0xa41ed]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000010842e: lea rdx, [rip + 0xa5233]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000012e34d: lea rdx, [rip + 0xbbdbc]; call 0xbbb80; add rsp, 8; ret; 
0x00000000000ee831: lea rdx, [rip + 0xbde18]; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000bad87: lea rdx, [rip + 0xc04c2]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x00000000000e8b69: lea rdx, [rip + 0xc3784]; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x000000000009ce19: lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x000000000009d3d3: lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x00000000000e7055: lea rdx, [rip + 0xc51a8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e6a71: lea rdx, [rip + 0xc570c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e39fc: lea rdx, [rip + 0xc8351]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e3d51: lea rdx, [rip + 0xc83d8]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000e2ff2: lea rdx, [rip + 0xc8d07]; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000009e755: lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e405: lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e2a5: lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x00000000000bb355: lea rdx, [rip + 0xce624]; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad65: lea rdx, [rip + 0xceee4]; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf75: lea rdx, [rip + 0xcf114]; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f5: lea rdx, [rip + 0xcf6e4]; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad25: lea rdx, [rip + 0xcf884]; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae55: lea rdx, [rip + 0xcfb74]; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x000000000009e63c: lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e59c: lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e68c: lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5ec: lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x00000000000bb3aa: lea rdx, [rip + 0xd4b9f]; cmovne rax, rdx; ret; 
0x000000000009ce89: lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009d429: lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009e4e9: lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009e549: lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x00000000000a7265: lea rdx, [rip + 0xdb0c4]; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x0000000000146234: lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000009fd35: lea rdx, [rip + 0xe24b4]; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009d727: lea rdx, [rip + 0xe3d72]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d487: lea rdx, [rip + 0xe3ed2]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009cea7: lea rdx, [rip + 0xe4332]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000009fd75: lea rdx, [rip + 0xe5f54]; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d465: lea rdx, [rip + 0xe8a54]; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c5: lea rdx, [rip + 0xe8dc4]; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d305: lea rdx, [rip + 0xe8f14]; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x00000000000afa76: lea rdx, [rip + 0xe9a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa51: lea rdx, [rip + 0xe9a88]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e730: lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3e0: lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e280: lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000009e343: lea rdx, [rip + 0xeb156]; lea rax, [rip + 0xeb1af]; cmove rax, rdx; ret; 
0x00000000000ad426: lea rdx, [rip + 0xec0b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad40c: lea rdx, [rip + 0xec0cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e77f: lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e42f: lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2cf: lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e38f: lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000009e20a: lea rdx, [rip + 0xf05cf]; cmovne rax, rdx; ret; 
0x000000000009cdbc: lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x000000000007ad3e: lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x0000000000074fff: lea rdx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000010c387: lea rdx, [rip - 0x6e]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x000000000012d372: lea rdx, [rip - 0x72f09]; lea rax, [rip - 0x72f90]; cmovne rax, rdx; ret; 
0x000000000012d17b: lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d23b: lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2fb: lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x00000000000cf746: lea rdx, [rip - 0x8d]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x00000000000cf826: lea rdx, [rip - 0xad]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x0000000000150440: lea rdx, [rsp + 0x18]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x0000000000150407: lea rdx, [rsp + 0x18]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000001503ea: lea rdx, [rsp + 0x20]; mov esi, 4; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x0000000000052e4c: lea rdx, [rsp + 0x20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000112905: lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x0000000000112bda: lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x00000000001504c4: lea rdx, [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000112480: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000015abc6: lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000151704: lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000014d544: lea rsi, [r12 + 0x18]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000014c0ff: lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014fc4a: lea rsi, [rbp + 0x18]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000008995a: lea rsi, [rbp + 0x50]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000089a51: lea rsi, [rbp + 0x90]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000089b53: lea rsi, [rbp + 0x90]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000147f6c: lea rsi, [rbp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012c985: lea rsi, [rbp - 0x20]; lea rdi, [rip - 0x160]; call rax; 
0x00000000000e5ef2: lea rsi, [rbp - 0x450]; mov rdi, qword ptr [rbp - 0x4c8]; call qword ptr [rbx + 0x40]; 
0x0000000000085898: lea rsi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x0000000000085762: lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000144faf: lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000008020e: lea rsi, [rip + 0x12a10f]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000007ef08: lea rsi, [rip + 0x12b291]; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000006d951: lea rsi, [rip + 0x13c004]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000065ce3: lea rsi, [rip + 0x143866]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000475ff: lea rsi, [rip + 0x16848d]; lea rdi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x00000000000835d9: lea rsi, [rip + 0x1e0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x00000000001543c0: lea rsi, [rip + 0x5b05d]; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001446e9: lea rsi, [rip + 0x6c5a3]; call 0x25150; test rax, rax; sete al; add rsp, 8; ret; 
0x0000000000052e5e: lea rsi, [rip + 0x7b]; call rax; 
0x00000000000f8a44: lea rsi, [rip + 0xb3d75]; movzx edx, cl; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000e19cb: lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x00000000000d6aee: lea rsi, [rip + 0xd4c47]; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d4af9: lea rsi, [rip + 0xd6b60]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d429b: lea rsi, [rip + 0xd72de]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d36b3: lea rsi, [rip + 0xd7d6e]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000cf845: lea rsi, [rip + 0xe5d94]; lea rdi, [rip + 0xe3a35]; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000ba5e2: lea rsi, [rip + 0xf0a1b]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000ba5b2: lea rsi, [rip + 0xf0a27]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x000000000015198f: lea rsi, [rip - 0x126]; lea rdi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c9d7: lea rsi, [rip - 0x13e]; lea rdi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c91: lea rsi, [rip - 0x1a88]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f97: lea rsi, [rip - 0x1d8e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a47: lea rsi, [rip - 0x1de]; lea rdi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000922fa: lea rsi, [rip - 0x20f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b0f: lea rsi, [rip - 0x2a6]; lea rdi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000105133: lea rsi, [rip - 0x2bda]; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bef: lea rsi, [rip - 0x386]; lea rdi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114f15: lea rsi, [rip - 0x3c]; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083b9e: lea rsi, [rip - 0x3e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000055634: lea rsi, [rip - 0x3fb]; lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013770e: lea rsi, [rip - 0x45]; lea rdi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151ccf: lea rsi, [rip - 0x466]; lea rdi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b51: lea rsi, [rip - 0x598]; lea rdi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013fbd1: lea rsi, [rip - 0x5a8]; lea rdi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000009080c: lea rsi, [rip - 0x603]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d55d: lea rsi, [rip - 0xc4]; lea rdi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902f3: lea rsi, [rip - 0xea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450f5: lea rsi, [rip - 0xfc]; lea rdi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000056194: lea rsi, [rsi + 0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000ba073: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000014e317: lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x0000000000154e94: lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000154e4a: lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001546dc: lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000154683: lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000147f09: lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000015abce: lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000000559f7: lea rsi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb97: lea rsi, [rsp + 0x2c]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011aa68: lea rsi, [rsp + 0xc]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014d4bd: lea rsi, [rsp + 0xc]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000015592c: lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x0000000000155953: lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000155562: lea rsi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000001555b3: lea rsi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000154674: lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x0000000000082542: lea rsi, [rsp + 8]; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000000359b5: lea rsi, [rsp + 8]; xor edx, edx; call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000012f10f: lea rsi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x00000000000dfa48: lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000046b20: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000314ee: leave; adc al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000016cd17: leave; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000c7c73: leave; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000e556b: leave; add cl, byte ptr [rax - 0x7d]; ret 0xeb02; 
0x0000000000086f73: leave; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x0000000000091d63: leave; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000009d496: leave; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000044c66: leave; add dword ptr [rsi + 0xf], esp; fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001645b3: leave; add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018159e: leave; add rax, rcx; sub rax, rdi; ret; 
0x00000000000901f8: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001018a3: leave; and eax, 0xd8f7000e; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010174a: leave; call 0x101090; add rsp, 0x18; ret; 
0x00000000000b9f16: leave; cmove rax, rdx; ret; 
0x00000000000863f1: leave; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000a6fe3: leave; jmp rcx; 
0x0000000000181330: leave; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x0000000000146233: leave; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000007ef07: leave; lea rsi, [rip + 0x12b291]; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000116743: leave; mov al, byte ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000018281f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000000b4c11: leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000007e21e: leave; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000013cd33: leave; mov edi, gs; jmp qword ptr [rsi + 0xf]; 
0x00000000000981a3: leave; mov esp, 0xf6310014; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000012dfd1: leave; mov rax, rcx; ret; 
0x0000000000092f7f: leave; movsxd rdx, edx; call 0x92e90; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000a8bac: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000155170: leave; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000001174e4: leave; or al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000011f8a3: leave; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000140123: leave; or al, byte ptr ds:[rax]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000010d8a3: leave; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001016eb: leave; push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000010170b: leave; push 1; call 0x101680; add rsp, 0x18; ret; 
0x0000000000058373: leave; ret; 
0x0000000000135290: leave; rol byte ptr [rdi], cl; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000167373: leave; sbb al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000037593: leave; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000127bb2: leave; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000001147a3: leave; test byte ptr [rax + rax], 0x64; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed5dc: leave; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000027ab7: leave; xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x000000000011eea2: leave; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec82: leave; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x000000000013a0d5: ljmp [rax + 0x4e850f02]; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x0000000000080832: ljmp [rax - 0x38f38bfe]; xor al, 0; add al, 0; add cl, ch; ret 0xfffc; 
0x00000000000f7053: ljmp [rax - 0x6b7af0ff]; adc byte ptr [rax], al; add byte ptr [rbp - 0x76df8b40], al; ret 0xe283; 
0x000000000010666d: ljmp [rax]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; test byte ptr [rip - 0x76fffffd], dh; ret 0xc085; 
0x00000000000f6b2b: ljmp [rcx]; ret 0x6348; 
0x00000000000f6139: ljmp [rcx]; ret; 
0x000000000018b2ae: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009cb66: lock add dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], cl; xchg eax, esp; ret 0xd084; 
0x0000000000122513: lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001225c8: lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000115e43: lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000001162d1: lock dec dword ptr [rax - 0x77]; ret; 
0x00000000001183a6: lock dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000013fa74: lock dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 0x10; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000013fa9e: lock dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000013fac8: lock dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x0000000000129651: lock dec dword ptr [rax - 0x7d]; ret; 
0x0000000000116809: lock inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x0000000000044db9: lock sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008f120: lodsb al, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000dbb00: lodsb al, byte ptr [rsi]; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008926c: lodsb al, byte ptr [rsi]; adc eax, 0x20ca8300; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000017c370: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000018f9c0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000196260: lodsb al, byte ptr [rsi]; add eax, 0x39480005; ret; 
0x000000000004b221: lodsb al, byte ptr [rsi]; and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4418; 
0x000000000007fdee: lodsb al, byte ptr [rsi]; call qword ptr [rdx]; 
0x00000000000537b0: lodsb al, byte ptr [rsi]; cmp al, 0x19; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000193b46: lodsb al, byte ptr [rsi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000017c994: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001062a6: lodsb al, byte ptr [rsi]; pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x0000000000163ad0: lodsb al, byte ptr [rsi]; push rbx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012c8b8: lodsb al, byte ptr [rsi]; ret; 
0x00000000000823bf: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e2dbf: lodsd eax, dword ptr [rsi]; and al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011254a: lodsd eax, dword ptr [rsi]; call 0x12f210; mov eax, 0x23; syscall; 
0x0000000000065593: lodsd eax, dword ptr [rsi]; cmp cl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000088827: lodsd eax, dword ptr [rsi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000000be88a: lodsd eax, dword ptr [rsi]; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000015977f: lodsd eax, dword ptr [rsi]; mov ecx, 0x8948ffec; ret 0x8d48; 
0x0000000000180500: lodsd eax, dword ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000f6efb: lodsd eax, dword ptr [rsi]; pop rax; or eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000ebe0f: lodsd eax, dword ptr [rsi]; ret 0xc; 
0x0000000000057122: lodsd eax, dword ptr [rsi]; ret; 
0x00000000001544cd: lodsd eax, dword ptr [rsi]; std; call qword ptr [rbx + 0x48]; 
0x000000000016658f: lodsd eax, dword ptr [rsi]; sub al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001026ee: loope 0x1026f0; and byte ptr [rax + rax*8 - 0x76b2248b], al; ret 0x894d; 
0x000000000010b233: loope 0x10b1d5; int1; jmp qword ptr [rsi + 0xf]; 
0x000000000011437a: loope 0x11437a; mov eax, 0xa9; syscall; 
0x000000000011f78b: loope 0x11f7d3; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012bef6: loope 0x12bf40; lea eax, [rip + 0xbe4d2]; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x000000000012c895: loope 0x12c8f2; mov eax, 5; pop r12; pop rbp; ret; 
0x000000000012d12c: loope 0x12d136; lea rax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1ec: loope 0x12d1f6; lea rax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000012d2ac: loope 0x12d2b6; lea rax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x0000000000136a95: loope 0x136a97; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000013b486: loope 0x13b48c; mov byte ptr [rax + 2], 0; shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x000000000013ff4b: loope 0x13ff9e; out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x000000000014bc4e: loope 0x14bbe0; ret; 
0x00000000001510ff: loope 0x1510fe; jmp qword ptr [rsi + 0x66]; 
0x0000000000165ef7: loope 0x165f45; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165f3f: loope 0x165f8d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165f7d: loope 0x165fcb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165fb5: loope 0x166003; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ff3: loope 0x166041; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016602b: loope 0x166079; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166053: loope 0x1660a1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001688c7: loope 0x168915; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016890f: loope 0x16895d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016894d: loope 0x16899b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168985: loope 0x1689d3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001689c3: loope 0x168a11; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001689fb: loope 0x168a49; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168a23: loope 0x168a71; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aaaa: loope 0x16aa9f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d5ca: loope 0x16d5bf; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000001760db: loope 0x1760de; add byte ptr [rax], al; ret; 
0x0000000000188653: loope 0x18869d; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018e6eb: loope 0x18e6ed; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x00000000001962ae: loope 0x19630b; pop rbp; pop r12; ret; 
0x0000000000196686: loope 0x1966e3; ret; 
0x00000000000339e3: loope 0x339e8; sbb eax, dword ptr [rax]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000044a8b: loope 0x44a80; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000056fb7: loope 0x57005; mov dword ptr [rdi], ecx; ret; 
0x0000000000056fe8: loope 0x57036; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000005705d: loope 0x570ab; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000005b475: loope 0x5b476; jmp qword ptr [rsi + 0xf]; 
0x0000000000068e68: loope 0x68e69; jmp qword ptr [rsi + 0xf]; 
0x000000000006e702: loope 0x6e703; push rsi; ret 0xf0a; 
0x000000000008a2f1: loope 0x8a2c2; mov dword ptr [rdi], ecx; ret; 
0x000000000008aecb: loope 0x8aedb; or al, byte ptr [rax]; add rsp, 0x80; mov eax, r10d; pop rbx; ret; 
0x0000000000092ed3: loope 0x92ed4; jmp qword ptr [rsi + 0xf]; 
0x000000000009546b: loope 0x9546c; jmp qword ptr [rsi - 0x70]; 
0x000000000009710b: loope 0x97105; dec dword ptr [rax - 0x77]; shr ecx, 0x5c; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000009e29c: loope 0x9e2a6; lea rax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x000000000009e3fc: loope 0x9e406; lea rax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e74c: loope 0x9e756; lea rax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x00000000000b033c: loope 0xb035e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000b0558: loope 0xb057a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000b53ae: loope 0xb5340; bsf rdx, rdx; lea r11, [rip + 0xf56c5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5425: loope 0xb548d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b65c9: loope 0xb6614; add eax, 0x10; lea r11, [rip + 0xf463b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b66c9: loope 0xb6731; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000b69ae: loope 0xb6940; bsf rdx, rdx; lea r11, [rip + 0xf4299]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a25: loope 0xb6a8d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b7de9: loope 0xb7e34; add eax, 0x10; lea r11, [rip + 0xf2ffb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7ee9: loope 0xb7f51; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000b865e: loope 0xb85f0; bsf rdx, rdx; lea r11, [rip + 0xf27c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86d5: loope 0xb873d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b8fde: loope 0xb8f70; bsf rdx, rdx; lea r11, [rip + 0xf1ec9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b914f: loope 0xb916e; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b91a5: loope 0xb920d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b9929: loope 0xb9991; nop dword ptr [rax + rax]; ret; 
0x00000000000ba639: loope 0xba63b; cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000bc14c: loope 0xbc1b8; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bc244: loope 0xbc2b0; add byte ptr [rcx + rcx*4 - 0xe], cl; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000bc43c: loope 0xbc4a8; add byte ptr [rcx + rcx*4 - 0x16], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x00000000000bc52c: loope 0xbc598; add byte ptr [rcx + rcx*4 - 0xe], cl; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000d6010: loope 0xd6011; dec dword ptr [rax - 0x41]; ret; 
0x00000000000ecb56: loope 0xecb57; add esi, esi; ret; 
0x00000000000f5ffa: loope 0xf5ffb; add esi, esi; ret; 
0x00000000000f776e: loope 0xf776f; add esi, esi; ret 0xf04; 
0x00000000000d236d: lsl eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000014bce8: mov ah, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000011e691: mov ah, 0; add byte ptr [rax], al; syscall; 
0x0000000000149cfb: mov ah, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x000000000004a014: mov ah, 0x15; add byte ptr [rax + 0x63], cl; ret 0xc748; 
0x000000000005ca56: mov ah, 0x15; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000146690: mov ah, 0x24; call 0x4c146697; mov dword ptr [rsp + 0x18], edx; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000f8072: mov ah, 0x24; cwde; add dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000058683: mov ah, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000011ef54: mov ah, 0xc; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x2e]; syscall; 
0x000000000015b908: mov ah, 0xe4; or byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000044db8: mov ah, 0xf0; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000109b77: mov ah, 0xf2; jmp qword ptr [rsi + 0xf]; 
0x000000000008aa04: mov ah, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x00000000001961ab: mov ah, 1; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000148e82: mov ah, byte ptr [rbx - 2]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fee42: mov ah, byte ptr [rcx - 0xd]; jmp qword ptr [rsi + 0x2e]; 
0x00000000001524d2: mov al, 0; add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x000000000011e421: mov al, 0; add byte ptr [rax], al; syscall; 
0x0000000000149cdb: mov al, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x00000000001478fa: mov al, 0x23; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000001478f4: mov al, 0x23; add byte ptr [rax], al; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000001478ad: mov al, 0x23; add byte ptr [rax], al; pop rbp; jmp rcx; 
0x000000000009ce1c: mov al, 0x40; or al, 0; cmovne rax, rdx; ret; 
0x0000000000118acd: mov al, 0x41; call rsi; 
0x000000000012700c: mov al, 0x46; add byte ptr [rax], al; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x000000000009e54c: mov al, 0xa0; or eax, 0x450f4800; ret 0x66c3; 
0x00000000000e658f: mov al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000185c9f: mov al, 0xc5; std; xlatb; ret; 
0x00000000000a7269: mov al, 0xd; add byte ptr [rax - 0x73], cl; add eax, 0x37bd; cmove rax, rdx; ret; 
0x000000000014edbf: mov al, 0xe8; add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x000000000013b748: mov al, 0xe8; ret 0xff3a; 
0x0000000000154a5b: mov al, 0xe8; scasd eax, dword ptr [rdi]; cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rsi + 0x66]; 
0x000000000015aacc: mov al, 0xf2; or byte ptr [rax], al; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000017a55c: mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015d981: mov al, 1; add byte ptr [rax], al; jmp rax; 
0x00000000001141ab: mov al, 1; add byte ptr [rsi - 0x70], ah; mov eax, 0xa3; syscall; 
0x0000000000044c6e: mov al, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044c60: mov al, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044da0: mov al, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000b607c: mov al, 4; add byte ptr [rax], al; ret; 
0x00000000000b5c7c: mov al, 8; add byte ptr [rax], al; ret; 
0x0000000000097f8b: mov al, byte ptr [rax + 2]; add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000010c9e1: mov al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000017a382: mov al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001784b6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b1feb: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000001784e4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b2019: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000b209d: mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000116744: mov al, byte ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000178490: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b1fc5: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000182820: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000011b22b: mov al, ch; mov edi, 0xe9ffff71; ret 0xfffe; 
0x00000000001172bc: mov al, dl; or al, 0; ret; 
0x00000000001784f4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b2039: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000000b20bd: mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000001784a0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001784b0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b1fe5: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b1fd5: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000001885a1: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000188c81: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001873a1: mov bh, 0x16; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016b871: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000186b11: mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000134315: mov bh, 0x1c; jns 0x13437f; and r11d, 0x840f2000; ret; 
0x00000000000ba132: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000140c31: mov bh, 0x40; add cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x00000000000a712f: mov bh, 0x44; and al, 0xec; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x00000000000cfb50: mov bh, 0x47; adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xfd83; 
0x0000000000030def: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x00000000000d8e5a: mov bh, 0x48; add eax, edi; jmp rax; 
0x000000000018e588: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x00000000001643c5: mov bh, 0x4a; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a707a: mov bh, 0x54; and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a722c: mov bh, 0x54; and al, 0xc; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7062: mov bh, 0x54; and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a7214: mov bh, 0x54; and al, 0xec; mov word ptr [rdi + 4], dx; ret; 
0x000000000012c415: mov bh, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0x18; syscall; 
0x000000000012c415: mov bh, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0x18; syscall; ret; 
0x00000000000fc520: mov bh, 0x80; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0f002], al; ret 0; 
0x000000000014bd6f: mov bh, 0x80; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000034dfe: mov bh, 0x8b; add al, 0x10; ret; 
0x000000000009c64d: mov bh, 0x8c; clc; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000350b6: mov bh, 0xc0; ret; 
0x000000000012f334: mov bh, 0xc6; or eax, edi; bswap eax; ret; 
0x000000000012f2e9: mov bh, 0xc7; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012bf01: mov bh, 0xe4; or eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000010c230: mov bh, 0xe8; add byte ptr [rax], al; add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000012b87d: mov bh, 0xe9; or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001885b1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b21: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000187f61: mov bh, 0xe; movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000135595: mov bh, 0xf6; push 2; call 0x134b30; add rsp, 0x18; ret; 
0x000000000009c012: mov bh, 0xfa; jmp qword ptr [rsi + 0x66]; 
0x00000000001563a3: mov bh, 0xff; dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000011f63c: mov bh, 0xff; lea rax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012b743: mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x00000000000d0da7: mov bh, 5; add ebp, dword ptr [rbx + 0x11]; add byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0x8341; 
0x00000000001559e1: mov bh, 6; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154ad9: mov bh, 6; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010b8d1: mov bh, 7; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x000000000009c5fd: mov bh, al; dec dword ptr [rax - 0x75]; add eax, 0x147869; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000000e915e: mov bh, byte ptr [rcx]; ret 0x840f; 
0x000000000011e754: mov bl, 0; add byte ptr [rax], al; syscall; 
0x000000000018fe7e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000005ca7f: mov bl, 0x15; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x25e8; 
0x0000000000048b54: mov bl, 0x19; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000000fa0c6: mov bl, 0x48; add eax, ebx; jmp rax; 
0x00000000000ce25c: mov bl, 0x48; mov eax, edx; ret; 
0x0000000000064069: mov bl, 0x4d; adc al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000268e9: mov bl, 0x66; nop dword ptr [rax + rax]; ret; 
0x00000000000fe399: mov bl, 0x6c; dec dword ptr [rax - 0x77]; ret; 
0x000000000014f5a7: mov bl, 0x88; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x28]; 
0x0000000000160de9: mov bl, 0x95; or byte ptr [rax], al; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013a461: mov bl, 0xae; out dx, al; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ca0b7: mov bl, 0xf5; jmp qword ptr [rsi + 0xf]; 
0x000000000008ac3e: mov bl, 0xf9; jmp qword ptr [rsi + 0x2e]; 
0x000000000008ab1b: mov bl, 0xf9; jmp qword ptr [rsi - 0x70]; 
0x00000000000694b7: mov bl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000113e63: mov bl, 1; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xaa; syscall; 
0x0000000000196049: mov bl, 6; add eax, 0x150ee900; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000269d4: mov bl, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x4864; 
0x000000000013b144: mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013df99: mov byte ptr [r10], 0; ret; 
0x0000000000120060: mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x00000000000a5236: mov byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000115c9b: mov byte ptr [r8 - 1], 0; ret; 
0x000000000018fa97: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000045d3b: mov byte ptr [rax + 0xe], dh; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000045d3a: mov byte ptr [rax + 0xe], sil; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000013b490: mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x00000000000d58a5: mov byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000013b488: mov byte ptr [rax + 2], 0; shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x00000000000610d4: mov byte ptr [rax + rax + 0x63490000], al; ret 0x8d49; 
0x000000000016d017: mov byte ptr [rax + rax], 0x49; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000014d6e4: mov byte ptr [rax + rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004659c: mov byte ptr [rax + rcx*2], 0x83; ret; 
0x00000000000dc294: mov byte ptr [rax + rdx - 0x373eb800], ah; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000000536de: mov byte ptr [rax + rdx], 0; ret; 
0x00000000000a5237: mov byte ptr [rax - 0x77], cl; ret; 
0x0000000000029e33: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000115c9c: mov byte ptr [rax - 1], 0; ret; 
0x00000000000a0676: mov byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000a6c69: mov byte ptr [rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000026f92: mov byte ptr [rax], 0x2f; lea rdi, [rax + 1]; mov byte ptr [rdi], 0; pop rbx; pop r14; ret; 
0x0000000000026fb0: mov byte ptr [rax], 0x2f; mov byte ptr [rdi], 0; ret; 
0x000000000004401d: mov byte ptr [rax], al; add byte ptr [rax], al; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x0000000000063b36: mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x0000000000063b86: mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000014f5bd: mov byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014f5a8: mov byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000014bd71: mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000011b54f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000011ad78: mov byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000055e79: mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008a623: mov byte ptr [rax], bh; mov eax, r10d; ret; 
0x0000000000129d39: mov byte ptr [rax], cl; add byte ptr [rax - 0x77], cl; ret 0x85e9; 
0x00000000000b4c12: mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000008a622: mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x000000000011297d: mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x0000000000120061: mov byte ptr [rbp + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x00000000000454a0: mov byte ptr [rbp + 0x4800000a], ah; mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000375ee: mov byte ptr [rbp + 0x481d74c9], 0x8b; add eax, 0x1b2d6e; lea rdi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018140e: mov byte ptr [rbp + 0x48dd74d2], 0x63; ror dword ptr [rax + 1], 0xf8; ret; 
0x000000000009d614: mov byte ptr [rbp + rax], 0; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000007772c: mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x0000000000076f73: mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x0000000000120065: mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x000000000007ae8f: mov byte ptr [rbp - 0x95c], cl; call rax; 
0x000000000007ae8e: mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x0000000000140815: mov byte ptr [rbx + 0x18], 0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000011c155: mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114716: mov byte ptr [rbx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000002535a: mov byte ptr [rbx], dl; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000151ab4: mov byte ptr [rcx + 0x39480009], al; ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48000000], ah; sub eax, -0x80; pop rbx; ret; 
0x00000000001812a5: mov byte ptr [rcx + 0xf], 0x94; rol byte ptr [rbp + 0x48d274f6], 0x63; ror dword ptr [rax + 1], 0xd0; sub rax, rdi; ret; 
0x00000000000293ed: mov byte ptr [rcx + 0xf], 0x95; ret; 
0x0000000000176153: mov byte ptr [rcx + 2], dl; ret; 
0x0000000000176172: mov byte ptr [rcx + 4], dl; ret; 
0x00000000001761b3: mov byte ptr [rcx + 8], dl; ret; 
0x00000000000777c3: mov byte ptr [rcx + rax - 0x10], cl; jmp rax; 
0x0000000000032c79: mov byte ptr [rcx + rax - 0x3a], cl; jmp rsi; 
0x0000000000147081: mov byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x00000000000c87d4: mov byte ptr [rcx + rcx*2], 0x83; ret; 
0x00000000000a6c18: mov byte ptr [rcx - 1], 0; mov qword ptr [rdx], rcx; ret; 
0x00000000000a6d5f: mov byte ptr [rcx], 0; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x00000000001268d2: mov byte ptr [rcx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000115613: mov byte ptr [rcx], 0xc7; add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x00000000000858a1: mov byte ptr [rcx], bh; ret; 
0x00000000000858a0: mov byte ptr [rcx], dil; ret; 
0x0000000000176130: mov byte ptr [rcx], dl; ret; 
0x00000000000b961a: mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000b79fb: mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b620b: mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b962b: mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b6ba8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b5538: mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b9630: mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b9652: mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b9670: mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b9690: mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b6c1e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b558e: mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b7a81: mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b6261: mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b96b1: mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b96b6: mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b96d2: mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b96f2: mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b9712: mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b7b03: mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62e3: mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b9733: mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b6ca0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5610: mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b9738: mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b975a: mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b9778: mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b9798: mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b97b4: mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b97d4: mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b97f4: mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b9814: mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b63e5: mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9835: mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b983a: mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000ff51e: mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000b988a: mov byte ptr [rdi + 0x40], ch; ret; 
0x0000000000188d45: mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000187465: mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x0000000000188015: mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000187468: mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x00000000001874bb: mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x00000000000b9560: mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000013280c: mov byte ptr [rdi + 0xb], ah; add al, ch; cmp ebp, dword ptr [rax]; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000b957e: mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b959e: mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b95c0: mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b95e0: mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b9600: mov byte ptr [rdi + 0xf], ch; ret; 
0x0000000000187395: mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x00000000000b9496: mov byte ptr [rdi + 1], ch; ret; 
0x000000000013b091: mov byte ptr [rdi + 1], dh; ret; 
0x000000000013b090: mov byte ptr [rdi + 1], sil; ret; 
0x00000000001885b6: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b26: mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000a70fd: mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000000b94a8: mov byte ptr [rdi + 2], ch; ret; 
0x00000000000b6a56: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b5456: mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7889: mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000a7030: mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b94b9: mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b94be: mov byte ptr [rdi + 3], ch; ret; 
0x000000000013b4c8: mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000000a711b: mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x00000000000b94d6: mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b6a72: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b5472: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b78b7: mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000a704e: mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b94e7: mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b94ec: mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a7154: mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x00000000000b94fe: mov byte ptr [rdi + 6], ch; ret; 
0x0000000000149c94: mov byte ptr [rdi + 6], dl; movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000a7087: mov byte ptr [rdi + 6], dl; ret; 
0x0000000000149ca2: mov byte ptr [rdi + 7], al; ret; 
0x00000000000b951c: mov byte ptr [rdi + 7], ch; ret; 
0x000000000005c196: mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x00000000000eaa70: mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000eaa25: mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ea9f4: mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000eaaa0: mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000eaab0: mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000eaac5: mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000eaa8a: mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000eaa5c: mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000eaa0d: mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000eaa30: mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000b9528: mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b6ac3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b54b3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b7909: mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b6189: mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b9539: mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b953e: mov byte ptr [rdi + 9], ch; ret; 
0x00000000001873c2: mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x00000000001873c3: mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000013b246: mov byte ptr [rdi + rdx], 0; ret; 
0x000000000012d75a: mov byte ptr [rdi - 0x73], 0x44; add byte ptr [rcx + rbp*8], al; mov ebp, dword ptr [rdi - 0xb]; call qword ptr [rax - 0x18]; 
0x000000000016548b: mov byte ptr [rdi - 1], dl; ret; 
0x00000000000a71a0: mov byte ptr [rdi], 0; lea rax, [rdi + rax - 1]; ret; 
0x0000000000188521: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000115d00: mov byte ptr [rdi], 0; mov rax, rdi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x00000000000a70d0: mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000026f99: mov byte ptr [rdi], 0; pop rbx; pop r14; ret; 
0x0000000000039c46: mov byte ptr [rdi], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000026fb3: mov byte ptr [rdi], 0; ret; 
0x0000000000186a91: mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000026fa9: mov byte ptr [rdi], 0x2f; lea rdi, [rax + 1]; mov byte ptr [rax], 0x2f; mov byte ptr [rdi], 0; ret; 
0x00000000000eaa65: mov byte ptr [rdi], 0x5b; ret; 
0x000000000009aa96: mov byte ptr [rdi], al; add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000eaa8e: mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000b9482: mov byte ptr [rdi], ch; ret; 
0x00000000000e8a6c: mov byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x00000000000f088e: mov byte ptr [rdi], cl; mov ebx, ds; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x2f73; 
0x00000000000ba10b: mov byte ptr [rdi], cl; ret; 
0x00000000001895d5: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000a7001: mov byte ptr [rdi], dh; add rax, rdi; ret; 
0x00000000000b6a30: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b5430: mov byte ptr [rdi], dh; ret; 
0x00000000000b7862: mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x0000000000188c73: mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000187393: mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x00000000000b6102: mov byte ptr [rdi], dl; ret; 
0x0000000000187f43: mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000b9492: mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000a7000: mov byte ptr [rdi], sil; add rax, rdi; ret; 
0x00000000000b4d9a: mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000afa54: mov byte ptr [rdx + 0xc8b000e], bl; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x0000000000045d37: mov byte ptr [rdx + 0xe], bh; mov byte ptr [rax + 0xe], sil; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000045d36: mov byte ptr [rdx + 0xe], dil; mov byte ptr [rax + 0xe], sil; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x00000000000b1fc2: mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b1fd2: mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000001784b9: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b1fee: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b2002: mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000001784e7: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b201c: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000b4d30: mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b2072: mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b20a0: mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x000000000018f9bb: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x00000000000ff08c: mov byte ptr [rdx - 0xe], ah; jmp qword ptr [rsi + 0xf]; 
0x000000000013b145: mov byte ptr [rdx - 1], al; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000011b68e: mov byte ptr [rdx], 0; mov rax, rbx; pop rbx; ret; 
0x0000000000133e79: mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000013df9a: mov byte ptr [rdx], 0; ret; 
0x000000000012687d: mov byte ptr [rdx], 0xa; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000178492: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b1fc7: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000008dcfa: mov byte ptr [rip + 0x158d4800], dl; sbb al, 0x83; adc eax, 0xc08b8b00; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x00000000000536d1: mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000003396f: mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x0000000000115d06: mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x0000000000133b5e: mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x0000000000097969: mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x000000000007a9b3: mov byte ptr [rsi - 0x9ffffe3], al; ret 0xf40; 
0x000000000002c465: mov byte ptr [rsi], dh; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000112976: mov byte ptr [rsp + 0x10], al; mov eax, r10d; mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x000000000015a8f4: mov ch, 0; add byte ptr [rax], al; syscall; 
0x0000000000098a2e: mov ch, 0x14; add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x14b4a5; mov qword ptr [rax], rdi; ret; 
0x00000000000f9baf: mov ch, 0x2c; or eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000013df98: mov ch, 0x41; mov byte ptr [rdx], 0; ret; 
0x000000000013e05f: mov ch, 0x72; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x000000000015d617: mov ch, 0x7b; in al, dx; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; imul eax, dword ptr [rcx], 0x89480000; ret; 
0x00000000000f4ad5: mov ch, 0x80; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000089a53: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089b55: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x000000000007e1e7: mov ch, 0xbf; adc al, byte ptr [rax]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000011edf4: mov ch, 0xc; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x2f]; syscall; 
0x0000000000101b57: mov ch, 0xd6; add al, byte ptr [rax]; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x00000000000d9bf7: mov ch, 0xf4; inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008a927: mov ch, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x00000000000d1f3e: mov ch, 0xfb; dec dword ptr [rax + 0x39]; ret; 
0x0000000000133cdf: mov ch, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000069e80: mov ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000018be26: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007b8aa: mov ch, 8; idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x0000000000075aeb: mov ch, 8; idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff750; call qword ptr [rbx + 0x38]; 
0x0000000000075716: mov ch, 8; idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff750; call qword ptr [rcx + 0x38]; 
0x000000000015696b: mov ch, bh; jmp qword ptr [rsi - 0x70]; 
0x000000000015abc2: mov ch, byte ptr [rcx - 0x72b7fff8]; push rsp; and al, 8; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000011a512: mov ch, byte ptr [rdi - 0xa]; jmp qword ptr [rsi + 0x2e]; 
0x000000000014ca3b: mov ch, ch; jmp qword ptr [rsi + 0xf]; 
0x000000000009b4bd: mov cl, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000011e4e1: mov cl, 0; add byte ptr [rax], al; syscall; 
0x0000000000099ac4: mov cl, 0x14; add dh, dh; ret 0x7404; 
0x000000000008a5fb: mov cl, 0x17; or al, byte ptr [rax]; add rsp, 0x80; mov eax, r10d; pop rbx; ret; 
0x0000000000028803: mov cl, 0x17; sbb al, 0; ret; 
0x00000000000392d3: mov cl, 0x35; call rsi; 
0x000000000012c26d: mov cl, 0x35; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000144e98: mov cl, 0x48; shr edx, 3; add rax, rcx; jmp rax; 
0x000000000011f4bb: mov cl, 0x49; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dfbb: mov cl, 0x5e; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010d6bb: mov cl, 0x67; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fafb: mov cl, 0x6e; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret; 
0x000000000008aa03: mov cl, 0xb4; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000006d4f7: mov cl, 0xc3; adc eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000001544ca: mov cl, 0xe8; lodsd eax, dword ptr [rsi]; std; call qword ptr [rbx + 0x48]; 
0x000000000015d3d0: mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000009e347: mov cl, 0xe; add byte ptr [rax - 0x73], cl; add eax, 0xeb1af; cmove rax, rdx; ret; 
0x0000000000116f83: mov cl, 0xf2; lock dec dword ptr [rax - 0x77]; ret; 
0x0000000000089ebf: mov cl, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x000000000003a1b7: mov cl, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000134037: mov cl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000009cd66: mov cl, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x13800; cmovne rax, rdx; ret; 
0x0000000000129ac3: mov cl, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000ad415: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000005d523: mov cl, byte ptr [rcx - 0x14363]; inc dword ptr [rax - 0x7bf09a05]; push rbp; add al, byte ptr [rax]; add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000015d8b5: mov cl, byte ptr [rcx - 0x75]; or byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x000000000010b37c: mov cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x00000000000b79f4: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6204: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b9624: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b7af8: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62d8: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b63d9: mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x0000000000188009: mov cl, byte ptr [rsi + 0x40]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000182824: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000009d469: mov cl, byte ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0x12a4d; cmove rax, rdx; ret; 
0x000000000018d4e0: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000012a3de: mov cs, word ptr [rax - 0x3f]; clc; add ecx, dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xc083; 
0x00000000000d236c: mov cs, word ptr [rdi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001832de: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x0000000000124476: mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000018d4ce: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000b6bb4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a14: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5544: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b9644: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b6cb8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b18: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b5628: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000001658d4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b7880: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b6120: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x000000000016b804: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b6a50: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b5450: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000018d4cd: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000015a944: mov dh, 0; add byte ptr [rax], al; syscall; 
0x000000000008ea2d: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000033961: mov dh, 0; cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000008d353: mov dh, 0; ret; 
0x000000000008aaf3: mov dh, 0x10; pop rbx; mov eax, edx; ret; 
0x00000000000efcba: mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x00000000000780e2: mov dh, 0x14; add byte ptr [rax - 0x73], cl; add eax, 0x131c54; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da6: mov dh, 0x14; add byte ptr [rax - 0x73], cl; add eax, 0x131f10; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000009bfa1: mov dh, 0x14; add byte ptr [rbp + 0x484874c0], al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000188c71: mov dh, 0x16; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000187391: mov dh, 0x16; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016b8e1: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000187f41: mov dh, 0x16; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000aaed4: mov dh, 0x16; sub eax, edx; ret; 
0x000000000015d256: mov dh, 0x1f; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000056196: mov dh, 0x28; add dword ptr [rax], eax; add byte ptr [rdi + 2], bh; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000321e2: mov dh, 0x35; jmp qword ptr [rdx + 0x16]; 
0x000000000009121d: mov dh, 0x37; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000000418d9: mov dh, 0x3c; or cl, ch; ret 0xfffc; 
0x00000000000d6a01: mov dh, 0x40; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e5567: mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x00000000000e5529: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000e5539: mov dh, 0x42; add dword ptr [rbx - 0x7cb7fb37], eax; ret 0xeb01; 
0x000000000013b356: mov dh, 0x42; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x000000000014213c: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e6781: mov dh, 0x43; add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000a7150: mov dh, 0x44; and al, 0xe; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x00000000000a7117: mov dh, 0x44; and al, 0xf4; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x0000000000196da9: mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x00000000000a70f9: mov dh, 0x44; and al, 0xfa; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000001817b1: mov dh, 0x44; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000074c99: mov dh, 0x46; or al, 0x83; ret; 
0x000000000018fa51: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa41: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa11: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018fa31: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa21: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001133dc: mov dh, 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fe22d: mov dh, 0x4a; or byte ptr [rax + 0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x00000000000d6b71: mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000600c2: mov dh, 0x50; or al, 0xf6; ret 0xf01; 
0x00000000000e670f: mov dh, 0x53; add dword ptr [rdx + rdx*8 - 0x76b72d8b], eax; call 0x5c4fc478; ret; 
0x00000000000fac0d: mov dh, 0x54; adc eax, 0x105c8d00; add dword ptr [rax + 0x63], ecx; ret; 
0x00000000000a7083: mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7235: mov dh, 0x54; and al, 0xe; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a704a: mov dh, 0x54; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a702c: mov dh, 0x54; and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x00000000001817b6: mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x000000000018fa55: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x000000000018fa45: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x000000000018fa15: mov dh, 0x56; int1; sub eax, edx; ret; 
0x0000000000061f32: mov dh, 0x56; or al, 0xf6; ret 0x7401; 
0x000000000006221d: mov dh, 0x56; or al, 0xf6; ret 0x7440; 
0x000000000018fa25: mov dh, 0x56; sub eax, edx; ret; 
0x00000000000f6ae3: mov dh, 0x57; cmp dh, dh; ret 0xf08; 
0x000000000007a9ef: mov dh, 0x57; or al, 0x83; ret; 
0x000000000007a9ad: mov dh, 0x57; or al, 0x84; ror byte ptr [rdi], cl; mov byte ptr [rsi - 0x9ffffe3], al; ret 0xf40; 
0x000000000007a983: mov dh, 0x57; or al, 0xf6; ret 0xf08; 
0x00000000000f7283: mov dh, 0x58; cmp dh, dh; ret; 
0x000000000005de50: mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x000000000005d004: mov dh, 0x58; or al, 0xf6; ret; 
0x0000000000141409: mov dh, 0x66; nop dword ptr [rax + rax]; ret; 
0x00000000000495a9: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a6289: mov dh, 0x74; syscall; 
0x00000000000ef18b: mov dh, 0x7b; or byte ptr [rbx - 0x76bac7b2], cl; ret 0x418d; 
0x00000000000d5f1d: mov dh, 0x83; ret 0x4c01; 
0x00000000000fbf11: mov dh, 0xbc; and al, 0x18; add dword ptr [rax], eax; add al, ch; ret; 
0x0000000000027abb: mov dh, 0xc0; add eax, 1; push rax; call rbx; 
0x000000000014cab7: mov dh, 0xc0; add eax, 1; ret; 
0x000000000015614c: mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000010e992: mov dh, 0xc0; add rsp, 0x58; ret; 
0x0000000000148f41: mov dh, 0xc0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cc9ce: mov dh, 0xc0; lea eax, [rax + rax - 1]; ret; 
0x00000000000e374f: mov dh, 0xc0; lea rax, [rax + rax - 1]; ret; 
0x0000000000064d5d: mov dh, 0xc0; mov rcx, qword ptr [rbp - 0x620]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e9110: mov dh, 0xc0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000064bd5: mov dh, 0xc0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000065ceb: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000639f8: mov dh, 0xc0; neg eax; pop rbx; ret; 
0x00000000000639ca: mov dh, 0xc0; neg eax; ret; 
0x000000000008d3da: mov dh, 0xc0; pop rbx; neg eax; ret; 
0x000000000014798f: mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x000000000004498c: mov dh, 0xc0; ret; 
0x00000000000aaef4: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000d6af6: mov dh, 0xc1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ba651: mov dh, 0xc1; pop rbx; ret; 
0x00000000000ba601: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x0000000000090036: mov dh, 0xc5; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000154bea: mov dh, 0xc5; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000ba45e: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000012f351: mov dh, 0xc6; or eax, edi; bswap eax; ret; 
0x0000000000029e32: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000e5b16: mov dh, 0xc; add al, ch; mov dl, 0xf4; hlt; jmp qword ptr [rsi - 0x70]; 
0x0000000000077fb6: mov dh, 0xc; add byte ptr [rax - 0x73], cl; add eax, 0x131c80; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b6: mov dh, 0xc; add byte ptr [rax - 0x73], cl; add eax, 0x132380; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x000000000007e1a5: mov dh, 0xc; add cl, byte ptr [rax - 0x73]; add eax, 0x12bef1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000eb269: mov dh, 0xc; or byte ptr [rax + 0x63], cl; ret; 
0x000000000012e6d6: mov dh, 0xcd; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000ba691: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000f8a4c: mov dh, 0xd1; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000fdaf7: mov dh, 0xd1; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000018b946: mov dh, 0xd2; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000012e046: mov dh, 0xd2; std; call qword ptr [rax - 0x18]; 
0x00000000000aaefa: mov dh, 0xd2; sub eax, edx; ret; 
0x000000000011d8c5: mov dh, 0xd7; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000ee743: mov dh, 0xe4; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000007570d: mov dh, 0xe; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000ba109: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x00000000000a89f1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000181df1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000000394a6: mov dh, 0xe; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000182834: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000043826: mov dh, 0xed; adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x00000000000fc7da: mov dh, 0xed; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000ee83a: mov dh, 0xed; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000fa0c1: mov dh, 0xf6; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000fca5c: mov dh, 0xf6; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x000000000012e106: mov dh, 0xf7; std; call qword ptr [rax - 0x18]; 
0x000000000004189e: mov dh, 0xf8; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000153bc2: mov dh, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x0000000000143b8f: mov dh, 0xfe; jmp qword ptr [rsi + 0x2e]; 
0x000000000012f2ed: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000008fec1: mov dh, 2; ret; 
0x00000000000536c9: mov dh, 4; adc byte ptr [rdx + 6], bh; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000007763b: mov dh, 4; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, r14; jmp rax; 
0x0000000000074ffc: mov dh, 4; add cl, byte ptr [rax - 0x73]; adc eax, 0xfffffbb7; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000eaa87: mov dh, 4; add esi, eax; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000416a8: mov dh, 4; or byte ptr [rax - 0x77], cl; ret 0xc085; 
0x000000000005c330: mov dh, 4; or dword ptr [rax - 0x7cb7fa], ecx; or dword ptr [rdi - 0x2b], esi; mov rax, rsi; ret; 
0x0000000000155af9: mov dh, 6; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000185a84: mov dh, 7; lea rdx, [rip + 0x13a53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840d4: mov dh, 7; lea rdx, [rip + 0x15403]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001811c4: mov dh, 7; lea rdx, [rip + 0x18313]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1f4: mov dh, 7; lea rdx, [rip + 0x1a2e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172aa4: mov dh, 7; lea rdx, [rip + 0x26a33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000170544: mov dh, 7; lea rdx, [rip + 0x28f93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa74: mov dh, 7; lea rdx, [rip + 0xe9a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad424: mov dh, 7; lea rdx, [rip + 0xec0b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000182831: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000aaed1: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000a89f4: mov dh, 7; sub eax, ecx; ret; 
0x0000000000181df4: mov dh, 7; sub eax, ecx; vzeroupper; ret; 
0x00000000000dc82c: mov dh, ah; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ec75f: mov dh, bl; jmp qword ptr [rsi + 0xf]; 
0x000000000015208a: mov dh, byte ptr [rdx]; in eax, dx; inc dword ptr [rbp - 0x7b]; in al, 0x75; or eax, 0x5c415d5b; ret; 
0x000000000011e724: mov dl, 0; add byte ptr [rax], al; syscall; 
0x00000000000394d7: mov dl, 0x1a; add byte ptr [rax - 0x77], cl; ret; 
0x000000000016718a: mov dl, 0x1e; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e2ffe: mov dl, 0x48; add eax, edx; jmp rax; 
0x000000000015fc1a: mov dl, 0x53; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x0000000000196c1d: mov dl, 0x66; nop; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e2afa: mov dl, 0x78; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bd2: mov dl, 0x7d; or dword ptr [rax], eax; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x00000000000c6b43: mov dl, 0x83; ret; 
0x000000000010a0e2: mov dl, 0xf1; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000e5b1a: mov dl, 0xf4; hlt; jmp qword ptr [rsi - 0x70]; 
0x00000000000c9d60: mov dl, 0xf6; jmp qword ptr [rsi + 0x66]; 
0x000000000009bebf: mov dl, 0xfa; dec dword ptr [rax - 0x77]; ret; 
0x0000000000153fae: mov dl, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x00000000000715fa: mov dl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000001218f8: mov dl, 3; add al, 0xa; ret; 
0x000000000017a35a: mov dl, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b6257: mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7883: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b6123: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b94b3: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b78b2: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b6142: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b94e2: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b7903: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b6183: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b9533: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000165510: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000b7860: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x00000000000b6100: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000b9490: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x000000000010ce42: mov dl, ch; or eax, 0x85008b00; sal byte ptr [rbp + 0x65], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000058f83: mov ds, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xc001; 
0x000000000012714f: mov ds, word ptr [rax + rax + 0x31450000]; jmp qword ptr [rsi + 0xf]; 
0x00000000001019b6: mov dword ptr [0x40], 0; ret; 
0x00000000001516fd: mov dword ptr [r10], 0xe; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000000ce8ad: mov dword ptr [r11 + 0xc], r8d; ret; 
0x00000000000f4dfb: mov dword ptr [r12 + 4], r13d; pop r12; pop r13; pop r14; ret; 
0x0000000000120058: mov dword ptr [r13 + 0x20], 0; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x0000000000139841: mov dword ptr [r14], r15d; mov eax, 3; mov edi, dword ptr [rbp - 0x60]; syscall; 
0x000000000014e9c6: mov dword ptr [r8 + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000014ea50: mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014e9b5: mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ea7d: mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014bdd0: mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014bce5: mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014bdfd: mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000014bda0: mov dword ptr [r8 + 4], 0; mov eax, 1; ret; 
0x000000000014bd90: mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x000000000013b35d: mov dword ptr [r8], eax; mov eax, edx; mov qword ptr [r9], r10; ret; 
0x000000000012c680: mov dword ptr [r8], edx; xor eax, eax; ret; 
0x000000000013b3b8: mov dword ptr [r8], r10d; mov qword ptr [r9], rax; mov eax, edx; ret; 
0x000000000018d4d6: mov dword ptr [r9 - 2], ecx; ret; 
0x000000000018d4c1: mov dword ptr [r9 - 4], ecx; ret; 
0x00000000001409b0: mov dword ptr [rax + 0x10], 0; pxor xmm0, xmm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086397: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087449: mov dword ptr [rax + 0x10], ecx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087489: mov dword ptr [rax + 0x10], edi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086359: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000014e9c7: mov dword ptr [rax + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000086b48: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x00000000000937d3: mov dword ptr [rax + 0x20], edx; add rsp, 0x18; ret; 
0x000000000008c21c: mov dword ptr [rax + 0x20], edx; pop rbx; ret; 
0x0000000000086b44: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000008635d: mov dword ptr [rax + 0x40], ecx; ret; 
0x000000000008639b: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000008748d: mov dword ptr [rax + 0x40], esi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000166495: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ac5: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a00: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000014ea51: mov dword ptr [rax + 0x48], eax; mov eax, 1; ret; 
0x00000000000871ce: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000014e9b6: mov dword ptr [rax + 0x54], eax; mov eax, 1; ret; 
0x000000000014ea7e: mov dword ptr [rax + 0x58], eax; mov eax, 1; ret; 
0x0000000000087e56: mov dword ptr [rax + 0x60], ecx; mov rcx, qword ptr [rbx + 8]; push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x000000000014bdd1: mov dword ptr [rax + 0xa8], eax; mov eax, 1; ret; 
0x000000000014bce6: mov dword ptr [rax + 0xb4], eax; mov eax, 1; ret; 
0x000000000014bdfe: mov dword ptr [rax + 0xb8], eax; mov eax, 1; ret; 
0x000000000011e5e3: mov dword ptr [rax + 0xc], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000012f2ea: mov dword ptr [rax + 0xf], 0xe281ffb6; add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000014bda1: mov dword ptr [rax + 4], 0; mov eax, 1; ret; 
0x000000000014bd91: mov dword ptr [rax + 4], 1; mov eax, 1; ret; 
0x00000000001401fe: mov dword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000091991: mov dword ptr [rax + 8], 0; ret; 
0x000000000008634e: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000008c214: mov dword ptr [rax + 8], edx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000010b7b3: mov dword ptr [rax + 8], esi; xor eax, eax; mov dword ptr [rbx + 4], edx; add rsp, 0x10; pop rbx; ret; 
0x0000000000056524: mov dword ptr [rax + rcx*8], edx; xor eax, eax; ret; 
0x00000000000e29e3: mov dword ptr [rax + rdx], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000186b02: mov dword ptr [rax - 0x17], 0xffffff50; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000159a7b: mov dword ptr [rax - 0x76b70014], edi; ret; 
0x0000000000155bcc: mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x000000000009198a: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000001563bd: mov dword ptr [rax], 0; pop rbx; ret; 
0x000000000013dfd2: mov dword ptr [rax], 0; ret; 
0x0000000000043f38: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000111588: mov dword ptr [rax], 0x16; mov eax, 1; ret; 
0x000000000005f56d: mov dword ptr [rax], 0x16; mov eax, edx; ret; 
0x0000000000043df8: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x0000000000082695: mov dword ptr [rax], 0x16; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000118418: mov dword ptr [rax], 0x16; ret; 
0x00000000000ceab8: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000000043a94: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x0000000000042d32: mov dword ptr [rax], 0x22; add rsp, 8; ret; 
0x00000000000449b8: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001133f8: mov dword ptr [rax], 0x26; mov rax, -1; ret; 
0x000000000015e868: mov dword ptr [rax], 0x26; xor eax, eax; ret; 
0x0000000000042108: mov dword ptr [rax], 0x2a; mov rax, rcx; ret; 
0x00000000000ce9aa: mov dword ptr [rax], 0x4b; mov rax, rbx; pop rbx; ret; 
0x00000000000cea98: mov dword ptr [rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000010cbd8: mov dword ptr [rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000005c56f: mov dword ptr [rax], 0x89482275; ret 0x8948; 
0x0000000000113340: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000009799a: mov dword ptr [rax], 0xc; mov rax, rsi; ret; 
0x00000000000999e0: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009c608: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x000000000011332c: mov dword ptr [rax], 0xffffffff; xor eax, eax; ret; 
0x000000000011ba48: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x0000000000048c08: mov dword ptr [rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000042168: mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000089275: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000027418: mov dword ptr [rax], 9; mov eax, edi; ret; 
0x00000000000cd973: mov dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000010c9b1: mov dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000058661: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000101984: mov dword ptr [rax], eax; mov eax, 0xffffffff; ret; 
0x000000000005869b: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000013b35e: mov dword ptr [rax], eax; mov eax, edx; mov qword ptr [r9], r10; ret; 
0x0000000000120545: mov dword ptr [rax], eax; mov qword ptr [rip + 0xc3e0e], 0; ret; 
0x00000000001204c5: mov dword ptr [rax], eax; mov qword ptr [rip + 0xc3e8e], 0; ret; 
0x0000000000084bda: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000009388e: mov dword ptr [rax], ecx; mov rax, qword ptr [rip + 0x150749]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000115ba1: mov dword ptr [rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000098a3c: mov dword ptr [rax], edi; ret; 
0x000000000011d9c3: mov dword ptr [rax], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b149: mov dword ptr [rax], edx; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x00000000001019d2: mov dword ptr [rax], edx; mov eax, 0xffffffff; ret; 
0x00000000001480c3: mov dword ptr [rax], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086c65: mov dword ptr [rax], edx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b3b9: mov dword ptr [rax], edx; mov qword ptr [r9], rax; mov eax, edx; ret; 
0x0000000000086356: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000094be2: mov dword ptr [rax], edx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000034d68: mov dword ptr [rax], edx; ret; 
0x0000000000087454: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x0000000000098a32: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x14b4a5]; mov qword ptr [rax], rdi; ret; 
0x0000000000093898: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x00000000000eaee5: mov dword ptr [rax], esp; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000eaee4: mov dword ptr [rax], r12d; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000101983: mov dword ptr [rax], r8d; mov eax, 0xffffffff; ret; 
0x00000000000bbff3: mov dword ptr [rbp + 0x12], edx; add byte ptr [rax + 0x39], cl; ret; 
0x000000000014655e: mov dword ptr [rbp + 0x18], eax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000120059: mov dword ptr [rbp + 0x20], 0; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x0000000000112984: mov dword ptr [rbp + 0x21], ecx; syscall; 
0x00000000000a0835: mov dword ptr [rbp + 0x38], 0x940f41d0; ret; 
0x000000000014cb20: mov dword ptr [rbp + 0x58], 0x28; pop rbp; pop r12; ret; 
0x0000000000044e80: mov dword ptr [rbp + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e64f4: mov dword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007e21f: mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000007ef0f: mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007cf1d: mov dword ptr [rbp - 0x4d0], 0; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007eec8: mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; jmp rax; 
0x000000000007d13b: mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0b3: mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007e25b: mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e477: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r15; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000076f69: mov dword ptr [rbp - 0x4e8], 0; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x000000000007dfcb: mov dword ptr [rbp - 0x4e8], 1; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x0000000000077779: mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000077191: mov dword ptr [rbp - 0x4f0], 1; mov r10, rdx; xor esi, esi; jmp rax; 
0x00000000000783e7: mov dword ptr [rbp - 0x4f0], ecx; mov rsi, r9; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007cf32: mov dword ptr [rbp - 0x4f0], edi; jmp rax; 
0x0000000000077516: mov dword ptr [rbp - 0x4f0], edx; mov rdx, r15; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x000000000007d148: mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0c0: mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x00000000000783f4: mov dword ptr [rbp - 0x4f8], edx; call qword ptr [rax + 0x38]; 
0x000000000007736e: mov dword ptr [rbp - 0x4f8], edx; mov rdx, r14; mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000077733: mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x000000000007e804: mov dword ptr [rbp - 0x500], eax; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007e803: mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007dfd8: mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007cf27: mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x0000000000076f7b: mov dword ptr [rbp - 0x508], ecx; jmp rax; 
0x000000000007e7fd: mov dword ptr [rbp - 0x508], ecx; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007edd0: mov dword ptr [rbp - 0x510], 1; mov r9, rsi; jmp rax; 
0x000000000007e1eb: mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000785cf: mov dword ptr [rbp - 0x510], eax; call qword ptr [rax + 0x38]; 
0x000000000007cf12: mov dword ptr [rbp - 0x518], 0; mov qword ptr [rbp - 0x4d0], 0; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007eea0: mov dword ptr [rbp - 0x518], 1; mov r9, rsi; jmp rax; 
0x000000000007df83: mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000076f5e: mov dword ptr [rbp - 0x528], 0; mov qword ptr [rbp - 0x4e8], 0; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x000000000007ef28: mov dword ptr [rbp - 0x528], 1; mov r9, rsi; jmp rax; 
0x000000000007e109: mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007dec8: mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x000000000007eee8: mov dword ptr [rbp - 0x530], 1; mov r9, rsi; jmp rax; 
0x000000000007e29b: mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007edc0: mov dword ptr [rbp - 0x538], 1; mov r9, rsi; jmp rax; 
0x000000000007de53: mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007debb: mov dword ptr [rbp - 0x53c], 1; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x0000000000077801: mov dword ptr [rbp - 0x548], 0; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x000000000007780e: mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x000000000002840f: mov dword ptr [rbp - 0x68], eax; call 0x15d990; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000012ae20: mov dword ptr [rbp - 0x68], eax; movdqu xmm7, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000002835d: mov dword ptr [rbp - 0x70], ecx; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000010c95b: mov dword ptr [rbp - 0x77], 0xca8948c2; mov eax, 0x106; syscall; 
0x000000000012ae29: mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000012b23e: mov dword ptr [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012b16d: mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b599: mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012aa0c: mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012ac3a: mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000012aca5: mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000011fe97: mov dword ptr [rbp - 0x830], eax; mov eax, r14d; syscall; 
0x000000000007b42c: mov dword ptr [rbp - 0x8e8], ecx; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000007b1e7: mov dword ptr [rbp - 0x928], ecx; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x00000000000750fe: mov dword ptr [rbp - 0x930], eax; call rax; 
0x00000000000750fd: mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000000750ed: mov dword ptr [rbp - 0x948], ecx; mov rsi, r14; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000000750ec: mov dword ptr [rbp - 0x948], r9d; mov rsi, r14; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x000000000007ae88: mov dword ptr [rbp - 0x978], edx; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x000000000007ae87: mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x0000000000036f5d: mov dword ptr [rbp - 0x98], ecx; mov rax, qword ptr [rip + 0x1b33fe]; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005e579: mov dword ptr [rbp - 0xe0], eax; mov rdx, r13; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000005e578: mov dword ptr [rbp - 0xe0], r8d; mov rdx, r13; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000151924: mov dword ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0157: mov dword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x00000000000a0112: mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009e7d9: mov dword ptr [rbp], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000087376: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000925a9: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000082011: mov dword ptr [rbp], eax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000009e155: mov dword ptr [rbp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000489ba: mov dword ptr [rbp], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010b489: mov dword ptr [rbp], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047bd6: mov dword ptr [rbp], edx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000a0da9: mov dword ptr [rbp], esp; pop r12; pop r13; pop r14; ret; 
0x0000000000139222: mov dword ptr [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000139221: mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000153592: mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000000314f2: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000153384: mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000013cc30: mov dword ptr [rbx + 0x10], eax; mov eax, 0x14; add edx, 1; syscall; 
0x000000000008c231: mov dword ptr [rbx + 0x10], eax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000013b97d: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000015da56: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000012618f: mov dword ptr [rbx + 0x10], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014587d: mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x0000000000155f15: mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000001457f7: mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000015da0e: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000001261df: mov dword ptr [rbx + 0x18], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008b61e: mov dword ptr [rbx + 0x18], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001935e5: mov dword ptr [rbx + 0x1f0f02c7], 0x80; add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x0000000000148c11: mov dword ptr [rbx + 0x20], eax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000011bff9: mov dword ptr [rbx + 0x20], eax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000090b51: mov dword ptr [rbx + 0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003161f: mov dword ptr [rbx + 0x20], edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000155f78: mov dword ptr [rbx + 0x20], esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000001478f8: mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000000ff02b: mov dword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000008c239: mov dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000000f081f: mov dword ptr [rbx + 0x30], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000147a02: mov dword ptr [rbx + 0x30], eax; call 0x155d00; mov rax, rbx; pop rbx; ret; 
0x00000000001368aa: mov dword ptr [rbx + 0x30], eax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f06f5: mov dword ptr [rbx + 0x30], esi; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000f081e: mov dword ptr [rbx + 0x30], r8d; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000eae5a: mov dword ptr [rbx + 0x34], esp; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000eae59: mov dword ptr [rbx + 0x34], r12d; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000148be7: mov dword ptr [rbx + 0x38], 0; mov dword ptr [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x00000000001268cf: mov dword ptr [rbx + 0x38], eax; mov byte ptr [rcx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012687a: mov dword ptr [rbx + 0x38], eax; mov byte ptr [rdx], 0xa; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011c1fd: mov dword ptr [rbx + 0x38], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000043b77: mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000043b58: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000014eb6a: mov dword ptr [rbx + 0x48], esp; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014eb69: mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014f59f: mov dword ptr [rbx + 0x58], 0; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x0000000000090b9a: mov dword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000114a05: mov dword ptr [rbx + 0x60], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000008737a: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000925ad: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008ee32: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014d436: mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000000863f5: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000086a1f: mov dword ptr [rbx + 0x74], edx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008d7cb: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008dc65: mov dword ptr [rbx + 0x90], eax; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000011c34f: mov dword ptr [rbx + 0x98], edx; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014beff: mov dword ptr [rbx + 0xa8], esp; bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x000000000014befe: mov dword ptr [rbx + 0xa8], r12d; bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x0000000000150484: mov dword ptr [rbx + 0xc], eax; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000ce8ae: mov dword ptr [rbx + 0xc], eax; ret; 
0x000000000008d97e: mov dword ptr [rbx + 0xd8], ecx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000010b7b8: mov dword ptr [rbx + 4], edx; add rsp, 0x10; pop rbx; ret; 
0x000000000010b74a: mov dword ptr [rbx + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010b6a7: mov dword ptr [rbx + 4], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000164af3: mov dword ptr [rbx + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009c7fc: mov dword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000000926fb: mov dword ptr [rbx + 8], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000152d35: mov dword ptr [rbx + 8], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000008c393: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000031507: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000012613f: mov dword ptr [rbx + 8], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009c65f: mov dword ptr [rbx + 8], ebp; mov qword ptr [rbx], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008ac0f: mov dword ptr [rbx + 8], edx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x0000000000028853: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001563b2: mov dword ptr [rbx], 0; call 0x151c60; mov dword ptr [rax], 0; pop rbx; ret; 
0x000000000014caed: mov dword ptr [rbx], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000118402: mov dword ptr [rbx], 0; pop rbx; ret; 
0x000000000009102d: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000151cad: mov dword ptr [rbx], eax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bcd: mov dword ptr [rbx], eax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151aed: mov dword ptr [rbx], eax; lea rax, [rip + 0x97eaa]; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a25: mov dword ptr [rbx], eax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x000000000009c79d: mov dword ptr [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000015df11: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000151975: mov dword ptr [rbx], eax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x00000000001519ce: mov dword ptr [rbx], eax; pop rbx; ret; 
0x00000000001183ac: mov dword ptr [rbx], eax; pop rbx; setne al; movzx eax, al; ret; 
0x000000000004896b: mov dword ptr [rbx], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000146474: mov dword ptr [rbx], eax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000084f05: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000031a50: mov dword ptr [rbx], ebx; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4cc6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a10: mov dword ptr [rbx], ebx; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4d06; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000086b4d: mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000009c13c: mov dword ptr [rbx], edi; call rcx; 
0x000000000009c663: mov dword ptr [rbx], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000015e820: mov dword ptr [rbx], edx; pop rbx; ret; 
0x000000000009aa26: mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x000000000009c213: mov dword ptr [rbx], esi; call rcx; 
0x0000000000082663: mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000009c7f9: mov dword ptr [rbx], esp; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000176192: mov dword ptr [rcx + 3], edx; ret; 
0x00000000000baed2: mov dword ptr [rcx + 4], 0; ret; 
0x0000000000176183: mov dword ptr [rcx + 4], edx; ret; 
0x00000000001761f4: mov dword ptr [rcx + 5], edx; ret; 
0x0000000000176204: mov dword ptr [rcx + 6], edx; ret; 
0x00000000001761d3: mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761c4: mov dword ptr [rcx + 8], edx; ret; 
0x00000000000a6fe0: mov dword ptr [rcx + rax - 0x37], ecx; jmp rcx; 
0x00000000001137b8: mov dword ptr [rcx + rcx*4 - 0xe], 0x44ee894c; mov edi, esp; mov eax, 0x147; syscall; 
0x0000000000113918: mov dword ptr [rcx + rcx*4 - 0xe], 0x44ee894c; mov edi, esp; mov eax, 0x148; syscall; 
0x000000000005c5b8: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000bb009: mov dword ptr [rcx + rsi], 0xa20ee8f6; idiv bh; mov rax, rbx; pop rbx; ret; 
0x000000000019328b: mov dword ptr [rcx - 0x7d], 0x894c07e7; ret 0x8d4f; 
0x000000000018d4d7: mov dword ptr [rcx - 2], ecx; ret; 
0x000000000018d4c2: mov dword ptr [rcx - 4], ecx; ret; 
0x000000000018d4b1: mov dword ptr [rcx - 8], ecx; ret; 
0x000000000011e1bc: mov dword ptr [rcx], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009d736: mov dword ptr [rcx], 0x450f4800; ret 0x66c3; 
0x000000000002a54a: mov dword ptr [rcx], 0x83481389; ret; 
0x000000000002a412: mov dword ptr [rcx], 0x83481389; rol dword ptr [rax + rcx*2], 0x83; ret; 
0x00000000000a0992: mov dword ptr [rcx], 0xb8; add byte ptr [rdx + rdx*8 - 0x38baf0b8], al; ret; 
0x00000000000e6545: mov dword ptr [rcx], 0xd675c084; xor eax, eax; ret; 
0x000000000013b3bc: mov dword ptr [rcx], eax; mov eax, edx; ret; 
0x00000000000441ca: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008576a: mov dword ptr [rcx], eax; ret; 
0x0000000000148bee: mov dword ptr [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x000000000008a086: mov dword ptr [rcx], eax; xor eax, eax; pop rbx; ret; 
0x00000000000e14e3: mov dword ptr [rcx], ebp; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000084a9c: mov dword ptr [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000085623: mov dword ptr [rcx], edi; ret; 
0x0000000000176151: mov dword ptr [rcx], edx; mov byte ptr [rcx + 2], dl; ret; 
0x0000000000176170: mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000001761b1: mov dword ptr [rcx], edx; mov byte ptr [rcx + 8], dl; ret; 
0x0000000000176190: mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001761d1: mov dword ptr [rcx], edx; mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761e1: mov dword ptr [rcx], edx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001480f8: mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x00000000001761f1: mov dword ptr [rcx], edx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000176201: mov dword ptr [rcx], edx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000176211: mov dword ptr [rcx], edx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000176221: mov dword ptr [rcx], edx; mov qword ptr [rcx + 8], rdx; ret; 
0x0000000000035528: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000176180: mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000001761c1: mov dword ptr [rcx], edx; mov word ptr [rcx + 8], dx; ret; 
0x000000000013b363: mov dword ptr [rcx], edx; ret; 
0x0000000000034c8e: mov dword ptr [rcx], esi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret; 
0x000000000010c272: mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000014c82c: mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x00000000000b6bbd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a1d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6bfb: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a5b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c7d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7add: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c1b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b558b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b7a7e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b625e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b96ae: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b6c9d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b560d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000005716f: mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b964d: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b968b: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b970d: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b7b00: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62e0: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b9730: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b6ce0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7b40: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b5650: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b9770: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b6d00: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b60: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b5670: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b9790: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b6cc1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b21: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b5631: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b9751: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000010c25a: mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000112d08: mov dword ptr [rdi + 0x16], eax; ret; 
0x00000000000b6ce3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7b43: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b5653: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b9773: mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x0000000000155bd0: mov dword ptr [rdi + 0x18], eax; mov eax, 1; ret; 
0x0000000000090aa3: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008c777: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000b6cc5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b25: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b6d03: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b63: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b5635: mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b9755: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b9793: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x0000000000090ad0: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000155c67: mov dword ptr [rdi + 0x18], edx; ret; 
0x000000000015637e: mov dword ptr [rdi + 0x18], esi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000155b6a: mov dword ptr [rdi + 0x18], esi; mov eax, 1; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000155ba8: mov dword ptr [rdi + 0x18], esi; ret; 
0x0000000000156389: mov dword ptr [rdi + 0x20], 0; ret; 
0x00000000000cfbc0: mov dword ptr [rdi + 0x20], ecx; pop r14; pop r15; ret; 
0x0000000000156381: mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000155ba1: mov dword ptr [rdi + 0x28], edx; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000155b72: mov dword ptr [rdi + 0x28], edx; ret; 
0x00000000001127c6: mov dword ptr [rdi + 0x38], esi; and eax, 0xffffeff0; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000047df3: mov dword ptr [rdi + 0x39480019], edx; ret; 
0x0000000000090ad4: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000090a9f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000014f25c: mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000090a97: mov dword ptr [rdi + 0x58], eax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000014e91c: mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc3c: mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000bb04f: mov dword ptr [rdi + 0xc], eax; mov rax, rbx; pop rbx; ret; 
0x000000000013a49a: mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x0000000000082289: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x0000000000113443: mov dword ptr [rdi + 0xd], ebp; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x13]; syscall; 
0x00000000000b6c3d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a9d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55ad: mov dword ptr [rdi + 0xe], ecx; ret; 
0x00000000000b96cd: mov dword ptr [rdi + 0xe], ecx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b6bdb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b7a3b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6c5d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7abd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b556b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b966b: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b96ed: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000016b725: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b568: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b808: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x000000000016b6b5: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b4f8: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6aa7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b78e7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x000000000016b645: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b488: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b5497: mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b9517: mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000a7134: mov dword ptr [rdi + 4], eax; mov rax, rdi; ret; 
0x00000000000a714c: mov dword ptr [rdi + 4], eax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x0000000000048ab5: mov dword ptr [rdi + 4], eax; xor eax, eax; ret; 
0x00000000000b6a89: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x00000000000b78c9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 6]; ret; 
0x000000000016b418: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000a707f: mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7231: mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7067: mov dword ptr [rdi + 4], edx; ret; 
0x00000000000b94f9: mov dword ptr [rdi + 4], edx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000010b910: mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000b6b3b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b798b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000016b3a8: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b54fb: mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b95bb: mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b6b5b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79ab: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xe]; ret; 
0x000000000016b338: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b550b: mov dword ptr [rdi + 6], edx; ret; 
0x00000000000b95db: mov dword ptr [rdi + 6], edx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b6af9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b7949: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6b7b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79cb: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xf]; ret; 
0x000000000016b2c8: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b54d9: mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b9579: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b95fb: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000009cb8b: mov dword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000013a493: mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000000bb575: mov dword ptr [rdi + 8], eax; cmove rbx, rdx; mov rax, rbx; pop rbx; ret; 
0x0000000000112cff: mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000058857: mov dword ptr [rdi + 8], eax; mov eax, 0xffffc002; sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000058826: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x000000000015637a: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000155d19: mov dword ptr [rdi + 8], eax; movups xmmword ptr [rdi + 0x18], xmm0; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000090aa7: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000057168: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000001127d0: mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000008aaef: mov dword ptr [rdi + 8], ecx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x00000000000570f4: mov dword ptr [rdi + 8], ecx; ret; 
0x00000000000b792b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6b19: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b7969: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6adb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000056890: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000056754: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000008d34f: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax]; ret; 
0x00000000000b54cb: mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b955b: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b9599: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000011281b: mov dword ptr [rdi + 8], esi; ret; 
0x0000000000188c9d: mov dword ptr [rdi + r8 - 2], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873bd: mov dword ptr [rdi + r8 - 2], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f6d: mov dword ptr [rdi + r8 - 2], edx; vzeroupper; ret; 
0x0000000000188cb9: mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873d9: mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f89: mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x0000000000188c9e: mov dword ptr [rdi + rax - 2], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873be: mov dword ptr [rdi + rax - 2], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f6e: mov dword ptr [rdi + rax - 2], edx; vzeroupper; ret; 
0x0000000000188cba: mov dword ptr [rdi + rax - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873da: mov dword ptr [rdi + rax - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f8a: mov dword ptr [rdi + rax - 4], edx; vzeroupper; ret; 
0x0000000000188cdc: mov dword ptr [rdi + rax - 8], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873fc: mov dword ptr [rdi + rax - 8], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fac: mov dword ptr [rdi + rax - 8], edx; vzeroupper; ret; 
0x00000000000576bd: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000ba55b: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x0000000000189600: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000ba135: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x00000000001885e8: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b48: mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000ba553: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x00000000001895f5: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000000ba125: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018860c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b5c: mov dword ptr [rdi + rdx - 7], ecx; vzeroupper; ret; 
0x00000000000ba54b: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x00000000001895ea: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000ba117: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x00000000001651d5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165213: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000005705f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000165388: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165484: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653d0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165558: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165738: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165928: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165af9: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165cf9: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ef9: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651d1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016520f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165384: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165480: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653cc: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165554: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165734: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165924: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165af5: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165cf5: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ef5: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651cd: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016520b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165380: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016547c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653c8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165550: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165730: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165920: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165af1: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165cf1: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ef1: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651c9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165207: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016555c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ad78: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016573c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016acf8: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016592c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ac78: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165afd: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016abe9: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165cfd: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016ab59: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165efd: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aac9: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000b6420: mov dword ptr [rdi - 1], edx; ret; 
0x00000000001658dd: mov dword ptr [rdi - 2], ecx; ret; 
0x00000000001656f5: mov dword ptr [rdi - 2], edx; ret; 
0x00000000001658d9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000165cb9: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016538f: mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165cb6: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165eb6: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001660b6: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000057058: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056fea: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000165217: mov dword ptr [rdi - 8], edx; ret; 
0x000000000016538c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165488: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653d4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016adf8: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000012bdb2: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000047d92: mov dword ptr [rdi], 0; pop rbx; ret; 
0x000000000014785c: mov dword ptr [rdi], 2; add rsp, 8; pop rbx; pop rbp; jmp rcx; 
0x00000000000a7039: mov dword ptr [rdi], eax; add rax, rdi; ret; 
0x00000000001493e4: mov dword ptr [rdi], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008ffa3: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x153ec4]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000005c19b: mov dword ptr [rdi], eax; mov rax, rdi; ret; 
0x00000000000a7114: mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x00000000000a70f6: mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000000a712c: mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x0000000000056fe4: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000570ee: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000048aae: mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x000000000011282e: mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000061b74: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000057051: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000057161: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000b6a75: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6ac7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x00000000000a71e0: mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x00000000001885b4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b24: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b6a54: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b5454: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7887: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b6127: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b94b7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b78b5: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b6145: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b94e5: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b7907: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b6187: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b9537: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b6aa5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b78e5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b5495: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b9515: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b6af7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b7947: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b54d7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b9577: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b6b17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b7967: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b54e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b9597: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x0000000000188cb7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873d7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f87: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018db97: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x00000000000901fa: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000001885e2: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b42: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000b6b38: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7988: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b95b8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b6b58: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b5508: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b95d8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b6b78: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79c8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b5518: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b95f8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x0000000000188cd9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873f9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fa9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x0000000000188609: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b59: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000a7108: mov dword ptr [rdi], ecx; mov rax, rdi; ret; 
0x00000000000b6a86: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b78c6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b5486: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b94f6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b7928: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ad8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54c8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b9558: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000188c9a: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873ba: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f6a: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018dba3: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000004307a: mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000056fb9: mov dword ptr [rdi], ecx; ret; 
0x00000000001895ef: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000001678b3: mov dword ptr [rdi], edx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a6ff6: mov dword ptr [rdi], edx; add rax, rdi; ret; 
0x0000000000042c79: mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b6a44: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x00000000001885a4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b7874: mov dword ptr [rdi], edx; lea rax, [rdi + 2]; ret; 
0x0000000000188c84: mov dword ptr [rdi], edx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b6a62: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000001885d2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b78a2: mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b6ab4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b78f4: mov dword ptr [rdi], edx; lea rax, [rdi + 8]; ret; 
0x00000000000a7196: mov dword ptr [rdi], edx; lea rax, [rdi + rax - 1]; ret; 
0x00000000001873a4: mov dword ptr [rdi], edx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b6440: mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6481: mov dword ptr [rdi], edx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b64a1: mov dword ptr [rdi], edx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b64b1: mov dword ptr [rdi], edx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000188050: mov dword ptr [rdi], edx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x0000000000089272: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000013dfcf: mov dword ptr [rdi], edx; mov qword ptr [rax], 0; ret; 
0x00000000000b64c1: mov dword ptr [rdi], edx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b64d1: mov dword ptr [rdi], edx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000156377: mov dword ptr [rdi], edx; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000188061: mov dword ptr [rdi], edx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b6450: mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6491: mov dword ptr [rdi], edx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000188041: mov dword ptr [rdi], edx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000a7047: mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a7029: mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a7077: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0x14]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7229: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a705f: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a7211: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000042eb6: mov dword ptr [rdi], edx; ret; 
0x000000000004865d: mov dword ptr [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x0000000000186b14: mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000000b94a4: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000b94d2: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b9524: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000a71b1: mov dword ptr [rdi], esi; lea rax, [rdi + rax - 1]; ret; 
0x000000000018d4bf: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000585bd: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009ca91: mov dword ptr [rdi], esi; mov eax, 1; ret; 
0x000000000018d4ae: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000a70e1: mov dword ptr [rdi], esi; mov rax, rdi; ret; 
0x000000000018d4d3: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x00000000000585eb: mov dword ptr [rdi], esi; ret; 
0x000000000010b8ed: mov dword ptr [rdi], esi; xor eax, eax; ret; 
0x00000000000a7038: mov dword ptr [rdi], r8d; add rax, rdi; ret; 
0x000000000010fb92: mov dword ptr [rdx + 0x10], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000014f3ac: mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000120541: mov dword ptr [rdx + 0x10], ecx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xc3e0e], 0; ret; 
0x00000000001204c1: mov dword ptr [rdx + 0x10], ecx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xc3e8e], 0; ret; 
0x0000000000082297: mov dword ptr [rdx + 0x130], ecx; ret; 
0x000000000008d985: mov dword ptr [rdx + 0x130], edi; pop rbx; ret; 
0x000000000008561e: mov dword ptr [rdx + 0x20], eax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x0000000000085767: mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x0000000000084a99: mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000148008: mov dword ptr [rdx + 0x20], esi; ret; 
0x00000000000937cb: mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 0x18; ret; 
0x000000000008589d: mov dword ptr [rdx + 0x28], esi; mov byte ptr [rcx], dil; ret; 
0x0000000000147fde: mov dword ptr [rdx + 0x58], edi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000014bd6a: mov dword ptr [rdx + 0x68], eax; movzx eax, word ptr [r8 + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000147fe2: mov dword ptr [rdx + 0x68], ecx; ret; 
0x000000000014bd76: mov dword ptr [rdx + 0x6c], eax; mov eax, 1; ret; 
0x000000000014f2ac: mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000178517: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b205c: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000063b8e: mov dword ptr [rdx + 4], 1; ret; 
0x00000000001784f9: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b203e: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000000c9a5f: mov dword ptr [rdx + 4], ecx; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000001785ab: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x0000000000178529: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000001741d9: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x00000000001785cb: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x0000000000178549: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000001741e9: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000178569: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000017a833: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785eb: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x00000000000b20e0: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000178589: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000017847b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x00000000000b20c2: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000063b3b: mov dword ptr [rdx + 8], ecx; add dword ptr [rdx + 4], 1; ret; 
0x0000000000063b8b: mov dword ptr [rdx + 8], ecx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000137f83: mov dword ptr [rdx - 1], esi; jmp qword ptr [rsi + 0xf]; 
0x00000000000585d0: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000587bc: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000015b567: mov dword ptr [rdx], 0; mov edx, 0xffffffff; mov eax, edx; ret; 
0x00000000001935e7: mov dword ptr [rdx], 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x000000000018c629: mov dword ptr [rdx], 0xc634900; xchg eax, ebx; add rcx, r11; jmp rcx; 
0x00000000001516fe: mov dword ptr [rdx], 0xe; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000000586a2: mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000001784a4: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x00000000001784d2: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000017a8df: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178424: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x00000000001784b4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b1fe9: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000001784e2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b2017: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000001784f2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b2037: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000010c4b1: mov dword ptr [rdx], eax; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004419a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000585bf: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000005880f: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000178512: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b2057: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000178524: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000001741d4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000178544: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000001741e4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000178564: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000001741f4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000178584: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000174204: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000de44d: mov dword ptr [rdx], eax; mov eax, esi; add rsp, 0x48; ret; 
0x0000000000048b5a: mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x00000000001785a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000174214: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x00000000001785c4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000174234: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x00000000001785e4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000174254: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000178474: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000174144: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000d0565: mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0x1138da]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x0000000000113322: mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000b1fd9: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000ddbe2: mov dword ptr [rdx], eax; mov rax, rsi; add rsp, 8; ret; 
0x000000000003553d: mov dword ptr [rdx], eax; ret; 
0x00000000000c9a62: mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000d333f: mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000e13e3: mov dword ptr [rdx], ebp; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009d832: mov dword ptr [rdx], ebx; mov rax, r10; pop rbx; ret; 
0x00000000000485ea: mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x00000000001016d7: mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000000a6c12: mov dword ptr [rdx], ecx; ret; 
0x0000000000118805: mov dword ptr [rdx], edi; pop rbx; pop rbp; ret; 
0x00000000000fe75b: mov dword ptr [rdx], edi; ret; 
0x00000000000de2a3: mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000000de36d: mov dword ptr [rdx], esi; add rsp, 8; ret; 
0x000000000009e923: mov dword ptr [rdx], esp; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x00000000000de44c: mov dword ptr [rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbe1: mov dword ptr [rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000d04ca: mov dword ptr [rip + 0x1173c8], ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000009d4f4: mov dword ptr [rip + 0x14a1ae], eax; add rsp, 8; ret; 
0x000000000009d4b2: mov dword ptr [rip + 0x14a1f0], eax; ret; 
0x00000000000989c6: mov dword ptr [rip + 0x14ec08], 0; ret; 
0x000000000009355e: mov dword ptr [rip + 0x150d48], eax; ret; 
0x000000000009353c: mov dword ptr [rip + 0x150d4e], eax; ret; 
0x0000000000093554: mov dword ptr [rip + 0x150d56], 1; mov dword ptr [rip + 0x150d48], eax; ret; 
0x000000000009350f: mov dword ptr [rip + 0x150d73], eax; ret; 
0x0000000000093531: mov dword ptr [rip + 0x150d79], 1; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x00000000000934ef: mov dword ptr [rip + 0x150d8b], eax; ret; 
0x0000000000093504: mov dword ptr [rip + 0x150da6], 1; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934e4: mov dword ptr [rip + 0x150dc6], 1; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x00000000000932b5: mov dword ptr [rip + 0x15102d], eax; ret; 
0x00000000000932a5: mov dword ptr [rip + 0x151035], eax; ret; 
0x0000000000093293: mov dword ptr [rip + 0x151037], edx; ret; 
0x0000000000093255: mov dword ptr [rip + 0x15103d], eax; ret; 
0x0000000000093245: mov dword ptr [rip + 0x151055], eax; ret; 
0x0000000000094345: mov dword ptr [rip + 0x15326d], eax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000093574: mov dword ptr [rip + 0x154072], eax; ret; 
0x0000000000092a4c: mov dword ptr [rip + 0x154b12], 0; ret; 
0x00000000000929e2: mov dword ptr [rip + 0x154b80], edx; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000044e23: mov dword ptr [rip + 0x19f37f], eax; mov eax, edx; ret; 
0x0000000000044e0c: mov dword ptr [rip + 0x19f39a], edx; ret; 
0x0000000000047ea5: mov dword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000025397: mov dword ptr [rip + 0x1c1343], eax; mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x000000000002641c: mov dword ptr [rip + 0x1c3d26], eax; ret; 
0x000000000002539e: mov dword ptr [rip + 0x1c4c0c], edx; pop rax; pop rbx; pop rbp; ret; 
0x000000000009e4ed: mov dword ptr [rip + 0x450f4800], ecx; ret 0x66c3; 
0x000000000019658a: mov dword ptr [rip + 0x5048c], 0; ret; 
0x00000000001960a8: mov dword ptr [rip + 0x50666], 0; add rsp, 8; ret; 
0x00000000001967a5: mov dword ptr [rip + 0x510e1], 0; ret; 
0x00000000001967ff: mov dword ptr [rip + 0x514bf], 0; add rsp, 8; ret; 
0x0000000000196962: mov dword ptr [rip + 0x522fc], 0; ret; 
0x0000000000196a94: mov dword ptr [rip + 0x52d82], 0; pop rbx; ret; 
0x000000000015e954: mov dword ptr [rip + 0x88c96], esi; ret; 
0x000000000015e94b: mov dword ptr [rip + 0x88ca7], eax; xor eax, eax; mov qword ptr [rip + 0x88c96], rsi; ret; 
0x000000000015afd6: mov dword ptr [rip + 0x8a574], edx; add rsp, 8; ret; 
0x000000000015b906: mov dword ptr [rip + 0x8e4b4], eax; mov eax, 1; add rsp, 8; ret; 
0x0000000000151cb7: mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bd7: mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151af7: mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a2f: mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151978: mov dword ptr [rip + 0x9829e], 2; ret; 
0x0000000000145d39: mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x00000000001376df: mov dword ptr [rip + 0xb2f3b], eax; add rsp, 8; ret; 
0x000000000012beff: mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x0000000000120548: mov dword ptr [rip + 0xc3e0e], 0; ret; 
0x000000000012051f: mov dword ptr [rip + 0xc3e37], 0; ret; 
0x00000000001204ee: mov dword ptr [rip + 0xc3e68], 2; ret; 
0x00000000001204c8: mov dword ptr [rip + 0xc3e8e], 0; ret; 
0x00000000001203b1: mov dword ptr [rip + 0xc3fa9], ebx; pop rbx; ret; 
0x000000000012039b: mov dword ptr [rip + 0xc3fbf], ebx; pop rbx; ret; 
0x0000000000120171: mov dword ptr [rip + 0xc41e5], 0; add rsp, 8; ret; 
0x0000000000120140: mov dword ptr [rip + 0xc4216], 3; add rsp, 8; ret; 
0x00000000001172ba: mov dword ptr [rip + 0xcd088], edi; ret; 
0x000000000011654a: mov dword ptr [rip + 0xd19e0], eax; add rsp, 8; ret; 
0x0000000000116523: mov dword ptr [rip + 0xd1a03], 0; add rsp, 8; ret; 
0x00000000001164d8: mov dword ptr [rip + 0xd1a52], edx; add rsp, 8; ret; 
0x00000000001164a9: mov dword ptr [rip + 0xd1a81], edx; ret; 
0x0000000000114ec6: mov dword ptr [rip + 0xd2ed0], 0; add rsp, 8; ret; 
0x0000000000114ba7: mov dword ptr [rip + 0xd324b], edx; mov qword ptr [rip + 0xd324c], rax; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x0000000000114bae: mov dword ptr [rip + 0xd324c], eax; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x0000000000114b01: mov dword ptr [rip + 0xd3299], eax; mov eax, 1; add rsp, 8; ret; 
0x0000000000114eef: mov dword ptr [rip + 0xd566b], eax; add rsp, 8; ret; 
0x00000000000418d3: mov dword ptr [rip + 0xf440016], esi; mov dh, 0x3c; or cl, ch; ret 0xfffc; 
0x00000000000ff53b: mov dword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000000ff528: mov dword ptr [rsi + 0x10], eax; ret; 
0x00000000000489e6: mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a35: mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000048534: mov dword ptr [rsi + 0x10], ecx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x0000000000048538: mov dword ptr [rsi + 0x28], eax; xor eax, eax; ret; 
0x000000000008a61f: mov dword ptr [rsi + 0x28], ecx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x000000000011229b: mov dword ptr [rsi + 0x38], eax; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001122ab: mov dword ptr [rsi + 0x48], eax; ret; 
0x00000000001122a3: mov dword ptr [rsi + 0x50], ecx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000111576: mov dword ptr [rsi + 0x66], edx; xor eax, eax; ret; 
0x00000000000489eb: mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a6e: mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000010cfe3: mov dword ptr [rsi + 0xd], ebp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000048a77: mov dword ptr [rsi + 0xe], eax; xor eax, eax; ret; 
0x00000000001470e7: mov dword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000ff543: mov dword ptr [rsi + 8], 0; ret; 
0x0000000000147043: mov dword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000147013: mov dword ptr [rsi + 8], eax; ret; 
0x00000000000ff524: mov dword ptr [rsi + 8], ecx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000562b4: mov dword ptr [rsi + rax*8], edx; xor eax, eax; ret; 
0x000000000018dba6: mov dword ptr [rsi - 2], ecx; ret; 
0x0000000000148b83: mov dword ptr [rsi - 2], esp; jmp qword ptr [rsi + 0xf]; 
0x000000000018db99: mov dword ptr [rsi - 4], ecx; ret; 
0x00000000000ff534: mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000147027: mov dword ptr [rsi], 0; ret; 
0x00000000001470e0: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014703c: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014700c: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000001470b0: mov dword ptr [rsi], 0xa; ret; 
0x00000000001470a0: mov dword ptr [rsi], 0xb; ret; 
0x00000000001470d0: mov dword ptr [rsi], 0xc; ret; 
0x0000000000147065: mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000147053: mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000001470c0: mov dword ptr [rsi], 8; ret; 
0x0000000000147095: mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000155c5f: mov dword ptr [rsi], eax; mov eax, 1; mov qword ptr [rdi + 0x18], rdx; ret; 
0x0000000000048a28: mov dword ptr [rsi], eax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000088a62: mov dword ptr [rsi], eax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x000000000008c77b: mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000485ec: mov dword ptr [rsi], ecx; ret; 
0x0000000000139842: mov dword ptr [rsi], edi; mov eax, 3; mov edi, dword ptr [rbp - 0x60]; syscall; 
0x00000000000933ea: mov dword ptr [rsi], edi; ret; 
0x000000000013a9df: mov dword ptr [rsi], edi; xor eax, eax; ret; 
0x0000000000155bfc: mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x00000000000ff521: mov dword ptr [rsi], edx; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x0000000000042ab5: mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000154e50: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001547ac: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000014dc4c: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000115a5d: mov dword ptr [rsp + 0x10], eax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x0000000000088710: mov dword ptr [rsp + 0x10], ecx; mov rdi, r13; call rax; 
0x0000000000113b7d: mov dword ptr [rsp + 0x10], ecx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ddaff: mov dword ptr [rsp + 0x10], esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000141f41: mov dword ptr [rsp + 0x14], eax; mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x0000000000044f9b: mov dword ptr [rsp + 0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x00000000001522af: mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; 
0x000000000015230b: mov dword ptr [rsp + 0x18], 1; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x0000000000096620: mov dword ptr [rsp + 0x18], eax; call rdx; 
0x00000000000965eb: mov dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 8], r11; call rcx; 
0x00000000000e2b93: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af3: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113c41: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0xd6764]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b71: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0xd6834]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000146697: mov dword ptr [rsp + 0x18], edx; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x0000000000096289: mov dword ptr [rsp + 0x18], edx; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000011da91: mov dword ptr [rsp + 0x18], esi; movaps xmmword ptr [rsp + 0x20], xmm0; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x0000000000146d1b: mov dword ptr [rsp + 0x192], eax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000152313: mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x0000000000114944: mov dword ptr [rsp + 0x20], eax; mov eax, 0x65; syscall; 
0x00000000000965e6: mov dword ptr [rsp + 0x20], edx; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x0000000000152371: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152161: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d1: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152241: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x0000000000112adb: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov eax, ecx; syscall; 
0x00000000000965e1: mov dword ptr [rsp + 0x28], edx; mov qword ptr [rsp + 0x20], r10; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x0000000000152103: mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x000000000015237e: mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x00000000001523f3: mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x000000000015216e: mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521de: mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x000000000015224e: mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x000000000011da9b: mov dword ptr [rsp + 0x30], eax; mov qword ptr [rsp + 0x38], r9; syscall; 
0x0000000000154411: mov dword ptr [rsp + 0x38], eax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x000000000011daa0: mov dword ptr [rsp + 0x38], ecx; syscall; 
0x000000000015210c: mov dword ptr [rsp + 0x38], edx; call qword ptr [rax + 0x18]; 
0x000000000014dc43: mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000454d7: mov dword ptr [rsp + 0x40], eax; nop dword ptr [rax + rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000001523fc: mov dword ptr [rsp + 0x40], edx; call qword ptr [rax + 0x18]; 
0x000000000014e30a: mov dword ptr [rsp + 0x438], eax; xor eax, eax; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000000cec7b: mov dword ptr [rsp + 0x50], edi; call rbx; 
0x00000000000ced0f: mov dword ptr [rsp + 0x50], esp; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000015d53f: mov dword ptr [rsp + 0x58], eax; mov rdx, qword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000001128ff: mov dword ptr [rsp + 0x58], eax; xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x00000000000cec74: mov dword ptr [rsp + 0x58], eax; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000010c6c3: mov dword ptr [rsp + 0x98], eax; xor eax, eax; mov eax, 0x14c; syscall; 
0x00000000001524cf: mov dword ptr [rsp + 0xb0], 1; mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x00000000001524da: mov dword ptr [rsp + 0xb8], 1; call qword ptr [rax + 0x18]; 
0x00000000001526bf: mov dword ptr [rsp + 0xc8], edx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000152625: mov dword ptr [rsp + 0xc8], edx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x000000000014d464: mov dword ptr [rsp + 0xc], 0xc; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000044260: mov dword ptr [rsp + 0xc], eax; call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000000e15ea: mov dword ptr [rsp + 0xc], eax; call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000014d426: mov dword ptr [rsp + 0xc], eax; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x0000000000112bd6: mov dword ptr [rsp + 0xc], esi; lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x00000000001526c6: mov dword ptr [rsp + 0xd0], 1; call rax; 
0x000000000015262c: mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000000cf22c: mov dword ptr [rsp + 0xe0], edx; lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x00000000001120fe: mov dword ptr [rsp + 4], eax; mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov eax, 0x146; syscall; 
0x0000000000155958: mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000155599: mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x0000000000155759: mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000000f4dfc: mov dword ptr [rsp + 4], ebp; pop r12; pop r13; pop r14; ret; 
0x00000000001376a1: mov dword ptr [rsp + 8], eax; call 0x15d990; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001369c2: mov dword ptr [rsp + 8], eax; call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000147f4b: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x00000000000e2855: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c5: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000087def: mov dword ptr [rsp + 8], eax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000096291: mov dword ptr [rsp + 8], ebx; call qword ptr [rax]; 
0x00000000000965f0: mov dword ptr [rsp + 8], ebx; call rcx; 
0x000000000011891a: mov dword ptr [rsp + 8], ebx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001546c9: mov dword ptr [rsp + 8], edx; call qword ptr [rax + 8]; 
0x000000000004394e: mov dword ptr [rsp + 8], edx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x0000000000096523: mov dword ptr [rsp + 8], edx; xor edi, edi; call qword ptr [rax]; 
0x0000000000042bce: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042c80: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042b12: mov dword ptr [rsp - 0x10], eax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042b57: mov dword ptr [rsp - 0x10], eax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000485c6: mov dword ptr [rsp - 0x10], eax; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000115bc5: mov dword ptr [rsp - 0x10], eax; movq xmm0, qword ptr [rsp - 0x10]; mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000005bd4f: mov dword ptr [rsp - 0x10], edx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x000000000005874e: mov dword ptr [rsp - 0x10], esi; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000115bd0: mov dword ptr [rsp - 0x10], esi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042b5c: mov dword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000058753: mov dword ptr [rsp - 0x18], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000cebca: mov dword ptr [rsp - 0x18], esi; fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000435b5: mov dword ptr [rsp - 0x30], edx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x0000000000043234: mov dword ptr [rsp - 4], eax; movd xmm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x00000000000433fa: mov dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x0000000000042c10: mov dword ptr [rsp - 4], edi; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x000000000004321f: mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000432ea: mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042e8f: mov dword ptr [rsp - 8], eax; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000043076: mov dword ptr [rsp - 8], edx; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e2b: mov dword ptr [rsp - 8], edx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f1e: mov dword ptr [rsp - 8], edx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000146508: mov dword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x000000000013ba37: mov dword ptr [rsp], 0; call rax; 
0x00000000000ddaf7: mov dword ptr [rsp], 0x74; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015441a: mov dword ptr [rsp], 2; call rdx; 
0x0000000000194414: mov dword ptr [rsp], eax; call 0x194c20; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000086951: mov dword ptr [rsp], eax; call 0x8cf60; mov rax, qword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000150555: mov dword ptr [rsp], eax; call qword ptr [rdx + 0x20]; 
0x0000000000118916: mov dword ptr [rsp], eax; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001552a1: mov dword ptr [rsp], eax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000147e9f: mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000bb1b2: mov dword ptr [rsp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e14a: mov dword ptr [rsp], eax; mov rdi, rbx; call rax; 
0x000000000008eca3: mov dword ptr [rsp], eax; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000009afd9: mov dword ptr [rsp], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e831: mov dword ptr [rsp], edx; call 0x8cf60; mov rdx, qword ptr [rsp]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000001555a5: mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x0000000000118915: mov dword ptr [rsp], r8d; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001019b5: mov dword ptr fs:[0x40], 0; ret; 
0x0000000000139840: mov dword ptr fs:[r14], r15d; mov eax, 3; mov edi, dword ptr [rbp - 0x60]; syscall; 
0x0000000000043f37: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000111587: mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x000000000005f56c: mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000043df7: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000082694: mov dword ptr fs:[rax], 0x16; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000118417: mov dword ptr fs:[rax], 0x16; ret; 
0x00000000000ceab7: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000043a93: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x0000000000042d31: mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000449b7: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001133f7: mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000015e867: mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000042107: mov dword ptr fs:[rax], 0x2a; mov rax, rcx; ret; 
0x00000000000ce9a9: mov dword ptr fs:[rax], 0x4b; mov rax, rbx; pop rbx; ret; 
0x00000000000cea97: mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000010cbd7: mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000011333f: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000097999: mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x00000000000999df: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009c607: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000011ba47: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000048c07: mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000042167: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000089274: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000027417: mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000115ba0: mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000001019d1: mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000101982: mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x0000000000139220: mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000011e1bb: mov dword ptr fs:[rcx], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000441c9: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c4b0: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000044199: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b59: mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113321: mov dword ptr fs:[rdx], eax; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000de2a2: mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000de36c: mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x00000000000de44b: mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbe0: mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000ba124: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000016b800: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b6a82: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b78c2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b5482: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b94f2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b7923: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ad3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54c3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b9553: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000001656f0: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001658d0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b6a40: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b7870: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b5440: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b94a0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000194aeb: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret 0x7775; 
0x0000000000194bd9: mov eax, 0; add byte ptr [rax - 0x7ab80000], al; ret; 
0x0000000000042ea9: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x00000000000ba693: mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000111883: mov eax, 0; cmova eax, edx; ret; 
0x0000000000126227: mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000a0994: mov eax, 0; test dl, dl; cmovne rax, rdi; ret; 
0x00000000000e19c3: mov eax, 0x1000; mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x0000000000147c71: mov eax, 0x100; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000112d02: mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000013ace9: mov eax, 0x100; ret; 
0x000000000010cd48: mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000010ccbf: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000013ace0: mov eax, 0x101; ret; 
0x000000000010ce4c: mov eax, 0x101; syscall; 
0x000000000013acd7: mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000010cc20: mov eax, 0x102; syscall; 
0x000000000010c90a: mov eax, 0x103; syscall; 
0x000000000010e1e3: mov eax, 0x104; syscall; 
0x0000000000115ad5: mov eax, 0x105; syscall; 
0x000000000010c962: mov eax, 0x106; syscall; 
0x000000000010eaf0: mov eax, 0x107; syscall; 
0x0000000000063a43: mov eax, 0x108; syscall; 
0x000000000010e9d3: mov eax, 0x109; syscall; 
0x0000000000145704: mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000000ba6e0: mov eax, 0x10; pop rbx; ret; 
0x0000000000063ba0: mov eax, 0x10; ret; 
0x000000000011290a: mov eax, 0x10; syscall; 
0x000000000010ea30: mov eax, 0x10a; syscall; 
0x000000000010ea93: mov eax, 0x10b; syscall; 
0x000000000010cb8d: mov eax, 0x10c; syscall; 
0x000000000010d363: mov eax, 0x10d; syscall; 
0x0000000000114156: mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x00000000001140f2: mov eax, 0x10e; syscall; 
0x00000000001117c3: mov eax, 0x10f; syscall; 
0x000000000011e7b0: mov eax, 0x110; syscall; 
0x000000000011e000: mov eax, 0x113; syscall; 
0x000000000011dea0: mov eax, 0x114; syscall; 
0x00000000001122c0: mov eax, 0x115; syscall; 
0x000000000011df50: mov eax, 0x116; syscall; 
0x00000000001121a8: mov eax, 0x118; syscall; 
0x000000000011dc26: mov eax, 0x119; syscall; 
0x000000000010b310: mov eax, 0x11; syscall; 
0x000000000011e810: mov eax, 0x11b; syscall; 
0x0000000000111aaa: mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x0000000000112360: mov eax, 0x11d; syscall; 
0x000000000011e843: mov eax, 0x11e; syscall; 
0x000000000011e870: mov eax, 0x11f; syscall; 
0x000000000011f450: mov eax, 0x120; syscall; 
0x000000000011dcd3: mov eax, 0x121; mov edx, 8; syscall; 
0x000000000011dd10: mov eax, 0x122; syscall; 
0x000000000011e480: mov eax, 0x123; syscall; 
0x000000000010d740: mov eax, 0x124; syscall; 
0x000000000010d7a0: mov eax, 0x125; syscall; 
0x000000000011e5a0: mov eax, 0x126; syscall; 
0x0000000000113593: mov eax, 0x127; syscall; 
0x0000000000113643: mov eax, 0x128; syscall; 
0x000000000010b3c0: mov eax, 0x12; syscall; 
0x000000000011f4f0: mov eax, 0x12b; syscall; 
0x000000000011e8a0: mov eax, 0x12c; syscall; 
0x000000000011e303: mov eax, 0x12d; syscall; 
0x000000000011dd93: mov eax, 0x12e; syscall; 
0x0000000000112de7: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000011e8d3: mov eax, 0x12f; syscall; 
0x000000000011e0bd: mov eax, 0x130; syscall; 
0x000000000011e3c0: mov eax, 0x131; syscall; 
0x0000000000114340: mov eax, 0x132; syscall; 
0x000000000011f5a0: mov eax, 0x133; syscall; 
0x000000000011e900: mov eax, 0x134; syscall; 
0x000000000010c437: mov eax, 0x135; syscall; 
0x000000000011e933: mov eax, 0x136; syscall; 
0x000000000011e963: mov eax, 0x137; syscall; 
0x000000000011344d: mov eax, 0x13; syscall; 
0x0000000000048aed: mov eax, 0x13e; syscall; 
0x000000000011e990: mov eax, 0x13f; syscall; 
0x00000000000e19d2: mov eax, 0x142; syscall; 
0x00000000001120cf: mov eax, 0x146; syscall; 
0x0000000000113717: mov eax, 0x147; syscall; 
0x0000000000113877: mov eax, 0x148; syscall; 
0x000000000011e1d8: mov eax, 0x149; syscall; 
0x000000000013cc33: mov eax, 0x14; add edx, 1; syscall; 
0x0000000000120053: mov eax, 0x14; mov dword ptr [r13 + 0x20], 0; mov byte ptr [r13 + 0x26], 0; mov byte ptr [rbp - 0x7c9], 0x73; syscall; 
0x00000000001134ed: mov eax, 0x14; syscall; 
0x000000000011e9c0: mov eax, 0x14a; syscall; 
0x000000000011e9f0: mov eax, 0x14b; syscall; 
0x000000000010c6cc: mov eax, 0x14c; syscall; 
0x000000000010d0e0: mov eax, 0x15; syscall; 
0x00000000000a733e: mov eax, 0x16; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009aa30: mov eax, 0x16; ret; 
0x000000000010d770: mov eax, 0x16; syscall; 
0x0000000000114000: mov eax, 0x17; syscall; 
0x0000000000101860: mov eax, 0x18; syscall; 
0x000000000012c420: mov eax, 0x18; syscall; ret; 
0x000000000011e663: mov eax, 0x19; syscall; 
0x00000000001175cd: mov eax, 0x1a; syscall; 
0x0000000000117690: mov eax, 0x1b; syscall; 
0x000000000010c287: mov eax, 0x1c; syscall; 
0x000000000010c287: mov eax, 0x1c; syscall; neg eax; ret; 
0x000000000011fa53: mov eax, 0x1d; syscall; 
0x000000000011f9f0: mov eax, 0x1e; syscall; 
0x0000000000160ea9: mov eax, 0x1f0ffff2; add byte ptr [rax - 0x75], cl; add eax, 0x82fb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011fa80: mov eax, 0x1f; syscall; 
0x0000000000035297: mov eax, 0x200; ret; 
0x00000000000e3692: mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000ba700: mov eax, 0x20; pop rbx; ret; 
0x000000000010d6e0: mov eax, 0x20; syscall; 
0x000000000010d710: mov eax, 0x21; syscall; 
0x00000000000e15bd: mov eax, 0x22; syscall; 
0x00000000000e163d: mov eax, 0x23; syscall; 
0x00000000000d2980: mov eax, 0x24; syscall; 
0x00000000000e1510: mov eax, 0x25; syscall; 
0x00000000000d29b0: mov eax, 0x26; syscall; 
0x00000000000e26e0: mov eax, 0x27; syscall; 
0x00000000000e26e0: mov eax, 0x27; syscall; ret; 
0x0000000000111d53: mov eax, 0x28; syscall; 
0x000000000011f110: mov eax, 0x29; syscall; 
0x000000000011eb1d: mov eax, 0x2a; syscall; 
0x000000000011ea4d: mov eax, 0x2b; syscall; 
0x000000000011eea6: mov eax, 0x2c; syscall; 
0x000000000011ec86: mov eax, 0x2d; syscall; 
0x000000000011ef5d: mov eax, 0x2e; syscall; 
0x000000000011edfd: mov eax, 0x2f; syscall; 
0x00000000000ba6f0: mov eax, 0x30; pop rbx; ret; 
0x000000000011f0e0: mov eax, 0x30; syscall; 
0x000000000011eae0: mov eax, 0x31; syscall; 
0x000000000011ec40: mov eax, 0x32; syscall; 
0x000000000011ebe0: mov eax, 0x33; syscall; 
0x000000000011ebb0: mov eax, 0x34; syscall; 
0x000000000011f143: mov eax, 0x35; syscall; 
0x000000000011f0b3: mov eax, 0x36; syscall; 
0x000000000011ec13: mov eax, 0x37; syscall; 
0x00000000000e1707: mov eax, 0x38; syscall; 
0x00000000000e18c1: mov eax, 0x3a; syscall; 
0x00000000000e1950: mov eax, 0x3b; syscall; 
0x000000000011db22: mov eax, 0x3c; syscall; 
0x00000000000e12ea: mov eax, 0x3d; syscall; 
0x0000000000052ee9: mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x00000000000441b0: mov eax, 0x3e; syscall; 
0x00000000000e1240: mov eax, 0x3f; syscall; 
0x00000000000e3614: mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000ba720: mov eax, 0x40; pop rbx; ret; 
0x00000000000e35e8: mov eax, 0x40; ret; 
0x000000000011f8f0: mov eax, 0x40; syscall; 
0x000000000011f8c0: mov eax, 0x41; syscall; 
0x000000000011f952: mov eax, 0x42; syscall; 
0x0000000000111432: mov eax, 0x4389ffff; cmp al, 0x85; ror byte ptr [rdi], 0x88; ret; 
0x000000000011fa20: mov eax, 0x43; syscall; 
0x000000000011f860: mov eax, 0x44; syscall; 
0x000000000011f720: mov eax, 0x45; syscall; 
0x000000000011f7c0: mov eax, 0x46; syscall; 
0x000000000011f890: mov eax, 0x47; syscall; 
0x00000000001526ba: mov eax, 0x48000000; mov dword ptr [rsp + 0xc8], edx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000152620: mov eax, 0x48000000; mov dword ptr [rsp + 0xc8], edx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x000000000015da51: mov eax, 0x48000001; mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015df0c: mov eax, 0x48000001; mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000014791a: mov eax, 0x48000023; mov edi, ebp; call qword ptr [rax + 0x20]; 
0x0000000000147970: mov eax, 0x48000023; mov edi, ebx; call qword ptr [rax + 0x28]; 
0x000000000015d9a4: mov eax, 0x48000864; mov esi, edi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000063bf4: mov eax, 0x48000c81; add esp, 0x80; ret; 
0x000000000010d48d: mov eax, 0x48; syscall; 
0x0000000000088a60: mov eax, 0x49068948; sar eax, 2; call qword ptr [rbp + 0x30]; 
0x000000000010d510: mov eax, 0x49; syscall; 
0x000000000011421d: mov eax, 0x4a; syscall; 
0x00000000001142cd: mov eax, 0x4b; syscall; 
0x0000000000115b10: mov eax, 0x4c; syscall; 
0x00000000000750ef: mov eax, 0x4cfffff6; mov esi, esi; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x0000000000115b40: mov eax, 0x4d; syscall; 
0x000000000010d93b: mov eax, 0x4f; syscall; 
0x000000000010d860: mov eax, 0x50; syscall; 
0x000000000010d890: mov eax, 0x51; syscall; 
0x0000000000063a10: mov eax, 0x52; syscall; 
0x000000000010cbf0: mov eax, 0x53; syscall; 
0x000000000010eb20: mov eax, 0x54; syscall; 
0x000000000010d7dd: mov eax, 0x55; syscall; 
0x000000000010e9a0: mov eax, 0x56; syscall; 
0x000000000010eac0: mov eax, 0x57; syscall; 
0x000000000010ea00: mov eax, 0x58; syscall; 
0x000000000010ea60: mov eax, 0x59; syscall; 
0x000000000010cb00: mov eax, 0x5a; syscall; 
0x0000000000030e48: mov eax, 0x5b000000; pop r12; ret; 
0x00000000001163d3: mov eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x00000000001504ee: mov eax, 0x5b000000; pop rbp; ret; 
0x000000000010cb30: mov eax, 0x5b; syscall; 
0x000000000010e150: mov eax, 0x5c; syscall; 
0x000000000010e180: mov eax, 0x5d; syscall; 
0x000000000010e1b0: mov eax, 0x5e; syscall; 
0x000000000010caf0: mov eax, 0x5f; syscall; 
0x000000000010caf0: mov eax, 0x5f; syscall; ret; 
0x00000000000ba710: mov eax, 0x60; pop rbx; ret; 
0x00000000000cf780: mov eax, 0x60; syscall; 
0x0000000000112e60: mov eax, 0x62; syscall; 
0x000000000011e780: mov eax, 0x63; syscall; 
0x00000000000434b4: mov eax, 0x64001a09; mov dword ptr [rax], 0x22; add rsp, 8; ret; 
0x00000000000e1270: mov eax, 0x64; syscall; 
0x0000000000114948: mov eax, 0x65; syscall; 
0x00000000000e2700: mov eax, 0x66; syscall; 
0x00000000000e2700: mov eax, 0x66; syscall; ret; 
0x000000000011e600: mov eax, 0x67; syscall; 
0x00000000000e2720: mov eax, 0x68; syscall; 
0x00000000000e2720: mov eax, 0x68; syscall; ret; 
0x00000000000e278e: mov eax, 0x69; syscall; 
0x00000000000e281e: mov eax, 0x6a; syscall; 
0x00000000000e2710: mov eax, 0x6b; syscall; 
0x00000000000e2710: mov eax, 0x6b; syscall; ret; 
0x00000000000e2730: mov eax, 0x6c; syscall; 
0x00000000000e2730: mov eax, 0x6c; syscall; ret; 
0x00000000000e2970: mov eax, 0x6d; syscall; 
0x00000000000e26f0: mov eax, 0x6e; syscall; 
0x00000000000e26f0: mov eax, 0x6e; syscall; ret; 
0x00000000000e29a0: mov eax, 0x6f; syscall; 
0x00000000000e29a0: mov eax, 0x6f; syscall; ret; 
0x00000000000e2a00: mov eax, 0x70; syscall; 
0x00000000001139be: mov eax, 0x71; syscall; 
0x0000000000113a6e: mov eax, 0x72; syscall; 
0x00000000000e2740: mov eax, 0x73; syscall; 
0x00000000000ddabe: mov eax, 0x74; syscall; 
0x0000000000113b2e: mov eax, 0x75; mov edi, edx; syscall; 
0x00000000000e2aae: mov eax, 0x75; syscall; 
0x00000000000326e3: mov eax, 0x75b7e8; add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x00000000000e2a30: mov eax, 0x76; syscall; 
0x0000000000113bfe: mov eax, 0x77; mov edi, edx; syscall; 
0x00000000000e2b4e: mov eax, 0x77; syscall; 
0x00000000000e2a60: mov eax, 0x78; syscall; 
0x00000000000e2940: mov eax, 0x79; syscall; 
0x000000000011dbb0: mov eax, 0x7a; syscall; 
0x000000000011dbe0: mov eax, 0x7b; syscall; 
0x00000000000e29d0: mov eax, 0x7c; syscall; 
0x000000000011e360: mov eax, 0x7d; syscall; 
0x00000000000e3570: mov eax, 0x7e; ret; 
0x000000000011e390: mov eax, 0x7e; syscall; 
0x0000000000043194: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000000e3542: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000441e5: mov eax, 0x7f; syscall; 
0x000000000013b870: mov eax, 0x7fffffff; ret; 
0x00000000000ba6c0: mov eax, 0x80; pop rbx; ret; 
0x0000000000044fa2: mov eax, 0x81; syscall; 
0x0000000000044222: mov eax, 0x82; syscall; 
0x0000000000044760: mov eax, 0x83; syscall; 
0x0000000000154603: mov eax, 0x8478b48; call qword ptr [rax + 8]; 
0x000000000010c4e0: mov eax, 0x84; syscall; 
0x000000000010c8a6: mov eax, 0x85; syscall; 
0x000000000011e7e0: mov eax, 0x86; syscall; 
0x000000000011ddc0: mov eax, 0x87; syscall; 
0x000000000011ad77: mov eax, 0x88; syscall; 
0x000000000012cc60: mov eax, 0x89483f74; ret; 
0x0000000000159a7c: mov eax, 0x8948ffec; ret; 
0x000000000010c9b0: mov eax, 0x89; syscall; 
0x00000000000f05d4: mov eax, 0x89ffffa8; ret 0xc031; 
0x000000000010c9e0: mov eax, 0x8a; syscall; 
0x00000000000ec8fc: mov eax, 0x8b90c0eb; add al, 0x8b; push rbp; add al, 1; ret 0x341; 
0x0000000000113210: mov eax, 0x8c; syscall; 
0x000000000009d3d0: mov eax, 0x8d480000; adc eax, 0xc4d56; cmovne rax, rdx; ret; 
0x0000000000113250: mov eax, 0x8d; syscall; 
0x00000000001017a0: mov eax, 0x8e; syscall; 
0x00000000001017d0: mov eax, 0x8f; syscall; 
0x0000000000101800: mov eax, 0x90; syscall; 
0x00000000000e35ce: mov eax, 0x9123683e; cmp rdx, rax; mov edx, 0x20; mov eax, 0xff; cmovne rax, rdx; ret; 
0x0000000000101830: mov eax, 0x91; syscall; 
0x0000000000101890: mov eax, 0x92; syscall; 
0x00000000001018c0: mov eax, 0x93; syscall; 
0x00000000001018f0: mov eax, 0x94; syscall; 
0x00000000001176f0: mov eax, 0x95; syscall; 
0x0000000000117720: mov eax, 0x96; syscall; 
0x0000000000117750: mov eax, 0x97; syscall; 
0x0000000000117780: mov eax, 0x98; syscall; 
0x0000000000114670: mov eax, 0x99; syscall; 
0x000000000011e2c0: mov eax, 0x9a; syscall; 
0x000000000011e6c0: mov eax, 0x9b; syscall; 
0x000000000011e6f3: mov eax, 0x9d; syscall; 
0x000000000011e290: mov eax, 0x9e; syscall; 
0x000000000011e330: mov eax, 0x9f; syscall; 
0x00000000001141e0: mov eax, 0xa1; syscall; 
0x0000000000114290: mov eax, 0xa2; syscall; 
0x00000000001141b0: mov eax, 0xa3; syscall; 
0x00000000000cf860: mov eax, 0xa4; syscall; 
0x000000000011e633: mov eax, 0xa5; syscall; 
0x000000000011db50: mov eax, 0xa6; syscall; 
0x00000000001146a0: mov eax, 0xa7; syscall; 
0x00000000001146d0: mov eax, 0xa8; syscall; 
0x000000000011437c: mov eax, 0xa9; syscall; 
0x0000000000117590: mov eax, 0xa; syscall; 
0x0000000000113e70: mov eax, 0xaa; syscall; 
0x0000000000113fc0: mov eax, 0xab; syscall; 
0x000000000011da10: mov eax, 0xac; syscall; 
0x000000000011d9e0: mov eax, 0xad; syscall; 
0x000000000011e3f0: mov eax, 0xae; syscall; 
0x000000000011e513: mov eax, 0xaf; syscall; 
0x000000000011e420: mov eax, 0xb0; syscall; 
0x000000000011e4e0: mov eax, 0xb1; syscall; 
0x000000000011e723: mov eax, 0xb2; syscall; 
0x000000000011e753: mov eax, 0xb3; syscall; 
0x000000000011e690: mov eax, 0xb4; syscall; 
0x000000000015a8f3: mov eax, 0xb5; syscall; 
0x000000000015a943: mov eax, 0xb6; syscall; 
0x000000000014be00: mov eax, 0xb8000000; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000117560: mov eax, 0xb; syscall; 
0x0000000000043ea2: mov eax, 0xba; syscall; 
0x000000000011db80: mov eax, 0xbb; syscall; 
0x000000000011b9d3: mov eax, 0xbc; syscall; 
0x000000000011b973: mov eax, 0xbd; syscall; 
0x000000000011b853: mov eax, 0xbe; syscall; 
0x000000000011b883: mov eax, 0xbf; syscall; 
0x000000000011b8e3: mov eax, 0xc0; syscall; 
0x000000000011b7c3: mov eax, 0xc1; syscall; 
0x000000000011b8b0: mov eax, 0xc2; syscall; 
0x000000000011b910: mov eax, 0xc3; syscall; 
0x000000000011b7f0: mov eax, 0xc4; syscall; 
0x000000000011b9a0: mov eax, 0xc5; syscall; 
0x000000000011b940: mov eax, 0xc6; syscall; 
0x00000000000485fc: mov eax, 0xc7640019; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011b820: mov eax, 0xc7; syscall; 
0x00000000001563ba: mov eax, 0xc7ffff; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000cf6c0: mov eax, 0xc9; syscall; 
0x00000000000cf6c0: mov eax, 0xc9; syscall; ret; 
0x00000000000eae81: mov eax, 0xc; pop rbp; pop r12; ret; 
0x000000000010b49c: mov eax, 0xc; pop rbx; pop rbp; ret; 
0x00000000001132f0: mov eax, 0xc; syscall; 
0x000000000012bd95: mov eax, 0xca; syscall; 
0x000000000012bdc2: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x000000000012be69: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000011e450: mov eax, 0xd5; syscall; 
0x00000000001176c3: mov eax, 0xd8; syscall; 
0x00000000000dc9c0: mov eax, 0xd9; syscall; 
0x000000000011f9c3: mov eax, 0xdc; syscall; 
0x0000000000111873: mov eax, 0xdd; syscall; 
0x0000000000048a2b: mov eax, 0xdeece66d; add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000012c73a: mov eax, 0xe3; syscall; 
0x00000000000dbac7: mov eax, 0xe4; syscall; 
0x000000000011e2f0: mov eax, 0xe4; syscall; ret; 
0x00000000000e3903: mov eax, 0xe5; syscall; 
0x000000000012c655: mov eax, 0xe5; xor esi, esi; lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x000000000012c7a5: mov eax, 0xe6; syscall; 
0x000000000011de00: mov eax, 0xe8; syscall; 
0x0000000000046e94: mov eax, 0xe8df8948; ret; 
0x000000000014d938: mov eax, 0xe8fffffe; iretd; sbb dh, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000011e4b3: mov eax, 0xe9; syscall; 
0x0000000000043ed0: mov eax, 0xe; syscall; 
0x0000000000043eae: mov eax, 0xea; syscall; 
0x00000000001158f0: mov eax, 0xeb; syscall; 
0x000000000007bd7a: mov eax, 0xebfffff6; add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0x8348; 
0x000000000005f8b4: mov eax, 0xf001585; push rax; fsub qword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000018bfb9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000e1473: mov eax, 0xf7; syscall; 
0x0000000000043f61: mov eax, 0xf; syscall; 
0x00000000000e3560: mov eax, 0xfc17; ret; 
0x000000000011e570: mov eax, 0xfd; syscall; 
0x00000000000e34d1: mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x000000000011e540: mov eax, 0xfe; syscall; 
0x00000000000e35db: mov eax, 0xff; cmovne rax, rdx; ret; 
0x000000000011e5d0: mov eax, 0xff; syscall; 
0x00000000000e349b: mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x00000000000e3580: mov eax, 0xfffa; ret; 
0x00000000000f4384: mov eax, 0xfffbd2e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000042a81: mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x00000000001599dc: mov eax, 0xfffeffe9; jmp qword ptr [rsi + 0xf]; 
0x0000000000058663: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000005885a: mov eax, 0xffffc002; sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000015e961: mov eax, 0xfffffffe; ret; 
0x0000000000044946: mov eax, 0xfffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000895ad: mov eax, 0xffffffff; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c4b3: mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013ac92: mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000013b7e9: mov eax, 0xffffffff; mov rdx, rax; ret; 
0x000000000013a5c9: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000133ddc: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x000000000008d771: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046f4e: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c532f: mov eax, 0xffffffff; pop rbx; pop rbp; pop r14; ret; 
0x0000000000084aac: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000004216e: mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000043dff: mov eax, 0xffffffff; ret; 
0x0000000000125e0d: mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000082c97: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114aaf: mov eax, 1; add rsp, 8; ret; 
0x00000000001178b9: mov eax, 1; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x00000000000eaa60: mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x0000000000155b6d: mov eax, 1; mov dword ptr [rdi + 0x28], edx; ret; 
0x000000000005869d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000155c61: mov eax, 1; mov qword ptr [rdi + 0x18], rdx; ret; 
0x00000000000585e5: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000048a71: mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000014f2f4: mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014bd0e: mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014e9f6: mov eax, 1; movups xmmword ptr [rdx], xmm2; ret; 
0x000000000014f306: mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014f2e6: mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x00000000000ce8a4: mov eax, 1; pop r12; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x0000000000061b8d: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000147925: mov eax, 1; pop rbp; pop r12; ret; 
0x0000000000056457: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000014475c: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000010b708: mov eax, 1; pop rbx; ret; 
0x00000000000562e3: mov eax, 1; ret; 
0x0000000000044905: mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010d01d: mov eax, 1; syscall; 
0x000000000011bffc: mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015abe9: mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x00000000000587c2: mov eax, 2; ret; 
0x000000000013b088: mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000012c675: mov eax, 3; cmovne eax, edx; ret; 
0x0000000000139844: mov eax, 3; mov edi, dword ptr [rbp - 0x60]; syscall; 
0x00000000000ce4d1: mov eax, 3; ret; 
0x000000000010d66d: mov eax, 3; syscall; 
0x0000000000139582: mov eax, 3; syscall; ret; 
0x00000000000ce4e1: mov eax, 4; ret; 
0x000000000010c5be: mov eax, 4; syscall; 
0x000000000012c897: mov eax, 5; pop r12; pop rbp; ret; 
0x00000000001062a8: mov eax, 5; pop rbp; pop r12; ret; 
0x00000000001063a4: mov eax, 5; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000ce4f1: mov eax, 5; ret; 
0x000000000010c60c: mov eax, 5; syscall; 
0x00000000000ce501: mov eax, 6; ret; 
0x000000000010c65e: mov eax, 6; syscall; 
0x00000000000ce511: mov eax, 7; ret; 
0x00000000001116ed: mov eax, 7; syscall; 
0x00000000001117bb: mov eax, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x00000000000ba6d0: mov eax, 8; pop rbx; ret; 
0x0000000000027b00: mov eax, 8; ret; 
0x000000000010d0b0: mov eax, 8; syscall; 
0x000000000010b6b1: mov eax, 9; pop rbp; pop r12; ret; 
0x00000000001174bc: mov eax, 9; syscall; 
0x000000000012c382: mov eax, dword ptr [0x10]; ret; 
0x000000000014ea30: mov eax, dword ptr [r8 + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014ea90: mov eax, dword ptr [r8 + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014ea60: mov eax, dword ptr [r8 + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014bde0: mov eax, dword ptr [r8 + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014bd80: mov eax, dword ptr [r8]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000154398: mov eax, dword ptr [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000014f387: mov eax, dword ptr [rax + 0x10]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000047ea0: mov eax, dword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000869cf: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000086b06: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000088dca: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000084345: mov eax, dword ptr [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000120820: mov eax, dword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000154d7d: mov eax, dword ptr [rax + 0x18]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000001543c8: mov eax, dword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000120920: mov eax, dword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000472b9: mov eax, dword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ba61: mov eax, dword ptr [rax + 0x1a0]; ret; 
0x000000000015d97f: mov eax, dword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000088dd1: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000014796e: mov eax, dword ptr [rax + 0x23b8]; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000012b6f9: mov eax, dword ptr [rax + 0x30]; ret; 
0x00000000001210b7: mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011b7ac: mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000014e8fd: mov eax, dword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000035482: mov eax, dword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000014ea31: mov eax, dword ptr [rax + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000352b2: mov eax, dword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000898d4: mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000014f23d: mov eax, dword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014ea91: mov eax, dword ptr [rax + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014ea61: mov eax, dword ptr [rax + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000035292: mov eax, dword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003552b: mov eax, dword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000047cf6: mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000014bc20: mov eax, dword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000339ee: mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000014bde1: mov eax, dword ptr [rax + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014f3bf: mov eax, dword ptr [rax + 0xc]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000011ba3a: mov eax, dword ptr [rax + 8]; ret; 
0x00000000000750e9: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x948], r9d; mov rsi, r14; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000001211e6: mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000035295: mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000035457: mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034daf: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034dff: mov eax, dword ptr [rax + rdx]; ret; 
0x0000000000121a44: mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000014f347: mov eax, dword ptr [rax]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014bd81: mov eax, dword ptr [rax]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000339ec: mov eax, dword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003547f: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000352af: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003528f: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034dac: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000339e9: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003547c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000352ac: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003528c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000351ec: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351cc: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351ac: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000003512c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003516c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350cc: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003514c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000003510c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003526c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000350ec: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003518c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000350ac: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012b740: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x0000000000047cf3: mov eax, dword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000140129: mov eax, dword ptr [rax]; ret; 
0x0000000000086daa: mov eax, dword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000086c2e: mov eax, dword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000083ee4: mov eax, dword ptr [rbp + 0x48]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000147220: mov eax, dword ptr [rbp + 8]; lea esi, [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000014d541: mov eax, dword ptr [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000014d4ba: mov eax, dword ptr [rbp + 8]; lea rsi, [rsp + 0xc]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000147192: mov eax, dword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014724a: mov eax, dword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d42b: mov eax, dword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000001461b1: mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000147ab9: mov eax, dword ptr [rbp + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x0000000000147af7: mov eax, dword ptr [rbp + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000014d4a9: mov eax, dword ptr [rbp + 8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000035c5c: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006cd15: mov eax, dword ptr [rbp - 0x5a0]; mov rdx, qword ptr [rbp - 0x5b0]; movsxd rax, dword ptr [rsi + rax*4]; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x000000000002841b: mov eax, dword ptr [rbp - 0x68]; call rax; 
0x000000000012618b: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000090bfd: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000015358b: mov eax, dword ptr [rbx + 0x18]; lea r12, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000001261db: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001535b7: mov eax, dword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000008c235: mov eax, dword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000001457db: mov eax, dword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145799: mov eax, dword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000145875: mov eax, dword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457ef: mov eax, dword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000147918: mov eax, dword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000008ac74: mov eax, dword ptr [rbx + 0x28]; sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000091379: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000091829: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; xor edx, edx; pop rbx; jmp rax; 
0x000000000014f5c8: mov eax, dword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014f59c: mov eax, dword ptr [rbx + 0x60]; mov dword ptr [rbx + 0x58], 0; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000014f612: mov eax, dword ptr [rbx + 0x60]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000014eb66: mov eax, dword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014eb7c: mov eax, dword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000082015: mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000088dbf: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000014bf17: mov eax, dword ptr [rbx + 0xd0]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000146562: mov eax, dword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000147f69: mov eax, dword ptr [rbx + 8]; lea rsi, [rbp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x00000000001546d9: mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000154680: mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000015555f: mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000001555b0: mov eax, dword ptr [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000001516fa: mov eax, dword ptr [rbx + 8]; mov dword ptr [r10], 0xe; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000014657d: mov eax, dword ptr [rbx + 8]; mov esi, r14d; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000008c22d: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000012613b: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001460d2: mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000146501: mov eax, dword ptr [rbx + 8]; mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x0000000000147f15: mov eax, dword ptr [rbx + 8]; mov rsi, r12; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000150d38: mov eax, dword ptr [rbx + 8]; pop rdx; call qword ptr [rax + 0x20]; 
0x0000000000150364: mov eax, dword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000150fca: mov eax, dword ptr [rbx]; mov rdx, qword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x0000000000178514: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b2059: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000001784f5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b203a: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000178526: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000001741d6: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x00000000001785a7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000174217: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000178546: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000001741e6: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x00000000001785c7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000174237: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000178566: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000000b20dd: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017a82f: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785e7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000174257: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000178586: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000000b20fd: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000178477: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000174147: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000b20be: mov eax, dword ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000017d8da: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017f1b2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000086c67: mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001784d0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000001784e0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b2015: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000001784f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b2035: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000178510: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b2055: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000000b2005: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000017a8dc: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178421: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000178521: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000001741d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000178541: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000001741e1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000178561: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000001741f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000178581: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000174201: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000001785a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000174211: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x00000000001785c1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000174231: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x00000000001785e1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000174251: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000178471: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000174141: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000001740f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000001784a1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001784b1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b1fe6: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b1fd6: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000010bd94: mov eax, dword ptr [rcx]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000010c1d0: mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000013dfc3: mov eax, dword ptr [rdi + 0x10]; lea rax, [rax + rdx*8]; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x000000000014e8f1: mov eax, dword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f231: mov eax, dword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000873ce: mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000092690: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000000926b8: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000010c1c0: mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000090ac8: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000155b31: mov eax, dword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000147050: mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000dc9b1: mov eax, dword ptr [rdi + 0x20]; ret; 
0x0000000000092f91: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000937cf: mov eax, dword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 0x18; ret; 
0x0000000000155ec0: mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000008c281: mov eax, dword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000001458f1: mov eax, dword ptr [rdi + 0x38]; add r12, 0x18; mov rsi, r12; call qword ptr [rax + 0x10]; 
0x000000000014590a: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014586a: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000015036a: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000001457b7: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000014699d: mov eax, dword ptr [rdi + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000008c171: mov eax, dword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000898d1: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000090a9b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000eca90: mov eax, dword ptr [rdi + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ecab0: mov eax, dword ptr [rdi + 0x4c]; ret; 
0x000000000014fe2d: mov eax, dword ptr [rdi + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000092971: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000010b900: mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000112780: mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x000000000011280f: mov eax, dword ptr [rdi + 8]; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000154379: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x00000000001543a9: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x0000000000145b4d: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000150412: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000147136: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x000000000015595d: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000147ea3: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000155899: mov eax, dword ptr [rdi + 8]; jmp qword ptr [rax + 0x40]; 
0x00000000001558a1: mov eax, dword ptr [rdi + 8]; jmp qword ptr [rax + 0x48]; 
0x0000000000154581: mov eax, dword ptr [rdi + 8]; jmp qword ptr [rax + 8]; 
0x0000000000154576: mov eax, dword ptr [rdi + 8]; jmp qword ptr [rax]; 
0x0000000000147f01: mov eax, dword ptr [rdi + 8]; lea r12, [rsp + 0x10]; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000015043d: mov eax, dword ptr [rdi + 8]; lea rdx, [rsp + 0x18]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001504c1: mov eax, dword ptr [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000014e314: mov eax, dword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x0000000000154e91: mov eax, dword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155929: mov eax, dword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x0000000000154671: mov eax, dword ptr [rdi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x0000000000152651: mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x00000000001524f1: mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000015250c: mov eax, dword ptr [rdi + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000155551: mov eax, dword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000147e79: mov eax, dword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000000147f50: mov eax, dword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000152376: mov eax, dword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152166: mov eax, dword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d6: mov eax, dword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152246: mov eax, dword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x000000000015559e: mov eax, dword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001546c1: mov eax, dword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000015575e: mov eax, dword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001547b1: mov eax, dword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000009a201: mov eax, dword ptr [rdi + rax - 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000008c1e0: mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008c1b0: mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000011fac1: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000009267e: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000012be9c: mov eax, dword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000005874b: mov eax, dword ptr [rdi]; mov word ptr [rsp - 0x10], si; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000093551: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x150d56], 1; mov dword ptr [rip + 0x150d48], eax; ret; 
0x0000000000093501: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x150da6], 1; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934e1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x150dc6], 1; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x0000000000093571: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x154072], eax; ret; 
0x00000000000932b1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x15102d], rax; ret; 
0x00000000000932a1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x0000000000093251: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x15103d], rax; ret; 
0x0000000000093241: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x0000000000101b61: mov eax, dword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x00000000000dc9f0: mov eax, dword ptr [rdi]; ret; 
0x000000000008d2f0: mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008d300: mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000087ad8: mov eax, dword ptr [rdx + 0x20]; cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008c272: mov eax, dword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c162: mov eax, dword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000898ab: mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000011229f: mov eax, dword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001466ac: mov eax, dword ptr [rdx + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x0000000000101bb1: mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000035223: mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000ad416: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013616d: mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000339bd: mov eax, dword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000014e9b1: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ea79: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014bce1: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014bdf9: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x0000000000154e48: mov eax, dword ptr [rdx]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000fe758: mov eax, dword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000014f3a1: mov eax, dword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000014f2a1: mov eax, dword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000084bdc: mov eax, dword ptr [rdx]; ret; 
0x000000000014ea49: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014bdc9: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000e3771: mov eax, dword ptr [rip + 0x1006f9]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000e3681: mov eax, dword ptr [rip + 0x1007e9]; mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000dc876: mov eax, dword ptr [rip + 0x1075f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e2b98: mov eax, dword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af8: mov eax, dword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e285a: mov eax, dword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27ca: mov eax, dword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e1891: mov eax, dword ptr [rip + 0x108b21]; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc2d1: mov eax, dword ptr [rip + 0x10e089]; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc28b: mov eax, dword ptr [rip + 0x10e0d7]; lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e1: mov eax, dword ptr [rip + 0x10e279]; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0b4: mov eax, dword ptr [rip + 0x10e2ae]; lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff1: mov eax, dword ptr [rip + 0x10e369]; lea rdi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfc8: mov eax, dword ptr [rip + 0x10e39a]; lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbaf6: mov eax, dword ptr [rip + 0x10e864]; lea rdi, [rip + 0x10ac1d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d0568: mov eax, dword ptr [rip + 0x1138da]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceab1: mov eax, dword ptr [rip + 0x1153b9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000cea91: mov eax, dword ptr [rip + 0x1153d9]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000c8d42: mov eax, dword ptr [rip + 0x121620]; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b92: mov eax, dword ptr [rip + 0x1217c8]; lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009c601: mov eax, dword ptr [rip + 0x147869]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009c472: mov eax, dword ptr [rip + 0x147ad8]; call qword ptr [rax]; 
0x000000000009c291: mov eax, dword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1b1: mov eax, dword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x0000000000098a35: mov eax, dword ptr [rip + 0x14b4a5]; mov qword ptr [rax], rdi; ret; 
0x00000000000981a1: mov eax, dword ptr [rip + 0x14bcc9]; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000097991: mov eax, dword ptr [rip + 0x14c4d9]; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009d6e3: mov eax, dword ptr [rip + 0x14cc97]; mov rsi, rbp; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d69b: mov eax, dword ptr [rip + 0x14ccd7]; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4cc: mov eax, dword ptr [rip + 0x14ce9e]; lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009651c: mov eax, dword ptr [rip + 0x14d89e]; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x0000000000096282: mov eax, dword ptr [rip + 0x14db38]; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000009389b: mov eax, dword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000093891: mov eax, dword ptr [rip + 0x150749]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000092951: mov eax, dword ptr [rip + 0x152d09]; ret; 
0x00000000000901f1: mov eax, dword ptr [rip + 0x153c79]; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008ffa6: mov eax, dword ptr [rip + 0x153ec4]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008c7a1: mov eax, dword ptr [rip + 0x1576c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000089269: mov eax, dword ptr [rip + 0x15ac01]; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000083f81: mov eax, dword ptr [rip + 0x15fee9]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000005f671: mov eax, dword ptr [rip + 0x1847f9]; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000005f561: mov eax, dword ptr [rip + 0x184909]; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x00000000000559f1: mov eax, dword ptr [rip + 0x194941]; lea rsi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052d72: mov eax, dword ptr [rip + 0x197618]; lea rdi, [rsp + 0x40]; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000048c01: mov eax, dword ptr [rip + 0x19b269]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000485f9: mov eax, dword ptr [rip + 0x19b871]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048559: mov eax, dword ptr [rip + 0x19b911]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044db6: mov eax, dword ptr [rip + 0x19f0b4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044c76: mov eax, dword ptr [rip + 0x19f1f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044b39: mov eax, dword ptr [rip + 0x19f331]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044de0: mov eax, dword ptr [rip + 0x19f3c2]; ret; 
0x0000000000044dd0: mov eax, dword ptr [rip + 0x19f3d6]; ret; 
0x0000000000044a89: mov eax, dword ptr [rip + 0x19f3e1]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000449b1: mov eax, dword ptr [rip + 0x19f4b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000044991: mov eax, dword ptr [rip + 0x19f4d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044959: mov eax, dword ptr [rip + 0x19f511]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044919: mov eax, dword ptr [rip + 0x19f551]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000448d9: mov eax, dword ptr [rip + 0x19f591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004487f: mov eax, dword ptr [rip + 0x19f5eb]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044159: mov eax, dword ptr [rip + 0x19fd11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f31: mov eax, dword ptr [rip + 0x19ff39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df1: mov eax, dword ptr [rip + 0x1a0079]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000434b2: mov eax, dword ptr [rip + 0x1a09b8]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043134: mov eax, dword ptr [rip + 0x1a0d36]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042d2b: mov eax, dword ptr [rip + 0x1a113f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042161: mov eax, dword ptr [rip + 0x1a1d09]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000042101: mov eax, dword ptr [rip + 0x1a1d69]; mov dword ptr fs:[rax], 0x2a; mov rax, rcx; ret; 
0x0000000000043c9b: mov eax, dword ptr [rip + 0x1a66a7]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000035491: mov eax, dword ptr [rip + 0x1ae971]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354b1: mov eax, dword ptr [rip + 0x1aea31]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354d1: mov eax, dword ptr [rip + 0x1aea51]; add rax, qword ptr fs:[0]; ret; 
0x0000000000035261: mov eax, dword ptr [rip + 0x1aeba1]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034da1: mov eax, dword ptr [rip + 0x1af021]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034d61: mov eax, dword ptr [rip + 0x1af081]; mov qword ptr [rax], rdx; ret; 
0x00000000000339e1: mov eax, dword ptr [rip + 0x1b03e1]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000039504: mov eax, dword ptr [rip + 0x1b0e5e]; lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394a4: mov eax, dword ptr [rip + 0x1b0eb6]; lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375f4: mov eax, dword ptr [rip + 0x1b2d6e]; lea rdi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003758a: mov eax, dword ptr [rip + 0x1b2dd0]; lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037458: mov eax, dword ptr [rip + 0x1b2f0a]; lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373f7: mov eax, dword ptr [rip + 0x1b2f5b]; lea rdi, [rip + 0x1af55c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003731f: mov eax, dword ptr [rip + 0x1b3043]; lea rdi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f92: mov eax, dword ptr [rip + 0x1b33d0]; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f64: mov eax, dword ptr [rip + 0x1b33fe]; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d26: mov eax, dword ptr [rip + 0x1b363c]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036cff: mov eax, dword ptr [rip + 0x1b3663]; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a46: mov eax, dword ptr [rip + 0x1b390c]; lea rdi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a1d: mov eax, dword ptr [rip + 0x1b3935]; lea rdi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003689a: mov eax, dword ptr [rip + 0x1b3ac8]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036437: mov eax, dword ptr [rip + 0x1b3f23]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036414: mov eax, dword ptr [rip + 0x1b3f4e]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036198: mov eax, dword ptr [rip + 0x1b41ba]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000360c3: mov eax, dword ptr [rip + 0x1b429f]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035562: mov eax, dword ptr [rip + 0x1b4df8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a2f: mov eax, dword ptr [rip + 0x1b592b]; lea rdi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c2: mov eax, dword ptr [rip + 0x1b59a0]; lea rdi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030cf1: mov eax, dword ptr [rip + 0x1b5a11]; ret; 
0x0000000000034926: mov eax, dword ptr [rip + 0x1b5a34]; lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003434c: mov eax, dword ptr [rip + 0x1b6016]; lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034315: mov eax, dword ptr [rip + 0x1b604d]; lea rdi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003412e: mov eax, dword ptr [rip + 0x1b622c]; lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032359: mov eax, dword ptr [rip + 0x1b8009]; lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f25: mov eax, dword ptr [rip + 0x1b843d]; lea rdi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031de3: mov eax, dword ptr [rip + 0x1b857f]; lea rdi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c89: mov eax, dword ptr [rip + 0x1b86d9]; lea rdi, [rip + 0x1b4a8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a4d: mov eax, dword ptr [rip + 0x1b8915]; lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a0d: mov eax, dword ptr [rip + 0x1b894d]; lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000027411: mov eax, dword ptr [rip + 0x1bca59]; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000026ec1: mov eax, dword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x0000000000026b52: mov eax, dword ptr [rip + 0x1bd358]; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000028801: mov eax, dword ptr [rip + 0x1c17b1]; ret; 
0x00000000000287f1: mov eax, dword ptr [rip + 0x1c17d1]; ret; 
0x0000000000026b8f: mov eax, dword ptr [rip + 0x1c3813]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000160eb1: mov eax, dword ptr [rip + 0x82fb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160671: mov eax, dword ptr [rip + 0x837f9]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000160611: mov eax, dword ptr [rip + 0x83859]; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000015e861: mov eax, dword ptr [rip + 0x85609]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015e7e1: mov eax, dword ptr [rip + 0x85689]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015d9a2: mov eax, dword ptr [rip + 0x864b8]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015d971: mov eax, dword ptr [rip + 0x864e9]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015c707: mov eax, dword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015af11: mov eax, dword ptr [rip + 0x88f59]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a991: mov eax, dword ptr [rip + 0x894d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a971: mov eax, dword ptr [rip + 0x894f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a921: mov eax, dword ptr [rip + 0x89549]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d9b: mov eax, dword ptr [rip + 0x8954f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d6b: mov eax, dword ptr [rip + 0x89577]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015a8d1: mov eax, dword ptr [rip + 0x89599]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d3b: mov eax, dword ptr [rip + 0x8959f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160de7: mov eax, dword ptr [rip + 0x895b3]; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000160d0b: mov eax, dword ptr [rip + 0x895c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cdb: mov eax, dword ptr [rip + 0x895ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cab: mov eax, dword ptr [rip + 0x89617]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015b5ca: mov eax, dword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b50a: mov eax, dword ptr [rip + 0x8a040]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b354: mov eax, dword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2b7: mov eax, dword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b21a: mov eax, dword ptr [rip + 0x8a330]; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b184: mov eax, dword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015abf5: mov eax, dword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x000000000015abc0: mov eax, dword ptr [rip + 0x8a98a]; lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000015abb7: mov eax, dword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x000000000015dec9: mov eax, dword ptr [rip + 0x8c0b9]; call qword ptr [rax + 0x10]; 
0x000000000015dc49: mov eax, dword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x000000000015db51: mov eax, dword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x0000000000151871: mov eax, dword ptr [rip + 0x92529]; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000140121: mov eax, dword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012f691: mov eax, dword ptr [rip + 0xb47c1]; add rax, qword ptr fs:[0]; ret; 
0x000000000012ec19: mov eax, dword ptr [rip + 0xb5251]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012c769: mov eax, dword ptr [rip + 0xb7701]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012bd5b: mov eax, dword ptr [rip + 0xbe5df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd2b: mov eax, dword ptr [rip + 0xbe607]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcfb: mov eax, dword ptr [rip + 0xbe62f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bccb: mov eax, dword ptr [rip + 0xbe657]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc9b: mov eax, dword ptr [rip + 0xbe67f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc6b: mov eax, dword ptr [rip + 0xbe6a7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc3b: mov eax, dword ptr [rip + 0xbe6cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc0b: mov eax, dword ptr [rip + 0xbe6f7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbab: mov eax, dword ptr [rip + 0xbe70f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbdf: mov eax, dword ptr [rip + 0xbe71b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012bb7b: mov eax, dword ptr [rip + 0xbe737]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb4b: mov eax, dword ptr [rip + 0xbe75f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb1b: mov eax, dword ptr [rip + 0xbe787]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012baeb: mov eax, dword ptr [rip + 0xbe7af]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012babb: mov eax, dword ptr [rip + 0xbe7d7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba5b: mov eax, dword ptr [rip + 0xbe827]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba2b: mov eax, dword ptr [rip + 0xbe84f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9fb: mov eax, dword ptr [rip + 0xbe877]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9cb: mov eax, dword ptr [rip + 0xbe89f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b99b: mov eax, dword ptr [rip + 0xbe8c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b96b: mov eax, dword ptr [rip + 0xbe8ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b93b: mov eax, dword ptr [rip + 0xbe917]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b90b: mov eax, dword ptr [rip + 0xbe93f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8db: mov eax, dword ptr [rip + 0xbe967]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8ab: mov eax, dword ptr [rip + 0xbe98f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b87b: mov eax, dword ptr [rip + 0xbe9b7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b84b: mov eax, dword ptr [rip + 0xbe9df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b81b: mov eax, dword ptr [rip + 0xbe9ff]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b7eb: mov eax, dword ptr [rip + 0xbeb07]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001210b1: mov eax, dword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea21: mov eax, dword ptr [rip + 0xc5449]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e279: mov eax, dword ptr [rip + 0xc5bf1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e249: mov eax, dword ptr [rip + 0xc5c21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120919: mov eax, dword ptr [rip + 0xc78f9]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000120819: mov eax, dword ptr [rip + 0xc79f9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000011ba41: mov eax, dword ptr [rip + 0xc8429]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011b7a1: mov eax, dword ptr [rip + 0xc86b9]; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000011ada9: mov eax, dword ptr [rip + 0xc90c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118411: mov eax, dword ptr [rip + 0xcba59]; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001183dc: mov eax, dword ptr [rip + 0xcba8e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001183ca: mov eax, dword ptr [rip + 0xcbaa0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000117b7b: mov eax, dword ptr [rip + 0xcc2ef]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001174e1: mov eax, dword ptr [rip + 0xcc989]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000115b94: mov eax, dword ptr [rip + 0xce2d6]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000001147a1: mov eax, dword ptr [rip + 0xcf6c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114771: mov eax, dword ptr [rip + 0xcf6f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114651: mov eax, dword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001133f1: mov eax, dword ptr [rip + 0xd0a79]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x0000000000113339: mov eax, dword ptr [rip + 0xd0b31]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113325: mov eax, dword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x000000000011299e: mov eax, dword ptr [rip + 0xd14cc]; mov rdx, rbp; mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000112834: mov eax, dword ptr [rip + 0xd1636]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001127d7: mov eax, dword ptr [rip + 0xd1693]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112223: mov eax, dword ptr [rip + 0xd1c47]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000001121d3: mov eax, dword ptr [rip + 0xd1c97]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001116b9: mov eax, dword ptr [rip + 0xd27b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000117d75: mov eax, dword ptr [rip + 0xd27f5]; pop rcx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000111581: mov eax, dword ptr [rip + 0xd28e9]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000001177e8: mov eax, dword ptr [rip + 0xd2d7a]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000010faf1: mov eax, dword ptr [rip + 0xd4379]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114f0f: mov eax, dword ptr [rip + 0xd543b]; lea rsi, [rip - 0x3c]; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113c46: mov eax, dword ptr [rip + 0xd6764]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b76: mov eax, dword ptr [rip + 0xd6834]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010cbd1: mov eax, dword ptr [rip + 0xd7299]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010cbb9: mov eax, dword ptr [rip + 0xd72b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb61: mov eax, dword ptr [rip + 0xd7309]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c991: mov eax, dword ptr [rip + 0xd74d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c939: mov eax, dword ptr [rip + 0xd7531]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d9: mov eax, dword ptr [rip + 0xd7591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c689: mov eax, dword ptr [rip + 0xd77e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c639: mov eax, dword ptr [rip + 0xd7831]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e9: mov eax, dword ptr [rip + 0xd7881]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010bb91: mov eax, dword ptr [rip + 0xde7a1]; lea rsi, [rsp + 0x2c]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb43: mov eax, dword ptr [rip + 0xde7ef]; xor esi, esi; mov edi, dword ptr [rsp + 0x2c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010910d: mov eax, dword ptr [rip + 0xe1225]; xor esi, esi; mov edi, dword ptr [rsp + 0xa8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001019c9: mov eax, dword ptr [rip + 0xe24a1]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000101979: mov eax, dword ptr [rip + 0xe24f1]; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000010512d: mov eax, dword ptr [rip + 0xe521d]; lea rsi, [rip - 0x2bda]; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001500f8: mov eax, dword ptr [rsi + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000122119: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000122091: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000122019: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000121e19: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000121f19: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000121c19: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000121e99: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000121c99: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000121d19: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000121f99: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000121b99: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000035431: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000035411: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000353f1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000035371: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000353b1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000035311: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000035391: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000035351: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000352e1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000035331: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000353d1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000352f1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000014f071: mov eax, dword ptr [rsi + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000035451: mov eax, dword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000035461: mov eax, dword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000014c662: mov eax, dword ptr [rsi + 0xd0]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x00000000000bb04c: mov eax, dword ptr [rsi + 8]; mov dword ptr [rdi + 0xc], eax; mov rax, rbx; pop rbx; ret; 
0x00000000000339d1: mov eax, dword ptr [rsi + rax*8 + 0x80]; ret; 
0x0000000000088a57: mov eax, dword ptr [rsi]; add rsi, 0x58; sub r8, qword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x0000000000154fa8: mov eax, dword ptr [rsi]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010c270: mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000154538: mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000015d551: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x000000000014e369: mov eax, dword ptr [rsp + 0x10]; lea rdx, [rip + 0x60c4c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000a70c1: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000148c91: mov eax, dword ptr [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000042a90: mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000026b65: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000002c3b8: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000148dc9: mov eax, dword ptr [rsp + 0x20]; mov rcx, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000002d471: mov eax, dword ptr [rsp + 0x28]; call rax; 
0x000000000014ff9b: mov eax, dword ptr [rsp + 0x28]; push rax; call 0x14fcb0; add rsp, 0x28; ret; 
0x00000000000cf241: mov eax, dword ptr [rsp + 0x30]; call rax; 
0x000000000005e574: mov eax, dword ptr [rsp + 0x38]; mov dword ptr [rbp - 0xe0], r8d; mov rdx, r13; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000014dc51: mov eax, dword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000014de7e: mov eax, dword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014fc46: mov eax, dword ptr [rsp + 0x60]; lea rsi, [rbp + 0x18]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014f5d7: mov eax, dword ptr [rsp + 0x60]; mov r15, qword ptr [rsp + 0x80]; mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000014fa83: mov eax, dword ptr [rsp + 0x60]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000010981c: mov eax, dword ptr [rsp + 0x6c]; lea rdx, [rip + 0xa4081]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001095f0: mov eax, dword ptr [rsp + 0x6c]; lea rdx, [rip + 0xa41ed]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000001469ed: mov eax, dword ptr [rsp + 0xc8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000e13ce: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000044269: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000000e1683: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e15f3: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000048b3f: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000359c2: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001552a5: mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 8]; 
0x00000000000462dc: mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000046399: mov eax, dword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000147555: mov eax, dword ptr [rsp + 8]; mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014c0f8: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [r15]; lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000145f98: mov eax, dword ptr [rsp + 8]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014db51: mov eax, dword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145086: mov eax, dword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001376ab: mov eax, dword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001551f6: mov eax, dword ptr [rsp + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x0000000000091277: mov eax, dword ptr [rsp + 8]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000043570: mov eax, dword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000a7110: mov eax, dword ptr [rsp - 0x10]; mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x00000000000a7128: mov eax, dword ptr [rsp - 0x18]; mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x0000000000121113: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000121174: mov eax, dword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000133c06: mov eax, dword ptr [rsp]; mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000008695a: mov eax, dword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000001401fa: mov eax, dword ptr [rsp]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009cc6d: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbd8: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000146469: mov eax, dword ptr [rsp]; mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000008dd05: mov eax, eax; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000094d60: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b244: mov eax, eax; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000112c39: mov eax, eax; mov eax, 0x10; syscall; 
0x000000000011e0ee: mov eax, eax; mov eax, 0x130; syscall; 
0x000000000011347e: mov eax, eax; mov eax, 0x13; syscall; 
0x0000000000048b20: mov eax, eax; mov eax, 0x13e; syscall; 
0x000000000011351e: mov eax, eax; mov eax, 0x14; syscall; 
0x0000000000117600: mov eax, eax; mov eax, 0x1a; syscall; 
0x000000000011eb4e: mov eax, eax; mov eax, 0x2a; syscall; 
0x000000000011ea7e: mov eax, eax; mov eax, 0x2b; syscall; 
0x000000000011ef8e: mov eax, eax; mov eax, 0x2e; syscall; 
0x000000000011ee2e: mov eax, eax; mov eax, 0x2f; syscall; 
0x000000000010d04e: mov eax, eax; mov eax, 1; syscall; 
0x0000000000111720: mov eax, eax; mov eax, 7; syscall; 
0x00000000000e1316: mov eax, eax; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x000000000010d4ca: mov eax, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000011ded2: mov eax, eax; mov edi, ebx; mov eax, 0x114; syscall; 
0x00000000001122f4: mov eax, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df84: mov eax, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b344: mov eax, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x0000000000112392: mov eax, eax; mov edi, ebx; mov eax, 0x11d; syscall; 
0x000000000011f484: mov eax, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3f4: mov eax, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f5d4: mov eax, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13af: mov eax, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f754: mov eax, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011de34: mov eax, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x000000000012c802: mov eax, eax; mov esi, dword ptr [rsp + 0xc]; mov edi, dword ptr [rsp + 8]; mov eax, 0xe6; syscall; 
0x000000000014bdb9: mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000044eac: mov eax, eax; mov r10d, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000010ced2: mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000027294: mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000099ab2: mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008571f: mov eax, eax; pop rbx; ret; 
0x00000000000ba73b: mov eax, eax; ret; 
0x000000000018ad44: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000146558: mov eax, eax; sub rax, r12; mov qword ptr [rbp + 0x18], rax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x00000000000e1922: mov eax, eax; syscall; 
0x00000000001863d1: mov eax, eax; vzeroupper; ret; 
0x000000000010cfae: mov eax, eax; xor eax, eax; syscall; 
0x000000000008e95e: mov eax, ebp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f081c: mov eax, ebp; mov dword ptr [rbx + 0x30], r8d; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000155298: mov eax, ebp; mov rsi, rsp; mov rdi, r12; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000034a06: mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x00000000001186a4: mov eax, ebp; pop rbp; pop r12; jmp rax; 
0x00000000000349e0: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000082478: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000000035aa7: mov eax, ebp; pop rbp; pop r12; ret; 
0x0000000000119087: mov eax, ebp; pop rbx; pop rbp; jmp rax; 
0x000000000008245e: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000035a89: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000005c58b: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000056893: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000008cd5b: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001140f0: mov eax, ebx; mov eax, 0x10e; syscall; 
0x00000000000a0dd6: mov eax, ebx; pop rbx; cmovne rax, rdi; ret; 
0x000000000008d5e8: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003164a: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000039525: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000048018: mov eax, ebx; pop rbx; ret; 
0x0000000000117e3a: mov eax, ebx; pop rdx; pop rbx; ret; 
0x0000000000056757: mov eax, ecx; adc eax, eax; ret; 
0x00000000000ba74c: mov eax, ecx; and eax, 0x7ff80000; div esi; mov eax, eax; ret; 
0x000000000008744d: mov eax, ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000011db03: mov eax, ecx; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000001172e0: mov eax, ecx; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000007a0a8: mov eax, ecx; pop r14; ret; 
0x0000000000079ff7: mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000009ae6a: mov eax, ecx; pop rbx; pop rbp; ret; 
0x00000000000ba618: mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000000ba663: mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x00000000000420fc: mov eax, ecx; ret; 
0x0000000000053626: mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x0000000000043e9b: mov eax, ecx; syscall; 
0x000000000013b85a: mov eax, edi; add eax, edx; mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x00000000000352c0: mov eax, edi; and eax, 0x7f; ret; 
0x000000000012f300: mov eax, edi; and eax, 0xffffff; ret; 
0x000000000012f2c0: mov eax, edi; bswap eax; ret; 
0x0000000000047c60: mov eax, edi; cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret; 
0x0000000000047c71: mov eax, edi; cqo; idiv rsi; ret; 
0x0000000000115d04: mov eax, edi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x0000000000084f03: mov eax, edi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085621: mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x0000000000151436: mov eax, edi; mov rcx, r14; mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x000000000011d8c1: mov eax, edi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000002740b: mov eax, edi; neg eax; ret; 
0x0000000000094fa3: mov eax, edi; pop rbp; pop r12; ret; 
0x00000000000a7565: mov eax, edi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002741e: mov eax, edi; ret; 
0x000000000012f2d0: mov eax, edi; rol ax, 8; ret; 
0x0000000000047c12: mov eax, edi; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000012f18a: mov eax, edi; sar rax, 6; ret; 
0x0000000000047c24: mov eax, edi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000012f380: mov eax, edi; shr eax, 0x18; ret; 
0x000000000011d8aa: mov eax, edi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001882a1: mov eax, edi; vzeroupper; ret; 
0x0000000000094be5: mov eax, edx; add rsp, 8; ret; 
0x00000000000ba636: mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000127b7c: mov eax, edx; cmove eax, ecx; ret; 
0x00000000000a009c: mov eax, edx; cmovne rax, rdi; ret; 
0x000000000011297b: mov eax, edx; mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x000000000013b360: mov eax, edx; mov qword ptr [r9], r10; ret; 
0x00000000000e2b90: mov eax, edx; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af0: mov eax, edx; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001129ad: mov eax, edx; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000185ffc: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000013b7db: mov eax, edx; movsxd rdx, esi; ret; 
0x00000000000de1b4: mov eax, edx; pop r12; pop r13; pop r14; ret; 
0x0000000000098fb5: mov eax, edx; pop r12; ret; 
0x00000000000de0dd: mov eax, edx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000098c18: mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x000000000005f51e: mov eax, edx; pop rbp; pop r12; ret; 
0x000000000006196a: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000055cbe: mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000053817: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000055232: mov eax, edx; pop rbx; ret; 
0x0000000000044e29: mov eax, edx; ret; 
0x0000000000048bae: mov eax, edx; sub rsi, r8; syscall; 
0x0000000000026bd2: mov eax, edx; syscall; 
0x00000000000ba730: mov eax, edx; xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000de44f: mov eax, esi; add rsp, 0x48; ret; 
0x00000000000ddbe5: mov eax, esi; add rsp, 8; ret; 
0x00000000000dd515: mov eax, esi; call rax; 
0x0000000000115c99: mov eax, esi; mov byte ptr [r8 - 1], 0; ret; 
0x000000000014e9c4: mov eax, esi; mov dword ptr [r8 + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000012c653: mov eax, esi; mov eax, 0xe5; xor esi, esi; lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x0000000000043c77: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000014f2bc: mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014bcfc: mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000105e62: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000082815: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000082075: mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000081486: mov eax, esi; pop rbx; ret; 
0x000000000005c2ab: mov eax, esi; ret; 
0x000000000012f315: mov eax, esi; shl edi, 0x18; and eax, 0xffffff; or eax, edi; bswap eax; ret; 
0x00000000000e1912: mov eax, esi; syscall; 
0x00000000000dc2d3: mov eax, esp; adc byte ptr [rax], al; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009feb6: mov eax, esp; pop r12; ret; 
0x0000000000080d2b: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008c949: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000011297a: mov eax, r10d; mov byte ptr [rbp + 0x23], dl; mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x00000000001129ac: mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x000000000008a606: mov eax, r10d; pop rbx; ret; 
0x000000000008a625: mov eax, r10d; ret; 
0x0000000000048bad: mov eax, r10d; sub rsi, r8; syscall; 
0x000000000008c5fc: mov eax, r10d; syscall; 
0x000000000010c36d: mov eax, r12d; pop r12; ret; 
0x0000000000085d4d: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000010c35a: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085028: mov eax, r13d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ec76f: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000011fe9d: mov eax, r14d; syscall; 
0x000000000013b243: mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000008571e: mov eax, r8d; pop rbx; ret; 
0x000000000013b23b: mov eax, r8d; ret; 
0x00000000000e1921: mov eax, r8d; syscall; 
0x000000000005f452: mov eax, r9d; ret; 
0x000000000008c3a1: mov eax, r9d; syscall; 
0x0000000000061b8b: mov ebp, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000182551: mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000001045ed: mov ebp, 0x31000004; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x0000000000182561: mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000000e5572: mov ebp, 0x441f0f; add dh, dh; test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x00000000000aac91: mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000aaca1: mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000aac81: mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000112f04: mov ebp, 0x48000000; add esp, 0x70; pop rbx; ret; 
0x00000000000a726f: mov ebp, 0x48000037; cmove eax, edx; ret; 
0x00000000000bb35f: mov ebp, 0x48000116; cmove eax, edx; ret; 
0x0000000000163bbf: mov ebp, 0x49000552; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018bcb4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000182571: mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x000000000018cf77: mov ebp, 0x63490002; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000006315f: mov ebp, 0x89000013; ret; 
0x0000000000098d5a: mov ebp, 0x8948ffff; ret; 
0x000000000006bd21: mov ebp, 0x894cffff; ret 0xdee9; 
0x000000000012954a: mov ebp, 0x8b49ffef; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x000000000009e2e8: mov ebp, 0x8d480001; adc eax, 0x1bcfe; cmove rax, rdx; ret; 
0x000000000012d28d: mov ebp, 0x8d480005; adc eax, 0x5bd59; cmove rax, rdx; ret; 
0x00000000001824c8: mov ebp, 0xea8148c0; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000aad01: mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000001825a1: mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000aace1: mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x00000000000aacc1: mov ebp, 0xea8348c0; xor byte ptr [rax + 1], cl; ret 0x547c; 
0x000000000018bcb9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018263b: mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000aada7: mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000aabd7: mov ebp, 0xf80148c0; ret; 
0x0000000000182460: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000b019c: mov ebp, 0xf80148c6; ret; 
0x0000000000075bed: mov ebp, 0xfffff750; call qword ptr [rax + 0x38]; 
0x0000000000075af2: mov ebp, 0xfffff750; call qword ptr [rbx + 0x38]; 
0x0000000000075363: mov ebp, 0xfffff750; call qword ptr [rcx + 0x38]; 
0x00000000000750f8: mov ebp, 0xfffff750; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x000000000007518e: mov ebp, 0xfffff750; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000064969: mov ebp, 0xfffffa20; mov rdx, r15; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006c951: mov ebp, 0xfffffb00; mov rdx, r15; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007cf33: mov ebp, 0xfffffb10; jmp rax; 
0x00000000000e5efb: mov ebp, 0xfffffb38; call qword ptr [rbx + 0x40]; 
0x0000000000077129: mov ebp, 0xfffffb90; mov rdx, rbx; mov rsi, qword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0d9: mov ebp, 0xfffffba0; mov rdx, rbx; mov rsi, qword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000103c13: mov ebp, 0xfffffe68; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd009; 
0x000000000005e587: mov ebp, 0xffffff40; call rax; 
0x000000000008c5f7: mov ebp, 0xffffff7c; mov eax, r10d; syscall; 
0x000000000006a7d8: mov ebp, ds; sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000088826: mov ebp, dword ptr [rbp + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000012d761: mov ebp, dword ptr [rdi - 0xb]; call qword ptr [rax - 0x18]; 
0x00000000001480f4: mov ebp, eax; bswap edx; mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000011e041: mov ebp, eax; mov edx, r13d; mov rsi, r12; mov edi, ebx; mov eax, 0x113; syscall; 
0x000000000011dc6c: mov ebp, eax; mov r10d, r13d; mov edx, r12d; mov rsi, r15; mov eax, 0x119; syscall; 
0x0000000000045496: mov ebp, eax; mov rdi, r12; call rbx; 
0x000000000011414a: mov ebp, eax; mov rdx, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000011eee5: mov ebp, eax; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x000000000011ecc5: mov ebp, eax; mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x0000000000150d34: mov ebp, eax; pop rax; mov rax, qword ptr [rbx + 8]; pop rdx; call qword ptr [rax + 0x20]; 
0x000000000015c6b3: mov ebp, ebp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000043c7d: mov ebp, ecx; nop; jmp rdx; 
0x000000000011d929: mov ebp, ecx; push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi; 
0x0000000000148bf4: mov ebp, edx; call qword ptr [rbx + 0x10]; 
0x00000000000824eb: mov ebp, edx; push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000196959: mov ebp, esp; call 0x15de30; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x000000000011e1ba: mov ebx, 0x1601c764; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000136e54: mov ebx, 0x44e80007; mov esi, 0x85480000; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0xb2378; call rax; 
0x000000000010ccea: mov ebx, 0x48000000; add esp, 0x68; ret; 
0x000000000015b2f1: mov ebx, 0x48fffd0a; add esp, 0x80; mov rax, rdx; add rsp, 8; ret; 
0x0000000000137711: mov ebx, 0x48ffffff; lea edi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b5bc1: mov ebx, 0x4b000f4f; movsxd rcx, dword ptr [rbx + rax*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014d251: mov ebx, 0x66fffe1f; nop dword ptr cs:[rax + rax]; nop; ret; 
0x00000000000360cb: mov ebx, 0x80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000289f1: mov ebx, 0x83000085; clc; add dh, byte ptr [rsi - 0x77]; ret 0x3d83; 
0x00000000001464ff: mov ebx, 0x8438b48; mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x00000000001528cf: mov ebx, 0xbc0f48eb; ret; 
0x000000000014bc86: mov ebx, 0xc8; call rax; 
0x000000000018be39: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000148484: mov ebx, 0xfe6d86e8; jmp qword ptr [rsi + 0xf]; 
0x0000000000046574: mov ebx, 0xfffd98e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000046514: mov ebx, 0xfffdf8e9; jmp qword ptr [rsi + 0xf]; 
0x00000000000f0890: mov ebx, ds; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x2f73; 
0x000000000015abe7: mov ebx, dword ptr [rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x000000000006cd27: mov ebx, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x00000000000e1dd2: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000000df979: mov ebx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000153587: mov ebx, dword ptr [rdi + 0x48]; mov rax, qword ptr [rbx + 0x18]; lea r12, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000165321: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165305: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000015abe6: mov ebx, dword ptr fs:[rax]; mov eax, 2; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x000000000008d97f: mov ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x00000000001466a9: mov ebx, eax; mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x000000000015e5c1: mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000000f8a53: mov ebx, edi; add rax, rsi; jmp rax; 
0x0000000000052ee7: mov ebx, edi; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x00000000001183f7: mov ebx, edi; mov rdi, qword ptr [rdi]; call 0x25318; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000155f0a: mov ebx, edi; mov rdi, rax; call 0x25318; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000011d92d: mov ebx, edi; mov rdi, rcx; sub rsp, 8; call rsi; 
0x00000000000824ef: mov ebx, edi; sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000111aa5: mov ebx, edx; mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x0000000000181494: mov ebx, esi; jmp qword ptr [rsi + 0xf]; 
0x000000000012f10b: mov ebx, esi; xor edi, edi; lea rsi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x000000000008d561: mov ebx, esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000063a78: mov ecx, 0x13c; mov eax, ecx; syscall; 
0x000000000011e154: mov ecx, 0x145; mov eax, ecx; syscall; 
0x0000000000089259: mov ecx, 0x18c48348; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000014edb6: mov ecx, 0x23043c7; add byte ptr [rax], al; add bl, ch; mov al, 0xe8; add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x0000000000043e96: mov ecx, 0x27; mov eax, ecx; syscall; 
0x0000000000133c09: mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000011dccc: mov ecx, 0x41001f0f; mov edx, edx; mov eax, 0x121; mov edx, 8; syscall; 
0x00000000000f5562: mov ecx, 0x441f0f; add byte ptr [rcx - 0x762e7638], cl; ret 0x9066; 
0x00000000001512f9: mov ecx, 0x48000000; add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000166f83: mov ecx, 0x49000520; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641c3: mov ecx, 0x4900054c; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001284eb: mov ecx, 0x6348000b; ret 0x4864; 
0x0000000000160eb3: mov ecx, 0x6400082f; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000ceab3: mov ecx, 0x64001153; mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x00000000000449b3: mov ecx, 0x640019f4; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000044753: mov ecx, 0x66000eaa; nop dword ptr [rax + rax]; mov eax, 0x83; syscall; 
0x0000000000044e4c: mov ecx, 0x80; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000004401c: mov ecx, 0x88; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x0000000000082ab3: mov ecx, 0x89001613; ret 0x8b64; 
0x0000000000159780: mov ecx, 0x8948ffec; ret 0x8d48; 
0x000000000011eb13: mov ecx, 0x8b000cb8; add byte ptr [rbp - 0x47ec8a40], al; sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010d013: mov ecx, 0x8b000dd3; add byte ptr [rbp - 0x47ec8a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000044213: mov ecx, 0x8b001a61; add byte ptr [rbp - 0x41e48a40], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x000000000009e798: mov ecx, 0x8d480001; adc eax, 0x1b84e; cmove rax, rdx; ret; 
0x0000000000153d8b: mov ecx, 0x94eb04e7; nop dword ptr [rax]; ret; 
0x000000000011b7a3: mov ecx, 0xba000c86; add byte ptr fs:[rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x000000000004855c: mov ecx, 0xc7640019; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000101990: mov ecx, 0xcb; mov eax, ecx; syscall; 
0x0000000000160630: mov ecx, 0xcb; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000010192a: mov ecx, 0xcc; mov esi, 0x7fffffff; mov r10, rdx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x0000000000044021: mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000012c710: mov ecx, 0xe4; mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000015972b: mov ecx, 0xe8fffffe; fcomp qword ptr [rdx - 3]; jmp qword ptr [rsi + 0x66]; 
0x0000000000154e83: mov ecx, 0xebfffff4; cwde; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x000000000018bf39: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000011eab3: mov ecx, 0xf7000c53; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000011e8b3: mov ecx, 0xf7000c55; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5b3: mov ecx, 0xf7000c58; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011b9b3: mov ecx, 0xf7000c84; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001146b3: mov ecx, 0xf7000cf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001136b3: mov ecx, 0xf7000d07; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000001134b3: mov ecx, 0xf7000d09; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000010e9b3: mov ecx, 0xf7000d54; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010d7b3: mov ecx, 0xf7000d66; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001017b3: mov ecx, 0xf7000e26; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000196aad: mov ecx, 0xfa9f1de8; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c8460: mov ecx, 0xfffa7de9; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fe228: mov ecx, 0xffff27f; mov dh, 0x4a; or byte ptr [rax + 0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x0000000000101789: mov ecx, 1; call 0x101090; add rsp, 0x18; ret; 
0x0000000000101765: mov ecx, 1; push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000011dc21: mov ecx, 8; mov eax, 0x119; syscall; 
0x0000000000117518: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000000420f2: mov ecx, dword ptr [r8 + rax*4 + 8]; add rcx, qword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x0000000000086352: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000144fa9: mov ecx, dword ptr [rax + 8]; mov edx, dword ptr [rdi + 0x5c]; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000014da38: mov ecx, dword ptr [rax + 8]; mov rdi, rax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000420f3: mov ecx, dword ptr [rax + rax*4 + 8]; add rcx, qword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x00000000001243c1: mov ecx, dword ptr [rax + rsi*8]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000007ebc3: mov ecx, dword ptr [rbp - 0x500]; jmp rax; 
0x000000000007de16: mov ecx, dword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000064d60: mov ecx, dword ptr [rbp - 0x620]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000028369: mov ecx, dword ptr [rbp - 0x70]; call rcx; 
0x0000000000088e65: mov ecx, dword ptr [rbx + 0x10]; push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000087e5a: mov ecx, dword ptr [rbx + 8]; push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000144fb7: mov ecx, dword ptr [rcx + 0x18]; jmp rcx; 
0x000000000018d4cf: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000018d4bc: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000018d4aa: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000055e73: mov ecx, dword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x00000000000ad413: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000015e1f5: mov ecx, dword ptr [rdx]; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x00000000000e2a71: mov ecx, dword ptr [rip + 0x1013f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2a41: mov ecx, dword ptr [rip + 0x101429]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2a11: mov ecx, dword ptr [rip + 0x101459]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e29e1: mov ecx, dword ptr [rip + 0x101489]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2981: mov ecx, dword ptr [rip + 0x1014e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2951: mov ecx, dword ptr [rip + 0x101519]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2751: mov ecx, dword ptr [rip + 0x101719]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1961: mov ecx, dword ptr [rip + 0x102509]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e18d2: mov ecx, dword ptr [rip + 0x102598]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1521: mov ecx, dword ptr [rip + 0x102949]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1444: mov ecx, dword ptr [rip + 0x102a26]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1251: mov ecx, dword ptr [rip + 0x102c19]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d29c1: mov ecx, dword ptr [rip + 0x1114a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d2991: mov ecx, dword ptr [rip + 0x1114d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cf871: mov ecx, dword ptr [rip + 0x1145f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000056214: mov ecx, dword ptr [rip + 0x18dc56]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055e81: mov ecx, dword ptr [rip + 0x18dfe9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055ded: mov ecx, dword ptr [rip + 0x18e07d]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044771: mov ecx, dword ptr [rip + 0x19f6f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000441c1: mov ecx, dword ptr [rip + 0x19fca9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015a954: mov ecx, dword ptr [rip + 0x89516]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015a904: mov ecx, dword ptr [rip + 0x89566]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f154: mov ecx, dword ptr [rip + 0xc4d16]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f121: mov ecx, dword ptr [rip + 0xc4d49]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0f1: mov ecx, dword ptr [rip + 0xc4d79]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0c4: mov ecx, dword ptr [rip + 0xc4da6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ec51: mov ecx, dword ptr [rip + 0xc5219]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ec24: mov ecx, dword ptr [rip + 0xc5246]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebf1: mov ecx, dword ptr [rip + 0xc5279]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebc1: mov ecx, dword ptr [rip + 0xc52a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eaf1: mov ecx, dword ptr [rip + 0xc5379]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ea01: mov ecx, dword ptr [rip + 0xc5469]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e974: mov ecx, dword ptr [rip + 0xc54f6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e944: mov ecx, dword ptr [rip + 0xc5526]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e8e4: mov ecx, dword ptr [rip + 0xc5586]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e8b1: mov ecx, dword ptr [rip + 0xc55b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e881: mov ecx, dword ptr [rip + 0xc55e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e854: mov ecx, dword ptr [rip + 0xc5616]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e821: mov ecx, dword ptr [rip + 0xc5649]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7f1: mov ecx, dword ptr [rip + 0xc5679]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7c1: mov ecx, dword ptr [rip + 0xc56a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e791: mov ecx, dword ptr [rip + 0xc56d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e764: mov ecx, dword ptr [rip + 0xc5706]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e734: mov ecx, dword ptr [rip + 0xc5736]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e704: mov ecx, dword ptr [rip + 0xc5766]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e674: mov ecx, dword ptr [rip + 0xc57f6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e644: mov ecx, dword ptr [rip + 0xc5826]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5e1: mov ecx, dword ptr [rip + 0xc5889]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5b1: mov ecx, dword ptr [rip + 0xc58b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e581: mov ecx, dword ptr [rip + 0xc58e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e551: mov ecx, dword ptr [rip + 0xc5919]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e524: mov ecx, dword ptr [rip + 0xc5946]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e4f1: mov ecx, dword ptr [rip + 0xc5979]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e491: mov ecx, dword ptr [rip + 0xc59d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e461: mov ecx, dword ptr [rip + 0xc5a09]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e431: mov ecx, dword ptr [rip + 0xc5a39]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e401: mov ecx, dword ptr [rip + 0xc5a69]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e341: mov ecx, dword ptr [rip + 0xc5b29]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ddd1: mov ecx, dword ptr [rip + 0xc6099]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dda4: mov ecx, dword ptr [rip + 0xc60c6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dd21: mov ecx, dword ptr [rip + 0xc6149]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbf1: mov ecx, dword ptr [rip + 0xc6279]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbc1: mov ecx, dword ptr [rip + 0xc62a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011db61: mov ecx, dword ptr [rip + 0xc6309]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011db2a: mov ecx, dword ptr [rip + 0xc6340]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011da21: mov ecx, dword ptr [rip + 0xc6449]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d9f1: mov ecx, dword ptr [rip + 0xc6479]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b9e4: mov ecx, dword ptr [rip + 0xc8486]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b9b1: mov ecx, dword ptr [rip + 0xc84b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b984: mov ecx, dword ptr [rip + 0xc84e6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b951: mov ecx, dword ptr [rip + 0xc8519]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b921: mov ecx, dword ptr [rip + 0xc8549]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8f4: mov ecx, dword ptr [rip + 0xc8576]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8c1: mov ecx, dword ptr [rip + 0xc85a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b894: mov ecx, dword ptr [rip + 0xc85d6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b864: mov ecx, dword ptr [rip + 0xc8606]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b831: mov ecx, dword ptr [rip + 0xc8639]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b801: mov ecx, dword ptr [rip + 0xc8669]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b7d4: mov ecx, dword ptr [rip + 0xc8696]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117791: mov ecx, dword ptr [rip + 0xcc6d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117761: mov ecx, dword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117731: mov ecx, dword ptr [rip + 0xcc739]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117701: mov ecx, dword ptr [rip + 0xcc769]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001176d4: mov ecx, dword ptr [rip + 0xcc796]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001176a1: mov ecx, dword ptr [rip + 0xcc7c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117671: mov ecx, dword ptr [rip + 0xcc7f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001175a1: mov ecx, dword ptr [rip + 0xcc8c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117571: mov ecx, dword ptr [rip + 0xcc8f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001172f3: mov ecx, dword ptr [rip + 0xccb77]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001146e1: mov ecx, dword ptr [rip + 0xcf789]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001146b1: mov ecx, dword ptr [rip + 0xcf7b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114681: mov ecx, dword ptr [rip + 0xcf7e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114351: mov ecx, dword ptr [rip + 0xcfb19]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f1: mov ecx, dword ptr [rip + 0xcfc79]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141c1: mov ecx, dword ptr [rip + 0xcfca9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113fd1: mov ecx, dword ptr [rip + 0xcfe99]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113e81: mov ecx, dword ptr [rip + 0xcffe9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113421: mov ecx, dword ptr [rip + 0xd0a49]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113261: mov ecx, dword ptr [rip + 0xd0c09]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112e71: mov ecx, dword ptr [rip + 0xd0ff9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000111d64: mov ecx, dword ptr [rip + 0xd2106]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb31: mov ecx, dword ptr [rip + 0xd5339]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb01: mov ecx, dword ptr [rip + 0xd5369]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ead1: mov ecx, dword ptr [rip + 0xd5399]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eaa4: mov ecx, dword ptr [rip + 0xd53c6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea71: mov ecx, dword ptr [rip + 0xd53f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea41: mov ecx, dword ptr [rip + 0xd5429]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea11: mov ecx, dword ptr [rip + 0xd5459]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e9e4: mov ecx, dword ptr [rip + 0xd5486]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e9b1: mov ecx, dword ptr [rip + 0xd54b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e1f4: mov ecx, dword ptr [rip + 0xd5c76]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e1c1: mov ecx, dword ptr [rip + 0xd5ca9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e191: mov ecx, dword ptr [rip + 0xd5cd9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e161: mov ecx, dword ptr [rip + 0xd5d09]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d8a1: mov ecx, dword ptr [rip + 0xd65c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d871: mov ecx, dword ptr [rip + 0xd65f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d7b1: mov ecx, dword ptr [rip + 0xd66b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d781: mov ecx, dword ptr [rip + 0xd66e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d751: mov ecx, dword ptr [rip + 0xd6719]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d721: mov ecx, dword ptr [rip + 0xd6749]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d6f1: mov ecx, dword ptr [rip + 0xd6779]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d521: mov ecx, dword ptr [rip + 0xd6949]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc31: mov ecx, dword ptr [rip + 0xd7239]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc01: mov ecx, dword ptr [rip + 0xd7269]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb41: mov ecx, dword ptr [rip + 0xd7329]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb11: mov ecx, dword ptr [rip + 0xd7359]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9f1: mov ecx, dword ptr [rip + 0xd7479]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9c1: mov ecx, dword ptr [rip + 0xd74a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c4f1: mov ecx, dword ptr [rip + 0xd7979]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101901: mov ecx, dword ptr [rip + 0xe2569]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001018d1: mov ecx, dword ptr [rip + 0xe2599]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001018a1: mov ecx, dword ptr [rip + 0xe25c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101871: mov ecx, dword ptr [rip + 0xe25f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101841: mov ecx, dword ptr [rip + 0xe2629]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101811: mov ecx, dword ptr [rip + 0xe2659]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001017e1: mov ecx, dword ptr [rip + 0xe2689]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001017b1: mov ecx, dword ptr [rip + 0xe26b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001016d1: mov ecx, dword ptr [rip + 0xe6611]; mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000000b6254: mov ecx, dword ptr [rsi + 0x10]; mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b6bf4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a54: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c14: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5584: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b5574: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b9684: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b6c75: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c95: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5605: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b9705: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b6bb5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a15: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5545: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b9645: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b6cd8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7b38: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b5648: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b6cf8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b58: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b5668: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b6cb9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b19: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b5629: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b6c35: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a95: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55a5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b96c5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b6bd4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b7a34: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b5564: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b9664: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b6c55: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7ab5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55c5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b96e5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000001885e4: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b44: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000ba11f: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000188604: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b54: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000ba10f: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000001656c5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656e1: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658a5: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658c1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a85: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165aa1: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165c75: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c91: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e75: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e91: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166075: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166091: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001658d5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000165cb3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165eb3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001660b3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016ad74: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016acf4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016ac74: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016adf4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016abe5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab55: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016aac5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001654e5: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165501: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000ff0d9: mov ecx, dword ptr [rsi]; add byte ptr [rax - 0x75], cl; or cl, byte ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000b6a70: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b5470: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b6ac1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b54b1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b7881: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b6121: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b78b0: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b6140: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7901: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b6181: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000016b723: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b6b3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b643: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000186b40: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000b6a80: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b78c0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b5480: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7921: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ad1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54c1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b6aa0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b78e0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b5490: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b6af1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b7941: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b54d1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b6b11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b7961: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b54e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000187f80: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000016b565: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b4f5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b485: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b415: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b3a5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b335: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b2c5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000186b51: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b6b31: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7981: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b6b51: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79a1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b5501: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b6b71: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79c1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b5511: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000187fa1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000016b805: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b6a51: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b5451: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000bc24b: mov ecx, dword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000002bdc8: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000014bf50: mov ecx, dword ptr [rsp + 0x28]; call rcx; 
0x000000000002efdc: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000014f603: mov ecx, dword ptr [rsp + 0x30]; call rcx; 
0x0000000000145c16: mov ecx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x000000000002a05f: mov ecx, dword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002d45d: mov ecx, dword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000002acd1: mov ecx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000146c70: mov ecx, dword ptr [rsp + 8]; call rcx; 
0x000000000012110e: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012116f: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000148dce: mov ecx, dword ptr [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x00000000001172e3: mov ecx, dword ptr [rsp + 8]; syscall; 
0x000000000018d4bb: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000009ae63: mov ecx, eax; add rsp, 0x18; mov rax, rcx; pop rbx; pop rbp; ret; 
0x0000000000121b18: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000ba634: mov ecx, eax; mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000e14ab: mov ecx, eax; mov esi, ebp; mov edi, ebx; mov eax, 0xf7; syscall; 
0x000000000011370f: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000011386f: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x0000000000111813: mov ecx, eax; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x000000000011f527: mov ecx, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x12b; syscall; 
0x0000000000114039: mov ecx, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011f7f9: mov ecx, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x46; syscall; 
0x00000000001135cc: mov ecx, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x127; syscall; 
0x000000000011367c: mov ecx, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x128; syscall; 
0x00000000000a6fdb: mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x000000000014707c: mov ecx, eax; movsxd rdx, dword ptr [r8 + rcx*4]; add rdx, r8; jmp rdx; 
0x000000000007a0a1: mov ecx, eax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000a6c29: mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000001478a5: mov ecx, ebx; xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x00000000001456f0: mov ecx, ebx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x000000000007ef06: mov ecx, ecx; lea rsi, [rip + 0x12b291]; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e21d: mov ecx, ecx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x00000000001174e3: mov ecx, ecx; or al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000009d0f7: mov ecx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000001211e9: mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000ff2f9: mov ecx, edx; call 0xfe830; add rsp, 0x18; ret; 
0x00000000000ba45a: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000008c2a4: mov ecx, edx; or ch, 0x80; cmp esi, 2; cmove edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000ba0f2: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000091830: mov ecx, edx; xor edx, edx; pop rbx; jmp rax; 
0x000000000007edcb: mov ecx, esi; jmp rax; 
0x000000000007e252: mov ecx, esi; lea rax, [rip + 0x12bcc5]; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e292: mov ecx, esi; lea rax, [rip + 0x12bd85]; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1e2: mov ecx, esi; lea rdi, [rip + 0x12bfb5]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e100: mov ecx, esi; lea rdi, [rip + 0x12c097]; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df7a: mov ecx, esi; lea rdi, [rip + 0x12c21d]; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007de4a: mov ecx, esi; lea rdi, [rip + 0x12c34d]; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007d146: mov ecx, esi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0be: mov ecx, esi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd6: mov ecx, esi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec6: mov ecx, esi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x0000000000151439: mov ecx, esi; mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x00000000001605c6: mov ecx, esi; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x0000000000027a43: mov ecx, esi; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x00000000000bbfb0: mov ecx, esi; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000007e163: mov ecx, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000014bcd4: mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x000000000014c805: mov ecx, esi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000014c825: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f255: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e915: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc35: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000636a6: mov edi, 0x10842109; or byte ptr [rcx], spl; test byte ptr [rax - 0x77], cl; ret; 
0x00000000000e1702: mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x0000000000127672: mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000012640a: mov edi, 0x2000004; call rcx; 
0x0000000000127013: mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x000000000015976d: mov edi, 0x31ffecb9; ror byte ptr [rax - 0x77], cl; ret; 
0x0000000000136a54: mov edi, 0x44e80007; ret 0; 
0x000000000007620b: mov edi, 0x450f48d2; ret 0x9be9; 
0x000000000007ad41: mov edi, 0x48fffffb; add eax, edx; jmp rax; 
0x000000000018b83d: mov edi, 0x490002d3; movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016903d: mov edi, 0x49000501; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012039d: mov edi, 0x5b000c3f; ret; 
0x0000000000155951: mov edi, 0x748d4806; and al, 4; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000339b4: mov edi, 0x7a390017; cmp byte ptr [rsi + 0x13], dh; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000140f92: mov edi, 0x80; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x0000000000153d42: mov edi, 0x8337e983; clc; sbb cl, byte ptr [rcx + 0x430f41c8]; ret 0xf801; 
0x0000000000058f45: mov edi, 0x8c0fffff; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000012d10d: mov edi, 0x8d480005; adc eax, 0x5bef9; cmove rax, rdx; ret; 
0x000000000014caaa: mov edi, 0xc085ffff; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000824f7: mov edi, 0xe0; call rax; 
0x00000000000824bb: mov edi, 0xe0; jmp rax; 
0x0000000000154a4a: mov edi, 0xe6894806; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000013fac1: mov edi, 0xe8000731; out 0x6e, al; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x00000000000cba1d: mov edi, 0xe9000c6b; pop rdx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000011b22d: mov edi, 0xe9ffff71; ret 0xfffe; 
0x000000000018bae9: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f5fd6: mov edi, 0xf708588b; ret; 
0x000000000010c1a8: mov edi, 0xf8; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c23c: mov edi, 0xf8; ret; 
0x0000000000114377: mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000000e7c10: mov edi, 0xfff69ae9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000115992: mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x000000000010ccc7: mov edi, 0xffffff9c; syscall; 
0x00000000000e12e5: mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x00000000000e38fe: mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000034e8e: mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000043ecb: mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000055e0a: mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000472a7: mov edi, dword ptr [rax + 0x20]; call rdx; 
0x000000000014fc4f: mov edi, dword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014fa88: mov edi, dword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000150367: mov edi, dword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000014f5e4: mov edi, dword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000e5efa: mov edi, dword ptr [rbp - 0x4c8]; call qword ptr [rbx + 0x40]; 
0x0000000000139849: mov edi, dword ptr [rbp - 0x60]; syscall; 
0x000000000008c5f6: mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x0000000000075bec: mov edi, dword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x0000000000075af1: mov edi, dword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075362: mov edi, dword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000750f7: mov edi, dword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x000000000007518d: mov edi, dword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000005e586: mov edi, dword ptr [rbp - 0xc0]; call rax; 
0x0000000000145903: mov edi, dword ptr [rbp]; mov rsi, r12; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000001457b0: mov edi, dword ptr [rbp]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000010ed0e: mov edi, dword ptr [rbx + 0x18]; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x00000000000ff022: mov edi, dword ptr [rbx + 0x28]; call 0x25318; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000009c531: mov edi, dword ptr [rbx + 0x48]; call rax; 
0x000000000009c492: mov edi, dword ptr [rbx + 0x48]; mov rsi, r13; call rax; 
0x0000000000044241: mov edi, dword ptr [rbx + 0xe]; add byte ptr [rsi + 8], bh; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x0000000000047bda: mov edi, dword ptr [rbx + 8]; call rax; 
0x0000000000148850: mov edi, dword ptr [rbx]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000001488e4: mov edi, dword ptr [rbx]; add r15, r12; sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x0000000000150405: mov edi, dword ptr [rbx]; lea rdx, [rsp + 0x18]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000148be5: mov edi, dword ptr [rbx]; mov dword ptr [rbx + 0x38], 0; mov dword ptr [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x0000000000139630: mov edi, dword ptr [rbx]; mov eax, 3; syscall; 
0x0000000000150371: mov edi, dword ptr [rbx]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000046539: mov edi, dword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000052eee: mov edi, dword ptr [rdi + 0x10]; syscall; 
0x00000000001562d5: mov edi, dword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x0000000000043c74: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000014c801: mov edi, dword ptr [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001531c1: mov edi, dword ptr [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000009c2e9: mov edi, dword ptr [rdi + 0x48]; mov rsi, rbp; call rax; 
0x00000000000824f6: mov edi, dword ptr [rdi + 0xe0]; call rax; 
0x00000000000824ba: mov edi, dword ptr [rdi + 0xe0]; jmp rax; 
0x00000000001183fa: mov edi, dword ptr [rdi]; call 0x25318; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000014c0fd: mov edi, dword ptr [rdi]; lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000139580: mov edi, dword ptr [rdi]; mov eax, 3; syscall; 
0x0000000000139580: mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000014c052: mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000014bf31: mov edi, dword ptr [rdi]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000012a5b4: mov edi, dword ptr [rdx + 0x50]; mov rsi, rdx; call rax; 
0x000000000009d6ec: mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d6a1: mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000196798: mov edi, dword ptr [rip + 0x510f2]; call 0x25318; pop rbx; mov qword ptr [rip + 0x510e1], 0; ret; 
0x00000000000f0659: mov edi, dword ptr [rsi + 0x28]; call 0x25318; xor eax, eax; pop rbx; ret; 
0x0000000000118911: mov edi, dword ptr [rsp + 0x10]; mov dword ptr [rsp], r8d; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000141f45: mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x00000000000bbc49: mov edi, dword ptr [rsp + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb895: mov edi, dword ptr [rsp + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bbcc3: mov edi, dword ptr [rsp + 0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000026b5d: mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000011415b: mov edi, dword ptr [rsp + 0x14]; syscall; 
0x00000000000454ac: mov edi, dword ptr [rsp + 0x18]; call rbx; 
0x000000000010ced9: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000015e5c4: mov edi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000000dd6a3: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000005599b: mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000010bb4b: mov edi, dword ptr [rsp + 0x2c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002acdb: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x000000000002a06e: mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002bdd2: mov edi, dword ptr [rsp + 0x38]; call rbx; 
0x000000000002efe6: mov edi, dword ptr [rsp + 0x40]; call rbx; 
0x000000000002c3b3: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d46c: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000014f5dc: mov edi, dword ptr [rsp + 0x80]; mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000109115: mov edi, dword ptr [rsp + 0xa8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ab11: mov edi, dword ptr [rsp + 0xc]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011181b: mov edi, dword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x000000000010d4cc: mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000012c808: mov edi, dword ptr [rsp + 8]; mov eax, 0xe6; syscall; 
0x0000000000151444: mov edi, dword ptr [rsp]; call rax; 
0x0000000000044eb5: mov edi, dword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000015d97b: mov edi, dword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x00000000000bb730: mov edi, dword ptr [rsp]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000146d13: mov edi, dword ptr [rsp]; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000127009: mov edi, eax; call 0x12b6c0; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x0000000000155f0d: mov edi, eax; call 0x25318; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000015b514: mov edi, eax; call qword ptr [rax + 0x10]; 
0x000000000015b5d4: mov edi, eax; call qword ptr [rax + 0x18]; 
0x000000000008201c: mov edi, eax; call qword ptr [rax + 0x20]; 
0x0000000000150fd1: mov edi, eax; call qword ptr [rdx + 0x20]; 
0x00000000000e15d9: mov edi, eax; mov eax, 0x22; syscall; 
0x000000000011db20: mov edi, eax; mov eax, 0x3c; syscall; 
0x0000000000160ddd: mov edi, eax; mov eax, 0x3e; syscall; 
0x000000000010c8a4: mov edi, eax; mov eax, 0x85; syscall; 
0x0000000000043ea0: mov edi, eax; mov eax, 0xba; syscall; 
0x0000000000048bab: mov edi, eax; mov eax, r10d; sub rsi, r8; syscall; 
0x000000000014da3c: mov edi, eax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000001137b7: mov edi, eax; mov edx, r14d; mov rsi, r13; mov edi, r12d; mov eax, 0x147; syscall; 
0x0000000000113917: mov edi, eax; mov edx, r14d; mov rsi, r13; mov edi, r12d; mov eax, 0x148; syscall; 
0x000000000002840c: mov edi, eax; mov qword ptr [rbp - 0x68], rax; call 0x15d990; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000013769e: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x15d990; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001369bf: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000010c95a: mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000144fb4: mov edi, eax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000010c5b9: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x000000000010c607: mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000010c659: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000145892: mov edi, ebp; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000147229: mov edi, ebp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000146995: mov edi, ebp; call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000147ac4: mov edi, ebp; call qword ptr [rax + 0x10]; 
0x0000000000091220: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x00000000001457df: mov edi, ebp; call qword ptr [rax + 0x20]; 
0x0000000000147903: mov edi, ebp; call qword ptr [rax + 0x28]; 
0x000000000014719b: mov edi, ebp; call qword ptr [rax + 0x30]; 
0x000000000007b1f1: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x000000000014d4b0: mov edi, ebp; call qword ptr [rax + 0x48]; 
0x00000000001457a2: mov edi, ebp; call qword ptr [rax + 8]; 
0x0000000000087df6: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x000000000008e65d: mov edi, ebp; call qword ptr [rbx + 0x40]; 
0x0000000000147ad2: mov edi, ebp; call qword ptr [rbx]; 
0x0000000000026c01: mov edi, ebp; call rax; 
0x00000000000454e7: mov edi, ebp; call rbx; 
0x0000000000155d51: mov edi, ebp; call rcx; 
0x0000000000147595: mov edi, ebp; call rdx; 
0x0000000000146178: mov edi, ebp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000bbe5c: mov edi, ebp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000015abcc: mov edi, ebp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000007ae85: mov edi, ebp; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x000000000014587b: mov edi, ebp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f5: mov edi, ebp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000014d434: mov edi, ebp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000001174ba: mov edi, ebp; mov eax, 9; syscall; 
0x000000000008c39f: mov edi, ebp; mov eax, r9d; syscall; 
0x0000000000146471: mov edi, ebp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000014bf4d: mov edi, ebp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x00000000000bbfa8: mov edi, ebp; mov rdx, qword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000014c15c: mov edi, ebp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x00000000000bc250: mov edi, ebp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000146ead: mov edi, ebp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000087e5f: mov edi, ebp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000088e6a: mov edi, ebp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000013ba27: mov edi, ebp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x00000000000472d8: mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000007af1e: mov edi, ebp; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000155169: mov edi, ebp; xor eax, eax; call rcx; 
0x00000000000bc153: mov edi, ebp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000119080: mov edi, ebx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000014507e: mov edi, ebx; call 0x146ec0; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000004213f: mov edi, ebx; call 0x25318; xor eax, eax; pop rbx; ret; 
0x0000000000151709: mov edi, ebx; call qword ptr [rax + 0x10]; 
0x000000000008ebd0: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x000000000009147b: mov edi, ebx; call qword ptr [rax + 0x20]; 
0x0000000000146584: mov edi, ebx; call qword ptr [rax + 0x28]; 
0x000000000007737b: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x0000000000155568: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x00000000001555b9: mov edi, ebx; call qword ptr [rax + 0x48]; 
0x0000000000084352: mov edi, ebx; call qword ptr [rax + 0x58]; 
0x000000000008ecaa: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x0000000000147f71: mov edi, ebx; call qword ptr [rax + 8]; 
0x0000000000147f1c: mov edi, ebx; call qword ptr [rax]; 
0x0000000000090b1c: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x00000000000866ad: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000087222: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000081ee8: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x00000000000845b1: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x000000000008e757: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x0000000000077523: mov edi, ebx; call qword ptr [rcx + 0x38]; 
0x00000000000807ba: mov edi, ebx; call rax; 
0x0000000000150d1f: mov edi, ebx; lea r8, [rip - 0x9e28]; lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x000000000011e049: mov edi, ebx; mov eax, 0x113; syscall; 
0x000000000011ded4: mov edi, ebx; mov eax, 0x114; syscall; 
0x00000000001122f6: mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df86: mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b346: mov edi, ebx; mov eax, 0x11; syscall; 
0x0000000000112394: mov edi, ebx; mov eax, 0x11d; syscall; 
0x000000000011f486: mov edi, ebx; mov eax, 0x120; syscall; 
0x00000000001135d1: mov edi, ebx; mov eax, 0x127; syscall; 
0x0000000000113681: mov edi, ebx; mov eax, 0x128; syscall; 
0x000000000010b3f6: mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f52c: mov edi, ebx; mov eax, 0x12b; syscall; 
0x000000000011f5d6: mov edi, ebx; mov eax, 0x133; syscall; 
0x000000000010c435: mov edi, ebx; mov eax, 0x135; syscall; 
0x0000000000112108: mov edi, ebx; mov eax, 0x146; syscall; 
0x000000000011fda0: mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000011403e: mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011eeed: mov edi, ebx; mov eax, 0x2c; syscall; 
0x000000000011eccd: mov edi, ebx; mov eax, 0x2d; syscall; 
0x00000000000e13b1: mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f756: mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011f7fe: mov edi, ebx; mov eax, 0x46; syscall; 
0x000000000011de36: mov edi, ebx; mov eax, 0xe8; syscall; 
0x00000000000e14af: mov edi, ebx; mov eax, 0xf7; syscall; 
0x00000000001178b7: mov edi, ebx; mov eax, 1; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x000000000010c4cb: mov edi, ebx; mov eax, ecx; syscall; 
0x000000000011ff29: mov edi, ebx; mov eax, r14d; syscall; 
0x0000000000150d32: mov edi, ebx; mov ebp, eax; pop rax; mov rax, qword ptr [rbx + 8]; pop rdx; call qword ptr [rax + 0x20]; 
0x00000000000e1665: mov edi, ebx; mov edx, eax; mov eax, 0x23; syscall; 
0x000000000011423c: mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x00000000001142ec: mov edi, ebx; mov edx, eax; mov eax, 0x4b; syscall; 
0x000000000010d803: mov edi, ebx; mov edx, eax; mov eax, 0x55; syscall; 
0x000000000004424b: mov edi, ebx; mov edx, eax; mov eax, 0x82; syscall; 
0x000000000010d68c: mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000000783f1: mov edi, ebx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007e7fa: mov edi, ebx; mov qword ptr [rbp - 0x508], r9; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x00000000000785cc: mov edi, ebx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x000000000011fe94: mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x0000000000146505: mov edi, ebx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x0000000000146533: mov edi, ebx; mov r12d, eax; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x0000000000112c36: mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000011e0eb: mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x000000000011347b: mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000048b1d: mov edi, ebx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x000000000011351b: mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x00000000001175fd: mov edi, ebx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x000000000011eb4b: mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ea7b: mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000011ef8b: mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee2b: mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000010d04b: mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000011171d: mov edi, ebx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000010cfab: mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x000000000015d54e: mov edi, ebx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000462d9: mov edi, ebx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000046396: mov edi, ebx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000088dc6: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000001186a0: mov edi, ebx; pop rbx; mov rax, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000083eec: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x000000000008672f: mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000008deca: mov edi, ebx; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000077425: mov edi, ebx; sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007cdb8: mov edi, ebx; sub r15, r13; mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007d394: mov edi, ebx; sub r15, r9; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000000881e5: mov edi, ebx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000146c6b: mov edi, ebx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x0000000000047953: mov edi, ecx; call rdx; 
0x000000000008c7e5: mov edi, ecx; dec dword ptr [rax - 0x77]; fucomip st(0); sub byte ptr [rbx - 0x3fce0007], cl; pop rbx; ret; 
0x000000000010c908: mov edi, ecx; mov eax, 0x103; syscall; 
0x000000000002835a: mov edi, ecx; mov qword ptr [rbp - 0x70], rcx; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x00000000000e1898: mov edi, ecx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011d930: mov edi, ecx; sub rsp, 8; call rsi; 
0x0000000000086f78: mov edi, edi; call qword ptr [rax + 0x20]; 
0x0000000000152655: mov edi, edi; call qword ptr [rax + 0x28]; 
0x00000000001524f5: mov edi, edi; call qword ptr [rax + 8]; 
0x0000000000152513: mov edi, edi; call qword ptr [rax]; 
0x00000000000f82a0: mov edi, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000012187f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000001217e7: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000012174f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001214df: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000012161f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000012128f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000012157f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000012132f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000001213bf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000001216bf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000001211ff: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000014f600: mov edi, edi; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000009bdb7: mov edi, edi; mov rdx, rbx; mov rsi, r12; call rax; 
0x000000000012211c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000122094: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000012201c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000121e1c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000121f1c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000121c1c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000121e9c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000121c9c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000121d1c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000121f9c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000121b9c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001466b0: mov edi, edx; call qword ptr [rax + 0x20]; 
0x000000000007c569: mov edi, edx; dec dword ptr [rax - 0x77]; ret 0x86e9; 
0x000000000012be9f: mov edi, edx; jmp rax; 
0x000000000010bfcf: mov edi, edx; mov eax, 0x75; syscall; 
0x000000000010bff7: mov edi, edx; mov eax, 0x77; syscall; 
0x00000000000e1910: mov edi, edx; mov eax, esi; syscall; 
0x00000000000e191f: mov edi, edx; mov eax, r8d; syscall; 
0x000000000011dafd: mov edi, edx; mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x000000000015b221: mov edi, edx; mov rsi, r8; call qword ptr [rax + 8]; 
0x0000000000160dee: mov edi, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b33: mov edi, edx; syscall; 
0x000000000014f5c2: mov edi, esi; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000018a91f: mov edi, esi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000185fff: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000dd50d: mov edi, esi; call 0x15d990; mov rax, r14; call rax; 
0x00000000000867ba: mov edi, esi; call qword ptr [rax + 0x18]; 
0x000000000014f5ad: mov edi, esi; call qword ptr [rax + 0x28]; 
0x00000000000920e4: mov edi, esi; call qword ptr [rax + 0x58]; 
0x000000000009c55e: mov edi, esi; call rax; 
0x00000000000bc641: mov edi, esi; jmp qword ptr [rsi + 0x2e]; 
0x00000000001466f1: mov edi, esi; jmp qword ptr [rsi + 0x66]; 
0x000000000010d939: mov edi, esi; mov eax, 0x4f; syscall; 
0x0000000000028418: mov edi, esi; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000007741f: mov edi, esi; mov rsi, r10; mov rdi, rbx; sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000001146e3: mov edi, esi; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000145f9d: mov edi, esp; call qword ptr [rax + 0x20]; 
0x000000000015359a: mov edi, esp; call qword ptr [rax + 0x28]; 
0x00000000000834f1: mov edi, esp; call qword ptr [rax + 0x38]; 
0x00000000001551fe: mov edi, esp; call qword ptr [rax]; 
0x000000000009bc44: mov edi, esp; call rax; 
0x0000000000045499: mov edi, esp; call rbx; 
0x0000000000089a5c: mov edi, esp; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000089962: mov edi, esp; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000ddaf5: mov edi, esp; mov dword ptr [rsp], 0x74; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000154418: mov edi, esp; mov dword ptr [rsp], 2; call rdx; 
0x00000000001137c0: mov edi, esp; mov eax, 0x147; syscall; 
0x0000000000113920: mov edi, esp; mov eax, 0x148; syscall; 
0x0000000000044fa0: mov edi, esp; mov eax, 0x81; syscall; 
0x000000000009628e: mov edi, esp; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x00000000000e2852: mov edi, esp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c2: mov edi, esp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015529e: mov edi, esp; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000028366: mov edi, esp; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000003619f: mov edi, esp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000922f6: mov edi, esp; xor edx, edx; lea rsi, [rip - 0x20f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000090808: mov edi, esp; xor edx, edx; lea rsi, [rip - 0x603]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902ef: mov edi, esp; xor edx, edx; lea rsi, [rip - 0xea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013cd34: mov edi, gs; jmp qword ptr [rsi + 0xf]; 
0x00000000001137bf: mov edi, r12d; mov eax, 0x147; syscall; 
0x000000000011391f: mov edi, r12d; mov eax, 0x148; syscall; 
0x0000000000044f9f: mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000000146994: mov edi, r13d; call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000008c39e: mov edi, r13d; mov eax, r9d; syscall; 
0x000000000010c907: mov edi, r9d; mov eax, 0x103; syscall; 
0x000000000011f686: mov edx, 0; cmovb rax, rdx; ret; 
0x000000000015aad0: mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000000a08b0: mov edx, 0; cmovne rax, rdx; ret; 
0x00000000000e128c: mov edx, 0; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000009aa99: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000afad6: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000013acd2: mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x00000000000ba606: mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000011598d: mov edx, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x000000000013acad: mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013ac8d: mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000000834e8: mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000008d986: mov edx, 0x130; pop rbx; ret; 
0x000000000011321f: mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000000e3619: mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000e35d6: mov edx, 0x20; mov eax, 0xff; cmovne rax, rdx; ret; 
0x0000000000193629: mov edx, 0x21482fea; ret 0x41e9; 
0x0000000000026bc2: mov edx, 0x3c; nop word ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000011fd98: mov edx, 0x40; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x0000000000030e41: mov edx, 0x48000000; add esp, 0xb8; pop rbx; pop r12; ret; 
0x00000000000aff12: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x0000000000032362: mov edx, 0x48001b43; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003619a: mov edx, 0x4c001b41; mov edi, esp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011b7a7: mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x0000000000026c52: mov edx, 0x66000e63; nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x00000000000e3506: mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e34cc: mov edx, 0x7f; mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x00000000000e3496: mov edx, 0x7f; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x000000000013b85e: mov edx, 0x7fffffff; cmovs eax, edx; ret; 
0x0000000000160d02: mov edx, 0x85000896; sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x895c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc02: mov edx, 0x85000be7; sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe6f7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b902: mov edx, 0x85000bea; sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe93f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000068e00: mov edx, 0x85c7ffff; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x0000000000058822: mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000396b5: mov edx, 0x8948fffe; ret 0xf748; 
0x0000000000068df8: mov edx, 0x8949ffff; fucomip st(1); test dword ptr [rdx - 0x7a380001], edi; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x0000000000190d50: mov edx, 0x894c33f0; ret 0x5e9; 
0x0000000000043769: mov edx, 0x9483ff2; ret 0x840f; 
0x00000000001183cd: mov edx, 0xc764000c; add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000043ea3: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000018beb9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000145fdc: mov edx, 0xfe922ee8; jmp qword ptr [rsi + 0x66]; 
0x000000000009e470: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000009e480: mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x000000000009cfb8: mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x0000000000034c94: mov edx, 0xffffffff; cmove rax, rdx; ret; 
0x0000000000029e37: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000e3688: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e3538: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000005f567: mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000055d08: mov edx, 0xffffffff; mov eax, edx; ret; 
0x0000000000113b27: mov edx, 0xffffffff; mov esi, edi; mov eax, 0x75; mov edi, edx; syscall; 
0x0000000000113bf7: mov edx, 0xffffffff; mov esi, edi; mov eax, 0x77; mov edi, edx; syscall; 
0x0000000000155160: mov edx, 0xffffffff; mov rsi, r14; mov rdi, rbp; xor eax, eax; call rcx; 
0x0000000000155d48: mov edx, 0xffffffff; mov rsi, rbx; mov rdi, rbp; call rcx; 
0x0000000000047cbf: mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x0000000000044b29: mov edx, 1; cmove eax, edx; ret; 
0x000000000012bdbd: mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000112bfd: mov edx, 1; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x000000000015e2b9: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000008c396: mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000101bf4: mov edx, 2; cmove eax, edx; ret; 
0x00000000000536cc: mov edx, 6; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000044171: mov edx, 8; mov eax, 0xe; syscall; 
0x0000000000044027: mov edx, 8; mov eax, ecx; syscall; 
0x0000000000044eaf: mov edx, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000011dcd8: mov edx, 8; syscall; 
0x000000000008c218: mov edx, dword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000063b34: mov edx, dword ptr [rax + 0x88]; mov qword ptr [rdx + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x000000000014f3a4: mov edx, dword ptr [rax + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000014f2a4: mov edx, dword ptr [rax + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000034d5a: mov edx, dword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x1af081]; mov qword ptr [rax], rdx; ret; 
0x0000000000150fcd: mov edx, dword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x00000000000562b0: mov edx, dword ptr [rax + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000056520: mov edx, dword ptr [rax + rcx*8]; mov qword ptr [rax + rcx*8], rdx; xor eax, eax; ret; 
0x000000000012d1f1: mov edx, dword ptr [rax - 0x72b7fffd]; adc eax, 0x3e6f4; cmovne rax, rdx; ret; 
0x00000000000e1894: mov edx, dword ptr [rax]; add byte ptr [rcx + rcx*4 - 0x31], cl; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000866cc: mov edx, dword ptr [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000008c211: mov edx, dword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000026b62: mov edx, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000088709: mov edx, dword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x000000000007893a: mov edx, dword ptr [rbp - 0x518]; jmp rax; 
0x000000000006cd1c: mov edx, dword ptr [rbp - 0x5b0]; movsxd rax, dword ptr [rsi + rax*4]; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x00000000000881e1: mov edx, dword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x000000000008e143: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x000000000014884c: mov edx, dword ptr [rbx + 0x48]; mov rdi, qword ptr [rbx]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000001488e0: mov edx, dword ptr [rbx + 0x48]; mov rdi, qword ptr [rbx]; add r15, r12; sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x000000000011d9c0: mov edx, dword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017f1af: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017d8dd: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000007af1a: mov edx, dword ptr [rdi + 0x20]; mov rdi, r13; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000012b77f: mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000144fac: mov edx, dword ptr [rdi + 0x5c]; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000063b84: mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000082290: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x000000000008c26b: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c15b: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000150551: mov edx, dword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20]; 
0x000000000012be98: mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000044b25: mov edx, dword ptr [rdi]; test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x00000000000bb91a: mov edx, dword ptr [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000035250: mov edx, dword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000035220: mov edx, dword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055e77: mov edx, dword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000010ed14: mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x000000000003524d: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003521d: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003524a: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003521a: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e1691: mov edx, dword ptr [rip + 0x1027d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1601: mov edx, dword ptr [rip + 0x102869]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e14e1: mov edx, dword ptr [rip + 0x102989]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13e1: mov edx, dword ptr [rip + 0x102a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1349: mov edx, dword ptr [rip + 0x102b21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000dc9d1: mov edx, dword ptr [rip + 0x107499]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000d3339: mov edx, dword ptr [rip + 0x110af9]; mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000cf791: mov edx, dword ptr [rip + 0x1146d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a59: mov edx, dword ptr [rip + 0x180411]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a21: mov edx, dword ptr [rip + 0x180449]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b51: mov edx, dword ptr [rip + 0x19b319]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000441f9: mov edx, dword ptr [rip + 0x19fc71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000044191: mov edx, dword ptr [rip + 0x19fcd9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000003552f: mov edx, dword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000012c751: mov edx, dword ptr [rip + 0xb7719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c6a1: mov edx, dword ptr [rip + 0xb77c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa91: mov edx, dword ptr [rip + 0xc43d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa69: mov edx, dword ptr [rip + 0xc4401]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa31: mov edx, dword ptr [rip + 0xc4439]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa01: mov edx, dword ptr [rip + 0xc4469]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011f9d9: mov edx, dword ptr [rip + 0xc4491]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f901: mov edx, dword ptr [rip + 0xc4569]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d1: mov edx, dword ptr [rip + 0xc4599]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8a1: mov edx, dword ptr [rip + 0xc45c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f871: mov edx, dword ptr [rip + 0xc45f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f831: mov edx, dword ptr [rip + 0xc4639]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011f789: mov edx, dword ptr [rip + 0xc46e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f609: mov edx, dword ptr [rip + 0xc4861]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f561: mov edx, dword ptr [rip + 0xc4909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b9: mov edx, dword ptr [rip + 0xc49b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f081: mov edx, dword ptr [rip + 0xc4de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efc1: mov edx, dword ptr [rip + 0xc4ea9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ef21: mov edx, dword ptr [rip + 0xc4f49]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee61: mov edx, dword ptr [rip + 0xc5009]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edc1: mov edx, dword ptr [rip + 0xc50a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ed01: mov edx, dword ptr [rip + 0xc5169]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011eb81: mov edx, dword ptr [rip + 0xc52e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011eab1: mov edx, dword ptr [rip + 0xc53b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e1f1: mov edx, dword ptr [rip + 0xc5c79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e190: mov edx, dword ptr [rip + 0xc5cda]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e121: mov edx, dword ptr [rip + 0xc5d49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e081: mov edx, dword ptr [rip + 0xc5de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011dfb9: mov edx, dword ptr [rip + 0xc5eb1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df09: mov edx, dword ptr [rip + 0xc5f61]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de69: mov edx, dword ptr [rip + 0xc6001]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dcf1: mov edx, dword ptr [rip + 0xc6179]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dca9: mov edx, dword ptr [rip + 0xc61c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011db91: mov edx, dword ptr [rip + 0xc62d9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001205b4: mov edx, dword ptr [rip + 0xc7c3e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000011ad91: mov edx, dword ptr [rip + 0xc90d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000117631: mov edx, dword ptr [rip + 0xcc839]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115b51: mov edx, dword ptr [rip + 0xce319]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115b21: mov edx, dword ptr [rip + 0xce349]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115ae9: mov edx, dword ptr [rip + 0xce381]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115901: mov edx, dword ptr [rip + 0xce569]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114391: mov edx, dword ptr [rip + 0xcfad9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114269: mov edx, dword ptr [rip + 0xcfc01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001136b1: mov edx, dword ptr [rip + 0xd07b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113601: mov edx, dword ptr [rip + 0xd0869]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113551: mov edx, dword ptr [rip + 0xd0919]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134b1: mov edx, dword ptr [rip + 0xd09b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113231: mov edx, dword ptr [rip + 0xd0c39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e41: mov edx, dword ptr [rip + 0xd1029]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e01: mov edx, dword ptr [rip + 0xd1069]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112c61: mov edx, dword ptr [rip + 0xd1209]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112761: mov edx, dword ptr [rip + 0xd1709]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112739: mov edx, dword ptr [rip + 0xd1731]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112701: mov edx, dword ptr [rip + 0xd1769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001126d1: mov edx, dword ptr [rip + 0xd1799]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112561: mov edx, dword ptr [rip + 0xd1909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112401: mov edx, dword ptr [rip + 0xd1a69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001123c1: mov edx, dword ptr [rip + 0xd1aa9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112329: mov edx, dword ptr [rip + 0xd1b41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112211: mov edx, dword ptr [rip + 0xd1c59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001121c1: mov edx, dword ptr [rip + 0xd1ca9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000111751: mov edx, dword ptr [rip + 0xd2719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d831: mov edx, dword ptr [rip + 0xd6639]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6b9: mov edx, dword ptr [rip + 0xd67b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d0f1: mov edx, dword ptr [rip + 0xd6d79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d0c1: mov edx, dword ptr [rip + 0xd6da9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010d081: mov edx, dword ptr [rip + 0xd6de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cfe1: mov edx, dword ptr [rip + 0xd6e89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cba1: mov edx, dword ptr [rip + 0xd72c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c979: mov edx, dword ptr [rip + 0xd74f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c921: mov edx, dword ptr [rip + 0xd7549]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c8c1: mov edx, dword ptr [rip + 0xd75a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c671: mov edx, dword ptr [rip + 0xd77f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c621: mov edx, dword ptr [rip + 0xd7849]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c5d1: mov edx, dword ptr [rip + 0xd7899]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010b429: mov edx, dword ptr [rip + 0xd8a41]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010b379: mov edx, dword ptr [rip + 0xd8af1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000fe751: mov edx, dword ptr [rip + 0xe5861]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x00000000000b62d5: mov edx, dword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b5645: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b5665: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000014da3e: mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000075189: mov edx, dword ptr [rsi + 0x20]; mov rdi, qword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000016b801: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000016b720: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b561: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b6b0: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b4f1: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6aa2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b78e2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b5492: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b9512: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000016b640: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016b481: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6a83: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b78c3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b5483: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b94f3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000016b411: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b34: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7984: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b95b4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000016b3a1: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b54: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79a4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b5504: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b95d4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000016b331: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6af3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b7943: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b54d3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b9573: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b6b74: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79c4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b5514: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b95f4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000016b2c1: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b13: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b7963: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b54e3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b9593: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b7924: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ad4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54c4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b9554: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000188cb2: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873d2: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f82: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x0000000000188cb3: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873d3: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f83: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x0000000000188cd4: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873f4: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fa4: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000016ad71: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016acf1: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016ac71: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016abe1: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab51: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016aac1: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001656f1: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001658d1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000165ab0: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001654e8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656c8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658a8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a88: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656e4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658c4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165aa4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165504: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165cb0: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165eb0: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001660b0: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165325: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c79: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e79: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166079: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165309: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c95: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e95: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166095: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165341: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016adf1: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b6a60: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000001885d0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b78a0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b5460: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000186b30: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000000b94d0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b6ab1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b78f1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b54a1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000b9521: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b6a41: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b7871: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b5441: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b94a1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000010eb6b: mov edx, dword ptr [rsi]; xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x000000000015e5c9: mov edx, dword ptr [rsp + 0x10]; call rdx; 
0x00000000000a7191: mov edx, dword ptr [rsp + 0x10]; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000bbfab: mov edx, dword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000121109: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012116a: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000046531: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000126683: mov edx, dword ptr [rsp + 0x10]; mov rsi, r13; xor r15d, r15d; call rax; 
0x00000000000462d1: mov edx, dword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000126404: mov edx, dword ptr [rsp + 0x10]; xor esi, esi; mov edi, 0x2000004; call rcx; 
0x00000000000a70a6: mov edx, dword ptr [rsp + 0x18]; lea rax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x000000000015d544: mov edx, dword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000a6ff1: mov edx, dword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000014c15f: mov edx, dword ptr [rsp + 0x20]; call rdx; 
0x000000000011414d: mov edx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000015e1f0: mov edx, dword ptr [rsp + 0x28]; mov r9d, dword ptr [rdx]; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x00000000000dd69e: mov edx, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000145c1b: mov edx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000108436: mov edx, dword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002a064: mov edx, dword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002c3a9: mov edx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d462: mov edx, dword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000009cc71: mov edx, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbdc: mov edx, dword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011db06: mov edx, dword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000001466a5: mov edx, dword ptr [rsp + 8]; mov ebx, eax; mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x000000000010d4c2: mov edx, dword ptr [rsp]; mov esi, dword ptr [rsp + 0xc]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000008e83a: mov edx, dword ptr [rsp]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000000ba67c: mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x0000000000127019: mov edx, eax; call qword ptr [rbp + 0x28]; 
0x00000000001480fa: mov edx, eax; call qword ptr [rbx + 0x10]; 
0x0000000000127678: mov edx, eax; call qword ptr [rbx + 0x28]; 
0x000000000013dfa1: mov edx, eax; mov byte ptr [r10], 0; ret; 
0x0000000000155597: mov edx, eax; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x0000000000155757: mov edx, eax; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000000e1667: mov edx, eax; mov eax, 0x23; syscall; 
0x000000000011423e: mov edx, eax; mov eax, 0x4a; syscall; 
0x00000000001142ee: mov edx, eax; mov eax, 0x4b; syscall; 
0x000000000010d805: mov edx, eax; mov eax, 0x55; syscall; 
0x000000000004424d: mov edx, eax; mov eax, 0x82; syscall; 
0x0000000000043eac: mov edx, eax; mov eax, 0xea; syscall; 
0x000000000010d68e: mov edx, eax; mov eax, 3; syscall; 
0x000000000008a3ee: mov edx, eax; mov eax, edx; ret; 
0x00000000001547a9: mov edx, eax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000008eca0: mov edx, eax; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000011db00: mov edx, eax; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000001172dd: mov edx, eax; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000010c95d: mov edx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000000a7180: mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000d8e9a: mov edx, eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000055f78: mov edx, eax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x000000000012c66e: mov edx, eax; neg edx; cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x000000000011187a: mov edx, eax; neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x000000000013b7f0: mov edx, eax; ret; 
0x000000000011dc6f: mov edx, ebp; mov edx, r12d; mov rsi, r15; mov eax, 0x119; syscall; 
0x00000000001129a5: mov edx, ebp; mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x000000000011f524: mov edx, ebp; mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x12b; syscall; 
0x0000000000114036: mov edx, ebp; mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011f7f6: mov edx, ebp; mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x46; syscall; 
0x0000000000147ac1: mov edx, ebp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x0000000000147aff: mov edx, ebp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000bc150: mov edx, ebp; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000075ae7: mov edx, ebp; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075712: mov edx, ebp; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x0000000000045d3f: mov edx, ebp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000015143c: mov edx, ebp; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x000000000011e044: mov edx, ebp; mov rsi, r12; mov edi, ebx; mov eax, 0x113; syscall; 
0x000000000011eee8: mov edx, ebp; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x000000000011ecc8: mov edx, ebp; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x000000000007535c: mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000454a6: mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000454e1: mov edx, ebp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000008434c: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000045814: mov edx, ebp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000005e580: mov edx, ebp; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000000454fc: mov edx, ebp; mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000008e657: mov edx, ebp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx + 0x40]; 
0x0000000000112981: mov edx, ebp; mov word ptr [rbp + 0x21], cx; syscall; 
0x000000000012b171: mov edx, ebp; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b59d: mov edx, ebp; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x0000000000126050: mov edx, ebp; pop rbx; mov rax, rdx; pop rbp; pop r12; ret; 
0x0000000000027a3e: mov edx, ebp; push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x00000000000bc440: mov edx, ebp; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x00000000001117c1: mov edx, ebx; mov eax, 0x10f; syscall; 
0x0000000000141f3d: mov edx, ebx; mov esi, ebp; mov dword ptr [rsp + 0x14], eax; mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x0000000000044f97: mov edx, ebx; mov esi, ebp; mov dword ptr [rsp + 0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000000111810: mov edx, ebx; mov r9d, eax; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x0000000000080095: mov edx, ebx; mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0df: mov edx, ebx; mov rsi, qword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f7d: mov edx, ebx; mov rsi, qword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007712f: mov edx, ebx; mov rsi, qword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009bdba: mov edx, ebx; mov rsi, r12; call rax; 
0x0000000000075be6: mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x000000000009b837: mov edx, ebx; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000012aca9: mov edx, ebx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000010e1e1: mov edx, ecx; mov eax, 0x104; syscall; 
0x000000000010c960: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000000063a41: mov edx, ecx; mov eax, 0x108; syscall; 
0x000000000010e9d1: mov edx, ecx; mov eax, 0x109; syscall; 
0x000000000010ea91: mov edx, ecx; mov eax, 0x10b; syscall; 
0x000000000011e841: mov edx, ecx; mov eax, 0x11e; syscall; 
0x000000000011e301: mov edx, ecx; mov eax, 0x12d; syscall; 
0x000000000011dd91: mov edx, ecx; mov eax, 0x12e; syscall; 
0x000000000011e8d1: mov edx, ecx; mov eax, 0x12f; syscall; 
0x000000000011e931: mov edx, ecx; mov eax, 0x136; syscall; 
0x000000000011e961: mov edx, ecx; mov eax, 0x137; syscall; 
0x00000000001120cd: mov edx, ecx; mov eax, 0x146; syscall; 
0x000000000011e661: mov edx, ecx; mov eax, 0x19; syscall; 
0x0000000000111d51: mov edx, ecx; mov eax, 0x28; syscall; 
0x000000000011f141: mov edx, ecx; mov eax, 0x35; syscall; 
0x000000000011f0b1: mov edx, ecx; mov eax, 0x36; syscall; 
0x000000000011ec11: mov edx, ecx; mov eax, 0x37; syscall; 
0x00000000000e1431: mov edx, ecx; mov eax, 0x3d; syscall; 
0x000000000011e6f1: mov edx, ecx; mov eax, 0x9d; syscall; 
0x000000000011e631: mov edx, ecx; mov eax, 0xa5; syscall; 
0x000000000011e511: mov edx, ecx; mov eax, 0xaf; syscall; 
0x000000000011e721: mov edx, ecx; mov eax, 0xb2; syscall; 
0x000000000011e751: mov edx, ecx; mov eax, 0xb3; syscall; 
0x000000000015a8f1: mov edx, ecx; mov eax, 0xb5; syscall; 
0x000000000015a941: mov edx, ecx; mov eax, 0xb6; syscall; 
0x000000000011b9d1: mov edx, ecx; mov eax, 0xbc; syscall; 
0x000000000011b971: mov edx, ecx; mov eax, 0xbd; syscall; 
0x000000000011b851: mov edx, ecx; mov eax, 0xbe; syscall; 
0x000000000011b881: mov edx, ecx; mov eax, 0xbf; syscall; 
0x000000000011b8e1: mov edx, ecx; mov eax, 0xc0; syscall; 
0x000000000011b7c1: mov edx, ecx; mov eax, 0xc1; syscall; 
0x00000000001176c1: mov edx, ecx; mov eax, 0xd8; syscall; 
0x000000000011f9c1: mov edx, ecx; mov eax, 0xdc; syscall; 
0x0000000000111871: mov edx, ecx; mov eax, 0xdd; syscall; 
0x000000000011e4b1: mov edx, ecx; mov eax, 0xe9; syscall; 
0x0000000000063a76: mov edx, ecx; mov ecx, 0x13c; mov eax, ecx; syscall; 
0x0000000000117516: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000010c905: mov edx, ecx; mov edi, r9d; mov eax, 0x103; syscall; 
0x00000000000783e4: mov edx, ecx; mov qword ptr [rbp - 0x4f0], rcx; mov rsi, r9; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007b429: mov edx, ecx; mov qword ptr [rbp - 0x8e8], r9; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000007b1e4: mov edx, ecx; mov qword ptr [rbp - 0x928], rcx; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x00000000001172da: mov edx, ecx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000008c5f1: mov edx, ecx; mov rsi, rbx; mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x0000000000113712: mov edx, ecx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000000113872: mov edx, ecx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000007742b: mov edx, edi; call qword ptr [rax + 0x38]; 
0x0000000000047c10: mov edx, edi; mov eax, edi; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000012f109: mov edx, edi; mov ebx, esi; xor edi, edi; lea rsi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x0000000000114370: mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x0000000000047c21: mov edx, edi; mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000009b19f: mov edx, edi; mov rdi, r13; call rax; 
0x000000000006c957: mov edx, edi; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006496f: mov edx, edi; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007e47e: mov edx, edi; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000133c0f: mov edx, edi; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000007751d: mov edx, edi; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000785c6: mov edx, edi; mov rsi, r8; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x00000000000ba461: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000101935: mov edx, edx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x000000000007772a: mov edx, edx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x000000000007780c: mov edx, edx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000111aa8: mov edx, edx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x000000000011dcd1: mov edx, edx; mov eax, 0x121; mov edx, 8; syscall; 
0x0000000000077772: mov edx, edx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x000000000007719c: mov edx, edx; xor esi, esi; jmp rax; 
0x000000000015e1f8: mov edx, esi; add r9, qword ptr [rsp + 8]; call rax; 
0x000000000010ccbd: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000001174b1: mov edx, esi; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000001605c9: mov edx, esi; mov esi, 0x80; mov eax, ecx; syscall; 
0x00000000000e19c0: mov edx, esi; mov r8d, 0x1000; mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x00000000000bc248: mov edx, esi; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000001137ba: mov edx, esi; mov rsi, r13; mov edi, r12d; mov eax, 0x147; syscall; 
0x000000000011391a: mov edx, esi; mov rsi, r13; mov edi, r12d; mov eax, 0x148; syscall; 
0x0000000000077375: mov edx, esi; mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000010cd4d: mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000012aa10: mov edx, esi; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012ac3e: mov edx, esi; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000013b446: mov edx, esi; shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000000112de1: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000000a74a5: mov edx, esi; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x0000000000111ab0: mov edx, esi; xor esi, esi; syscall; 
0x0000000000112e21: mov edx, esi; xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000001121f5: mov edx, esi; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x00000000000bbe56: mov edx, esi; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000007cdc5: mov edx, esp; call qword ptr [rax + 0x38]; 
0x00000000000e19c9: mov edx, esp; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x000000000010d361: mov edx, esp; mov eax, 0x10d; syscall; 
0x0000000000112ae2: mov edx, esp; mov eax, ecx; syscall; 
0x0000000000112511: mov edx, esp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000011decd: mov edx, esp; mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x114; syscall; 
0x000000000011238d: mov edx, esp; mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x11d; syscall; 
0x0000000000115a5a: mov edx, esp; mov qword ptr [rsp + 0x10], rax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x00000000000e14a8: mov edx, esp; mov r9d, eax; mov esi, ebp; mov edi, ebx; mov eax, 0xf7; syscall; 
0x00000000001135c9: mov edx, esp; mov r9d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x127; syscall; 
0x0000000000113679: mov edx, esp; mov r9d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x128; syscall; 
0x00000000001174b4: mov edx, esp; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000011dc72: mov edx, esp; mov rsi, r15; mov eax, 0x119; syscall; 
0x0000000000112103: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov eax, 0x146; syscall; 
0x000000000011e0e6: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x0000000000113476: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000113516: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x000000000011eb46: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ea76: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000011ef86: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee26: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000010d046: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000010cfa6: mov edx, esp; mov rsi, rbp; mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x00000000001122ee: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df7e: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b33e: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x000000000011f47e: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3ee: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f5ce: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13a9: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f74e: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011de2e: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x0000000000048b17: mov edx, esp; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175f7: mov edx, esp; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x0000000000111717: mov edx, esp; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000010d360: mov edx, r12d; mov eax, 0x10d; syscall; 
0x00000000001135c8: mov edx, r12d; mov r9d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x127; syscall; 
0x0000000000113678: mov edx, r12d; mov r9d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x128; syscall; 
0x00000000001174b3: mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000011dc71: mov edx, r12d; mov rsi, r15; mov eax, 0x119; syscall; 
0x0000000000112102: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov eax, 0x146; syscall; 
0x000000000011e0e5: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x0000000000113475: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000113515: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x000000000011eb45: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ef85: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee25: mov edx, r12d; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000011f5cd: mov edx, r12d; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13a8: mov edx, r12d; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011de2d: mov edx, r12d; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x0000000000048b16: mov edx, r12d; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175f6: mov edx, r12d; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x0000000000111716: mov edx, r12d; mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000011e043: mov edx, r13d; mov rsi, r12; mov edi, ebx; mov eax, 0x113; syscall; 
0x00000000001137b9: mov edx, r14d; mov rsi, r13; mov edi, r12d; mov eax, 0x147; syscall; 
0x0000000000113919: mov edx, r14d; mov rsi, r13; mov edi, r12d; mov eax, 0x148; syscall; 
0x0000000000043eab: mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000001017a1: mov es, word ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000121b20: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x00000000000b76be: mov es, word ptr [rsi]; add byte ptr [rax], al; ret; 
0x000000000004e266: mov es, word ptr [rsi]; or eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], al; ret 0x4835; 
0x0000000000112485: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000147195: mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000127146: mov esi, 0x24448900; sbb byte ptr [rbp - 0x6371f040], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000114372: mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x000000000014622e: mov esi, 0x31000000; leave; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000a6ef6: mov esi, 0x39410704; rol byte ptr [rcx + 0xf], 1; xchg eax, esp; ret 0x3941; 
0x00000000000c50d5: mov esi, 0x39cc05d9; str word ptr [rax - 0x77]; ret 0xc148; 
0x000000000015d548: mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000100d1a: mov esi, 0x441fe830; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000010ce6f: mov esi, 0x48000000; add esp, 0x78; ret; 
0x000000000015c956: mov esi, 0x48000000; add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000cdebe: mov esi, 0x48000000; lea eax, [rdi - 0x10]; ret; 
0x000000000002884e: mov esi, 0x4800008e; mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012d2fe: mov esi, 0x48fff8cc; cmove eax, edx; ret; 
0x000000000015b5be: mov esi, 0x48fffd07; add esp, 0x80; mov rax, qword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x00000000001129a7: mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000112c02: mov esi, 0x5409; mov eax, 0x10; syscall; 
0x0000000000112c31: mov esi, 0x5409; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x0000000000112bdf: mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x000000000007e1ac: mov esi, 0x63480012; add al, 0x88; add rax, rdx; jmp rax; 
0x000000000018ce6e: mov esi, 0x63490002; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000014d53a: mov esi, 0x66fffffe; nop; mov rax, qword ptr [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000155a69: mov esi, 0x748d4806; and al, 4; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000a6dd1: mov esi, 0x74c08407; xor dword ptr [rcx], edi; ret 0x2d74; 
0x00000000000a6f45: mov esi, 0x75c98408; in eax, dx; xor eax, eax; ret; 
0x000000000010192f: mov esi, 0x7fffffff; mov r10, rdx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x00000000001605cb: mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000012be78: mov esi, 0x80; syscall; 
0x000000000015e2be: mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000012bdb8: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000000292e2: mov esi, 0x83480147; ret; 
0x0000000000083786: mov esi, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x00000000000a6e3b: mov esi, 0x84450704; sal byte ptr [rbx + rdx + 0x41], 0x39; rol byte ptr [rcx + 0xf], 1; xchg eax, ebp; ret 0x3941; 
0x0000000000136e59: mov esi, 0x85480000; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0xb2378; call rax; 
0x000000000005417d: mov esi, 0x89410252; ret; 
0x000000000005a90f: mov esi, 0x89412404; ret; 
0x0000000000029956: mov esi, 0x89480045; ret 0xf641; 
0x000000000013f736: mov esi, 0x89480045; ret; 
0x0000000000129bd6: mov esi, 0x89482404; ret 0xe883; 
0x0000000000102b26: mov esi, 0x894d024e; ret 0x8d4c; 
0x000000000013430d: mov esi, 0x8b4d64fe; or al, byte ptr [rbp + 0xf]; mov bh, 0x1c; jns 0x13437f; and r11d, 0x840f2000; ret; 
0x000000000012d1cd: mov esi, 0x8d480005; adc eax, 0x5be39; cmove rax, rdx; ret; 
0x00000000001504c9: mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000154b5a: mov esi, 0xe68948c5; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000116346: mov esi, 0xf233c03; xchg eax, ebp; ret 0xd189; 
0x000000000012f419: mov esi, 0xf303c07; test byte ptr [rbp - 0x77000000], ah; ret 0xe283; 
0x000000000018bbb9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000096506: mov esi, 0xf6fffffd; ret 0x750f; 
0x0000000000102b97: mov esi, 0xfc085c0; xchg eax, esp; ret 0x1589; 
0x0000000000086b0c: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000008ebca: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000090b16: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000872bb: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000000807b0: mov esi, 1; lea rcx, [rbx + 0x40]; mov rdi, rbx; call rax; 
0x0000000000077774: mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000146172: mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000001503ef: mov esi, 4; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x0000000000150445: mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000015040c: mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000000441e0: mov esi, 8; mov eax, 0x7f; syscall; 
0x000000000004421d: mov esi, 8; mov eax, 0x82; syscall; 
0x000000000014724d: mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d42e: mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x0000000000044245: mov esi, 8; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x0000000000160dd8: mov esi, 9; mov edi, eax; mov eax, 0x3e; syscall; 
0x0000000000052ee1: mov esi, 9; mov rbx, rdi; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x00000000000472d5: mov esi, dword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000014652f: mov esi, dword ptr [rbp + 0x20]; mov rdi, rbx; mov r12d, eax; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x0000000000075aea: mov esi, dword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075715: mov esi, dword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000014646d: mov esi, dword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x00000000000881dd: mov esi, dword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000147abd: mov esi, dword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x0000000000147afb: mov esi, dword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000014f5a6: mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000011890e: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov dword ptr [rsp], r8d; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000007af16: mov esi, dword ptr [rdi + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, r13; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000034c89: mov esi, dword ptr [rdi + 0x78]; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret; 
0x0000000000046536: mov esi, dword ptr [rdi]; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000080098: mov esi, dword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0e2: mov esi, dword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f80: mov esi, dword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077132: mov esi, dword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006c95a: mov esi, dword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064972: mov esi, dword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000075185: mov esi, dword ptr [rsi + 0x18]; mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000018d4cc: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000ba123: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018d4ba: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000ba114: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018d4a7: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000014eb5d: mov esi, dword ptr [rsp + 0x10]; lea r12d, [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000010ced5: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000111816: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x0000000000045d42: mov esi, dword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000014579d: mov esi, dword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000027a46: mov esi, dword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x0000000000099271: mov esi, dword ptr [rsp + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000000bbfb3: mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x0000000000114152: mov esi, dword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000014bf1e: mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000145c20: mov esi, dword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000099cd1: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000014bf48: mov esi, dword ptr [rsp + 0x30]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000002acd6: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000002a069: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002bdcd: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000014c157: mov esi, dword ptr [rsp + 0x40]; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x000000000002efe1: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000002c3ae: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d467: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000014f5fb: mov esi, dword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000014f594: mov esi, dword ptr [rsp + 0x80]; mov rax, qword ptr [rbx + 0x60]; mov dword ptr [rbx + 0x58], 0; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000012c804: mov esi, dword ptr [rsp + 0xc]; mov edi, dword ptr [rsp + 8]; mov eax, 0xe6; syscall; 
0x000000000010d4c5: mov esi, dword ptr [rsp + 0xc]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000014589d: mov esi, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000026b59: mov esi, dword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000cf23c: mov esi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000015143f: mov esi, dword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x0000000000146c67: mov esi, dword ptr [rsp]; mov rdi, rbx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x00000000001218f0: mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000001461a3: mov esi, eax; call 0x14e600; nop word ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000147242: mov esi, eax; call 0x25190; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000015b224: mov esi, eax; call qword ptr [rax + 8]; 
0x0000000000146556: mov esi, eax; mov eax, eax; sub rax, r12; mov qword ptr [rbp + 0x18], rax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x000000000011fd9e: mov esi, eax; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000011ff27: mov esi, eax; mov edi, ebx; mov eax, r14d; syscall; 
0x000000000010bfcd: mov esi, eax; mov edi, edx; mov eax, 0x75; syscall; 
0x000000000010bff5: mov esi, eax; mov edi, edx; mov eax, 0x77; syscall; 
0x0000000000043ea9: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall; 
0x0000000000077520: mov esi, eax; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000785c9: mov esi, eax; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x000000000015d3cf: mov esi, eax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000148858: mov esi, ebp; call qword ptr [rbx + 0x40]; 
0x000000000009c2ed: mov esi, ebp; call rax; 
0x000000000015e7c4: mov esi, ebp; jmp qword ptr [rsi + 0xf]; 
0x0000000000141f3f: mov esi, ebp; mov dword ptr [rsp + 0x14], eax; mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x0000000000044f99: mov esi, ebp; mov dword ptr [rsp + 0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000000127670: mov esi, ebp; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000009d6ea: mov esi, ebp; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001135cf: mov esi, ebp; mov edi, ebx; mov eax, 0x127; syscall; 
0x000000000011367f: mov esi, ebp; mov edi, ebx; mov eax, 0x128; syscall; 
0x0000000000112106: mov esi, ebp; mov edi, ebx; mov eax, 0x146; syscall; 
0x00000000000e14ad: mov esi, ebp; mov edi, ebx; mov eax, 0xf7; syscall; 
0x000000000012c716: mov esi, ebp; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000011fe92: mov esi, ebp; mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x000000000011e0e9: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x0000000000113479: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000113519: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x000000000011eb49: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ea79: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000011ef89: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee29: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000010d049: mov esi, ebp; mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000010cfa9: mov esi, ebp; mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x00000000001137bd: mov esi, ebp; mov edi, r12d; mov eax, 0x147; syscall; 
0x000000000011391d: mov esi, ebp; mov edi, r12d; mov eax, 0x148; syscall; 
0x000000000011decf: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x114; syscall; 
0x00000000001122f1: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df81: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b341: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x000000000011238f: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x11d; syscall; 
0x000000000011f481: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3f1: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f5d1: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13ac: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f751: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011de31: mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x0000000000044ea9: mov esi, ebp; mov r8d, eax; mov r10d, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x00000000001457b4: mov esi, ebp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000001456ed: mov esi, ebp; mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x0000000000075be9: mov esi, ebp; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x00000000000ced14: mov esi, ebp; mov rdi, rbp; call rbx; 
0x00000000001174b7: mov esi, ebp; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000008eca7: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000008e754: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000009afca: mov esi, ebp; mov rdi, rbx; call rax; 
0x000000000010c4c8: mov esi, ebp; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000000e1662: mov esi, ebp; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x000000000010d800: mov esi, ebp; mov rdi, rbx; mov edx, eax; mov eax, 0x55; syscall; 
0x0000000000048b1a: mov esi, ebp; mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175fa: mov esi, ebp; mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x000000000011171a: mov esi, ebp; mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x0000000000047297: mov esi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000126688: mov esi, ebp; xor r15d, r15d; call rax; 
0x000000000008c5f4: mov esi, ebx; mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x000000000008c39c: mov esi, ebx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000000e1313: mov esi, ebx; mov r8d, eax; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x000000000009bc41: mov esi, ebx; mov rdi, r12; call rax; 
0x000000000007b1ee: mov esi, ebx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x0000000000152510: mov esi, ebx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000155d4e: mov esi, ebx; mov rdi, rbp; call rcx; 
0x00000000000dbac3: mov esi, ebx; xor edi, edi; mov eax, 0xe4; syscall; 
0x0000000000043ec9: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000015b511: mov esi, ecx; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b5d1: mov esi, ecx; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x0000000000077378: mov esi, ecx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000783ee: mov esi, ecx; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007d391: mov esi, ecx; mov rdi, rbx; sub r15, r9; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000000d8e55: mov esi, ecx; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000048ba6: mov esi, ecx; xor edx, edx; mov rdi, r8; mov eax, r10d; sub rsi, r8; syscall; 
0x00000000001488ed: mov esi, edi; call qword ptr [rbx + 0x40]; 
0x000000000011dc75: mov esi, edi; mov eax, 0x119; syscall; 
0x0000000000112de5: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000113b2c: mov esi, edi; mov eax, 0x75; mov edi, edx; syscall; 
0x0000000000113bfc: mov esi, edi; mov eax, 0x77; mov edi, edx; syscall; 
0x0000000000127011: mov esi, edi; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x000000000010ccc5: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x000000000011598a: mov esi, edi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x000000000014f5e7: mov esi, edi; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000005e583: mov esi, edi; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000015d978: mov esi, edi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000146d10: mov esi, edi; mov rdi, qword ptr [rsp]; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000000454ff: mov esi, edi; mov rdi, r12; call rbx; 
0x000000000007ae82: mov esi, edi; mov rdi, r13; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x00000000001526e1: mov esi, edi; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000010d936: mov esi, edi; mov rdi, r14; mov eax, 0x4f; syscall; 
0x000000000008e65a: mov esi, edi; mov rdi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000000462d6: mov esi, edi; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000dbaae: mov esi, edi; xor edi, edi; call rax; 
0x00000000000e12de: mov esi, edi; xor r10d, r10d; xor edx, edx; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x000000000014c80a: mov esi, edx; add rdi, 0x10; jmp rcx; 
0x000000000012a5b8: mov esi, edx; call rax; 
0x000000000014c82a: mov esi, edx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f25a: mov esi, edx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e91a: mov esi, edx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc3a: mov esi, edx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x000000000010c5bc: mov esi, edx; mov eax, 4; syscall; 
0x000000000010c60a: mov esi, edx; mov eax, 5; syscall; 
0x000000000010c65c: mov esi, edx; mov eax, 6; syscall; 
0x000000000007e481: mov esi, edx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007e7f7: mov esi, edx; mov rdi, rbx; mov qword ptr [rbp - 0x508], r9; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x0000000000077422: mov esi, edx; mov rdi, rbx; sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000001172d7: mov esi, edx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000155b9f: mov esi, esi; mov dword ptr [rdi + 0x28], edx; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000011f52a: mov esi, esi; mov edi, ebx; mov eax, 0x12b; syscall; 
0x000000000011403c: mov esi, esi; mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011f7fc: mov esi, esi; mov edi, ebx; mov eax, 0x46; syscall; 
0x000000000010ed12: mov esi, esi; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x00000000000750f4: mov esi, esi; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000000834ee: mov esi, esi; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000045817: mov esi, esi; mov rdi, r12; call rbx; 
0x000000000009b83a: mov esi, esi; mov rdi, r13; call rax; 
0x0000000000155166: mov esi, esi; mov rdi, rbp; xor eax, eax; call rcx; 
0x0000000000146581: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x00000000000e2ff9: mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000001458f9: mov esi, esp; call qword ptr [rax + 0x10]; 
0x0000000000155555: mov esi, esp; call qword ptr [rax + 0x40]; 
0x0000000000147e7d: mov esi, esp; call qword ptr [rax]; 
0x00000000000e56c1: mov esi, esp; call qword ptr [rbx + 0x40]; 
0x000000000009bdbd: mov esi, esp; call rax; 
0x00000000000dc7b3: mov esi, esp; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e38fc: mov esi, esp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000010bb2a: mov esi, esp; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000011e047: mov esi, esp; mov edi, ebx; mov eax, 0x113; syscall; 
0x000000000011eeeb: mov esi, esp; mov edi, ebx; mov eax, 0x2c; syscall; 
0x000000000011eccb: mov esi, esp; mov edi, ebx; mov eax, 0x2d; syscall; 
0x0000000000147e9c: mov esi, esp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000145907: mov esi, esp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000007535f: mov esi, esp; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000454a9: mov esi, esp; mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000001551fb: mov esi, esp; mov rdi, r12; call qword ptr [rax]; 
0x000000000015529b: mov esi, esp; mov rdi, r12; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x00000000000454e4: mov esi, esp; mov rdi, r13; call rbx; 
0x00000000000867b7: mov esi, esp; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000014755a: mov esi, esp; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d4ad: mov esi, esp; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000013ba24: mov esi, esp; mov rdi, rbp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x000000000008434f: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000147f19: mov esi, esp; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000046393: mov esi, esp; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x000000000008672c: mov esi, esp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000043ca2: mov esi, esp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001824d5: mov esi, fs; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000000867b6: mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000147559: mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000008672b: mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000146580: mov esi, r14d; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x00000000000fbf12: mov esp, 0x11824; add al, ch; ret; 
0x00000000000b6938: mov esp, 0x1d8d4cd2; adc eax, dword ptr [rbx + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f5: mov esp, 0x1d8d4cd2; add dl, byte ptr [rcx + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b862a: mov esp, 0x1d8d4cd2; add dword ptr [rax], ebp; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8faa: mov esp, 0x1d8d4cd2; add dword ptr [rdi], ebx; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5355: mov esp, 0x1d8d4cd2; and dl, byte ptr [rdi + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b2: mov esp, 0x1d8d4cd2; cdq; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7095: mov esp, 0x1d8d4cd2; cmp al, 0xf; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a1e: mov esp, 0x1d8d4cd2; fst dword ptr [rax + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b697a: mov esp, 0x1d8d4cd2; rol dword ptr [rdx + 0xf], 1; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70be: mov esp, 0x1d8d4cd2; sbb dword ptr [rdi + rcx], edi; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85e8: mov esp, 0x1d8d4cd2; sub byte ptr [r15], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8605: mov esp, 0x1d8d4cd2; sub byte ptr es:[rdi], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6955: mov esp, 0x1d8d4cd2; test byte ptr [rdx + 0xf], 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000114f84: mov esp, 0x2000d2e; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000138445: mov esp, 0x20024; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009e487: mov esp, 0x440f48c7; ret 0xc083; 
0x00000000000aa7a1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000aa7d1: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000aa7c1: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000001817ae: mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000fc7d4: mov esp, 0x45000b03; movzx ebp, ch; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000001230f0: mov esp, 0x4800008c; add esp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x00000000000993f0: mov esp, 0x48000929; add esp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000008a9f0: mov esp, 0x48000a13; add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000018a762: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c52: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a782: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c72: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a7c0: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185cb0: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a742: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c32: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001379f0: mov esp, 0x48ffff43; add esp, 0x80; mov dword ptr fs:[rdx], r8d; mov eax, esi; add rsp, 0x48; ret; 
0x000000000018bdb4: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000026f53: mov esp, 0x752ffa80; ret 0xf983; 
0x000000000013e8f2: mov esp, 0x8024; add byte ptr [rax - 0x73], cl; and byte ptr [r8 - 0x7d], cl; ret; 
0x000000000014f5dd: mov esp, 0x8024; add byte ptr [rax - 0x75], cl; cmp byte ptr [rcx + rcx*4 - 2], cl; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000097241: mov esp, 0x8024; add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0xf04; 
0x0000000000097267: mov esp, 0x8024; add dh, dh; ret 0x7504; 
0x00000000001609a5: mov esp, 0x8548fff7; ror byte ptr [rdi], 0x84; add dword ptr [rcx], 0x89480000; ret; 
0x00000000000f7313: mov esp, 0x8824; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000091273: mov esp, 0x8b48ffff; and al, 8; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000151329: mov esp, 0x8be2894c; xor cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000000f1dd4: mov esp, 0x8bfffff6; test dword ptr [rdi + rdi*8 - 1], ecx; inc dword ptr [rbp - 0x517bf040]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000091bd2: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x000000000009e448: mov esp, 0x8d480001; adc eax, 0x1bb7e; cmove rax, rdx; ret; 
0x00000000000afad4: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018ab12: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861c2: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821b2: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x00000000001861a2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001821a2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000009e476: mov esp, 0xc2440fc7; add eax, 1; ret; 
0x0000000000185d45: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x00000000000b0343: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000ce178: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000004342c: mov esp, 0xf3001f0f; addps xmm0, xmm0; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000981a4: mov esp, 0xf6310014; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000018bdb9: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000007c320: mov esp, 0xf6fffff5; ret 0xf10; 
0x00000000000aa88b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000018aa17: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860d7: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000182237: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000000aa7b1: mov esp, 0xf80148c0; ret; 
0x000000000018aad2: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186192: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x0000000000182192: mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000001129b1: mov esp, dword ptr [rax]; syscall; 
0x0000000000043c7a: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x0000000000146536: mov esp, eax; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x000000000007cdbe: mov esp, edi; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000014bf09: mov esp, esp; call qword ptr [rax + 0x18]; 
0x0000000000148deb: mov fs, word ptr [rcx - 0x76b3fffa]; out 0x89, eax; ret; 
0x00000000000a27a0: mov gs, edx; add al, byte ptr [rax]; add byte ptr [rcx - 9], al; ret 0xf800; 
0x0000000000122776: mov gs, word ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000031a0f: mov qword ptr [r11], r11; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4d06; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bb1b1: mov qword ptr [r12], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009afd8: mov qword ptr [r12], rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a0da8: mov qword ptr [r13], r12; pop r12; pop r13; pop r14; ret; 
0x0000000000147026: mov qword ptr [r14], 0; ret; 
0x0000000000058660: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000005869a: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000120544: mov qword ptr [r8], rax; mov qword ptr [rip + 0xc3e0e], 0; ret; 
0x00000000001204c4: mov qword ptr [r8], rax; mov qword ptr [rip + 0xc3e8e], 0; ret; 
0x0000000000094be1: mov qword ptr [r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000018d4b0: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000013b362: mov qword ptr [r9], r10; ret; 
0x000000000013b3bb: mov qword ptr [r9], rax; mov eax, edx; ret; 
0x000000000013b3ef: mov qword ptr [r9], rdi; ret; 
0x00000000001409af: mov qword ptr [rax + 0x10], 0; pxor xmm0, xmm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086396: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087448: mov qword ptr [rax + 0x10], rcx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087488: mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086358: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000086b47: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x00000000000937d2: mov qword ptr [rax + 0x20], rdx; add rsp, 0x18; ret; 
0x000000000008c21b: mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000086b43: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000008635c: mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000008639a: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000008748c: mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000000871cd: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000087e55: mov qword ptr [rax + 0x60], rcx; mov rcx, qword ptr [rbx + 8]; push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x00000000001401fd: mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000091990: mov qword ptr [rax + 8], 0; ret; 
0x000000000008634d: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000008c213: mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000056523: mov qword ptr [rax + rcx*8], rdx; xor eax, eax; ret; 
0x000000000011332b: mov qword ptr [rax], -1; xor eax, eax; ret; 
0x0000000000091989: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000013dfd1: mov qword ptr [rax], 0; ret; 
0x000000000013b148: mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x0000000000084bd9: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000009388d: mov qword ptr [rax], rcx; mov rax, qword ptr [rip + 0x150749]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000098a3b: mov qword ptr [rax], rdi; ret; 
0x000000000011d9c2: mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086c64: mov qword ptr [rax], rdx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086355: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000034d67: mov qword ptr [rax], rdx; ret; 
0x0000000000087453: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000098a31: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x14b4a5]; mov qword ptr [rax], rdi; ret; 
0x0000000000093897: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x000000000014655d: mov qword ptr [rbp + 0x18], rax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x00000000000e64f3: mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007cf1c: mov qword ptr [rbp - 0x4d0], 0; mov dword ptr [rbp - 0x508], 0x20; mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x000000000007e476: mov qword ptr [rbp - 0x4e0], r9; mov rdx, r15; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000076f68: mov qword ptr [rbp - 0x4e8], 0; mov byte ptr [rbp - 0x510], 0x20; mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x0000000000077515: mov qword ptr [rbp - 0x4f0], r10; mov rdx, r15; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000783e6: mov qword ptr [rbp - 0x4f0], rcx; mov rsi, r9; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007cf31: mov qword ptr [rbp - 0x4f0], rdi; jmp rax; 
0x00000000000783f3: mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007736d: mov qword ptr [rbp - 0x4f8], r10; mov rdx, r14; mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007e7fc: mov qword ptr [rbp - 0x508], r9; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x0000000000076f7a: mov qword ptr [rbp - 0x508], rcx; jmp rax; 
0x00000000000785ce: mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x000000000002840e: mov qword ptr [rbp - 0x68], rax; call 0x15d990; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000012ae1f: mov qword ptr [rbp - 0x68], rax; movdqu xmm7, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000002835c: mov qword ptr [rbp - 0x70], rcx; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000011fe96: mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x000000000007b42b: mov qword ptr [rbp - 0x8e8], r9; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000007b1e6: mov qword ptr [rbp - 0x928], rcx; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x0000000000036f5c: mov qword ptr [rbp - 0x98], rcx; mov rax, qword ptr [rip + 0x1b33fe]; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151923: mov qword ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0156: mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x00000000000a0111: mov qword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009e7d8: mov qword ptr [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000087375: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000925a8: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000082010: mov qword ptr [rbp], rax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000009e154: mov qword ptr [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000489b9: mov qword ptr [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047bd5: mov qword ptr [rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000314f1: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000013cc2f: mov qword ptr [rbx + 0x10], rax; mov eax, 0x14; add edx, 1; syscall; 
0x000000000008c230: mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000013b97c: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000015da55: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000012618e: mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000155f14: mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000015da0d: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000001261de: mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008b61d: mov qword ptr [rbx + 0x18], rdx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000155f77: mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000148c10: mov qword ptr [rbx + 0x20], rax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000011bff8: mov qword ptr [rbx + 0x20], rax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000090b50: mov qword ptr [rbx + 0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003161e: mov qword ptr [rbx + 0x20], rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ff02a: mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000008c238: mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x0000000000147a01: mov qword ptr [rbx + 0x30], rax; call 0x155d00; mov rax, rbx; pop rbx; ret; 
0x00000000001368a9: mov qword ptr [rbx + 0x30], rax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001268ce: mov qword ptr [rbx + 0x38], rax; mov byte ptr [rcx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000126879: mov qword ptr [rbx + 0x38], rax; mov byte ptr [rdx], 0xa; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011c1fc: mov qword ptr [rbx + 0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000090b99: mov qword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000114a04: mov qword ptr [rbx + 0x60], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087379: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000925ac: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d7ca: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008dc64: mov qword ptr [rbx + 0x90], rax; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000011c34e: mov qword ptr [rbx + 0x98], rdx; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008d97d: mov qword ptr [rbx + 0xd8], rcx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000009c7fb: mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000008c392: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000000926fa: mov qword ptr [rbx + 8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000152d34: mov qword ptr [rbx + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000012613e: mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009c65e: mov qword ptr [rbx + 8], rbp; mov qword ptr [rbx], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008ac0e: mov qword ptr [rbx + 8], rdx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x0000000000028852: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001563b1: mov qword ptr [rbx], 0; call 0x151c60; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000118401: mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000009c7f8: mov qword ptr [rbx], r12; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000151cac: mov qword ptr [rbx], rax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bcc: mov qword ptr [rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151aec: mov qword ptr [rbx], rax; lea rax, [rip + 0x97eaa]; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a24: mov qword ptr [rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x000000000009c79c: mov qword ptr [rbx], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000015df10: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000151974: mov qword ptr [rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x00000000001519cd: mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000001183ab: mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x000000000004896a: mov qword ptr [rbx], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000146473: mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000009c13b: mov qword ptr [rbx], rdi; call rcx; 
0x000000000009c662: mov qword ptr [rbx], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000009aa25: mov qword ptr [rbx], rdx; xor eax, eax; pop rbx; ret; 
0x000000000009c212: mov qword ptr [rbx], rsi; call rcx; 
0x00000000001761f3: mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000176203: mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000176213: mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000176223: mov qword ptr [rcx + 8], rdx; ret; 
0x000000000005c5b7: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000008a085: mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000001761b0: mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000001761d0: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761e0: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001761f0: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000176200: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000176210: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000176220: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x0000000000035527: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000001761c0: mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001761a0: mov qword ptr [rcx], rdx; ret; 
0x0000000000034c8d: mov qword ptr [rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret; 
0x000000000005716e: mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000b6c7c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7adc: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c9c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b560c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55ec: mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b970c: mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b7aff: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62df: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b972f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b6cdf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7b3f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b564f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b976f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b6cff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b5f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b566f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b978f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b6cc0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b20: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b5630: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b9750: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x0000000000155bcf: mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x0000000000090aa2: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008c776: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000090acf: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000155c66: mov qword ptr [rdi + 0x18], rdx; ret; 
0x000000000015637d: mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000155b69: mov qword ptr [rdi + 0x18], rsi; mov eax, 1; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000155ba7: mov qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000156388: mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000cfbbf: mov qword ptr [rdi + 0x20], rcx; pop r14; pop r15; ret; 
0x0000000000090ad3: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000090a9e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000090a96: mov qword ptr [rdi + 0x58], rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000082288: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x00000000000b6c3c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a9c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55ac: mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b96cc: mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b6c5c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7abc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55cc: mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b96ec: mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000016b567: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b4f7: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b487: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b417: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b3a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b798a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000016b3a7: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b54fa: mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b95ba: mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b6b5a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79aa: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000016b337: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b550a: mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b95da: mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b6b7a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79ca: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x000000000016b2c7: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b551a: mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b95fa: mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000009cb8a: mov qword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000005688f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000056753: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000057167: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000570f3: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000058856: mov qword ptr [rdi + 8], rax; mov eax, 0xffffc002; sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000058825: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000156379: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000155d18: mov qword ptr [rdi + 8], rax; movups xmmword ptr [rdi + 0x18], xmm0; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000090aa6: mov qword ptr [rdi + 8], rax; ret; 
0x000000000008aaee: mov qword ptr [rdi + 8], rcx; movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x000000000008d34e: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000000576bc: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000188cdb: mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873fb: mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fab: mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000018860b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b5b: mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000ba54a: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x00000000001895e9: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000ba116: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000001651d4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165212: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000005705e: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000165387: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165483: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653cf: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165557: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165737: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165927: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165af8: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165cf8: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ef8: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651d0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016520e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165383: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016547f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653cb: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165553: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165733: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165923: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165af4: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165cf4: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ef4: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651cc: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016520a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016537f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016547b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653c7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016554f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016572f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016591f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165af0: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165cf0: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ef0: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001651c8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165206: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016555b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ad77: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016573b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016acf7: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016592b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016ac77: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165afc: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016abe8: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165cfc: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016ab58: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165efc: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aac8: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000b6460: mov qword ptr [rdi - 1], rdx; ret; 
0x0000000000057057: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056fe9: mov qword ptr [rdi - 8], r9; ret; 
0x00000000001651d8: mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165216: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016538b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165487: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653d3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016adf7: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000057050: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000057160: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000061b73: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001493e3: mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000056fe3: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000570ed: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000056fb8: mov qword ptr [rdi], r9; ret; 
0x000000000005c19a: mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x00000000000b6ac6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b7906: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b6186: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b9536: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b6af6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b7946: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b54d6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b9576: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b6b16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b7966: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b54e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b9596: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b6b37: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7987: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b95b7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b6b57: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b5507: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b95d7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b6b77: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79c7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b5517: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b95f7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x0000000000188cd8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873f8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fa8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x0000000000188608: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b58: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b7927: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ad7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54c7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b9557: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b54b6: mov qword ptr [rdi], rcx; ret; 
0x00000000001895ee: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000a6ff5: mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000b6ab3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b78f3: mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000a7195: mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b6480: mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b64a0: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b64b0: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000013dfce: mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x00000000000b64c0: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b64d0: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000188060: mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b6490: mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000042eb5: mov qword ptr [rdi], rdx; ret; 
0x00000000000b9523: mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000585bc: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009ca90: mov qword ptr [rdi], rsi; mov eax, 1; ret; 
0x000000000018d4ad: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000585ea: mov qword ptr [rdi], rsi; ret; 
0x000000000010fb91: mov qword ptr [rdx + 0x10], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120540: mov qword ptr [rdx + 0x10], rcx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xc3e0e], 0; ret; 
0x00000000001204c0: mov qword ptr [rdx + 0x10], rcx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xc3e8e], 0; ret; 
0x0000000000082296: mov qword ptr [rdx + 0x130], rcx; ret; 
0x000000000008d984: mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000008561d: mov qword ptr [rdx + 0x20], rax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x0000000000085766: mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000084a98: mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000148007: mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000000937ca: mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 0x18; ret; 
0x000000000008589c: mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x0000000000147fdd: mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000147fe1: mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000001785aa: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000017421a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x00000000001785ca: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000017423a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017a832: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785ea: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000017425a: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000063b3a: mov qword ptr [rdx + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x000000000017847a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000017414a: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000063b8a: mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000015b566: mov qword ptr [rdx], 0; mov edx, 0xffffffff; mov eax, edx; ret; 
0x000000000009e922: mov qword ptr [rdx], r12; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x000000000017a8de: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178423: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000011fac3: mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000178523: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000001741d3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000178543: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000001741e3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000178563: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000001741f3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000178583: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000174203: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000001785a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000174213: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x00000000001785c3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000174233: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x00000000001785e3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000174253: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000178473: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000174143: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000d0564: mov qword ptr [rdx], rax; mov rax, qword ptr [rip + 0x1138da]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000001740f3: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000003553c: mov qword ptr [rdx], rax; ret; 
0x000000000009d831: mov qword ptr [rdx], rbx; mov rax, r10; pop rbx; ret; 
0x00000000000a6c11: mov qword ptr [rdx], rcx; ret; 
0x0000000000118804: mov qword ptr [rdx], rdi; pop rbx; pop rbp; ret; 
0x00000000000fe75a: mov qword ptr [rdx], rdi; ret; 
0x00000000000d04c9: mov qword ptr [rip + 0x1173c8], rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000009d4f3: mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000009d4b1: mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x000000000009353b: mov qword ptr [rip + 0x150d4e], rax; ret; 
0x000000000009350e: mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934ee: mov qword ptr [rip + 0x150d8b], rax; ret; 
0x00000000000932b4: mov qword ptr [rip + 0x15102d], rax; ret; 
0x00000000000932a4: mov qword ptr [rip + 0x151035], rax; ret; 
0x0000000000093292: mov qword ptr [rip + 0x151037], rdx; ret; 
0x0000000000093254: mov qword ptr [rip + 0x15103d], rax; ret; 
0x0000000000093244: mov qword ptr [rip + 0x151055], rax; ret; 
0x0000000000094344: mov qword ptr [rip + 0x15326d], rax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000092a4b: mov qword ptr [rip + 0x154b12], 0; ret; 
0x00000000000929e1: mov qword ptr [rip + 0x154b80], rdx; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000047ea4: mov qword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000025396: mov qword ptr [rip + 0x1c1343], rax; mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x000000000002641b: mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x000000000002539d: mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x0000000000196589: mov qword ptr [rip + 0x5048c], 0; ret; 
0x00000000001960a7: mov qword ptr [rip + 0x50666], 0; add rsp, 8; ret; 
0x00000000001967a4: mov qword ptr [rip + 0x510e1], 0; ret; 
0x00000000001967fe: mov qword ptr [rip + 0x514bf], 0; add rsp, 8; ret; 
0x0000000000196961: mov qword ptr [rip + 0x522fc], 0; ret; 
0x0000000000196a93: mov qword ptr [rip + 0x52d82], 0; pop rbx; ret; 
0x000000000015e953: mov qword ptr [rip + 0x88c96], rsi; ret; 
0x000000000015e94a: mov qword ptr [rip + 0x88ca7], r8; xor eax, eax; mov qword ptr [rip + 0x88c96], rsi; ret; 
0x000000000015afd5: mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x00000000001376de: mov qword ptr [rip + 0xb2f3b], rax; add rsp, 8; ret; 
0x0000000000120547: mov qword ptr [rip + 0xc3e0e], 0; ret; 
0x000000000012051e: mov qword ptr [rip + 0xc3e37], 0; ret; 
0x00000000001204ed: mov qword ptr [rip + 0xc3e68], 2; ret; 
0x00000000001204c7: mov qword ptr [rip + 0xc3e8e], 0; ret; 
0x00000000001203b0: mov qword ptr [rip + 0xc3fa9], rbx; pop rbx; ret; 
0x000000000012039a: mov qword ptr [rip + 0xc3fbf], rbx; pop rbx; ret; 
0x0000000000120170: mov qword ptr [rip + 0xc41e5], 0; add rsp, 8; ret; 
0x000000000012013f: mov qword ptr [rip + 0xc4216], 3; add rsp, 8; ret; 
0x0000000000116549: mov qword ptr [rip + 0xd19e0], rax; add rsp, 8; ret; 
0x0000000000116522: mov qword ptr [rip + 0xd1a03], 0; add rsp, 8; ret; 
0x00000000001164d7: mov qword ptr [rip + 0xd1a52], rdx; add rsp, 8; ret; 
0x00000000001164a8: mov qword ptr [rip + 0xd1a81], rdx; ret; 
0x0000000000114ec5: mov qword ptr [rip + 0xd2ed0], 0; add rsp, 8; ret; 
0x0000000000114ba6: mov qword ptr [rip + 0xd324b], rdx; mov qword ptr [rip + 0xd324c], rax; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x0000000000114bad: mov qword ptr [rip + 0xd324c], rax; lea rax, [rip + 0xd321d]; add rsp, 8; ret; 
0x0000000000114b00: mov qword ptr [rip + 0xd3299], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000114eee: mov qword ptr [rip + 0xd566b], rax; add rsp, 8; ret; 
0x00000000000ff53a: mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000000ff527: mov qword ptr [rsi + 0x10], r8; ret; 
0x0000000000048533: mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014704a: mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000489e5: mov qword ptr [rsi + 0x10], rax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a34: mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000048537: mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000008a61e: mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x000000000011229a: mov qword ptr [rsi + 0x38], rax; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001122aa: mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001122a2: mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001470e6: mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000ff542: mov qword ptr [rsi + 8], 0; ret; 
0x0000000000147042: mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000147012: mov qword ptr [rsi + 8], rax; ret; 
0x00000000000ff523: mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000562b3: mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000155c5e: mov qword ptr [rsi], rax; mov eax, 1; mov qword ptr [rdi + 0x18], rdx; ret; 
0x0000000000088a61: mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x000000000008c77a: mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000933e9: mov qword ptr [rsi], rdi; ret; 
0x000000000013a9de: mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x0000000000154e4f: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001547ab: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000014dc4b: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000115a5c: mov qword ptr [rsp + 0x10], rax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x000000000008870f: mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x0000000000113b7c: mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ddafe: mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000146696: mov qword ptr [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x0000000000096288: mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000009661f: mov qword ptr [rsp + 0x18], rax; call rdx; 
0x00000000000965ea: mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x00000000000e2b92: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af2: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113c40: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0xd6764]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b70: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0xd6834]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000965e5: mov qword ptr [rsp + 0x20], r10; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x0000000000114943: mov qword ptr [rsp + 0x20], rax; mov eax, 0x65; syscall; 
0x0000000000152370: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152160: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d0: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152240: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x0000000000112ada: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, ecx; syscall; 
0x00000000000965e0: mov qword ptr [rsp + 0x28], rdx; mov qword ptr [rsp + 0x20], r10; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x000000000011da9a: mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x000000000011da9f: mov qword ptr [rsp + 0x38], r9; syscall; 
0x0000000000154410: mov qword ptr [rsp + 0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x000000000015210b: mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x00000000000454d6: mov qword ptr [rsp + 0x40], rax; nop dword ptr [rax + rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000001523fb: mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x000000000014e309: mov qword ptr [rsp + 0x438], rax; xor eax, eax; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000000ced0e: mov qword ptr [rsp + 0x50], r12; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000000cec7a: mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000015d53e: mov qword ptr [rsp + 0x58], rax; mov rdx, qword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000001128fe: mov qword ptr [rsp + 0x58], rax; xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x00000000000cec73: mov qword ptr [rsp + 0x58], rax; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000010c6c2: mov qword ptr [rsp + 0x98], rax; xor eax, eax; mov eax, 0x14c; syscall; 
0x00000000001526be: mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000152624: mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000000cf22b: mov qword ptr [rsp + 0xe0], rdx; lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x0000000000096290: mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x00000000000965ef: mov qword ptr [rsp + 8], r11; call rcx; 
0x00000000001376a0: mov qword ptr [rsp + 8], rax; call 0x15d990; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001369c1: mov qword ptr [rsp + 8], rax; call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000147f4a: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x00000000000e2854: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c4: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000087dee: mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000118919: mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001546c8: mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000004394d: mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x0000000000096522: mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x00000000000485c5: mov qword ptr [rsp - 0x10], r8; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000115bc4: mov qword ptr [rsp - 0x10], rax; movq xmm0, qword ptr [rsp - 0x10]; mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000005bd4e: mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x0000000000115bcf: mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042b5b: mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000058752: mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000cebc9: mov qword ptr [rsp - 0x18], rsi; fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000435b4: mov qword ptr [rsp - 0x30], rdx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x0000000000042e8e: mov qword ptr [rsp - 8], rax; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000043075: mov qword ptr [rsp - 8], rdx; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e2a: mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f1d: mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000146507: mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x000000000013ba36: mov qword ptr [rsp], 0; call rax; 
0x000000000008e149: mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x000000000008eca2: mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000194413: mov qword ptr [rsp], rax; call 0x194c20; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000086950: mov qword ptr [rsp], rax; call 0x8cf60; mov rax, qword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000150554: mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20]; 
0x00000000001552a0: mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000147e9e: mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000008e830: mov qword ptr [rsp], rdx; call 0x8cf60; mov rdx, qword ptr [rsp]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000094be0: mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000015187e: mov qword ptr fs:[rax], rdx; ret; 
0x0000000000151922: mov qword ptr fs:[rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047bd4: mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x0000000000151cab: mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bcb: mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151aeb: mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97eaa]; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a23: mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151973: mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x00000000001519cc: mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000035526: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000034c8c: mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret; 
0x000000000003553b: mov qword ptr fs:[rdx], rax; ret; 
0x00000000000cf22a: mov qword ptr gs:[rsp + 0xe0], rdx; lea rdi, [rsp + 0xe0]; mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x00000000000ba115: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000078939: mov r10, qword ptr [rbp - 0x518]; jmp rax; 
0x0000000000108435: mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000011db05: mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000001466a4: mov r10, qword ptr [rsp + 8]; mov ebx, eax; mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x00000000000e19c8: mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x00000000001172dc: mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000013dfa0: mov r10, rax; mov byte ptr [r10], 0; ret; 
0x000000000010e1e0: mov r10, rcx; mov eax, 0x104; syscall; 
0x0000000000063a40: mov r10, rcx; mov eax, 0x108; syscall; 
0x000000000010e9d0: mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000010ea90: mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000011e840: mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000011e300: mov r10, rcx; mov eax, 0x12d; syscall; 
0x000000000011dd90: mov r10, rcx; mov eax, 0x12e; syscall; 
0x000000000011e8d0: mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000000011e930: mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000011e960: mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000001120cc: mov r10, rcx; mov eax, 0x146; syscall; 
0x000000000011e660: mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d50: mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011f140: mov r10, rcx; mov eax, 0x35; syscall; 
0x000000000011f0b0: mov r10, rcx; mov eax, 0x36; syscall; 
0x000000000011ec10: mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000e1430: mov r10, rcx; mov eax, 0x3d; syscall; 
0x000000000011e6f0: mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000011e630: mov r10, rcx; mov eax, 0xa5; syscall; 
0x000000000011e510: mov r10, rcx; mov eax, 0xaf; syscall; 
0x000000000011e720: mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e750: mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8f0: mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a940: mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b9d0: mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000000011b970: mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000000011b850: mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000000011b880: mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000000011b8e0: mov r10, rcx; mov eax, 0xc0; syscall; 
0x000000000011b7c0: mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000001176c0: mov r10, rcx; mov eax, 0xd8; syscall; 
0x000000000011f9c0: mov r10, rcx; mov eax, 0xdc; syscall; 
0x000000000011e4b0: mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000000063a75: mov r10, rcx; mov ecx, 0x13c; mov eax, ecx; syscall; 
0x0000000000113711: mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000000113871: mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000012f108: mov r10, rdi; mov ebx, esi; xor edi, edi; lea rsi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x0000000000101934: mov r10, rdx; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x0000000000077729: mov r10, rdx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x000000000007780b: mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000111aa7: mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x0000000000077771: mov r10, rdx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x000000000007719b: mov r10, rdx; xor esi, esi; jmp rax; 
0x0000000000112de0: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000011598c: mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x0000000000044170: mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000044026: mov r10d, 8; mov eax, ecx; syscall; 
0x0000000000044eae: mov r10d, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x0000000000111870: mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000000117515: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000011dcd0: mov r10d, edx; mov eax, 0x121; mov edx, 8; syscall; 
0x000000000011dc6e: mov r10d, r13d; mov edx, r12d; mov rsi, r15; mov eax, 0x119; syscall; 
0x00000000001174b0: mov r10d, r14d; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000010c95c: mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000165320: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165304: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000015e5c0: mov r11, r8; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000000f8a52: mov r11, rdi; add rax, rsi; jmp rax; 
0x000000000006cd26: mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x000000000007cdbd: mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000009e447: mov r12d, 0x8d480001; adc eax, 0x1bb7e; cmove rax, rdx; ret; 
0x00000000001129b0: mov r12d, dword ptr [r8]; syscall; 
0x00000000001129af: mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000146535: mov r12d, eax; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x000000000014bf08: mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x0000000000045495: mov r13, rax; mov rdi, r12; call rbx; 
0x000000000014f593: mov r14, qword ptr [rsp + 0x80]; mov rax, qword ptr [rbx + 0x60]; mov dword ptr [rbx + 0x58], 0; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000010d935: mov r14, rdi; mov rdi, r14; mov eax, 0x4f; syscall; 
0x0000000000153bc1: mov r14b, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x0000000000146555: mov r14d, eax; mov eax, eax; sub rax, r12; mov qword ptr [rbp + 0x18], rax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000043c73: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000014f5db: mov r15, qword ptr [rsp + 0x80]; mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000007741e: mov r15, r14; mov rsi, r10; mov rdi, rbx; sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000127008: mov r15, rax; call 0x12b6c0; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x0000000000153d41: mov r15d, 0x8337e983; clc; sbb cl, byte ptr [rcx + 0x430f41c8]; ret 0xf801; 
0x00000000001137b6: mov r15d, eax; mov edx, r14d; mov rsi, r13; mov edi, r12d; mov eax, 0x147; syscall; 
0x0000000000113916: mov r15d, eax; mov edx, r14d; mov rsi, r13; mov edi, r12d; mov eax, 0x148; syscall; 
0x000000000006cd14: mov r8, qword ptr [rbp - 0x5a0]; mov rdx, qword ptr [rbp - 0x5b0]; movsxd rax, dword ptr [rsi + rax*4]; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x000000000011299d: mov r8, qword ptr [rip + 0xd14cc]; mov rdx, rbp; mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000088a56: mov r8, qword ptr [rsi]; add rsi, 0x58; sub r8, qword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x0000000000133c05: mov r8, qword ptr [rsp]; mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000151435: mov r8, r15; mov rcx, r14; mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x000000000011db02: mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000001172df: mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000001140ef: mov r8, rbx; mov eax, 0x10e; syscall; 
0x000000000008744c: mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000115c98: mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x000000000012c652: mov r8, rsi; mov eax, 0xe5; xor esi, esi; lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x00000000000e19c2: mov r8d, 0x1000; mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x000000000010cb8c: mov r8d, 0x10c; syscall; 
0x00000000000326e2: mov r8d, 0x75b7e8; add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x00000000001117ba: mov r8d, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x0000000000112c38: mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000011e0ed: mov r8d, eax; mov eax, 0x130; syscall; 
0x000000000011347d: mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000048b1f: mov r8d, eax; mov eax, 0x13e; syscall; 
0x000000000011351d: mov r8d, eax; mov eax, 0x14; syscall; 
0x00000000001175ff: mov r8d, eax; mov eax, 0x1a; syscall; 
0x000000000011eb4d: mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ea7d: mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000011ef8d: mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee2d: mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000010d04d: mov r8d, eax; mov eax, 1; syscall; 
0x000000000011171f: mov r8d, eax; mov eax, 7; syscall; 
0x00000000000e1315: mov r8d, eax; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x000000000010d4c9: mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000011ded1: mov r8d, eax; mov edi, ebx; mov eax, 0x114; syscall; 
0x00000000001122f3: mov r8d, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df83: mov r8d, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b343: mov r8d, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x0000000000112391: mov r8d, eax; mov edi, ebx; mov eax, 0x11d; syscall; 
0x000000000011f483: mov r8d, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3f3: mov r8d, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f5d3: mov r8d, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13ae: mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f753: mov r8d, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011de33: mov r8d, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x000000000012c801: mov r8d, eax; mov esi, dword ptr [rsp + 0xc]; mov edi, dword ptr [rsp + 8]; mov eax, 0xe6; syscall; 
0x0000000000044eab: mov r8d, eax; mov r10d, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000010ced1: mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000010cfad: mov r8d, eax; xor eax, eax; syscall; 
0x000000000007ebc2: mov r9, qword ptr [rbp - 0x500]; jmp rax; 
0x000000000007de15: mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000055e72: mov r9, qword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x0000000000188603: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b53: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000bc24a: mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000002bdc7: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002efdb: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000002a05e: mov r9, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002d45c: mov r9, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000002acd0: mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000001172e2: mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000027a42: mov r9, r14; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x00000000000bbfaf: mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000007a0a0: mov r9, rax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x000000000007ef05: mov r9, rcx; lea rsi, [rip + 0x12b291]; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e21c: mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000007edca: mov r9, rsi; jmp rax; 
0x000000000007e251: mov r9, rsi; lea rax, [rip + 0x12bcc5]; mov dword ptr [rbp - 0x4d8], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e291: mov r9, rsi; lea rax, [rip + 0x12bd85]; mov dword ptr [rbp - 0x530], 1; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e1e1: mov r9, rsi; lea rdi, [rip + 0x12bfb5]; mov dword ptr [rbp - 0x510], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e0ff: mov r9, rsi; lea rdi, [rip + 0x12c097]; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007df79: mov r9, rsi; lea rdi, [rip + 0x12c21d]; mov dword ptr [rbp - 0x518], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007de49: mov r9, rsi; lea rdi, [rip + 0x12c34d]; mov dword ptr [rbp - 0x538], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007d145: mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0bd: mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfd5: mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007dec5: mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000001605c5: mov r9, rsi; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000007e162: mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000101788: mov r9d, 1; call 0x101090; add rsp, 0x18; ret; 
0x0000000000101764: mov r9d, 1; push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000011dc20: mov r9d, 8; mov eax, 0x119; syscall; 
0x000000000015e1f4: mov r9d, dword ptr [rdx]; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x00000000000e14aa: mov r9d, eax; mov esi, ebp; mov edi, ebx; mov eax, 0xf7; syscall; 
0x0000000000111812: mov r9d, eax; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x000000000011f526: mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x12b; syscall; 
0x0000000000114038: mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011f7f8: mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x46; syscall; 
0x00000000001135cb: mov r9d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x127; syscall; 
0x000000000011367b: mov r9d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 0x128; syscall; 
0x00000000000ff2f8: mov r9d, edx; call 0xfe830; add rsp, 0x18; ret; 
0x000000000011370e: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x000000000011386e: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000013b7e8: mov rax, -1; mov rdx, rax; ret; 
0x0000000000043dfe: mov rax, -1; ret; 
0x0000000000044945: mov rax, -2; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043f60: mov rax, 0xf; syscall; 
0x00000000000ce4b0: mov rax, 1; ret; 
0x00000000000ce4c0: mov rax, 2; ret; 
0x00000000000ce4d0: mov rax, 3; ret; 
0x00000000000ce4e0: mov rax, 4; ret; 
0x00000000000ce4f0: mov rax, 5; ret; 
0x00000000000ce500: mov rax, 6; ret; 
0x00000000000ce510: mov rax, 7; ret; 
0x000000000012c381: mov rax, qword ptr [0x10]; ret; 
0x00000000001466ab: mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x000000000005e573: mov rax, qword ptr [r12 + 0x38]; mov dword ptr [rbp - 0xe0], r8d; mov rdx, r13; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000001552a4: mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000145f97: mov rax, qword ptr [r12 + 8]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x00000000001551f5: mov rax, qword ptr [r12 + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x00000000001401f9: mov rax, qword ptr [r12]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000147ab8: mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x0000000000147af6: mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000001500f7: mov rax, qword ptr [r14 + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014f070: mov rax, qword ptr [r14 + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014c661: mov rax, qword ptr [r14 + 0xd0]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014699c: mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000014fe2c: mov rax, qword ptr [r15 + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000152650: mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x00000000001524f0: mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000015250b: mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000154397: mov rax, qword ptr [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000047e9f: mov rax, qword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000869ce: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000086b05: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000088dc9: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000084344: mov rax, qword ptr [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000012081f: mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000154d7c: mov rax, qword ptr [rax + 0x18]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000001543c7: mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000012091f: mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000472b8: mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ba60: mov rax, qword ptr [rax + 0x1a0]; ret; 
0x000000000015d97e: mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000088dd0: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000014796d: mov rax, qword ptr [rax + 0x23b8]; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000012b6f8: mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000014e8fc: mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000035481: mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000352b1: mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000898d3: mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000014f23c: mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000035291: mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003552a: mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000011ba58: mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000014bc1f: mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000011ba39: mov rax, qword ptr [rax + 8]; ret; 
0x00000000000750e8: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x948], r9d; mov rsi, r14; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000000352b4: mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034dae: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000339eb: mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003547e: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000352ae: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003528e: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034dab: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000339e8: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003547b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000352ab: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003528b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000351eb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351cb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351ab: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000003512b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003516b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350cb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003514b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000003510b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003526b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000350eb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003518b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000350ab: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012b73f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x0000000000047cf2: mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000140128: mov rax, qword ptr [rax]; ret; 
0x0000000000086da9: mov rax, qword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000086c2d: mov rax, qword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000083ee3: mov rax, qword ptr [rbp + 0x48]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000014721f: mov rax, qword ptr [rbp + 8]; lea esi, [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000014d540: mov rax, qword ptr [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000014d4b9: mov rax, qword ptr [rbp + 8]; lea rsi, [rsp + 0xc]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000147191: mov rax, qword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000147249: mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d42a: mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000001461b0: mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014d4a8: mov rax, qword ptr [rbp + 8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000002841a: mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000012618a: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000090bfc: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000015358a: mov rax, qword ptr [rbx + 0x18]; lea r12, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000001261da: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001535b6: mov rax, qword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000008c234: mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000001457da: mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145798: mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000145874: mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457ee: mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000147917: mov rax, qword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000008ac73: mov rax, qword ptr [rbx + 0x28]; sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000091378: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000091828: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; xor edx, edx; pop rbx; jmp rax; 
0x000000000014f5c7: mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x000000000014f59b: mov rax, qword ptr [rbx + 0x60]; mov dword ptr [rbx + 0x58], 0; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x000000000014f611: mov rax, qword ptr [rbx + 0x60]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000014eb65: mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000014eb7b: mov rax, qword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000082014: mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000088dbe: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000014bf16: mov rax, qword ptr [rbx + 0xd0]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000146561: mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000147f68: mov rax, qword ptr [rbx + 8]; lea rsi, [rbp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x00000000001546d8: mov rax, qword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000015467f: mov rax, qword ptr [rbx + 8]; lea rsi, [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000015555e: mov rax, qword ptr [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000001555af: mov rax, qword ptr [rbx + 8]; lea rsi, [rsp + 4]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000001516f9: mov rax, qword ptr [rbx + 8]; mov dword ptr [r10], 0xe; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000014657c: mov rax, qword ptr [rbx + 8]; mov esi, r14d; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000008c22c: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000012613a: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001460d1: mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000146500: mov rax, qword ptr [rbx + 8]; mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x0000000000147f14: mov rax, qword ptr [rbx + 8]; mov rsi, r12; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000150d37: mov rax, qword ptr [rbx + 8]; pop rdx; call qword ptr [rax + 0x20]; 
0x0000000000150363: mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000150fc9: mov rax, qword ptr [rbx]; mov rdx, qword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x00000000001785a6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000174216: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x00000000001785c6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000174236: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017a82e: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785e6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000174256: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000178476: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000174146: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000017a8db: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178420: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000178520: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000001741d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000178540: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x00000000001741e0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000178560: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000001741f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000178580: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000174200: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000001785a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000174210: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x00000000001785c0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000174230: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x00000000001785e0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000174250: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000178470: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000174140: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000001740f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000013dfc2: mov rax, qword ptr [rdi + 0x10]; lea rax, [rax + rdx*8]; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x000000000014e8f0: mov rax, qword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f230: mov rax, qword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000090ac7: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000155b30: mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000dc9b0: mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000092f90: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000937ce: mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 0x18; ret; 
0x000000000008c280: mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000001458f0: mov rax, qword ptr [rdi + 0x38]; add r12, 0x18; mov rsi, r12; call qword ptr [rax + 0x10]; 
0x0000000000145909: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000145869: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000150369: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000001457b6: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000008c170: mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000898d0: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000090a9a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000092970: mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000154378: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x00000000001543a8: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x0000000000145b4c: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000150411: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000147135: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x30]; 
0x000000000015595c: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000147ea2: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000155898: mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 0x40]; 
0x00000000001558a0: mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 0x48]; 
0x0000000000154580: mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 8]; 
0x0000000000154575: mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax]; 
0x0000000000147f00: mov rax, qword ptr [rdi + 8]; lea r12, [rsp + 0x10]; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000015043c: mov rax, qword ptr [rdi + 8]; lea rdx, [rsp + 0x18]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001504c0: mov rax, qword ptr [rdi + 8]; lea rdx, [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000014e313: mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x0000000000154e90: mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155928: mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x0000000000154670: mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x0000000000155550: mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000147e78: mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000000147f4f: mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000152375: mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152165: mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d5: mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152245: mov rax, qword ptr [rdi + 8]; movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x000000000015559d: mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001546c0: mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000015575d: mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001547b0: mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000009a200: mov rax, qword ptr [rdi + rax - 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000011fac0: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000009267d: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000012be9b: mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000005874a: mov rax, qword ptr [rdi]; mov word ptr [rsp - 0x10], si; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000093550: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150d56], 1; mov dword ptr [rip + 0x150d48], eax; ret; 
0x0000000000093500: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150da6], 1; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934e0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150dc6], 1; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x0000000000093570: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x154072], eax; ret; 
0x00000000000932b0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x15102d], rax; ret; 
0x00000000000932a0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x0000000000093250: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x15103d], rax; ret; 
0x0000000000093240: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x0000000000101b60: mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x0000000000087ad7: mov rax, qword ptr [rdx + 0x20]; cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008c271: mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c161: mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000011229e: mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000035252: mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000339bc: mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000014e9b0: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ea78: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014bce0: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014bdf8: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x00000000000fe757: mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000014f3a0: mov rax, qword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000014f2a0: mov rax, qword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000014ea48: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014bdc8: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000e3770: mov rax, qword ptr [rip + 0x1006f9]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000e3680: mov rax, qword ptr [rip + 0x1007e9]; mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000dc875: mov rax, qword ptr [rip + 0x1075f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e2b97: mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af7: mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2859: mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c9: mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e1890: mov rax, qword ptr [rip + 0x108b21]; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc2d0: mov rax, qword ptr [rip + 0x10e089]; lea rdi, [rip + 0x10a442]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc28a: mov rax, qword ptr [rip + 0x10e0d7]; lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0e0: mov rax, qword ptr [rip + 0x10e279]; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc0b3: mov rax, qword ptr [rip + 0x10e2ae]; lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbff0: mov rax, qword ptr [rip + 0x10e369]; lea rdi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfc7: mov rax, qword ptr [rip + 0x10e39a]; lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbaf5: mov rax, qword ptr [rip + 0x10e864]; lea rdi, [rip + 0x10ac1d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d0567: mov rax, qword ptr [rip + 0x1138da]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceab0: mov rax, qword ptr [rip + 0x1153b9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000cea90: mov rax, qword ptr [rip + 0x1153d9]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000c8d41: mov rax, qword ptr [rip + 0x121620]; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8b91: mov rax, qword ptr [rip + 0x1217c8]; lea rdi, [rip + 0x11db81]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009c600: mov rax, qword ptr [rip + 0x147869]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009c471: mov rax, qword ptr [rip + 0x147ad8]; call qword ptr [rax]; 
0x000000000009c290: mov rax, qword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1b0: mov rax, qword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x0000000000098a34: mov rax, qword ptr [rip + 0x14b4a5]; mov qword ptr [rax], rdi; ret; 
0x00000000000981a0: mov rax, qword ptr [rip + 0x14bcc9]; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000097990: mov rax, qword ptr [rip + 0x14c4d9]; xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000009d6e2: mov rax, qword ptr [rip + 0x14cc97]; mov rsi, rbp; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d69a: mov rax, qword ptr [rip + 0x14ccd7]; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4cb: mov rax, qword ptr [rip + 0x14ce9e]; lea rdi, [rip + 0x14a24b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009651b: mov rax, qword ptr [rip + 0x14d89e]; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x0000000000096281: mov rax, qword ptr [rip + 0x14db38]; mov qword ptr [rsp + 0x18], r10; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000009389a: mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000093890: mov rax, qword ptr [rip + 0x150749]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x0000000000092950: mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000901f0: mov rax, qword ptr [rip + 0x153c79]; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008ffa5: mov rax, qword ptr [rip + 0x153ec4]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008c7a0: mov rax, qword ptr [rip + 0x1576c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000089268: mov rax, qword ptr [rip + 0x15ac01]; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000083f80: mov rax, qword ptr [rip + 0x15fee9]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000005f670: mov rax, qword ptr [rip + 0x1847f9]; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000005f560: mov rax, qword ptr [rip + 0x184909]; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x00000000000559f0: mov rax, qword ptr [rip + 0x194941]; lea rsi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000052d71: mov rax, qword ptr [rip + 0x197618]; lea rdi, [rsp + 0x40]; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000048c00: mov rax, qword ptr [rip + 0x19b269]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000485f8: mov rax, qword ptr [rip + 0x19b871]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048558: mov rax, qword ptr [rip + 0x19b911]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044db5: mov rax, qword ptr [rip + 0x19f0b4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044c75: mov rax, qword ptr [rip + 0x19f1f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044b38: mov rax, qword ptr [rip + 0x19f331]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044a88: mov rax, qword ptr [rip + 0x19f3e1]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000449b0: mov rax, qword ptr [rip + 0x19f4b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000044990: mov rax, qword ptr [rip + 0x19f4d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044958: mov rax, qword ptr [rip + 0x19f511]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044918: mov rax, qword ptr [rip + 0x19f551]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000448d8: mov rax, qword ptr [rip + 0x19f591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004487e: mov rax, qword ptr [rip + 0x19f5eb]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044158: mov rax, qword ptr [rip + 0x19fd11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f30: mov rax, qword ptr [rip + 0x19ff39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df0: mov rax, qword ptr [rip + 0x1a0079]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000434b1: mov rax, qword ptr [rip + 0x1a09b8]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043133: mov rax, qword ptr [rip + 0x1a0d36]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042d2a: mov rax, qword ptr [rip + 0x1a113f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042160: mov rax, qword ptr [rip + 0x1a1d09]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000042100: mov rax, qword ptr [rip + 0x1a1d69]; mov dword ptr fs:[rax], 0x2a; mov rax, rcx; ret; 
0x0000000000043c9a: mov rax, qword ptr [rip + 0x1a66a7]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000035490: mov rax, qword ptr [rip + 0x1ae971]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354b0: mov rax, qword ptr [rip + 0x1aea31]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354d0: mov rax, qword ptr [rip + 0x1aea51]; add rax, qword ptr fs:[0]; ret; 
0x0000000000035260: mov rax, qword ptr [rip + 0x1aeba1]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034da0: mov rax, qword ptr [rip + 0x1af021]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034d60: mov rax, qword ptr [rip + 0x1af081]; mov qword ptr [rax], rdx; ret; 
0x00000000000339e0: mov rax, qword ptr [rip + 0x1b03e1]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000039503: mov rax, qword ptr [rip + 0x1b0e5e]; lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394a3: mov rax, qword ptr [rip + 0x1b0eb6]; lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375f3: mov rax, qword ptr [rip + 0x1b2d6e]; lea rdi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037589: mov rax, qword ptr [rip + 0x1b2dd0]; lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037457: mov rax, qword ptr [rip + 0x1b2f0a]; lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373f6: mov rax, qword ptr [rip + 0x1b2f5b]; lea rdi, [rip + 0x1af55c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003731e: mov rax, qword ptr [rip + 0x1b3043]; lea rdi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f91: mov rax, qword ptr [rip + 0x1b33d0]; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f63: mov rax, qword ptr [rip + 0x1b33fe]; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d25: mov rax, qword ptr [rip + 0x1b363c]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036cfe: mov rax, qword ptr [rip + 0x1b3663]; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a45: mov rax, qword ptr [rip + 0x1b390c]; lea rdi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a1c: mov rax, qword ptr [rip + 0x1b3935]; lea rdi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036899: mov rax, qword ptr [rip + 0x1b3ac8]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036436: mov rax, qword ptr [rip + 0x1b3f23]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036413: mov rax, qword ptr [rip + 0x1b3f4e]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036197: mov rax, qword ptr [rip + 0x1b41ba]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000360c2: mov rax, qword ptr [rip + 0x1b429f]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035561: mov rax, qword ptr [rip + 0x1b4df8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a2e: mov rax, qword ptr [rip + 0x1b592b]; lea rdi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c1: mov rax, qword ptr [rip + 0x1b59a0]; lea rdi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030cf0: mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x0000000000034925: mov rax, qword ptr [rip + 0x1b5a34]; lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003434b: mov rax, qword ptr [rip + 0x1b6016]; lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034314: mov rax, qword ptr [rip + 0x1b604d]; lea rdi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003412d: mov rax, qword ptr [rip + 0x1b622c]; lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032358: mov rax, qword ptr [rip + 0x1b8009]; lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f24: mov rax, qword ptr [rip + 0x1b843d]; lea rdi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031de2: mov rax, qword ptr [rip + 0x1b857f]; lea rdi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c88: mov rax, qword ptr [rip + 0x1b86d9]; lea rdi, [rip + 0x1b4a8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a4c: mov rax, qword ptr [rip + 0x1b8915]; lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a0c: mov rax, qword ptr [rip + 0x1b894d]; lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000027410: mov rax, qword ptr [rip + 0x1bca59]; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000026ec0: mov rax, qword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x0000000000026b51: mov rax, qword ptr [rip + 0x1bd358]; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000028800: mov rax, qword ptr [rip + 0x1c17b1]; ret; 
0x00000000000287f0: mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x0000000000026b8e: mov rax, qword ptr [rip + 0x1c3813]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000160eb0: mov rax, qword ptr [rip + 0x82fb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160670: mov rax, qword ptr [rip + 0x837f9]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000160610: mov rax, qword ptr [rip + 0x83859]; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000015e860: mov rax, qword ptr [rip + 0x85609]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015e7e0: mov rax, qword ptr [rip + 0x85689]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015d9a1: mov rax, qword ptr [rip + 0x864b8]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015d970: mov rax, qword ptr [rip + 0x864e9]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015c706: mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015af10: mov rax, qword ptr [rip + 0x88f59]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a990: mov rax, qword ptr [rip + 0x894d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a970: mov rax, qword ptr [rip + 0x894f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a920: mov rax, qword ptr [rip + 0x89549]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d9a: mov rax, qword ptr [rip + 0x8954f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d6a: mov rax, qword ptr [rip + 0x89577]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015a8d0: mov rax, qword ptr [rip + 0x89599]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d3a: mov rax, qword ptr [rip + 0x8959f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160de6: mov rax, qword ptr [rip + 0x895b3]; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000160d0a: mov rax, qword ptr [rip + 0x895c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cda: mov rax, qword ptr [rip + 0x895ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160caa: mov rax, qword ptr [rip + 0x89617]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015b5c9: mov rax, qword ptr [rip + 0x89f80]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015b509: mov rax, qword ptr [rip + 0x8a040]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b353: mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2b6: mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b219: mov rax, qword ptr [rip + 0x8a330]; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000015b183: mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015abf4: mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x000000000015abbf: mov rax, qword ptr [rip + 0x8a98a]; lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000015abb6: mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x000000000015dec8: mov rax, qword ptr [rip + 0x8c0b9]; call qword ptr [rax + 0x10]; 
0x000000000015dc48: mov rax, qword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x000000000015db50: mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x0000000000151870: mov rax, qword ptr [rip + 0x92529]; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000140120: mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012f690: mov rax, qword ptr [rip + 0xb47c1]; add rax, qword ptr fs:[0]; ret; 
0x000000000012ec18: mov rax, qword ptr [rip + 0xb5251]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012c768: mov rax, qword ptr [rip + 0xb7701]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012bd5a: mov rax, qword ptr [rip + 0xbe5df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd2a: mov rax, qword ptr [rip + 0xbe607]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcfa: mov rax, qword ptr [rip + 0xbe62f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcca: mov rax, qword ptr [rip + 0xbe657]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc9a: mov rax, qword ptr [rip + 0xbe67f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc6a: mov rax, qword ptr [rip + 0xbe6a7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc3a: mov rax, qword ptr [rip + 0xbe6cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc0a: mov rax, qword ptr [rip + 0xbe6f7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbaa: mov rax, qword ptr [rip + 0xbe70f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbde: mov rax, qword ptr [rip + 0xbe71b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012bb7a: mov rax, qword ptr [rip + 0xbe737]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb4a: mov rax, qword ptr [rip + 0xbe75f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb1a: mov rax, qword ptr [rip + 0xbe787]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012baea: mov rax, qword ptr [rip + 0xbe7af]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012baba: mov rax, qword ptr [rip + 0xbe7d7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba5a: mov rax, qword ptr [rip + 0xbe827]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba2a: mov rax, qword ptr [rip + 0xbe84f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9fa: mov rax, qword ptr [rip + 0xbe877]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9ca: mov rax, qword ptr [rip + 0xbe89f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b99a: mov rax, qword ptr [rip + 0xbe8c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b96a: mov rax, qword ptr [rip + 0xbe8ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b93a: mov rax, qword ptr [rip + 0xbe917]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b90a: mov rax, qword ptr [rip + 0xbe93f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8da: mov rax, qword ptr [rip + 0xbe967]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8aa: mov rax, qword ptr [rip + 0xbe98f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b87a: mov rax, qword ptr [rip + 0xbe9b7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b84a: mov rax, qword ptr [rip + 0xbe9df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b81a: mov rax, qword ptr [rip + 0xbe9ff]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b7ea: mov rax, qword ptr [rip + 0xbeb07]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001210b0: mov rax, qword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea20: mov rax, qword ptr [rip + 0xc5449]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e278: mov rax, qword ptr [rip + 0xc5bf1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e248: mov rax, qword ptr [rip + 0xc5c21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120918: mov rax, qword ptr [rip + 0xc78f9]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000120818: mov rax, qword ptr [rip + 0xc79f9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000011ba40: mov rax, qword ptr [rip + 0xc8429]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011b7a0: mov rax, qword ptr [rip + 0xc86b9]; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000011ada8: mov rax, qword ptr [rip + 0xc90c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118410: mov rax, qword ptr [rip + 0xcba59]; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001183db: mov rax, qword ptr [rip + 0xcba8e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001183c9: mov rax, qword ptr [rip + 0xcbaa0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000117b7a: mov rax, qword ptr [rip + 0xcc2ef]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001174e0: mov rax, qword ptr [rip + 0xcc989]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000115b93: mov rax, qword ptr [rip + 0xce2d6]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000001147a0: mov rax, qword ptr [rip + 0xcf6c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114770: mov rax, qword ptr [rip + 0xcf6f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114650: mov rax, qword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001133f0: mov rax, qword ptr [rip + 0xd0a79]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x0000000000113338: mov rax, qword ptr [rip + 0xd0b31]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113324: mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x0000000000112833: mov rax, qword ptr [rip + 0xd1636]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001127d6: mov rax, qword ptr [rip + 0xd1693]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112222: mov rax, qword ptr [rip + 0xd1c47]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000001121d2: mov rax, qword ptr [rip + 0xd1c97]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001116b8: mov rax, qword ptr [rip + 0xd27b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000117d74: mov rax, qword ptr [rip + 0xd27f5]; pop rcx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000111580: mov rax, qword ptr [rip + 0xd28e9]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000001177e7: mov rax, qword ptr [rip + 0xd2d7a]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000010faf0: mov rax, qword ptr [rip + 0xd4379]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000114f0e: mov rax, qword ptr [rip + 0xd543b]; lea rsi, [rip - 0x3c]; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113c45: mov rax, qword ptr [rip + 0xd6764]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b75: mov rax, qword ptr [rip + 0xd6834]; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010cbd0: mov rax, qword ptr [rip + 0xd7299]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010cbb8: mov rax, qword ptr [rip + 0xd72b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb60: mov rax, qword ptr [rip + 0xd7309]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c990: mov rax, qword ptr [rip + 0xd74d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c938: mov rax, qword ptr [rip + 0xd7531]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d8: mov rax, qword ptr [rip + 0xd7591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c688: mov rax, qword ptr [rip + 0xd77e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c638: mov rax, qword ptr [rip + 0xd7831]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e8: mov rax, qword ptr [rip + 0xd7881]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010bb90: mov rax, qword ptr [rip + 0xde7a1]; lea rsi, [rsp + 0x2c]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb42: mov rax, qword ptr [rip + 0xde7ef]; xor esi, esi; mov edi, dword ptr [rsp + 0x2c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010910c: mov rax, qword ptr [rip + 0xe1225]; xor esi, esi; mov edi, dword ptr [rsp + 0xa8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001019c8: mov rax, qword ptr [rip + 0xe24a1]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000101978: mov rax, qword ptr [rip + 0xe24f1]; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000010512c: mov rax, qword ptr [rip + 0xe521d]; lea rsi, [rip - 0x2bda]; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000122118: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000122090: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000122018: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000121e18: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000121f18: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000121c18: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000121e98: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000121c98: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000121d18: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000121f98: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000121b98: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000035430: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000035410: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000353f0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000035370: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000353b0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000035310: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000035390: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000035350: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000352e0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000035330: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000353d0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000352f0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000035450: mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000035460: mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000339d0: mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x000000000015d550: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000a70c0: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000148c90: mov rax, qword ptr [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000026b64: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002c3b7: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000148dc8: mov rax, qword ptr [rsp + 0x20]; mov rcx, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000002d470: mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000000cf240: mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000014dc50: mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000014de7d: mov rax, qword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000014fc45: mov rax, qword ptr [rsp + 0x60]; lea rsi, [rbp + 0x18]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014f5d6: mov rax, qword ptr [rsp + 0x60]; mov r15, qword ptr [rsp + 0x80]; mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000014fa82: mov rax, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000001469ec: mov rax, qword ptr [rsp + 0xc8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000048b3e: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000359c1: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000462db: mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000046398: mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000147554: mov rax, qword ptr [rsp + 8]; mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014c0f7: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [r15]; lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014db50: mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000145085: mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001376aa: mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x0000000000091276: mov rax, qword ptr [rsp + 8]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000004356f: mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000121112: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000121173: mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000086959: mov rax, qword ptr [rsp]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000009cc6c: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbd7: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000146468: mov rax, qword ptr [rsp]; mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000145873: mov rax, qword ptr ds:[rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000013dfc1: mov rax, qword ptr es:[rdi + 0x10]; lea rax, [rax + rdx*8]; add rdx, 1; mov qword ptr [rdi], rdx; mov qword ptr [rax], 0; ret; 
0x000000000012c380: mov rax, qword ptr fs:[0x10]; ret; 
0x00000000001401f8: mov rax, qword ptr fs:[r12]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000034daa: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000339e7: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003547a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000352aa: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003528a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000351ea: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351ca: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351aa: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000003512a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003516a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350ca: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003514a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000003510a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003526a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000350ea: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003518a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000350aa: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012b73e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x0000000000140127: mov rax, qword ptr fs:[rax]; ret; 
0x000000000009d834: mov rax, r10; pop rbx; ret; 
0x000000000009e925: mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x000000000009feb5: mov rax, r12; pop r12; ret; 
0x0000000000080d2a: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008c948: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000034a05: mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x00000000000349df: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000118a5d: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd514: mov rax, r14; call rax; 
0x0000000000105e61: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000094d5f: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000099ab1: mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000018ad43: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000001863d0: mov rax, r8; vzeroupper; ret; 
0x000000000007a0a7: mov rax, r9; pop r14; ret; 
0x0000000000079ff6: mov rax, r9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008e95d: mov rax, rbp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000001186a3: mov rax, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000082359: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000082477: mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x0000000000035aa6: mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000119086: mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000008245d: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000035a88: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d61d: mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000008cd5a: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0dd5: mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000008d5e7: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000031649: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000039524: mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000048017: mov rax, rbx; pop rbx; ret; 
0x0000000000117e39: mov rax, rbx; pop rdx; pop rbx; ret; 
0x000000000009ae69: mov rax, rcx; pop rbx; pop rbp; ret; 
0x00000000000420fb: mov rax, rcx; ret; 
0x0000000000047c70: mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000115d03: mov rax, rdi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x0000000000084f02: mov rax, rdi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000011d8c0: mov rax, rdi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x0000000000094fa2: mov rax, rdi; pop rbp; pop r12; ret; 
0x00000000000a7564: mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005c19d: mov rax, rdi; ret; 
0x000000000012f189: mov rax, rdi; sar rax, 6; ret; 
0x0000000000047c23: mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000011d8a9: mov rax, rdi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001882a0: mov rax, rdi; vzeroupper; ret; 
0x0000000000094be4: mov rax, rdx; add rsp, 8; ret; 
0x00000000000a009b: mov rax, rdx; cmovne rax, rdi; ret; 
0x000000000013b7da: mov rax, rdx; movsxd rdx, esi; ret; 
0x0000000000098fb4: mov rax, rdx; pop r12; ret; 
0x0000000000098c17: mov rax, rdx; pop rbp; pop r12; pop r13; ret; 
0x0000000000082200: mov rax, rdx; pop rbp; pop r12; ret; 
0x0000000000098bfe: mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009434f: mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000055231: mov rax, rdx; pop rbx; ret; 
0x0000000000056925: mov rax, rdx; ret; 
0x00000000000ddbe4: mov rax, rsi; add rsp, 8; ret; 
0x000000000008422a: mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008406d: mov rax, rsi; pop rbx; pop rbp; ret; 
0x000000000009796c: mov rax, rsi; pop rbx; ret; 
0x000000000005c2aa: mov rax, rsi; ret; 
0x0000000000088825: mov rbp, qword ptr [r13 + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000043c7c: mov rbp, r9; nop; jmp rdx; 
0x00000000001480f3: mov rbp, rax; bswap edx; mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000011d928: mov rbp, rcx; push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi; 
0x0000000000148bf3: mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x00000000000824ea: mov rbp, rdx; push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000196958: mov rbp, rsp; call 0x15de30; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x00000000000e1dd1: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000153586: mov rbx, qword ptr [rdi + 0x48]; mov rax, qword ptr [rbx + 0x18]; lea r12, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x000000000008d560: mov rbx, r12; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000052ee6: mov rbx, rdi; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x00000000001183f6: mov rbx, rdi; mov rdi, qword ptr [rdi]; call 0x25318; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000155f09: mov rbx, rdi; mov rdi, rax; call 0x25318; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000011d92c: mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi; 
0x00000000000824ee: mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000111aa4: mov rbx, rdx; mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall; 
0x0000000000086351: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000144fa8: mov rcx, qword ptr [rax + 8]; mov edx, dword ptr [rdi + 0x5c]; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000014da37: mov rcx, qword ptr [rax + 8]; mov rdi, rax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000064d5f: mov rcx, qword ptr [rbp - 0x620]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000028368: mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x0000000000088e64: mov rcx, qword ptr [rbx + 0x10]; push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000087e59: mov rcx, qword ptr [rbx + 8]; push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000144fb6: mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000018d4a9: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000e2a70: mov rcx, qword ptr [rip + 0x1013f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2a40: mov rcx, qword ptr [rip + 0x101429]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2a10: mov rcx, qword ptr [rip + 0x101459]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e29e0: mov rcx, qword ptr [rip + 0x101489]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2980: mov rcx, qword ptr [rip + 0x1014e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2950: mov rcx, qword ptr [rip + 0x101519]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2750: mov rcx, qword ptr [rip + 0x101719]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1960: mov rcx, qword ptr [rip + 0x102509]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e18d1: mov rcx, qword ptr [rip + 0x102598]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1520: mov rcx, qword ptr [rip + 0x102949]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1443: mov rcx, qword ptr [rip + 0x102a26]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1250: mov rcx, qword ptr [rip + 0x102c19]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d29c0: mov rcx, qword ptr [rip + 0x1114a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d2990: mov rcx, qword ptr [rip + 0x1114d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cf870: mov rcx, qword ptr [rip + 0x1145f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000056213: mov rcx, qword ptr [rip + 0x18dc56]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055e80: mov rcx, qword ptr [rip + 0x18dfe9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055dec: mov rcx, qword ptr [rip + 0x18e07d]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044770: mov rcx, qword ptr [rip + 0x19f6f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000441c0: mov rcx, qword ptr [rip + 0x19fca9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015a953: mov rcx, qword ptr [rip + 0x89516]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015a903: mov rcx, qword ptr [rip + 0x89566]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f153: mov rcx, qword ptr [rip + 0xc4d16]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f120: mov rcx, qword ptr [rip + 0xc4d49]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0f0: mov rcx, qword ptr [rip + 0xc4d79]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0c3: mov rcx, qword ptr [rip + 0xc4da6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ec50: mov rcx, qword ptr [rip + 0xc5219]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ec23: mov rcx, qword ptr [rip + 0xc5246]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebf0: mov rcx, qword ptr [rip + 0xc5279]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebc0: mov rcx, qword ptr [rip + 0xc52a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eaf0: mov rcx, qword ptr [rip + 0xc5379]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ea00: mov rcx, qword ptr [rip + 0xc5469]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e973: mov rcx, qword ptr [rip + 0xc54f6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e943: mov rcx, qword ptr [rip + 0xc5526]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e8e3: mov rcx, qword ptr [rip + 0xc5586]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e8b0: mov rcx, qword ptr [rip + 0xc55b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e880: mov rcx, qword ptr [rip + 0xc55e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e853: mov rcx, qword ptr [rip + 0xc5616]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e820: mov rcx, qword ptr [rip + 0xc5649]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7f0: mov rcx, qword ptr [rip + 0xc5679]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7c0: mov rcx, qword ptr [rip + 0xc56a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e790: mov rcx, qword ptr [rip + 0xc56d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e763: mov rcx, qword ptr [rip + 0xc5706]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e733: mov rcx, qword ptr [rip + 0xc5736]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e703: mov rcx, qword ptr [rip + 0xc5766]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e673: mov rcx, qword ptr [rip + 0xc57f6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e643: mov rcx, qword ptr [rip + 0xc5826]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5e0: mov rcx, qword ptr [rip + 0xc5889]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5b0: mov rcx, qword ptr [rip + 0xc58b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e580: mov rcx, qword ptr [rip + 0xc58e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e550: mov rcx, qword ptr [rip + 0xc5919]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e523: mov rcx, qword ptr [rip + 0xc5946]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e4f0: mov rcx, qword ptr [rip + 0xc5979]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e490: mov rcx, qword ptr [rip + 0xc59d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e460: mov rcx, qword ptr [rip + 0xc5a09]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e430: mov rcx, qword ptr [rip + 0xc5a39]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e400: mov rcx, qword ptr [rip + 0xc5a69]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e340: mov rcx, qword ptr [rip + 0xc5b29]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ddd0: mov rcx, qword ptr [rip + 0xc6099]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dda3: mov rcx, qword ptr [rip + 0xc60c6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dd20: mov rcx, qword ptr [rip + 0xc6149]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbf0: mov rcx, qword ptr [rip + 0xc6279]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbc0: mov rcx, qword ptr [rip + 0xc62a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011db60: mov rcx, qword ptr [rip + 0xc6309]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011db29: mov rcx, qword ptr [rip + 0xc6340]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011da20: mov rcx, qword ptr [rip + 0xc6449]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d9f0: mov rcx, qword ptr [rip + 0xc6479]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b9e3: mov rcx, qword ptr [rip + 0xc8486]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b9b0: mov rcx, qword ptr [rip + 0xc84b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b983: mov rcx, qword ptr [rip + 0xc84e6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b950: mov rcx, qword ptr [rip + 0xc8519]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b920: mov rcx, qword ptr [rip + 0xc8549]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8f3: mov rcx, qword ptr [rip + 0xc8576]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8c0: mov rcx, qword ptr [rip + 0xc85a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b893: mov rcx, qword ptr [rip + 0xc85d6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b863: mov rcx, qword ptr [rip + 0xc8606]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b830: mov rcx, qword ptr [rip + 0xc8639]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b800: mov rcx, qword ptr [rip + 0xc8669]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b7d3: mov rcx, qword ptr [rip + 0xc8696]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117790: mov rcx, qword ptr [rip + 0xcc6d9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117760: mov rcx, qword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117730: mov rcx, qword ptr [rip + 0xcc739]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117700: mov rcx, qword ptr [rip + 0xcc769]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001176d3: mov rcx, qword ptr [rip + 0xcc796]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001176a0: mov rcx, qword ptr [rip + 0xcc7c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117670: mov rcx, qword ptr [rip + 0xcc7f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001175a0: mov rcx, qword ptr [rip + 0xcc8c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117570: mov rcx, qword ptr [rip + 0xcc8f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001172f2: mov rcx, qword ptr [rip + 0xccb77]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001146e0: mov rcx, qword ptr [rip + 0xcf789]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001146b0: mov rcx, qword ptr [rip + 0xcf7b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114680: mov rcx, qword ptr [rip + 0xcf7e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114350: mov rcx, qword ptr [rip + 0xcfb19]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f0: mov rcx, qword ptr [rip + 0xcfc79]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141c0: mov rcx, qword ptr [rip + 0xcfca9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113fd0: mov rcx, qword ptr [rip + 0xcfe99]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113e80: mov rcx, qword ptr [rip + 0xcffe9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113420: mov rcx, qword ptr [rip + 0xd0a49]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113260: mov rcx, qword ptr [rip + 0xd0c09]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112e70: mov rcx, qword ptr [rip + 0xd0ff9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000111d63: mov rcx, qword ptr [rip + 0xd2106]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb30: mov rcx, qword ptr [rip + 0xd5339]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb00: mov rcx, qword ptr [rip + 0xd5369]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ead0: mov rcx, qword ptr [rip + 0xd5399]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eaa3: mov rcx, qword ptr [rip + 0xd53c6]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea70: mov rcx, qword ptr [rip + 0xd53f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea40: mov rcx, qword ptr [rip + 0xd5429]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea10: mov rcx, qword ptr [rip + 0xd5459]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e9e3: mov rcx, qword ptr [rip + 0xd5486]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e9b0: mov rcx, qword ptr [rip + 0xd54b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e1f3: mov rcx, qword ptr [rip + 0xd5c76]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e1c0: mov rcx, qword ptr [rip + 0xd5ca9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e190: mov rcx, qword ptr [rip + 0xd5cd9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e160: mov rcx, qword ptr [rip + 0xd5d09]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d8a0: mov rcx, qword ptr [rip + 0xd65c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d870: mov rcx, qword ptr [rip + 0xd65f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d7b0: mov rcx, qword ptr [rip + 0xd66b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d780: mov rcx, qword ptr [rip + 0xd66e9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d750: mov rcx, qword ptr [rip + 0xd6719]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d720: mov rcx, qword ptr [rip + 0xd6749]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d6f0: mov rcx, qword ptr [rip + 0xd6779]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d520: mov rcx, qword ptr [rip + 0xd6949]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc30: mov rcx, qword ptr [rip + 0xd7239]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc00: mov rcx, qword ptr [rip + 0xd7269]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb40: mov rcx, qword ptr [rip + 0xd7329]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb10: mov rcx, qword ptr [rip + 0xd7359]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9f0: mov rcx, qword ptr [rip + 0xd7479]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9c0: mov rcx, qword ptr [rip + 0xd74a9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c4f0: mov rcx, qword ptr [rip + 0xd7979]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101900: mov rcx, qword ptr [rip + 0xe2569]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001018d0: mov rcx, qword ptr [rip + 0xe2599]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001018a0: mov rcx, qword ptr [rip + 0xe25c9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101870: mov rcx, qword ptr [rip + 0xe25f9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101840: mov rcx, qword ptr [rip + 0xe2629]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101810: mov rcx, qword ptr [rip + 0xe2659]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001017e0: mov rcx, qword ptr [rip + 0xe2689]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001017b0: mov rcx, qword ptr [rip + 0xe26b9]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b6c74: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c94: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5604: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b9704: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b6c34: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a94: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55a4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b96c4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b6c54: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7ab4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55c4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b96e4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000ba10e: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000001656c4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656e0: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658a4: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658c0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a84: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165aa0: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165c74: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c90: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e74: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e90: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166074: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166090: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016abe4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab54: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016aac4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001654e4: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165500: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b6ac0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b54b0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b7900: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b6180: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b7920: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ad0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54c0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b6af0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b7940: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b54d0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b6b10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b7960: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b54e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000016b564: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b4f4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b484: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b414: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b3a4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b334: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b2c4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000186b50: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b6b30: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7980: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b6b50: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79a0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b5500: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b6b70: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79c0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b5510: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000187fa0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000014bf4f: mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000014f602: mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x0000000000145c15: mov rcx, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000146c6f: mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000012110d: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012116e: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000148dcd: mov rcx, qword ptr [rsp + 8]; mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000018d4a8: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000151438: mov rcx, r14; mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x000000000009ae62: mov rcx, rax; add rsp, 0x18; mov rax, rcx; pop rbx; pop rbp; ret; 
0x00000000000a6c28: mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000001478a4: mov rcx, rbx; xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x00000000001456ef: mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x00000000000ba459: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000ba0f1: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000014c804: mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000014c824: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f254: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e914: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc34: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000bbc48: mov rdi, qword ptr [r12 + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb894: mov rdi, qword ptr [r12 + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bbcc2: mov rdi, qword ptr [r12 + 0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb72f: mov rdi, qword ptr [r12]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000145902: mov rdi, qword ptr [r13]; mov rsi, r12; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000001457af: mov rdi, qword ptr [r13]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000014c0fc: mov rdi, qword ptr [r15]; lea rsi, [rax + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014c051: mov rdi, qword ptr [r15]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000014bf30: mov rdi, qword ptr [r15]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000472a6: mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000014fc4e: mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000014fa87: mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000150366: mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000014f5e3: mov rdi, qword ptr [rax]; mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000e5ef9: mov rdi, qword ptr [rbp - 0x4c8]; call qword ptr [rbx + 0x40]; 
0x0000000000075beb: mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x0000000000075af0: mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075361: mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000750f6: mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x000000000007518c: mov rdi, qword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000005e585: mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000010ed0d: mov rdi, qword ptr [rbx + 0x18]; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x00000000000ff021: mov rdi, qword ptr [rbx + 0x28]; call 0x25318; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000009c530: mov rdi, qword ptr [rbx + 0x48]; call rax; 
0x000000000009c491: mov rdi, qword ptr [rbx + 0x48]; mov rsi, r13; call rax; 
0x0000000000047bd9: mov rdi, qword ptr [rbx + 8]; call rax; 
0x000000000014884f: mov rdi, qword ptr [rbx]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000001488e3: mov rdi, qword ptr [rbx]; add r15, r12; sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x0000000000150404: mov rdi, qword ptr [rbx]; lea rdx, [rsp + 0x18]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000148be4: mov rdi, qword ptr [rbx]; mov dword ptr [rbx + 0x38], 0; mov dword ptr [rcx], eax; sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x0000000000150370: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000046538: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000001562d4: mov rdi, qword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x000000000014c800: mov rdi, qword ptr [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001531c0: mov rdi, qword ptr [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000009c2e8: mov rdi, qword ptr [rdi + 0x48]; mov rsi, rbp; call rax; 
0x00000000000824f5: mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000000824b9: mov rdi, qword ptr [rdi + 0xe0]; jmp rax; 
0x00000000001183f9: mov rdi, qword ptr [rdi]; call 0x25318; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000012a5b3: mov rdi, qword ptr [rdx + 0x50]; mov rsi, rdx; call rax; 
0x0000000000196797: mov rdi, qword ptr [rip + 0x510f2]; call 0x25318; pop rbx; mov qword ptr [rip + 0x510e1], 0; ret; 
0x00000000000f0658: mov rdi, qword ptr [rsi + 0x28]; call 0x25318; xor eax, eax; pop rbx; ret; 
0x0000000000118910: mov rdi, qword ptr [rsp + 0x10]; mov dword ptr [rsp], r8d; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000454ab: mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000015e5c3: mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000000dd6a2: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002acda: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000002a06d: mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002bdd1: mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002efe5: mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000002c3b2: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d46b: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000011181a: mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x0000000000151443: mov rdi, qword ptr [rsp]; call rax; 
0x0000000000044eb4: mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000015d97a: mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x0000000000146d12: mov rdi, qword ptr [rsp]; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000001466af: mov rdi, r10; call qword ptr [rax + 0x20]; 
0x0000000000145f9c: mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000153599: mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000000834f0: mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000001551fd: mov rdi, r12; call qword ptr [rax]; 
0x000000000009bc43: mov rdi, r12; call rax; 
0x0000000000045498: mov rdi, r12; call rbx; 
0x0000000000089a5b: mov rdi, r12; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000089961: mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x000000000009628d: mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000015529d: mov rdi, r12; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000028365: mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000003619e: mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000147ac3: mov rdi, r13; call qword ptr [rax + 0x10]; 
0x000000000009121f: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000147b01: mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000015338b: mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000007b1f0: mov rdi, r13; call qword ptr [rax + 0x38]; 
0x0000000000088714: mov rdi, r13; call rax; 
0x00000000000454e6: mov rdi, r13; call rbx; 
0x000000000007ae84: mov rdi, r13; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x000000000007af1d: mov rdi, r13; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000014f5c1: mov rdi, r14; add dword ptr [rax], 1; mov rax, qword ptr [rbx + 0x60]; call qword ptr [rax + 8]; 
0x00000000000dd50c: mov rdi, r14; call 0x15d990; mov rax, r14; call rax; 
0x00000000000867b9: mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000014f5ac: mov rdi, r14; call qword ptr [rax + 0x28]; 
0x00000000000920e3: mov rdi, r14; call qword ptr [rax + 0x58]; 
0x000000000010d938: mov rdi, r14; mov eax, 0x4f; syscall; 
0x0000000000028417: mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x0000000000086f77: mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000152654: mov rdi, r15; call qword ptr [rax + 0x28]; 
0x00000000001524f4: mov rdi, r15; call qword ptr [rax + 8]; 
0x0000000000152512: mov rdi, r15; call qword ptr [rax]; 
0x000000000014f5ff: mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000009bdb6: mov rdi, r15; mov rdx, rbx; mov rsi, r12; call rax; 
0x000000000015b513: mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b5d3: mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000010c8a3: mov rdi, r8; mov eax, 0x85; syscall; 
0x0000000000048baa: mov rdi, r8; mov eax, r10d; sub rsi, r8; syscall; 
0x0000000000047952: mov rdi, r9; call rdx; 
0x00000000000e1897: mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000155f0c: mov rdi, rax; call 0x25318; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000008201b: mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000150fd0: mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x000000000011db1f: mov rdi, rax; mov eax, 0x3c; syscall; 
0x0000000000043e9f: mov rdi, rax; mov eax, 0xba; syscall; 
0x000000000014da3b: mov rdi, rax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000002840b: mov rdi, rax; mov qword ptr [rbp - 0x68], rax; call 0x15d990; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x000000000013769d: mov rdi, rax; mov qword ptr [rsp + 8], rax; call 0x15d990; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001369be: mov rdi, rax; mov qword ptr [rsp + 8], rax; call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000144fb3: mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000010c5b8: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x000000000010c658: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000145891: mov rdi, rbp; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000147228: mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000001457de: mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000147902: mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x000000000014719a: mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d4af: mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x00000000001457a1: mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000087df5: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000008e65c: mov rdi, rbp; call qword ptr [rbx + 0x40]; 
0x0000000000147ad1: mov rdi, rbp; call qword ptr [rbx]; 
0x0000000000026c00: mov rdi, rbp; call rax; 
0x00000000000ced16: mov rdi, rbp; call rbx; 
0x0000000000155d50: mov rdi, rbp; call rcx; 
0x0000000000147594: mov rdi, rbp; call rdx; 
0x0000000000146177: mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000bbe5b: mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000015abcb: mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000014587a: mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f4: mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000014d433: mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000001174b9: mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000146470: mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000014bf4c: mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x00000000000bbfa7: mov rdi, rbp; mov rdx, qword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000014c15b: mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x00000000000bc24f: mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000146eac: mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000087e5e: mov rdi, rbp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000088e69: mov rdi, rbp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000013ba26: mov rdi, rbp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x0000000000155168: mov rdi, rbp; xor eax, eax; call rcx; 
0x00000000000bc152: mov rdi, rbp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x000000000011907f: mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000014507d: mov rdi, rbx; call 0x146ec0; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000004213e: mov rdi, rbx; call 0x25318; xor eax, eax; pop rbx; ret; 
0x0000000000151708: mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000008ebcf: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000009147a: mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000146583: mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000007737a: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000155567: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000001555b8: mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000084351: mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000008eca9: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000147f70: mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000147f1b: mov rdi, rbx; call qword ptr [rax]; 
0x0000000000090b1b: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000000866ac: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000087221: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000081ee7: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x00000000000845b0: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000008e756: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000077522: mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000807b9: mov rdi, rbx; call rax; 
0x0000000000150d1e: mov rdi, rbx; lea r8, [rip - 0x9e28]; lea rdx, [rip + 0x3711]; call qword ptr [rax]; 
0x000000000010c434: mov rdi, rbx; mov eax, 0x135; syscall; 
0x00000000001178b6: mov rdi, rbx; mov eax, 1; call 0x629b0; mov rax, rbx; pop rbx; ret; 
0x000000000010c4ca: mov rdi, rbx; mov eax, ecx; syscall; 
0x0000000000150d31: mov rdi, rbx; mov ebp, eax; pop rax; mov rax, qword ptr [rbx + 8]; pop rdx; call qword ptr [rax + 0x20]; 
0x00000000000e1664: mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x000000000010d802: mov rdi, rbx; mov edx, eax; mov eax, 0x55; syscall; 
0x000000000004424a: mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x00000000000783f0: mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007e7f9: mov rdi, rbx; mov qword ptr [rbp - 0x508], r9; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x00000000000785cb: mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x0000000000146504: mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x0000000000146532: mov rdi, rbx; mov r12d, eax; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x0000000000048b1c: mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175fc: mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x000000000011171c: mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000015d54d: mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000462d8: mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000046395: mov rdi, rbx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000088dc5: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000011869f: mov rdi, rbx; pop rbx; mov rax, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000083eeb: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000008672e: mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000008dec9: mov rdi, rbx; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000077424: mov rdi, rbx; sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007cdb7: mov rdi, rbx; sub r15, r13; mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007d393: mov rdi, rbx; sub r15, r9; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000000881e4: mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000146c6a: mov rdi, rbx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x0000000000028359: mov rdi, rcx; mov qword ptr [rbp - 0x70], rcx; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000011d92f: mov rdi, rcx; sub rsp, 8; call rsi; 
0x000000000015b2bd: mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000012be9e: mov rdi, rdx; jmp rax; 
0x000000000011dafc: mov rdi, rdx; mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x000000000015b220: mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x0000000000160ded: mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018a91e: mov rdi, rsi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000185ffe: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000009c55d: mov rdi, rsi; call rax; 
0x00000000000ddaf4: mov rdi, rsp; mov dword ptr [rsp], 0x74; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000154417: mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x00000000000e2851: mov rdi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c1: mov rdi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000922f5: mov rdi, rsp; xor edx, edx; lea rsi, [rip - 0x20f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000090807: mov rdi, rsp; xor edx, edx; lea rsi, [rip - 0x603]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902ee: mov rdi, rsp; xor edx, edx; lea rsi, [rip - 0xea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034c93: mov rdx, -1; cmove rax, rdx; ret; 
0x00000000000e3687: mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e3537: mov rdx, -1; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000000088708: mov rdx, qword ptr [r13 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x0000000000075188: mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000007af19: mov rdx, qword ptr [r15 + 0x20]; mov rdi, r13; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000063b33: mov rdx, qword ptr [r8 + 0x88]; mov qword ptr [rdx + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x000000000014f3a3: mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000014f2a3: mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x00000000000562af: mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000005651f: mov rdx, qword ptr [r8 + rcx*8]; mov qword ptr [rax + rcx*8], rdx; xor eax, eax; ret; 
0x000000000008c217: mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000034d59: mov rdx, qword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x1af081]; mov qword ptr [rax], rdx; ret; 
0x0000000000150fcc: mov rdx, qword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x000000000008c210: mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000026b61: mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000006cd1b: mov rdx, qword ptr [rbp - 0x5b0]; movsxd rax, dword ptr [rsi + rax*4]; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x00000000000881e0: mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x000000000008e142: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x000000000011d9bf: mov rdx, qword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000063b83: mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000008228f: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x000000000008c26a: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c15a: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000150550: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20]; 
0x000000000012be97: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000003524f: mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003521f: mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055e76: mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000003524c: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003521c: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000035249: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000035219: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e1690: mov rdx, qword ptr [rip + 0x1027d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1600: mov rdx, qword ptr [rip + 0x102869]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e14e0: mov rdx, qword ptr [rip + 0x102989]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13e0: mov rdx, qword ptr [rip + 0x102a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1348: mov rdx, qword ptr [rip + 0x102b21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000dc9d0: mov rdx, qword ptr [rip + 0x107499]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000d3338: mov rdx, qword ptr [rip + 0x110af9]; mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000cf790: mov rdx, qword ptr [rip + 0x1146d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a58: mov rdx, qword ptr [rip + 0x180411]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a20: mov rdx, qword ptr [rip + 0x180449]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b50: mov rdx, qword ptr [rip + 0x19b319]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000441f8: mov rdx, qword ptr [rip + 0x19fc71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000044190: mov rdx, qword ptr [rip + 0x19fcd9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000003552e: mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000012c750: mov rdx, qword ptr [rip + 0xb7719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c6a0: mov rdx, qword ptr [rip + 0xb77c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa90: mov rdx, qword ptr [rip + 0xc43d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa68: mov rdx, qword ptr [rip + 0xc4401]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa30: mov rdx, qword ptr [rip + 0xc4439]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa00: mov rdx, qword ptr [rip + 0xc4469]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011f9d8: mov rdx, qword ptr [rip + 0xc4491]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f900: mov rdx, qword ptr [rip + 0xc4569]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d0: mov rdx, qword ptr [rip + 0xc4599]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8a0: mov rdx, qword ptr [rip + 0xc45c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f870: mov rdx, qword ptr [rip + 0xc45f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f830: mov rdx, qword ptr [rip + 0xc4639]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011f788: mov rdx, qword ptr [rip + 0xc46e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f608: mov rdx, qword ptr [rip + 0xc4861]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f560: mov rdx, qword ptr [rip + 0xc4909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b8: mov rdx, qword ptr [rip + 0xc49b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f080: mov rdx, qword ptr [rip + 0xc4de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efc0: mov rdx, qword ptr [rip + 0xc4ea9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ef20: mov rdx, qword ptr [rip + 0xc4f49]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee60: mov rdx, qword ptr [rip + 0xc5009]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edc0: mov rdx, qword ptr [rip + 0xc50a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ed00: mov rdx, qword ptr [rip + 0xc5169]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011eb80: mov rdx, qword ptr [rip + 0xc52e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011eab0: mov rdx, qword ptr [rip + 0xc53b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e1f0: mov rdx, qword ptr [rip + 0xc5c79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e18f: mov rdx, qword ptr [rip + 0xc5cda]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e120: mov rdx, qword ptr [rip + 0xc5d49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e080: mov rdx, qword ptr [rip + 0xc5de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011dfb8: mov rdx, qword ptr [rip + 0xc5eb1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df08: mov rdx, qword ptr [rip + 0xc5f61]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de68: mov rdx, qword ptr [rip + 0xc6001]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dcf0: mov rdx, qword ptr [rip + 0xc6179]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011dca8: mov rdx, qword ptr [rip + 0xc61c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011db90: mov rdx, qword ptr [rip + 0xc62d9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001205b3: mov rdx, qword ptr [rip + 0xc7c3e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000011ad90: mov rdx, qword ptr [rip + 0xc90d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000117630: mov rdx, qword ptr [rip + 0xcc839]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115b50: mov rdx, qword ptr [rip + 0xce319]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115b20: mov rdx, qword ptr [rip + 0xce349]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115ae8: mov rdx, qword ptr [rip + 0xce381]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115900: mov rdx, qword ptr [rip + 0xce569]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114390: mov rdx, qword ptr [rip + 0xcfad9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114268: mov rdx, qword ptr [rip + 0xcfc01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001136b0: mov rdx, qword ptr [rip + 0xd07b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113600: mov rdx, qword ptr [rip + 0xd0869]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113550: mov rdx, qword ptr [rip + 0xd0919]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134b0: mov rdx, qword ptr [rip + 0xd09b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000113230: mov rdx, qword ptr [rip + 0xd0c39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e40: mov rdx, qword ptr [rip + 0xd1029]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112e00: mov rdx, qword ptr [rip + 0xd1069]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112c60: mov rdx, qword ptr [rip + 0xd1209]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112760: mov rdx, qword ptr [rip + 0xd1709]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112738: mov rdx, qword ptr [rip + 0xd1731]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112700: mov rdx, qword ptr [rip + 0xd1769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001126d0: mov rdx, qword ptr [rip + 0xd1799]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112560: mov rdx, qword ptr [rip + 0xd1909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112400: mov rdx, qword ptr [rip + 0xd1a69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001123c0: mov rdx, qword ptr [rip + 0xd1aa9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112328: mov rdx, qword ptr [rip + 0xd1b41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112210: mov rdx, qword ptr [rip + 0xd1c59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001121c0: mov rdx, qword ptr [rip + 0xd1ca9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000111750: mov rdx, qword ptr [rip + 0xd2719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d830: mov rdx, qword ptr [rip + 0xd6639]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6b8: mov rdx, qword ptr [rip + 0xd67b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d0f0: mov rdx, qword ptr [rip + 0xd6d79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d0c0: mov rdx, qword ptr [rip + 0xd6da9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010d080: mov rdx, qword ptr [rip + 0xd6de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cfe0: mov rdx, qword ptr [rip + 0xd6e89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010cba0: mov rdx, qword ptr [rip + 0xd72c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c978: mov rdx, qword ptr [rip + 0xd74f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c920: mov rdx, qword ptr [rip + 0xd7549]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c8c0: mov rdx, qword ptr [rip + 0xd75a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c670: mov rdx, qword ptr [rip + 0xd77f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c620: mov rdx, qword ptr [rip + 0xd7849]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c5d0: mov rdx, qword ptr [rip + 0xd7899]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010b428: mov rdx, qword ptr [rip + 0xd8a41]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010b378: mov rdx, qword ptr [rip + 0xd8af1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000fe750: mov rdx, qword ptr [rip + 0xe5861]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x00000000000b62d4: mov rdx, qword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b5644: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b5664: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000016b560: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b4f0: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b480: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016b410: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b33: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7983: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b95b3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000016b3a0: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b53: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b79a3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b5503: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b95d3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000016b330: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b73: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b79c3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b5513: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b95f3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000016b2c0: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000188cd3: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873f3: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fa3: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000016ad70: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016acf0: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016ac70: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016abe0: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab50: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016aac0: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165324: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c78: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e78: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166078: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165308: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c94: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e94: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166094: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165340: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016adf0: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b6ab0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b78f0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b54a0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000b9520: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x000000000010eb6a: mov rdx, qword ptr [rsi]; xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x000000000015e5c8: mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000000a7190: mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000bbfaa: mov rdx, qword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000121108: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000121169: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000046530: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000126682: mov rdx, qword ptr [rsp + 0x10]; mov rsi, r13; xor r15d, r15d; call rax; 
0x00000000000462d0: mov rdx, qword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000126403: mov rdx, qword ptr [rsp + 0x10]; xor esi, esi; mov edi, 0x2000004; call rcx; 
0x000000000015d543: mov rdx, qword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000a6ff0: mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000014c15e: mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x000000000011414c: mov rdx, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000015e1ef: mov rdx, qword ptr [rsp + 0x28]; mov r9d, dword ptr [rdx]; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x00000000000dd69d: mov rdx, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000145c1a: mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x000000000002a063: mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002c3a8: mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d461: mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000009cc70: mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbdb: mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010d4c1: mov rdx, qword ptr [rsp]; mov esi, dword ptr [rsp + 0xc]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x000000000008e839: mov rdx, qword ptr [rsp]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000035248: mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000035218: mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000007cdc4: mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000011decc: mov rdx, r12; mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x114; syscall; 
0x000000000011238c: mov rdx, r12; mov esi, ebp; mov r8d, eax; mov edi, ebx; mov eax, 0x11d; syscall; 
0x00000000000e14a7: mov rdx, r12; mov r9d, eax; mov esi, ebp; mov edi, ebx; mov eax, 0xf7; syscall; 
0x000000000011ea75: mov rdx, r12; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000010d045: mov rdx, r12; mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000010cfa5: mov rdx, r12; mov rsi, rbp; mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x00000000001122ed: mov rdx, r12; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df7d: mov rdx, r12; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b33d: mov rdx, r12; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x000000000011f47d: mov rdx, r12; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3ed: mov rdx, r12; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f74d: mov rdx, r12; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x00000000000bc14f: mov rdx, r13; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000075ae6: mov rdx, r13; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075711: mov rdx, r13; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000015143b: mov rdx, r13; mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x000000000011eee7: mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x000000000011ecc7: mov rdx, r13; mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x000000000007535b: mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000005e57f: mov rdx, r13; mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000008e656: mov rdx, r13; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx + 0x40]; 
0x000000000012b170: mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b59c: mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x00000000000bc43f: mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000015e1f7: mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x00000000000bc247: mov rdx, r14; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000077374: mov rdx, r14; mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000012aa0f: mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012ac3d: mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x00000000000bbe55: mov rdx, r14; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000007742a: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000009b19e: mov rdx, r15; mov rdi, r13; call rax; 
0x000000000006c956: mov rdx, r15; mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006496e: mov rdx, r15; mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007e47d: mov rdx, r15; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000133c0e: mov rdx, r15; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000007751c: mov rdx, r15; mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000785c5: mov rdx, r15; mov rsi, r8; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x000000000008ec9f: mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000011daff: mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x000000000007b428: mov rdx, r9; mov qword ptr [rbp - 0x8e8], r9; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000008c5f0: mov rdx, r9; mov rsi, rbx; mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x0000000000127018: mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x0000000000127677: mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x0000000000155596: mov rdx, rax; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x0000000000155756: mov rdx, rax; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001547a8: mov rdx, rax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x000000000013b7ef: mov rdx, rax; ret; 
0x00000000001129a4: mov rdx, rbp; mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000114035: mov rdx, rbp; mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011f7f5: mov rdx, rbp; mov r9d, eax; mov rsi, r14; mov edi, ebx; mov eax, 0x46; syscall; 
0x0000000000147ac0: mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x0000000000147afe: mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x0000000000045d3e: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x00000000000454a5: mov rdx, rbp; mov rsi, r12; mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000454e0: mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000008434b: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000045813: mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000000454fb: mov rdx, rbp; mov rsi, r15; mov rdi, r12; call rbx; 
0x0000000000112980: mov rdx, rbp; mov word ptr [rbp + 0x21], cx; syscall; 
0x000000000012604f: mov rdx, rbp; pop rbx; mov rax, rdx; pop rbp; pop r12; ret; 
0x0000000000027a3d: mov rdx, rbp; push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x00000000001117c0: mov rdx, rbx; mov eax, 0x10f; syscall; 
0x0000000000141f3c: mov rdx, rbx; mov esi, ebp; mov dword ptr [rsp + 0x14], eax; mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x0000000000044f96: mov rdx, rbx; mov esi, ebp; mov dword ptr [rsp + 0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x000000000011180f: mov rdx, rbx; mov r9d, eax; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x0000000000080094: mov rdx, rbx; mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0de: mov rdx, rbx; mov rsi, qword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f7c: mov rdx, rbx; mov rsi, qword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007712e: mov rdx, rbx; mov rsi, qword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009bdb9: mov rdx, rbx; mov rsi, r12; call rax; 
0x0000000000075be5: mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x000000000009b836: mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000012aca8: mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000010c95f: mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000000783e3: mov rdx, rcx; mov qword ptr [rbp - 0x4f0], rcx; mov rsi, r9; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007b1e3: mov rdx, rcx; mov qword ptr [rbp - 0x928], rcx; mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x00000000001172d9: mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000047c20: mov rdx, rdi; mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x00000000000ba460: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000001605c8: mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x00000000000e19bf: mov rdx, rsi; mov r8d, 0x1000; mov r10, r12; lea rsi, [rip + 0xcdf7a]; mov eax, 0x142; syscall; 
0x00000000000a74a4: mov rdx, rsi; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x0000000000111aaf: mov rdx, rsi; xor esi, esi; syscall; 
0x0000000000112e20: mov rdx, rsi; xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000001121f4: mov rdx, rsi; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x0000000000112ae1: mov rdx, rsp; mov eax, ecx; syscall; 
0x0000000000112510: mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000115a59: mov rdx, rsp; mov qword ptr [rsp + 0x10], rax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x0000000000075184: mov rsi, qword ptr [r14 + 0x18]; mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8b0]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000007af15: mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, r13; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000046535: mov rsi, qword ptr [r15]; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000472d4: mov rsi, qword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000014652e: mov rsi, qword ptr [rbp + 0x20]; mov rdi, rbx; mov r12d, eax; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x0000000000075ae9: mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000075714: mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000014646c: mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x00000000000881dc: mov rsi, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000147abc: mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x0000000000147afa: mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000011890d: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 0x10]; mov dword ptr [rsp], r8d; mov qword ptr [rsp + 8], rbx; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000034c88: mov rsi, qword ptr [rdi + 0x78]; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, -1; cmove rax, rdx; ret; 
0x0000000000080097: mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0e1: mov rsi, qword ptr [rip + 0x166e80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000079f7f: mov rsi, qword ptr [rip + 0x169fe2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077131: mov rsi, qword ptr [rip + 0x16ce30]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006c959: mov rsi, qword ptr [rip + 0x177608]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064971: mov rsi, qword ptr [rip + 0x17f5f0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ba113: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018d4a6: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000014eb5c: mov rsi, qword ptr [rsp + 0x10]; lea r12d, [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r12d; bswap r12d; call qword ptr [rax + 0x18]; 
0x000000000010ced4: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000111815: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x0000000000045d41: mov rsi, qword ptr [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000014579c: mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000027a45: mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x0000000000099270: mov rsi, qword ptr [rsp + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000000bbfb2: mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000114151: mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000014bf1d: mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000145c1f: mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000099cd0: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000014bf47: mov rsi, qword ptr [rsp + 0x30]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000002acd5: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000002a068: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002bdcc: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000014c156: mov rsi, qword ptr [rsp + 0x40]; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x000000000002efe0: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000002c3ad: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d466: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000014f5fa: mov rsi, qword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000014589c: mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000026b58: mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000cf23b: mov rsi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x30]; call rax; 
0x000000000015143e: mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp]; call rax; 
0x0000000000146c66: mov rsi, qword ptr [rsp]; mov rdi, rbx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000007e480: mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007e7f6: mov rsi, r10; mov rdi, rbx; mov qword ptr [rbp - 0x508], r9; mov dword ptr [rbp - 0x500], r8d; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x0000000000077421: mov rsi, r10; mov rdi, rbx; sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000001458f8: mov rsi, r12; call qword ptr [rax + 0x10]; 
0x00000000000e56c0: mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000009bdbc: mov rsi, r12; call rax; 
0x000000000010bb29: mov rsi, r12; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000011e046: mov rsi, r12; mov edi, ebx; mov eax, 0x113; syscall; 
0x000000000011eeea: mov rsi, r12; mov edi, ebx; mov eax, 0x2c; syscall; 
0x000000000011ecca: mov rsi, r12; mov edi, ebx; mov eax, 0x2d; syscall; 
0x0000000000145906: mov rsi, r12; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000007535e: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000454a8: mov rsi, r12; mov rdi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000454e3: mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000014d4ac: mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000008434e: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000147f18: mov rsi, r12; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000046392: mov rsi, r12; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x0000000000148857: mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x000000000009c495: mov rsi, r13; call rax; 
0x000000000012766f: mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000011fe91: mov rsi, r13; mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x00000000001137bc: mov rsi, r13; mov edi, r12d; mov eax, 0x147; syscall; 
0x000000000011391c: mov rsi, r13; mov edi, r12d; mov eax, 0x148; syscall; 
0x0000000000075be8: mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x00000000000ced13: mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000001174b6: mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000008eca6: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000008e753: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000126687: mov rsi, r13; xor r15d, r15d; call rax; 
0x000000000011f529: mov rsi, r14; mov edi, ebx; mov eax, 0x12b; syscall; 
0x000000000011403b: mov rsi, r14; mov edi, ebx; mov eax, 0x17; syscall; 
0x000000000011f7fb: mov rsi, r14; mov edi, ebx; mov eax, 0x46; syscall; 
0x000000000010ed11: mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x00000000000750f3: mov rsi, r14; mov rdi, qword ptr [rbp - 0x8b0]; mov dword ptr [rbp - 0x930], r8d; call rax; 
0x00000000000834ed: mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000045816: mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000009b839: mov rsi, r14; mov rdi, r13; call rax; 
0x0000000000155165: mov rsi, r14; mov rdi, rbp; xor eax, eax; call rcx; 
0x00000000001488ec: mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x000000000011dc74: mov rsi, r15; mov eax, 0x119; syscall; 
0x0000000000127010: mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbp + 0x28]; 
0x000000000014f5e6: mov rsi, r15; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000005e582: mov rsi, r15; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000146d0f: mov rsi, r15; mov rdi, qword ptr [rsp]; rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000000454fe: mov rsi, r15; mov rdi, r12; call rbx; 
0x000000000007ae81: mov rsi, r15; mov rdi, r13; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x00000000001526e0: mov rsi, r15; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000008e659: mov rsi, r15; mov rdi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000000462d5: mov rsi, r15; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000015b223: mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000011fd9d: mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x000000000011ff26: mov rsi, r8; mov edi, ebx; mov eax, r14d; syscall; 
0x000000000007751f: mov rsi, r8; mov rdi, rbx; call qword ptr [rcx + 0x38]; 
0x00000000000785c8: mov rsi, r8; mov rdi, rbx; mov qword ptr [rbp - 0x510], r8; call qword ptr [rax + 0x38]; 
0x0000000000043ec8: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000015b510: mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b5d0: mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x00000000000783ed: mov rsi, r9; mov rdi, rbx; mov qword ptr [rbp - 0x4f8], r10; call qword ptr [rax + 0x38]; 
0x000000000007d390: mov rsi, r9; mov rdi, rbx; sub r15, r9; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000048ba5: mov rsi, r9; xor edx, edx; mov rdi, r8; mov eax, r10d; sub rsi, r8; syscall; 
0x00000000001461a2: mov rsi, rax; call 0x14e600; nop word ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000147241: mov rsi, rax; call 0x25190; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000015d3ce: mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000009c2ec: mov rsi, rbp; call rax; 
0x000000000009d6e9: mov rsi, rbp; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001135ce: mov rsi, rbp; mov edi, ebx; mov eax, 0x127; syscall; 
0x000000000011367e: mov rsi, rbp; mov edi, ebx; mov eax, 0x128; syscall; 
0x0000000000112105: mov rsi, rbp; mov edi, ebx; mov eax, 0x146; syscall; 
0x000000000012c715: mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000011e0e8: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x0000000000113478: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x0000000000113518: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x000000000011eb48: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ea78: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000011ef88: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee28: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000010d048: mov rsi, rbp; mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000010cfa8: mov rsi, rbp; mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x00000000001122f0: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df80: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b340: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x000000000011f480: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3f0: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f5d0: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13ab: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f750: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011de30: mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x0000000000044ea8: mov rsi, rbp; mov r8d, eax; mov r10d, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x00000000001457b3: mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000001456ec: mov rsi, rbp; mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x000000000009afc9: mov rsi, rbp; mov rdi, rbx; call rax; 
0x000000000010c4c7: mov rsi, rbp; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000000e1661: mov rsi, rbp; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x0000000000048b19: mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175f9: mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x0000000000111719: mov rsi, rbp; mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000008c5f3: mov rsi, rbx; mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x000000000008c39b: mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000000e1312: mov rsi, rbx; mov r8d, eax; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x000000000009bc40: mov rsi, rbx; mov rdi, r12; call rax; 
0x000000000007b1ed: mov rsi, rbx; mov rdi, r13; call qword ptr [rax + 0x38]; 
0x000000000015250f: mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000155d4d: mov rsi, rbx; mov rdi, rbp; call rcx; 
0x00000000000dbac2: mov rsi, rbx; xor edi, edi; mov eax, 0xe4; syscall; 
0x0000000000077377: mov rsi, rcx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000010ccc4: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000115989: mov rsi, rdi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x000000000015d977: mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x00000000000dbaad: mov rsi, rdi; xor edi, edi; call rax; 
0x00000000000e12dd: mov rsi, rdi; xor r10d, r10d; xor edx, edx; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x000000000014c809: mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000012a5b7: mov rsi, rdx; call rax; 
0x000000000014c829: mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f259: mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e919: mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc39: mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x000000000010c5bb: mov rsi, rdx; mov eax, 4; syscall; 
0x000000000010c609: mov rsi, rdx; mov eax, 5; syscall; 
0x000000000010c65b: mov rsi, rdx; mov eax, 6; syscall; 
0x00000000001172d6: mov rsi, rdx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000155554: mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000147e7c: mov rsi, rsp; call qword ptr [rax]; 
0x00000000000e38fb: mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000147e9b: mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001551fa: mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x000000000015529a: mov rsi, rsp; mov rdi, r12; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x000000000013ba23: mov rsi, rsp; mov rdi, rbp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x0000000000043ca1: mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000043c79: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000018d4cb: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000a42c9: mov ss, edx; add eax, dword ptr [rax]; add bh, dh; ret; 
0x00000000000e15b4: mov ss, word ptr [rax]; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x22]; syscall; 
0x000000000018d4d5: mov word ptr [r9 - 2], cx; ret; 
0x00000000000fc881: mov word ptr [rax + rax*4], fs; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000004bf79: mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001172a0: mov word ptr [rax - 0x77], cs; ret 0xb9e9; 
0x00000000000b5ca0: mov word ptr [rax], cs; add byte ptr [rax], al; ret; 
0x0000000000113211: mov word ptr [rax], es; add byte ptr [rax], al; syscall; 
0x000000000008bd20: mov word ptr [rax], es; or al, byte ptr [rax]; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000112983: mov word ptr [rbp + 0x21], cx; syscall; 
0x000000000005f8e0: mov word ptr [rbp + 0xf660015], es; outsd dx, dword ptr [rsi]; ret 0xc3e8; 
0x0000000000182526: mov word ptr [rbp - 0x7d000000], ss; rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000176182: mov word ptr [rcx + 4], dx; ret; 
0x00000000001761c3: mov word ptr [rcx + 8], dx; ret; 
0x00000000000437a2: mov word ptr [rcx - 0x7f000000], gs; sti; push rax; ret; 
0x00000000000f7050: mov word ptr [rcx - 1], ds; ljmp [rax - 0x6b7af0ff]; adc byte ptr [rax], al; add byte ptr [rbp - 0x76df8b40], al; ret 0xe283; 
0x0000000000176150: mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x0000000000176140: mov word ptr [rcx], dx; ret; 
0x00000000000b6bbc: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a1c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b554c: mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b964c: mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x0000000000112d07: mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000b6cc4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b24: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b5634: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b9754: mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000016b807: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000a7133: mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x00000000000a714b: mov word ptr [rdi + 4], ax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x0000000000048ab4: mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000b6a88: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b78c8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000a707e: mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7230: mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7066: mov word ptr [rdi + 4], dx; ret; 
0x00000000000b94f8: mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b792a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b6ada: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b54ca: mov word ptr [rdi + 8], dx; ret; 
0x00000000000b955a: mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000188c9c: mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873bc: mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f6c: mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000ba55a: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x00000000001895ff: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000ba134: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000001658dc: mov word ptr [rdi - 2], cx; ret; 
0x00000000001656f4: mov word ptr [rdi - 2], dx; ret; 
0x00000000001658d8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000a70f5: mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x00000000001885b3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b23: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b6a53: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b5453: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7886: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b6126: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b94b6: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x0000000000188c99: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873b9: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f69: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018dba2: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000ba55f: mov word ptr [rdi], cx; ret; 
0x0000000000189604: mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000a7010: mov word ptr [rdi], dx; add rax, rdi; ret; 
0x00000000000b6a43: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000001885a3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b7873: mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x0000000000188c83: mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001873a3: mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000188040: mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000a7028: mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b5443: mov word ptr [rdi], dx; ret; 
0x0000000000186b13: mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b94a3: mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000a71b0: mov word ptr [rdi], si; lea rax, [rdi + rax - 1]; ret; 
0x00000000000a70e0: mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000018d4d2: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000ba139: mov word ptr [rdi], si; ret; 
0x000000000010b8ec: mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000014bd75: mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x00000000001784f8: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b203d: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000000b20c1: mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000001784a3: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001784b3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b1fe8: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b1fd8: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000012090f: mov word ptr [rdx], ax; ret; 
0x000000000015a543: mov word ptr [rip + 0x3d8d4800], es; xor al, 0x8c; add eax, 0xaa7ee800; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x00000000000296b8: mov word ptr [rip + 0x45c74800], es; test al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000015b905: mov word ptr [rip + 0x8e4b4], ax; mov eax, 1; add rsp, 8; ret; 
0x000000000015a54a: mov word ptr [rip - 0x55811800], es; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x00000000001117b1: mov word ptr [rip - 0x7aff7500], cs; sal byte ptr [rbp + 0x36], 0x41; mov eax, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x0000000000111575: mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x0000000000048a6d: mov word ptr [rsi + 0xc], ax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000048a76: mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000018dba5: mov word ptr [rsi - 2], cx; ret; 
0x0000000000048a27: mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000010b8d3: mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000ff088: mov word ptr [rsi], cs; add al, ch; mov byte ptr [rdx - 0xe], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000146d1a: mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000042bcd: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000042c7f: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042b11: mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000042b56: mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005874d: mov word ptr [rsp - 0x10], si; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000ba133: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000082292: movabs al, byte ptr [0x1308a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000075d48: movabs al, byte ptr [0x13defe3d8d480013]; add al, ch; jns 0x75d47; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000349c4: movabs al, byte ptr [0x1d513d8d48001b59]; sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008c26d: movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c15d: movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000088dc1: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000009d6a4: movabs al, byte ptr [0x486411c8c1480014]; xor eax, dword ptr [0x30]; call rax; 
0x000000000016ba9c: movabs al, byte ptr [0x49931463490004de]; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000014f06c: movabs al, byte ptr [0x4c70468b49000001]; mov edi, esp; call qword ptr [rax + 0x20]; 
0x0000000000189287: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000007bc4e: movabs al, byte ptr [0x840fc08548000000]; ret 0xe; 
0x000000000007a2cf: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000007d0da: movabs al, byte ptr [0x8b48da8948fffffb]; xor eax, 0x166e80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001087ac: movabs al, byte ptr [0x9024a48b4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000001560d6: movabs al, byte ptr [0x912fe8c35b000000]; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000001183cc: movabs al, byte ptr [0xc00c764000cba]; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000015b50d: movabs al, byte ptr [0xc7894cce894c0008]; call qword ptr [rax + 0x10]; 
0x000000000017c95c: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000008008c: movabs byte ptr [0x4810247c8d480016], al; mov edx, ebx; mov rsi, qword ptr [rip + 0x163eca]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d4d6: movabs byte ptr [0x486411c8c1480014], al; xor eax, dword ptr [0x30]; call rax; 
0x000000000008243a: movabs byte ptr [0x4f0f48c98500163f], al; ret 0x8948; 
0x000000000017f1e0: movabs byte ptr [0x82048b8a0c8b0001], al; sub eax, ecx; ret; 
0x00000000001369bd: movabs byte ptr [0x824448948c78948], al; call 0x15d990; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000017a46a: movabs byte ptr [0x8348013880000002], al; fdivr st(7); ret; 
0x000000000009d51d: movabs byte ptr [0x8c48348f6310014], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000149cfa: movabs byte ptr [0xc0950fc0850000b4], al; add rsp, 8; movzx eax, al; ret; 
0x000000000011186a: movabs byte ptr [0xca894190660001d9], al; mov eax, 0xdd; syscall; 
0x000000000017cc5a: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000014bf00: movabs dword ptr [0x45cc0f41000000a8], eax; mov esp, esp; call qword ptr [rax + 0x18]; 
0x000000000006588e: movabs dword ptr [0x48fffff3c2830fc2], eax; lea edx, [rip + 0x143c03]; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000006d4ec: movabs dword ptr [0x48fffff6dc830fc1], eax; lea ecx, [rip + 0x13c3b1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000163dd9: movabs dword ptr [0x4993146349000550], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000082339: movabs dword ptr [0x4f0f48c985001640], eax; ret 0x8948; 
0x00000000001158dd: movabs dword ptr [0x5b08c48348c573d5], eax; pop rbp; pop r12; pop r13; ret; 
0x000000000009baf1: movabs dword ptr [0x5b30c48348000000], eax; pop rbp; pop r12; ret; 
0x000000000014c150: movabs dword ptr [0x748b48c031fffffe], eax; and al, 0x40; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x0000000000131a45: movabs dword ptr [0x80c48148ffff], eax; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret; 
0x000000000017f1ac: movabs dword ptr [0x81048b91148b0001], eax; sub eax, edx; ret; 
0x000000000006ae2f: movabs dword ptr [0x940fc085d231fffb], eax; ret 0xb60f; 
0x000000000015b21d: movabs dword ptr [0xc6894cd789480008], eax; call qword ptr [rax + 8]; 
0x00000000001469eb: movabs dword ptr [0xc824848b48], eax; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001446ec: movabs dword ptr [0xffee0a5be80006c5], eax; test rax, rax; sete al; add rsp, 8; ret; 
0x0000000000091ade: movabs dword ptr [0xffffffffc0c74890], eax; ret; 
0x00000000001019cb: movabs eax, dword ptr [0x108964daf7000e24]; mov eax, 0xffffffff; ret; 
0x00000000000394d0: movabs eax, dword ptr [0x1ab2360589480017]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000010bb93: movabs eax, dword ptr [0x2c24748d48000de7]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c532e: movabs eax, dword ptr [0x415d5bffffffffb8]; pop rsi; ret; 
0x000000000009d568: movabs eax, dword ptr [0x486411c8c1480014]; xor eax, dword ptr [0x30]; call rax; 
0x0000000000035263: movabs eax, dword ptr [0x4864ff6348001aeb]; mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000bb0b7: movabs eax, dword ptr [0x48e974c08548fff6]; mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000187ff0: movabs eax, dword ptr [0x77f8c5e0075c7f7e]; ret; 
0x0000000000188075: movabs eax, dword ptr [0x77f8c5f007447f7a]; ret; 
0x0000000000187fd0: movabs eax, dword ptr [0x77f8c5f0075c7f7a]; ret; 
0x0000000000116a0b: movabs eax, dword ptr [0x80c48148000153]; add byte ptr [rax], al; ret; 
0x00000000000a0a0b: movabs eax, dword ptr [0xe074c08490fffff6]; pop rbx; pop rbp; ret; 
0x0000000000052fe7: movabs eax, dword ptr [0xfffffb10e80015cb]; test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x0000000000048a2a: movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000042ea8: movabs rax, 0x8000000000000000; and rdx, rax; mov qword ptr [rdi], rdx; ret; 
0x000000000018bcb8: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bdb8: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000013c9fd: movaps xmm7, xmm7; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d056e: movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbx; ret; 
0x00000000000d0799: movaps xmmword ptr [rax], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000043701: movaps xmmword ptr [rdi], xmm4; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000147f58: movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x00000000001503fc: movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x000000000011da95: movaps xmmword ptr [rsp + 0x20], xmm0; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x00000000001460b9: movaps xmmword ptr [rsp + 0x30], xmm0; push qword ptr [rip + 0x72164]; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f79: movaps xmmword ptr [rsp + 0x30], xmm0; push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001516de: movaps xmmword ptr [rsp + 0x30], xmm0; push r14; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000010baae: movaps xmmword ptr [rsp + 0x60], xmm0; movaps xmmword ptr [rsp + 0x70], xmm0; movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bab3: movaps xmmword ptr [rsp + 0x70], xmm0; movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bab8: movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac0: movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac8: movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x0000000000043e7c: movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e84: movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e8c: movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000004356a: movaps xmmword ptr [rsp - 0x18], xmm0; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000009cc68: movaps xmmword ptr [rsp], xmm0; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000147f45: movd dword ptr [rsp + 8], mm0; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000115bca: movd dword ptr [rsp - 0x10], mm0; mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000485be: movd dword ptr [rsp - 0x10], mm0; xor eax, eax; mov qword ptr [rsp - 0x10], r8; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042e30: movd dword ptr [rsp - 8], mm0; ret; 
0x0000000000042e94: movd dword ptr [rsp - 8], mm1; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000431b1: movd eax, mm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000042dac: movd eax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000431b0: movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000042d8c: movd edx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000043191: movd edx, mm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000043190: movd edx, xmm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000043224: movd mm0, dword ptr [rsp - 4]; ret; 
0x0000000000043239: movd mm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000042dab: movd rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042d8b: movd rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000043223: movd xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043238: movd xmm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000043965: movdqa xmm0, xmm1; call 0x1905e0; add rsp, 0x20; pop rbx; ret; 
0x00000000001503f4: movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x000000000005bd53: movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000435b9: movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x0000000000043952: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x00000000000437f2: movdqa xmm0, xmmword ptr [rsp]; call 0x1925e0; add rsp, 0x10; pop rbx; ret; 
0x000000000004383c: movdqa xmm1, xmm0; call 0x1905e0; add rsp, 0x10; pop rbx; ret; 
0x0000000000163dcd: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x550a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001666ac: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163cdc: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b7dd1: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, [rip + 0xf3010]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7db2: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, [rip + 0xf302f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65b1: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, [rip + 0xf4650]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6592: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, [rip + 0xf466f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014e8f4: movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f234: movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000147090: movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014f2b8: movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014bcf8: movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b79f0: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6200: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b6bb0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a10: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5540: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6bf0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a50: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5580: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b5570: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b6bd0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b7a30: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b5560: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b6c70: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5600: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6c30: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a90: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55a0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6c50: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7ab0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55c0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b56e0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b6d10: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b70: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5680: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6d30: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b90: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b6d50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bb0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b79e0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b90: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6ba0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b5530: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b5520: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b9610: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000013b4cb: movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000012aa05: movdqu xmm1, xmmword ptr [r12 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000014f2c8: movdqu xmm1, xmmword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014bd08: movdqu xmm1, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000147060: movdqu xmm1, xmmword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000014f2f0: movdqu xmm2, xmmword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000b63d4: movdqu xmm2, xmmword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b56e4: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b6d14: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b74: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5684: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6d34: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b94: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56a4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b97c4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b6d54: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bb4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56c4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b97e4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000014f300: movdqu xmm3, xmmword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000012ac9e: movdqu xmm4, xmmword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000014f2e0: movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000012ac34: movdqu xmm5, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000012b166: movdqu xmm6, xmmword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000010b867: movdqu xmm6, xmmword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010b8b7: movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c229: movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000012b592: movdqu xmm7, xmmword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012b238: movdqu xmm7, xmmword ptr [r13 + 0x30]; mov dword ptr [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012ae23: movdqu xmm7, xmmword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000010b870: movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1a5: movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010b8c0: movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c235: movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000167aaa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016795a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016780a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016756a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016741a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016702a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166eda: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166aea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016699a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016684a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164b9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001648fa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016465a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016450a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016426a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016411a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e7a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167b4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679fb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678ab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016775b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016760b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016721b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167182: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f7b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e2b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cdb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a3b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668eb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016502b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164edb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c3b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164aeb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016499b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016484b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b2: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646fb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645ab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016445b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016430b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016406b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f1b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b251: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000ba4c2: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b6d7d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7bdd: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b63e0: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9830: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b56ed: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b980d: movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016b8c1: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b851: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b7e1: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b771: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b701: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b691: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b621: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b5b1: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b541: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b4d1: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b461: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b3f1: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b381: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b311: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b2a1: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b247: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7e43: movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b6623: movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b9883: movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000016b4df: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b46f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b3ff: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b38f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b6d1d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b7d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b568d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b97ad: movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000016b31f: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b6d3d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b9d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56ad: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b97cd: movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000016b2af: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b6d5d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bbd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56cd: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b97ed: movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000016b8cf: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b85f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b7ef: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b77f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b70f: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b69f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b62f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b5bf: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b54f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000ba4c7: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000ba428: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000ba4cd: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000016aa3b: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016aaab: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b1e6: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b166: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b0d6: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b056: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016afd6: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016af56: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aed6: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ae56: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016add6: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ad56: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016acd6: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ac56: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016abc6: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ab36: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aaa6: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa31: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016b1d7: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b157: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b0c7: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b047: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016afc7: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016af47: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aec7: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ae47: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016adc7: movdqu xmmword ptr [rdi - 0x29], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ad47: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016acc7: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ac47: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016abb7: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ab27: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa97: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa27: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000000b64e0: movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b79e4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b94: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b79f7: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6207: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b9627: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b6ba4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b5534: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6bf7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a57: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c17: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5587: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b7a7a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b625a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b96aa: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b5577: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b9687: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b6bd7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b7a37: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b5567: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b9667: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b6c78: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5608: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b9708: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b7afb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b972b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b6cdb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7b3b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b564b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b976b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b6cfb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b5b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b566b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b978b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b6cbc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b1c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b562c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b974c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b6c38: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b96c8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b6c58: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7ab8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55c8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b96e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b6bb8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a18: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5548: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b9648: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000ba4be: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b6d79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7bd9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b63dc: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b982c: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b56e9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b9809: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b6d19: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5689: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b97a9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b6d39: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b99: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56a9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b97c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b6d59: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bb9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b97e9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b5524: movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b9614: movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000016b2b4: movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000147f53: movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000145f74: movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x30], xmm0; push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000000910e9: movhps xmm0, qword ptr [rsp + 8]; movups xmmword ptr [rbx + 0x38], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091024: movhps xmm0, qword ptr [rsp + 8]; movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000058807: movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000485ca: movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000009c12c: movhps xmm0, qword ptr [rsp]; and byte ptr [rbx + 0x50], 0xfe; movsxd rdi, esi; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x000000000009c206: movhps xmm0, qword ptr [rsp]; or byte ptr [rbx + 0x50], 1; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rsi; call rcx; 
0x00000000000b2122: movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2142: movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2162: movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b1fac: movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d93: movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b2099: movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20b9: movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20d9: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20f9: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f56: movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b1fa8: movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b2119: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2139: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2159: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4ca9: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d2a: movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b2095: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20b5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20d5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20f5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f52: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b2115: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2135: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2155: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4ca5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d26: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b1f9f: movlpd xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b211d: movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b213d: movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b215d: movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4cad: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d8e: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b1fa3: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b2123: movlps qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2143: movlps qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2163: movlps qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b1fad: movlps qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d94: movlps qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b209a: movlps qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20ba: movlps qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20da: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20fa: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f57: movlps qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b1fa9: movlps qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b211a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b213a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b215a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4caa: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d2b: movlps qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b2096: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b20b6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b20d6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b20f6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b1f53: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b2116: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b2136: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b2156: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4ca6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d27: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b1fa0: movlps xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b211e: movlps xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b213e: movlps xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b215e: movlps xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b4cae: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4d8f: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b1fa4: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000043980: movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000043966: movq mm0, mm1; call 0x1905e0; add rsp, 0x20; pop rbx; ret; 
0x000000000014e8f5: movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f235: movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000147091: movq mm0, qword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014f2b9: movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014bcf9: movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000001503f5: movq mm0, qword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x00000000000b79f1: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6201: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b6bb1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a11: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5541: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6bf1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a51: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5581: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b5571: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b6bd1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b7a31: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b5561: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b6c71: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5601: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6c31: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a91: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55a1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6c51: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7ab1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55c1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b56e1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b6d11: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b71: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5681: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6d31: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b91: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56a1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b6d51: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bb1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56c1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b79e1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b91: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6ba1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b5531: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b5521: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b9611: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000013b4cc: movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000005bd54: movq mm0, qword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000435ba: movq mm0, qword ptr [rsp - 0x38]; ret; 
0x0000000000043953: movq mm0, qword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x00000000000437f3: movq mm0, qword ptr [rsp]; call 0x1925e0; add rsp, 0x10; pop rbx; ret; 
0x000000000004383d: movq mm1, mm0; call 0x1905e0; add rsp, 0x10; pop rbx; ret; 
0x000000000012aa06: movq mm1, qword ptr [r12 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000014f2c9: movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014bd09: movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014f2ca: movq mm1, qword ptr [rax + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014bd0a: movq mm1, qword ptr [rax + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000147061: movq mm1, qword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000012aa07: movq mm1, qword ptr [rsp - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000014f2f1: movq mm2, qword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000b63d5: movq mm2, qword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b56e5: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b6d15: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b75: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5685: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6d35: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b95: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56a5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b97c5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b6d55: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bb5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56c5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b97e5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000014f301: movq mm3, qword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014f302: movq mm3, qword ptr [rax + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000012ac9f: movq mm4, qword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000014f2e1: movq mm4, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000014f2e2: movq mm4, qword ptr [rax + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000012aca0: movq mm4, qword ptr [rsp + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000012ac35: movq mm5, qword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000012ac36: movq mm5, qword ptr [rbp - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000012b167: movq mm6, qword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000010b868: movq mm6, qword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010b8b8: movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c22a: movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000012b168: movq mm6, qword ptr [rsp + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b593: movq mm7, qword ptr [r12 + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012b239: movq mm7, qword ptr [r13 + 0x30]; mov dword ptr [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012ae24: movq mm7, qword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000012b23a: movq mm7, qword ptr [rbp + 0x30]; mov dword ptr [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012ae25: movq mm7, qword ptr [rbp - 0x18]; mov dword ptr [rbp - 0x80], 0; movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000010b871: movq mm7, qword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1a6: movq mm7, qword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010b8c1: movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c236: movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000012b594: movq mm7, qword ptr [rsp + 0x78]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x0000000000167aab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016795b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016780b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016756b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016741b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016702b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166edb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166aeb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016699b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016684b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ceb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164b9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001648fb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016465b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016450b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016426b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016411b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fcb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e7b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167b4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679fc: movq qword ptr [r8], mm0; lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678ac: movq qword ptr [r8], mm0; lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016775c: movq qword ptr [r8], mm0; lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016760c: movq qword ptr [r8], mm0; lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016721c: movq qword ptr [r8], mm0; lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167183: movq qword ptr [r8], mm0; lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f7c: movq qword ptr [r8], mm0; lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e2c: movq qword ptr [r8], mm0; lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cdc: movq qword ptr [r8], mm0; lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a3c: movq qword ptr [r8], mm0; lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668ec: movq qword ptr [r8], mm0; lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016502c: movq qword ptr [r8], mm0; lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164edc: movq qword ptr [r8], mm0; lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c3c: movq qword ptr [r8], mm0; lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164aec: movq qword ptr [r8], mm0; lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016499c: movq qword ptr [r8], mm0; lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016484c: movq qword ptr [r8], mm0; lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b3: movq qword ptr [r8], mm0; lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646fc: movq qword ptr [r8], mm0; lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645ac: movq qword ptr [r8], mm0; lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016445c: movq qword ptr [r8], mm0; lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016430c: movq qword ptr [r8], mm0; lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016406c: movq qword ptr [r8], mm0; lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f1c: movq qword ptr [r8], mm0; lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167aac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x51587]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016795c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x516d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016780c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x51827]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x51977]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016756c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x51ac7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016741c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x51c17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x51d67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016702c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x52007]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166edc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x52157]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x522a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x523f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166aec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x52547]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016699c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x52697]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016684c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x527e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x53d97]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x53ee7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54037]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54187]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164b9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x542d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54427]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001648fc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54577]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016465c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54817]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016450c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54967]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54ab7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016426c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54c07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016411c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54d57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fcc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54ea7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e7c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x54ff7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167b4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679fd: movq qword ptr [rax], mm0; lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678ad: movq qword ptr [rax], mm0; lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016775d: movq qword ptr [rax], mm0; lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016760d: movq qword ptr [rax], mm0; lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016721d: movq qword ptr [rax], mm0; lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167184: movq qword ptr [rax], mm0; lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f7d: movq qword ptr [rax], mm0; lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e2d: movq qword ptr [rax], mm0; lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cdd: movq qword ptr [rax], mm0; lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a3d: movq qword ptr [rax], mm0; lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668ed: movq qword ptr [rax], mm0; lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016502d: movq qword ptr [rax], mm0; lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164edd: movq qword ptr [rax], mm0; lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c3d: movq qword ptr [rax], mm0; lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164aed: movq qword ptr [rax], mm0; lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016499d: movq qword ptr [rax], mm0; lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016484d: movq qword ptr [rax], mm0; lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b4: movq qword ptr [rax], mm0; lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646fd: movq qword ptr [rax], mm0; lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645ad: movq qword ptr [rax], mm0; lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016445d: movq qword ptr [rax], mm0; lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016430d: movq qword ptr [rax], mm0; lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016406d: movq qword ptr [rax], mm0; lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f1d: movq qword ptr [rax], mm0; lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b252: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000ba4c3: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b6d7e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7bde: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b63e1: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9831: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b56ee: movq qword ptr [rdi + 0x10], mm2; ret; 
0x00000000000b980e: movq qword ptr [rdi + 0x10], mm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016b8c2: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b852: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b7e2: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b772: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b702: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b692: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b622: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b5b2: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b542: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b4d2: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b462: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b3f2: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b382: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b312: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b2a2: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b248: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7e44: movq qword ptr [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b6624: movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000b9884: movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000016b4e0: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b470: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b400: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b390: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b6d1e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b7e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b568e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000000b97ae: movq qword ptr [rdi + 0xd], mm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000016b320: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b6d3e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b9e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56ae: movq qword ptr [rdi + 0xe], mm2; ret; 
0x00000000000b97ce: movq qword ptr [rdi + 0xe], mm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000016b2b0: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b6d5e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bbe: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56ce: movq qword ptr [rdi + 0xf], mm2; ret; 
0x00000000000b97ee: movq qword ptr [rdi + 0xf], mm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000016b8d0: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b860: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b7f0: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b780: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b710: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b6a0: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b630: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b5c0: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b550: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000ba4c8: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000ba429: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000ba4ce: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000016aa3c: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000016aaac: movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016b1e7: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b167: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b0d7: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b057: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016afd7: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016af57: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aed7: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ae57: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016add7: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ad57: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016acd7: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ac57: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016abc7: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ab37: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aaa7: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa32: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000163dce: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x550a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b1d8: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b158: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b0c8: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016b048: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016afc8: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016af48: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aec8: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ae48: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016adc8: movq qword ptr [rdi - 0x29], mm0; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ad48: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016acc8: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ac48: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016abb8: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ab28: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa98: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016aa28: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000001666ad: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163cdd: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b64e1: movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7dd2: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, [rip + 0xf3010]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7db3: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, [rip + 0xf302f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65b2: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, [rip + 0xf4650]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6593: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, [rip + 0xf466f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b79e5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b95: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b79f8: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b6208: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b9628: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b6ba5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b5535: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6bf8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b7a58: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6c18: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b5588: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b7a7b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b625b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b96ab: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b5578: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b9688: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b6bd8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b7a38: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b5568: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b9668: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b6c79: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b7ad9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b6c99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b5609: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b55e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b9709: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b7afc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b972c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b6cdc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7b3c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b564c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b976c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b6cfc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b5c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b566c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b978c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b6cbd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b1d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b562d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b974d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b6c39: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7a99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b55a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b96c9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b6c59: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b7ab9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b55c9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b96e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b6bb9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7a19: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b5549: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b9649: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000ba4bf: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b6d7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7bda: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b63dd: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b982d: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b56ea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b980a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b6d1a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b568a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b97aa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b6d3a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b7b9a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b56aa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b97ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b6d5a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b7bba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b56ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b97ea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b5525: movq qword ptr [rdi], mm0; ret; 
0x00000000000b9615: movq qword ptr [rdi], mm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000016b2b5: movq qword ptr [rdi], mm1; ret; 
0x0000000000042daa: movq rax, xmm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042d8a: movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000147f44: movq xmm0, qword ptr [rsp + 8]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x0000000000115bc9: movq xmm0, qword ptr [rsp - 0x10]; mov qword ptr [rsp - 0x10], rsi; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000485bd: movq xmm0, qword ptr [rsp - 0x10]; xor eax, eax; mov qword ptr [rsp - 0x10], r8; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042e2f: movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e93: movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000999dc: movsb byte ptr [rdi], byte ptr [rsi]; adc al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000dc295: movsb byte ptr [rdi], byte ptr [rsi]; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008b35a: movsb byte ptr [rdi], byte ptr [rsi]; adc eax, 0xe9c93100; pop rsp; xchg eax, edx; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cf14f: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000822c0: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001087b2: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0x90; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000145f80: movsb byte ptr [rdi], byte ptr [rsi]; and al, byte ptr [rdi]; add bh, bh; xor eax, 0x72296; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000000ba07a: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000c8793: movsb byte ptr [rdi], byte ptr [rsi]; fdiv st(7), st(0); dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000014aeea: movsb byte ptr [rdi], byte ptr [rsi]; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ba06c: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001023e8: movsb byte ptr [rdi], byte ptr [rsi]; sub eax, 0x8348fff2; ret; 
0x0000000000067cce: movsd dword ptr [rdi], dword ptr [rsi]; adc byte ptr [rax + rax], 0xe8; stc; sar ah, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000003798a: movsd dword ptr [rdi], dword ptr [rsi]; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x0000000000117347: movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000006f7f8: movsd dword ptr [rdi], dword ptr [rsi]; cmp bl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x000000000015afd9: movsd dword ptr [rdi], dword ptr [rsi]; or byte ptr [rax], al; add rsp, 8; ret; 
0x000000000010907f: movsd dword ptr [rdi], dword ptr [rsi]; or r8b, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000057012: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000154c9b: movsd dword ptr [rdi], dword ptr [rsi]; std; jmp qword ptr [rsi - 0x70]; 
0x000000000012aa11: movsd qword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012ac3f: movsd qword ptr [rbp - 0x78], xmm5; call rax; 
0x0000000000048900: movsd qword ptr [rbx], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042e23: movsd qword ptr [rdi], xmm0; and rdx, rax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e99: movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000042f48: movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000cebd8: movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000042f22: movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000015d3d5: movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000004321b: movss dword ptr [rdi], xmm0; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x000000000004323e: movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000194ca4: movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000004330e: movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000194c94: movss xmm0, dword ptr [rip + 0x23de8]; divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000433fe: movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x00000000000432ee: movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000155a68: movsx eax, byte ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154b59: movsx eax, ch; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000009cf86: movsx eax, dl; ret; 
0x0000000000155950: movsx eax, word ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154a49: movsx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154b58: movsx rax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154a48: movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001926f7: movsxd r12, dword ptr [rdx + r12*4]; add rdx, r12; jmp rdx; 
0x000000000010bd96: movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000000777c1: movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x000000000007de1d: movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000077db1: movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000007ad3b: movsxd rax, dword ptr [rax + rdx*4]; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x0000000000181597: movsxd rax, dword ptr [rax]; adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000011e781: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010bd97: movsxd rax, dword ptr [rbp + rax*4]; add rax, r13; jmp rax; 
0x00000000000f93da: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000fa0c4: movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x0000000000077b5b: movsxd rax, dword ptr [rbx - 0x51743]; call qword ptr [rax]; 
0x00000000000ee745: movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000006406e: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000191a67: movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000144e96: movsxd rax, dword ptr [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000cde19: movsxd rax, dword ptr [rcx]; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x00000000000ba0ed: movsxd rax, dword ptr [rcx]; add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ee746: movsxd rax, dword ptr [rcx]; add rax, rcx; jmp rax; 
0x00000000000fc7dc: movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x000000000007763f: movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000777fb: movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; mov dword ptr [rbp - 0x548], 0; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000077723: movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; mov r10, rdx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x0000000000080a42: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000007de5e: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007d135: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 0; jmp rax; 
0x000000000007e0ad: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; mov dword ptr [rbp - 0x4f8], 1; jmp rax; 
0x000000000007dfc5: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; mov dword ptr [rbp - 0x4e8], 1; mov r9, rsi; mov dword ptr [rbp - 0x508], 0x20; jmp rax; 
0x000000000007deb5: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; mov dword ptr [rbp - 0x53c], 1; mov r9, rsi; mov dword ptr [rbp - 0x530], 0; jmp rax; 
0x00000000000fc7dd: movsxd rax, dword ptr [rdi + rbp*4]; add rax, rdi; jmp rax; 
0x000000000014bcd7: movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; jmp rax; 
0x00000000000d8e58: movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000ee83c: movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000e8b70: movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x0000000000027297: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000ee83d: movsxd rax, dword ptr [rdx + rbp*4]; add rax, rdx; jmp rax; 
0x00000000000e3a04: movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e8b71: movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x00000000000e2ffc: movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000176059: movsxd rax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x000000000007718b: movsxd rax, dword ptr [rsi + rax*4]; add rax, r14; mov dword ptr [rbp - 0x4f0], 1; mov r10, rdx; xor esi, esi; jmp rax; 
0x000000000007776b: movsxd rax, dword ptr [rsi + rax*4]; add rax, r14; mov r10, rdx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000075007: movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000065cee: movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000006cd23: movsxd rax, dword ptr [rsi + rax*4]; mov r11d, dword ptr [rbp - 0x5a8]; add rax, rsi; jmp rax; 
0x00000000000ba5ba: movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000000ba682: movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000000f8a4f: movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x000000000017c43a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017c02a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017bb36: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c346: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017bdba: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017c0fa: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017c416: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c4e6: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c29a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017ba8a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017be8a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017c36a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017bb5a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017bbfc: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017bf5a: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017c1ca: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017bc20: movsxd rax, dword ptr [rsi + rdx]; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000147e99: movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000181414: movsxd rax, ecx; add rax, rdi; ret; 
0x00000000001812af: movsxd rax, ecx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000181341: movsxd rax, ecx; ret; 
0x000000000017e5ab: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183a68: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000183288: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000183678: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182e98: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f10b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e8eb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017e0cb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000183037: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017ec2b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e40b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017dbeb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017edcb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000183528: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d48: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183e58: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017df2b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e061: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ed61: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e881: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183429: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183d59: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017f0a1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e3a1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000017dec1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ebc1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000183579: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182d99: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000015e779: movsxd rax, ecx; shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000155f75: movsxd rbp, dword ptr [rax]; mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000afa79: movsxd rbx, dword ptr [rdx + 0xc8b000e]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000016bbd9: movsxd rbx, ebp; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000181540: movsxd rbx, ebx; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000018132b: movsxd rbx, ebx; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x00000000001203ae: movsxd rbx, ebx; mov qword ptr [rip + 0xc3fa9], rbx; pop rbx; ret; 
0x0000000000120398: movsxd rbx, ebx; mov qword ptr [rip + 0xc3fbf], rbx; pop rbx; ret; 
0x000000000016bed9: movsxd rbx, edx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b5b5a: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018aeed: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000b52e9: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a6fdd: movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x000000000014eb6b: movsxd rcx, dword ptr [rax + 0x41]; bswap esp; call qword ptr [rax + 0x18]; 
0x000000000011db2d: movsxd rcx, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b5b5b: movsxd rcx, dword ptr [rbx + rax*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018aeee: movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000b52ea: movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000a6fde: movsxd rcx, dword ptr [rcx + rcx*4]; add rcx, r9; jmp rcx; 
0x00000000000fe231: movsxd rcx, dword ptr [rdi + rcx*4]; add rcx, rdi; jmp rcx; 
0x00000000000ba5f0: movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000026c53: movsxd rcx, dword ptr [rsi]; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x000000000016d0d9: movsxd rcx, eax; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd9: movsxd rcx, ebx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018159d: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000018132f: movsxd rcx, ecx; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x000000000016cad9: movsxd rcx, esi; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000418a0: movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000098d59: movsxd rdi, dword ptr [rbp - 0x76b70001]; ret; 
0x00000000000418a1: movsxd rdi, dword ptr [rdx + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000035455: movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034da8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000352a8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000035288: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000351e8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351c8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351a8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000035128: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000035168: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350c8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000035148: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000035108: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000035268: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000350e8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000035188: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000350a8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000035435: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000035415: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000353f5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000035375: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000353b5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000035315: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000035395: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000035355: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000352e5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000035335: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000353d5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000352f5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000148e83: movsxd rdi, esi; jmp qword ptr [rsi + 0x2e]; 
0x000000000009c135: movsxd rdi, esi; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x0000000000163a0f: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000014707e: movsxd rdx, dword ptr [r8 + rcx*4]; add rdx, r8; jmp rdx; 
0x00000000000a7182: movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000014707f: movsxd rdx, dword ptr [rax + rcx*4]; add rdx, r8; jmp rdx; 
0x00000000000a7183: movsxd rdx, dword ptr [rax + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000a70b2: movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x000000000009c131: movsxd rdx, dword ptr [rax - 2]; movsxd rdi, esi; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x0000000000153590: movsxd rdx, dword ptr [rax]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000163a10: movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000141721: movsxd rdx, dword ptr [rcx + 7]; add al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; cmp bh, ch; jmp qword ptr [rsi + 0xf]; 
0x0000000000041796: movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000055f7b: movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x000000000013b3ea: movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000016c7d9: movsxd rdx, ecx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d9: movsxd rdx, edi; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000092f81: movsxd rdx, edx; call 0x92e90; or dword ptr [rbx], 8; pop rbx; ret; 
0x0000000000181241: movsxd rdx, edx; cmp cl, byte ptr [rax - 0x7d]; ret 0x2910; 
0x000000000013b241: movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000013b7de: movsxd rdx, esi; ret; 
0x000000000016c4d9: movsxd rdx, esp; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000032c76: movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000032c77: movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x00000000000eae5b: movsxd rsi, dword ptr [rcx + rsi]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000036d01: movsxd rsi, dword ptr [rsi]; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d069c: movsxd rsi, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000009c204: movsxd rsi, esi; movhps xmm0, qword ptr [rsp]; or byte ptr [rbx + 0x50], 1; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rsi; call rcx; 
0x000000000018f9dc: movsxd rsi, esi; ret 0x7520; 
0x0000000000155f79: movsxd rsp, dword ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000181405: movsxd rsp, dword ptr [rdi]; add cl, byte ptr [rdi]; xchg eax, edx; ret 0xf40; 
0x00000000001926f8: movsxd rsp, dword ptr [rdx]; add rdx, r12; jmp rdx; 
0x0000000000194c95: movups xmm0, xmmword ptr [rip + 0x23de8]; divss xmm0, dword ptr [rip + 0x25060]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000ba007: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000cebd9: movups xmm0, xmmword ptr [rsp - 0x10]; ret; 
0x00000000000433ff: movups xmm0, xmmword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x00000000000432ef: movups xmm0, xmmword ptr [rsp - 4]; ret; 
0x0000000000042f23: movups xmm0, xmmword ptr [rsp - 8]; ret; 
0x00000000000ba00a: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000ba1a8: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba24f: movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba2d6: movups xmmword ptr [r11], xmm8; ret; 
0x000000000014f2f9: movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014f2be: movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014bcfe: movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000014f2fa: movups xmmword ptr [rax + 0x20], xmm2; ret; 
0x0000000000086a1b: movups xmmword ptr [rax + 0x30], xmm0; mov dword ptr [rbx + 0x74], edx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000014f2bf: movups xmmword ptr [rax + 0x30], xmm0; ret; 
0x00000000000871d5: movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000014bcff: movups xmmword ptr [rax + 8], xmm0; ret; 
0x00000000001409bb: movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x000000000008639e: movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918c9: movups xmmword ptr [rbp + 0x38], xmm0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000012aa12: movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012acab: movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000012ac40: movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000012b173: movups xmmword ptr [rbp - 0x78], xmm6; call rax; 
0x000000000012b245: movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x000000000012ae30: movups xmmword ptr [rbp - 0x78], xmm7; call rcx; 
0x000000000009c5a9: movups xmmword ptr [rbx + 0x18], xmm0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d91e: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008d922: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000125e09: movups xmmword ptr [rbx + 0x30], xmm0; mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000910ee: movups xmmword ptr [rbx + 0x38], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091029: movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000009c137: movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rdi; call rcx; 
0x000000000009c20e: movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rsi; call rcx; 
0x0000000000090ba1: movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000008a1fc: movups xmmword ptr [rbx + 0xe0], xmm1; add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000008d91a: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008dc71: movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000009ca84: movups xmmword ptr [rbx], xmm0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000048901: movups xmmword ptr [rbx], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ba2d7: movups xmmword ptr [rbx], xmm0; ret; 
0x00000000000ba250: movups xmmword ptr [rbx], xmm4; ret; 
0x0000000000044016: movups xmmword ptr [rcx + 0x78], xmm6; movups xmmword ptr [rcx + 0x88], xmm7; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000004401a: movups xmmword ptr [rcx + 0x88], xmm7; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x00000000000ba242: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba246: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba24b: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba24a: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000ba23f: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000010b4b9: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba1b0: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba2ca: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000155d1c: movups xmmword ptr [rdi + 0x18], xmm0; mov dword ptr [rdi + 0x28], edx; ret; 
0x000000000010b4bd: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2ce: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000448c3: movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b4c1: movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba2d2: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000448c7: movups xmmword ptr [rdi + 0x40], xmm0; movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b4c5: movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000448cb: movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x00000000000448cf: movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b8bc: movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x00000000000448d3: movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b8c5: movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c22e: movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c23a: movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000090ad7: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000013b4cf: movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000000ba012: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000ba1b4: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba187: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000ba1b9: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba18c: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000ba191: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000ba196: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000042e24: movups xmmword ptr [rdi], xmm0; and rdx, rax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x000000000005880c: movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000004321c: movups xmmword ptr [rdi], xmm0; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x000000000010b4b6: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000ba1ad: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000ba00f: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000044c71: movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042e9a: movups xmmword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000004323f: movups xmmword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x00000000000ba2c7: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000029db0: movups xmmword ptr [rdx + 0x48], xmm0; add rsp, 0x18; ret; 
0x000000000014bd13: movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014e9fb: movups xmmword ptr [rdx], xmm2; ret; 
0x000000000014f30b: movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014f2eb: movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010b86c: movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c1a1: movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010b875: movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000014709b: movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014706b: movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000004852c: movups xmmword ptr [rsi], xmm0; lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014e8f9: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014f239: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014bc1c: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001520fe: movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 0; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x0000000000152379: movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x00000000001523ee: movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 2; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x0000000000152169: movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d9: movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152249: movups xmmword ptr [rsp + 0x18], xmm0; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x0000000000113a14: movups xmmword ptr [rsp + 0x18], xmm0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001560a2: movups xmmword ptr [rsp + 0x28], xmm0; call rdx; 
0x000000000015261c: movups xmmword ptr [rsp + 0xb8], xmm2; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 2; call rax; 
0x00000000001526b6: movups xmmword ptr [rsp + 0xb8], xmm3; mov qword ptr [rsp + 0xc8], rdx; mov dword ptr [rsp + 0xd0], 1; call rax; 
0x0000000000194ca5: movups xmmword ptr [rsp - 0x28], xmm0; ret; 
0x000000000004330f: movups xmmword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f49: movups xmmword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000027aba: movzx eax, al; add eax, 1; push rax; call rbx; 
0x000000000014cab6: movzx eax, al; add eax, 1; ret; 
0x000000000015614b: movzx eax, al; add rsp, 0x18; ret; 
0x000000000010e991: movzx eax, al; add rsp, 0x58; ret; 
0x0000000000148f40: movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cc9cd: movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000e374e: movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000064d5c: movzx eax, al; mov rcx, qword ptr [rbp - 0x620]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e910f: movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000064bd4: movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000065cea: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000639f7: movzx eax, al; neg eax; pop rbx; ret; 
0x00000000000639c9: movzx eax, al; neg eax; ret; 
0x000000000008d3d9: movzx eax, al; pop rbx; neg eax; ret; 
0x000000000014798e: movzx eax, al; pop rbx; pop rbp; ret; 
0x000000000004498b: movzx eax, al; ret; 
0x00000000000aaef3: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000350b5: movzx eax, ax; ret; 
0x0000000000090034: movzx eax, bpl; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000154be8: movzx eax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000013b354: movzx eax, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], eax; mov eax, edx; mov qword ptr [r9], r10; ret; 
0x0000000000077639: movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000000eaa85: movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000007763a: movzx eax, byte ptr [rax + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x00000000001818d2: movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000001817ec: movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000a8bad: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000181787: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000001817b0: movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001817d0: movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181c27: movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000149c9e: movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000536c8: movzx eax, byte ptr [rax + rdx]; mov edx, 6; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000091b8b: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008ea2c: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000033960: movzx eax, byte ptr [rax]; cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1b2ed1]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000008d352: movzx eax, byte ptr [rax]; ret; 
0x00000000000eaa86: movzx eax, byte ptr [rcx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000013a90c: movzx eax, byte ptr [rdi + 1]; lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000013b5b6: movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x0000000000101c00: movzx eax, byte ptr [rdi + 9]; and eax, 0xf; ret; 
0x0000000000182a44: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a64: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a2a: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000017b9eb: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000001827b4: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000181624: movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000181644: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181664: movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000185a5d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x13a78]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840b8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x1541d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018119d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x18338]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1d8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x1a2fd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172a7d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x26a58]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000170528: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x28fad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa4d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0xe9a88]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad408: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0xec0cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a8a3f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000181606: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000a89d8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000018fa00: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000018fa60: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000018fa50: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa40: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa30: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa20: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000018fa10: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018bda0: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018bb53: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018f9e7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000185a83: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x13a53]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001840d3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x15403]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001811c3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x18313]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000017f1f3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x1a2e3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172aa3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x26a33]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000170543: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x28f93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000afa73: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0xe9a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000ad423: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0xec0b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000182830: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000aaed0: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000a89f3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000181df3: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000013b355: movzx eax, byte ptr [rdx + 1]; add r10, 2; mov dword ptr [r8], eax; mov eax, edx; mov qword ptr [r9], r10; ret; 
0x0000000000074ffb: movzx eax, byte ptr [rdx + rax]; lea rdx, [rip - 0x449]; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000008fec0: movzx eax, byte ptr [rdx]; ret; 
0x0000000000155af8: movzx eax, byte ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000a714f: movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x0000000000196da8: movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x00000000000a7116: movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; mov rax, rdi; ret; 
0x00000000000a70f8: movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; mov rax, rdi; ret; 
0x0000000000090035: movzx eax, ch; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000154be9: movzx eax, ch; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000d6af5: movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ba650: movzx eax, cl; pop rbx; ret; 
0x00000000000ba45d: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000012f350: movzx eax, dh; or eax, edi; bswap eax; ret; 
0x0000000000029e31: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000012f2e8: movzx eax, di; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000ba600: movzx eax, dl; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000012f333: movzx eax, si; or eax, edi; bswap eax; ret; 
0x00000000000ba45c: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000012f34f: movzx eax, sil; or eax, edi; bswap eax; ret; 
0x0000000000029e30: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000014bd6d: movzx eax, word ptr [r8 + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000014bd6e: movzx eax, word ptr [rax + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000035485: movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000351ee: movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000351ce: movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000351ae: movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000003512e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003516e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000350ce: movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003514e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000003510e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003526e: movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000350ee: movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003518e: movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000350ae: movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012b742: movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x000000000010b8d0: movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000001559e0: movzx eax, word ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000154ad8: movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000a712e: movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; mov rax, rdi; ret; 
0x00000000000fc7d9: movzx ebp, ch; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000ee839: movzx ebp, ch; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x000000000007e1a3: movzx ecx, byte ptr [r10 + rax]; lea rax, [rip + 0x12bef1]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000077fb4: movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b4: movzx ecx, byte ptr [r8 + rax]; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x0000000000077fb5: movzx ecx, byte ptr [rax + rax]; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b5: movzx ecx, byte ptr [rax + rax]; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000fe22c: movzx ecx, byte ptr [rdx + 8]; movsxd rcx, dword ptr [rdi + rcx*4]; add rcx, rdi; jmp rcx; 
0x000000000007e1a4: movzx ecx, byte ptr [rdx + rax]; lea rax, [rip + 0x12bef1]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000a89d4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000018bda4: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000ba108: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000a89f0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000181df0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000182833: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000ba12c: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000001885b0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b20: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000187f60: movzx ecx, word ptr [rsi]; movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000004189d: movzx edi, al; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000012f2ec: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000011f63b: movzx edi, di; lea rax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012f2eb: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000011d8c4: movzx edx, bh; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000780e0: movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da4: movzx edx, byte ptr [r8 + rax]; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x00000000000780e1: movzx edx, byte ptr [rax + rax]; lea rax, [rip + 0x131c54]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x0000000000077da5: movzx edx, byte ptr [rax + rax]; lea rax, [rip + 0x131f10]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r14; jmp rax; 
0x000000000008aaf2: movzx edx, byte ptr [rax]; pop rbx; mov eax, edx; ret; 
0x0000000000149c97: movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000001818d7: movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000001817f1: movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000a8bb1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000018178b: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000001817b5: movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001817d5: movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181c2b: movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a49: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a69: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a2f: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000184348: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x1518d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000182c6f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x16866]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017d8cf: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x1bc06]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017b9ef: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000001827b8: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000181629: movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000181649: movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181669: movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000a8a43: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000018160a: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000018fa04: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000018fa64: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000018fa54: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa44: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa34: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa24: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000018fa14: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000016b200: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000018bb57: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018f9eb: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000188c70: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000187390: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016b8e0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000187f40: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000aaed3: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000a7082: movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7234: movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7049: movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a702b: movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000ba690: movzx edx, cl; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000f8a4b: movzx edx, cl; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000fdaf6: movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000011d8c3: movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000aaef9: movzx edx, dl; sub eax, edx; ret; 
0x0000000000188c93: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873b3: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f63: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000188c94: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000001873b4: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187f64: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000016b180: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001885a0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000188c80: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001873a0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016b870: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000186b10: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a7079: movzx edx, word ptr [rsp + 0x14]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a722b: movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7061: movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a7213: movzx edx, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], dx; ret; 
0x000000000009121b: movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000009121c: movzx esi, byte ptr [rdi]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000000fa0c0: movzx esi, dh; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000fca5b: movzx esi, dh; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000135594: movzx esi, si; push 2; call 0x134b30; add rsp, 0x18; ret; 
0x00000000000fa0bf: movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000fca5a: movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000ba131: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000ee742: movzx esp, ah; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000ee741: movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000fc7d8: movzx r13d, r13b; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000ee838: movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000000536c7: movzx r8, byte ptr [r8 + r10]; mov edx, 6; mov byte ptr [rip + 0x193d2e], al; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000008ea2b: movzx r8, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000181d9a: movzx r8d, byte ptr [r8 + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000097998: mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x00000000000affe7: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x0000000000147a06: mul dl; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x0000000000166c45: mul dword ptr [rbx]; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e15d5: mul dword ptr [rdi - 0x3876fffc]; mov eax, 0x22; syscall; 
0x000000000018a920: mul dword ptr [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000012bc0d: mul esi; or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000042f73: mulps xmm0, xmmword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f41: mulps xmm0, xmmword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043334: mulps xmm0, xmmword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043307: mulps xmm0, xmmword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f72: mulsd xmm0, qword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f40: mulsd xmm0, qword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043333: mulss xmm0, dword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043306: mulss xmm0, dword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000044774: neg byte ptr [rcx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000013e391: neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012c7b6: neg eax; cmp ebx, 0xfffff000; cmovbe eax, edx; add rsp, 0x20; pop rbx; ret; 
0x00000000000cdae5: neg eax; cmp ecx, r8d; cmovg eax, edx; ret; 
0x0000000000101980: neg eax; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x00000000000441c7: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044197: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b57: neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011331f: neg eax; mov dword ptr fs:[rdx], eax; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x000000000018972f: neg eax; or eax, 1; vzeroupper; ret; 
0x0000000000043177: neg eax; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000042d64: neg eax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000000004350f: neg eax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000ead12: neg eax; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000639fa: neg eax; pop rbx; ret; 
0x000000000002740d: neg eax; ret; 
0x0000000000053811: neg edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000012c670: neg edx; cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x000000000011187c: neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x00000000001019cf: neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000010197f: neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x0000000000042d63: neg rax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000000004350e: neg rax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000155e98: nop dword ptr [rax + rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000155eab: nop dword ptr [rax + rax]; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x0000000000063ba8: nop dword ptr [rax + rax]; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000ce488: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x0000000000099258: nop dword ptr [rax + rax]; add rsp, 0x10; pop rbx; ret; 
0x000000000010b493: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000000144753: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000009d003: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008a2eb: nop dword ptr [rax + rax]; and ecx, 0xffffffcf; mov dword ptr [rdi], ecx; ret; 
0x0000000000043248: nop dword ptr [rax + rax]; and edx, 0x80000000; mov dword ptr [rdi], edx; ret; 
0x0000000000034df3: nop dword ptr [rax + rax]; and esi, dword ptr [rdi + 0x10]; lea rax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x0000000000042dbb: nop dword ptr [rax + rax]; andpd xmm0, xmmword ptr [rip + 0x174fc8]; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x00000000000aa7b8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000017c64b: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000018254b: nop dword ptr [rax + rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000aac78: nop dword ptr [rax + rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000001203a3: nop dword ptr [rax + rax]; call 0x11fad0; movsxd rbx, ebx; mov qword ptr [rip + 0xc3fa9], rbx; pop rbx; ret; 
0x0000000000093e8b: nop dword ptr [rax + rax]; call rax; 
0x0000000000042cb3: nop dword ptr [rax + rax]; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000098fbb: nop dword ptr [rax + rax]; jmp rax; 
0x00000000000b71cb: nop dword ptr [rax + rax]; lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b1b: nop dword ptr [rax + rax]; lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018e788: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000018e798: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000018e7a8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000018e7b8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000018e7c8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000018e718: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000018e728: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000018e738: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000018e748: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000018e758: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000018e768: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000018e778: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cdf78: nop dword ptr [rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cdf98: nop dword ptr [rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cdf88: nop dword ptr [rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000339c3: nop dword ptr [rax + rax]; lea rax, [rip + 0x17bf7d]; ret; 
0x0000000000026c58: nop dword ptr [rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x0000000000026c68: nop dword ptr [rax + rax]; lea rax, [rip + 0x18a6ae]; ret; 
0x00000000000eaa98: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000eaaab: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x0000000000115cfb: nop dword ptr [rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x00000000000b6a28: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b5428: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b6a4b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000014bd8b: nop dword ptr [rax + rax]; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x000000000007ef23: nop dword ptr [rax + rax]; mov dword ptr [rbp - 0x528], 1; mov r9, rsi; jmp rax; 
0x0000000000176188: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x0000000000176178: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x0000000000176158: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x000000000010b908: nop dword ptr [rax + rax]; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000a71d8: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b6448: nop dword ptr [rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000001470a8: nop dword ptr [rax + rax]; mov dword ptr [rsi], 0xa; ret; 
0x00000000001470c8: nop dword ptr [rax + rax]; mov dword ptr [rsi], 0xc; ret; 
0x00000000001470b8: nop dword ptr [rax + rax]; mov dword ptr [rsi], 8; ret; 
0x00000000000b6108: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b949b: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000010cc1b: nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eaeb: nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x00000000000ba6d8: nop dword ptr [rax + rax]; mov eax, 0x10; pop rbx; ret; 
0x0000000000063b98: nop dword ptr [rax + rax]; mov eax, 0x10; ret; 
0x0000000000113408: nop dword ptr [rax + rax]; mov eax, 0x10; syscall; 
0x000000000010ea2b: nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7ab: nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e80b: nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e47b: nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d73b: nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d79b: nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e59b: nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e89b: nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3bb: nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9bb: nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9eb: nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000009aa6b: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000010d76b: nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x000000000010185b: nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x000000000012c418: nop dword ptr [rax + rax]; mov eax, 0x18; syscall; ret; 
0x000000000011768b: nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000011f9eb: nop dword ptr [rax + rax]; mov eax, 0x1e; syscall; 
0x000000000011fa7b: nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ba6f8: nop dword ptr [rax + rax]; mov eax, 0x20; pop rbx; ret; 
0x000000000010d70b: nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000001126b8: nop dword ptr [rax + rax]; mov eax, 0x22; syscall; 
0x00000000000d297b: nop dword ptr [rax + rax]; mov eax, 0x24; syscall; 
0x00000000000d29ab: nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000e26db: nop dword ptr [rax + rax]; mov eax, 0x27; syscall; 
0x00000000000e26db: nop dword ptr [rax + rax]; mov eax, 0x27; syscall; ret; 
0x000000000011f10b: nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000ba6e8: nop dword ptr [rax + rax]; mov eax, 0x30; pop rbx; ret; 
0x000000000011ebdb: nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000e1948: nop dword ptr [rax + rax]; mov eax, 0x3b; syscall; 
0x00000000000ba718: nop dword ptr [rax + rax]; mov eax, 0x40; pop rbx; ret; 
0x000000000010d50b: nop dword ptr [rax + rax]; mov eax, 0x49; syscall; 
0x0000000000115b08: nop dword ptr [rax + rax]; mov eax, 0x4c; syscall; 
0x000000000010d88b: nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x0000000000063a08: nop dword ptr [rax + rax]; mov eax, 0x52; syscall; 
0x000000000010eb1b: nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea5b: nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010caf8: nop dword ptr [rax + rax]; mov eax, 0x5a; syscall; 
0x000000000010cb2b: nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e17b: nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1ab: nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000ba708: nop dword ptr [rax + rax]; mov eax, 0x60; pop rbx; ret; 
0x00000000000cf778: nop dword ptr [rax + rax]; mov eax, 0x60; syscall; 
0x00000000000e126b: nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x00000000000e26f8: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x00000000000e26f8: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x000000000011e5fb: nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2718: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x00000000000e2718: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x00000000000e2708: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x00000000000e2708: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x00000000000e2728: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x00000000000e2728: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x00000000000e296b: nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e26e8: nop dword ptr [rax + rax]; mov eax, 0x6e; syscall; 
0x00000000000e26e8: nop dword ptr [rax + rax]; mov eax, 0x6e; syscall; ret; 
0x00000000000e299b: nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e299b: nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; ret; 
0x00000000000e29fb: nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2738: nop dword ptr [rax + rax]; mov eax, 0x73; syscall; 
0x00000000000e2a2b: nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a5b: nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbdb: nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e35b: nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000e3568: nop dword ptr [rax + rax]; mov eax, 0x7e; ret; 
0x000000000011e38b: nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000013b868: nop dword ptr [rax + rax]; mov eax, 0x7fffffff; ret; 
0x0000000000044758: nop dword ptr [rax + rax]; mov eax, 0x83; syscall; 
0x000000000011e7db: nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9db: nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x0000000000113208: nop dword ptr [rax + rax]; mov eax, 0x8c; syscall; 
0x0000000000101798: nop dword ptr [rax + rax]; mov eax, 0x8e; syscall; 
0x00000000001017cb: nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017fb: nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x000000000010182b: nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x000000000010188b: nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018bb: nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018eb: nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x000000000011771b: nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x000000000011774b: nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x000000000011777b: nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2bb: nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6bb: nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141db: nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000cf858: nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000011db48: nop dword ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x000000000011469b: nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146cb: nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x000000000011758b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000113e68: nop dword ptr [rax + rax]; mov eax, 0xaa; syscall; 
0x000000000011da0b: nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9db: nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3eb: nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e41b: nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db7b: nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b93b: nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b81b: nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e44b: nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2eb: nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e2eb: nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; ret; 
0x000000000012c688: nop dword ptr [rax + rax]; mov eax, 0xe5; syscall; 
0x00000000000e355b: nop dword ptr [rax + rax]; mov eax, 0xfc17; ret; 
0x000000000011e56b: nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5cb: nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000000e3578: nop dword ptr [rax + rax]; mov eax, 0xfffa; ret; 
0x0000000000044e13: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009c4f8: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x000000000011274b: nop dword ptr [rax + rax]; mov eax, 1; syscall; 
0x0000000000147808: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x00000000000ba6c8: nop dword ptr [rax + rax]; mov eax, 8; pop rbx; ret; 
0x000000000010c1cb: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008c1a8: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000154e43: nop dword ptr [rax + rax]; mov eax, dword ptr [rdx]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000044dd8: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x19f3c2]; ret; 
0x0000000000154533: nop dword ptr [rax + rax]; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012f2bb: nop dword ptr [rax + rax]; mov eax, edi; bswap eax; ret; 
0x0000000000124228: nop dword ptr [rax + rax]; mov eax, edx; ret; 
0x00000000000b614b: nop dword ptr [rax + rax]; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000121b13: nop dword ptr [rax + rax]; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000e1908: nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x00000000000834e3: nop dword ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000011fd93: nop dword ptr [rax + rax]; mov edx, 0x40; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x00000000000b545b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000011436b: nop dword ptr [rax + rax]; mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000000441db: nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x7f; syscall; 
0x00000000001761c8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761d8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001761e8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x00000000001761f8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000176208: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000176218: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001761b8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x0000000000176198: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b6458: nop dword ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b6498: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b64a8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b64b8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b64c8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018805b: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b6488: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b6468: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000010e1db: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x104; syscall; 
0x000000000010e9cb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x109; syscall; 
0x000000000010ea8b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x10b; syscall; 
0x000000000011e83b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x000000000011e2f8: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12d; syscall; 
0x000000000011e8cb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x000000000011e92b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x000000000011f13b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x000000000011ec0b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x000000000011e6eb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000011e62b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x000000000011e50b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x000000000011b9cb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x000000000011b96b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x000000000011b84b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x000000000011b8db: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000001176bb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x000000000011e4ab: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x0000000000115c93: nop dword ptr [rax + rax]; mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x000000000007eed8: nop dword ptr [rax + rax]; mov r9, rsi; jmp rax; 
0x00000000000928e8: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000000ce4b8: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x00000000000ce4c8: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x00000000000ce4d8: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x00000000000ce4e8: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x00000000000ce4f8: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000000ce508: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x000000000015264b: nop dword ptr [rax + rax]; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x00000000001524e8: nop dword ptr [rax + rax]; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000012b6f3: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000001461ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000154d8b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x00000000001543a3: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000015457b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 8]; 
0x0000000000154feb: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000155923: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x000000000015466b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x000000000015554b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000147e73: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000009329b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x000000000009323b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x0000000000101b5b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; or qword ptr [rax + 8], 0x2000; ret; 
0x000000000009c288: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x0000000000044a83: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x19f3e1]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000044913: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x19f551]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f2b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x19ff39]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043deb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1a0079]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000030ce8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x0000000000026eb8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x00000000000287f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1c17b1]; ret; 
0x000000000016066b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x837f9]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000015e7db: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x85689]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015af0b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x88f59]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015dec3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c0b9]; call qword ptr [rax + 0x10]; 
0x000000000015dc43: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x000000000015db4b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x000000000015186b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x92529]; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012c763: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xb7701]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001210ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc2da9]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011ea1b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc5449]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e273: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc5bf1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e243: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc5c21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120913: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc78f9]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011ada3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xc90c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011840b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xcba59]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011479b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf6c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011464b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010faeb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd4379]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cbb3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd72b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cb5b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7309]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c98b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd74d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c933: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7531]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c683: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd77e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c633: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7831]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7881]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001019c3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xe24a1]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000121c93: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000003545b: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000a70bb: nop dword ptr [rax + rax]; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000148c8b: nop dword ptr [rax + rax]; mov rax, qword ptr [rsp + 0x10]; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000014db48: nop dword ptr [rax + rax]; mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000012c38b: nop dword ptr [rax + rax]; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000018adfb: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000186488: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x0000000000092978: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x0000000000188fd8: nop dword ptr [rax + rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6abb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b54bb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000e14db: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0x102989]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e13db: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0x102a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e1343: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0x102b21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000063a53: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0x180411]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c74b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xb7719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa63: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4401]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9d3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4491]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f783: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc46e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f603: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4861]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f55b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc49b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f07b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efbb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4ea9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee5b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc5009]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edbb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc50a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011e07b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc5de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df03: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc5f61]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de63: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc6001]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011762b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc839]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011354b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd0919]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134ab: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd09b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112e3b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd1029]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112733: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd1731]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112323: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd1b41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011174b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd2719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d07b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd6de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010c973: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd74f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c91b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd7549]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b549b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a718b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000454db: nop dword ptr [rax + rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000001526d8: nop dword ptr [rax + rax]; mov rsi, r15; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000000a7008: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x0000000000188028: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a70d8: nop dword ptr [rax + rax]; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000014bcf3: nop dword ptr [rax + rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b64d8: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b64e8: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000154b53: nop dword ptr [rax + rax]; movsx rax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154a43: nop dword ptr [rax + rax]; movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000147e93: nop dword ptr [rax + rax]; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000154be3: nop dword ptr [rax + rax]; movzx eax, bpl; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000018fa5b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000018fa4b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000018fa3b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000018fa2b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000018fa1b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000018fa0b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018282b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000010b8cb: nop dword ptr [rax + rax]; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000154ad3: nop dword ptr [rax + rax]; movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000186b1b: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000187f3b: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000010cc13: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eae3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea23: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e803: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e473: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d733: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d793: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e593: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e893: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d763: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x0000000000101853: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x0000000000117683: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d703: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d29a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f103: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebd3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d883: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb13: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea53: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb23: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e173: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e1263: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5f3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2963: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e2993: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e29f3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a23: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a53: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbd3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e353: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e383: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017c3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017f3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x0000000000101823: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x0000000000101883: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x0000000000117713: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x0000000000117743: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x0000000000117773: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x0000000000114693: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146c3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x0000000000117583: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011da03: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e413: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db73: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b933: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b813: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e443: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e563: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5c3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000001560e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000176124: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b63f4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000011dd04: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441a4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8e4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8b4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f884: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b34: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e54: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x0000000000113244: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x0000000000091135: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000144fd4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 1; ret; 
0x0000000000152a44: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 2; ret; 
0x0000000000043f54: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000092944: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000b4da4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000008c2b4: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000aad15: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126e4: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000018e707: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6f7: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b6417: nop dword ptr [rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b6427: nop dword ptr [rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x000000000011e866: nop dword ptr [rax + rax]; nop; mov eax, 0x11f; syscall; 
0x000000000011e8f6: nop dword ptr [rax + rax]; nop; mov eax, 0x134; syscall; 
0x000000000011e986: nop dword ptr [rax + rax]; nop; mov eax, 0x13f; syscall; 
0x000000000010d0d6: nop dword ptr [rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000117657: nop dword ptr [rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000000e1507: nop dword ptr [rax + rax]; nop; mov eax, 0x25; syscall; 
0x000000000011f0d6: nop dword ptr [rax + rax]; nop; mov eax, 0x30; syscall; 
0x000000000011ead7: nop dword ptr [rax + rax]; nop; mov eax, 0x31; syscall; 
0x000000000011ec36: nop dword ptr [rax + rax]; nop; mov eax, 0x32; syscall; 
0x000000000011eba7: nop dword ptr [rax + rax]; nop; mov eax, 0x34; syscall; 
0x000000000011fa16: nop dword ptr [rax + rax]; nop; mov eax, 0x43; syscall; 
0x000000000010d857: nop dword ptr [rax + rax]; nop; mov eax, 0x50; syscall; 
0x000000000010cbe6: nop dword ptr [rax + rax]; nop; mov eax, 0x53; syscall; 
0x000000000010eab6: nop dword ptr [rax + rax]; nop; mov eax, 0x57; syscall; 
0x000000000010e9f6: nop dword ptr [rax + rax]; nop; mov eax, 0x58; syscall; 
0x000000000010e147: nop dword ptr [rax + rax]; nop; mov eax, 0x5c; syscall; 
0x000000000011e776: nop dword ptr [rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000000e2936: nop dword ptr [rax + rax]; nop; mov eax, 0x79; syscall; 
0x000000000011dba6: nop dword ptr [rax + rax]; nop; mov eax, 0x7a; syscall; 
0x000000000011ddb6: nop dword ptr [rax + rax]; nop; mov eax, 0x87; syscall; 
0x000000000010c9a6: nop dword ptr [rax + rax]; nop; mov eax, 0x89; syscall; 
0x00000000001176e6: nop dword ptr [rax + rax]; nop; mov eax, 0x95; syscall; 
0x0000000000114666: nop dword ptr [rax + rax]; nop; mov eax, 0x99; syscall; 
0x000000000011e326: nop dword ptr [rax + rax]; nop; mov eax, 0x9f; syscall; 
0x000000000011e4d6: nop dword ptr [rax + rax]; nop; mov eax, 0xb1; syscall; 
0x000000000011e686: nop dword ptr [rax + rax]; nop; mov eax, 0xb4; syscall; 
0x000000000011b8a6: nop dword ptr [rax + rax]; nop; mov eax, 0xc2; syscall; 
0x000000000011b906: nop dword ptr [rax + rax]; nop; mov eax, 0xc3; syscall; 
0x000000000011b7e6: nop dword ptr [rax + rax]; nop; mov eax, 0xc4; syscall; 
0x000000000011b996: nop dword ptr [rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000dc9b7: nop dword ptr [rax + rax]; nop; mov eax, 0xd9; syscall; 
0x000000000011e536: nop dword ptr [rax + rax]; nop; mov eax, 0xfe; syscall; 
0x0000000000092926: nop dword ptr [rax + rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000001477f6: nop dword ptr [rax + rax]; nop; mov eax, 2; ret; 
0x00000000001123e7: nop dword ptr [rax + rax]; nop; mov eax, 3; syscall; 
0x00000000000dc9e6: nop dword ptr [rax + rax]; nop; mov eax, dword ptr [rdi]; ret; 
0x00000000000ce4a7: nop dword ptr [rax + rax]; nop; mov rax, 1; ret; 
0x0000000000092966: nop dword ptr [rax + rax]; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000176136: nop dword ptr [rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b6406: nop dword ptr [rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x000000000009be87: nop dword ptr [rax + rax]; nop; ret; 
0x0000000000155ec7: nop dword ptr [rax + rax]; nop; xor eax, eax; ret; 
0x00000000000cdc96: nop dword ptr [rax + rax]; nop; xor rax, rax; ret; 
0x000000000004344b: nop dword ptr [rax + rax]; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000088dd8: nop dword ptr [rax + rax]; pop rbx; ret; 
0x00000000000e18bb: nop dword ptr [rax + rax]; pop rdi; mov eax, 0x3a; syscall; 
0x00000000000268eb: nop dword ptr [rax + rax]; ret; 
0x0000000000121d93: nop dword ptr [rax + rax]; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x0000000000091c33: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000087323: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000145d2b: nop dword ptr [rax + rax]; sub rsp, 8; call 0x113ce0; mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x000000000013fbfb: nop dword ptr [rax + rax]; sub rsp, 8; call 0x13f630; or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x0000000000029b7b: nop dword ptr [rax + rax]; sub rsp, 8; call 0x295c0; or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x00000000001562cb: nop dword ptr [rax + rax]; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x000000000009e78b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b915]; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e43b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bc45]; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2db: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bdc5]; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000012d16b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x730db]; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d22b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7319b]; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2eb: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7327b]; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x00000000000a0093: nop dword ptr [rax + rax]; test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret; 
0x000000000018219b: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001875a8: nop dword ptr [rax + rax]; vzeroupper; ret; 
0x00000000001825b8: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000fe73b: nop dword ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x0000000000092c3b: nop dword ptr [rax + rax]; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000012c39b: nop dword ptr [rax + rax]; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000e3723: nop dword ptr [rax + rax]; xor eax, eax; cmp rdx, 0x2f; setne al; ret; 
0x000000000014716b: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba5c3: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000047163: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000181ddb: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000012dfc8: nop dword ptr [rax + rax]; xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000026bc8: nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000008d6c8: nop dword ptr [rax + rax]; xor edi, edi; mov rax, rdi; ret; 
0x000000000008223b: nop dword ptr [rax + rax]; xor edx, edx; mov rax, rdx; ret; 
0x00000000000cda0b: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000155f9d: nop dword ptr [rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000454f4: nop dword ptr [rax]; add r15, r14; mov rdx, rbp; mov rsi, r15; mov rdi, r12; call rbx; 
0x00000000000ce47c: nop dword ptr [rax]; add rax, 1; ret; 
0x0000000000196db9: nop dword ptr [rax]; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000084aa5: nop dword ptr [rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000009d535: nop dword ptr [rax]; add rsp, 8; ret; 
0x00000000001478b4: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000004342d: nop dword ptr [rax]; addss xmm0, xmm0; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000ff52c: nop dword ptr [rax]; and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x000000000018c4fc: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000004327d: nop dword ptr [rax]; and edx, 0x80000000; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000aa7a9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x00000000000aa7c9: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aa79c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000018255d: nop dword ptr [rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018256d: nop dword ptr [rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000000aaded: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aac89: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000aac99: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000585dc: nop dword ptr [rax]; bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000047395: nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000000cca0c: nop dword ptr [rax]; cmp ecx, eax; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000009a211: nop dword ptr [rax]; lea rax, [rdx - 0x10]; ret; 
0x0000000000151d21: nop dword ptr [rax]; lea rax, [rip + 0x97c51]; pop rbx; ret; 
0x0000000000151c41: nop dword ptr [rax]; lea rax, [rip + 0x97d39]; pop rbx; ret; 
0x0000000000151b61: nop dword ptr [rax]; lea rax, [rip + 0x97e31]; pop rbx; ret; 
0x000000000017415d: nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000a6c15: nop dword ptr [rax]; mov byte ptr [rcx - 1], 0; mov qword ptr [rdx], rcx; ret; 
0x000000000017612c: nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000eaa69: nop dword ptr [rax]; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000a70cc: nop dword ptr [rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x00000000000b63fc: nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000018801c: nop dword ptr [rax]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000a6ffc: nop dword ptr [rax]; mov byte ptr [rdi], sil; add rax, rdi; ret; 
0x00000000000b60fc: nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000007eec1: nop dword ptr [rax]; mov dword ptr [rbp - 0x4d8], 1; mov r9, rsi; jmp rax; 
0x000000000007eee5: nop dword ptr [rax]; mov dword ptr [rbp - 0x530], 1; mov r9, rsi; jmp rax; 
0x000000000007edb9: nop dword ptr [rax]; mov dword ptr [rbp - 0x538], 1; mov r9, rsi; jmp rax; 
0x00000000000a7104: nop dword ptr [rax]; mov dword ptr [rdi], ecx; mov rax, rdi; ret; 
0x000000000018804d: nop dword ptr [rax]; mov dword ptr [rdi], edx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000a7034: nop dword ptr [rax]; mov dword ptr [rdi], r8d; add rax, rdi; ret; 
0x00000000000b7869: nop dword ptr [rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x000000000011dd0c: nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x000000000011433d: nop dword ptr [rax]; mov eax, 0x132; syscall; 
0x000000000009aa2c: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000010d6dd: nop dword ptr [rax]; mov eax, 0x20; syscall; 
0x00000000000441ac: nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x00000000000e1239: nop dword ptr [rax]; mov eax, 0x3f; syscall; 
0x00000000000e35e5: nop dword ptr [rax]; mov eax, 0x40; ret; 
0x000000000011f8ec: nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8bc: nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f859: nop dword ptr [rax]; mov eax, 0x44; syscall; 
0x000000000011f88c: nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b3c: nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x000000000010caec: nop dword ptr [rax]; mov eax, 0x5f; syscall; 
0x000000000010caec: nop dword ptr [rax]; mov eax, 0x5f; syscall; ret; 
0x0000000000112e5c: nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x00000000000e29c9: nop dword ptr [rax]; mov eax, 0x7c; syscall; 
0x00000000000ba6bd: nop dword ptr [rax]; mov eax, 0x80; pop rbx; ret; 
0x000000000011324c: nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x000000000011e17c: nop dword ptr [rax]; mov eax, 0x95; syscall; 
0x000000000011e28c: nop dword ptr [rax]; mov eax, 0x9e; syscall; 
0x000000000011428d: nop dword ptr [rax]; mov eax, 0xa2; syscall; 
0x0000000000113fbc: nop dword ptr [rax]; mov eax, 0xab; syscall; 
0x00000000001158ec: nop dword ptr [rax]; mov eax, 0xeb; syscall; 
0x0000000000160e5d: nop dword ptr [rax]; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000898b5: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000010b704: nop dword ptr [rax]; mov eax, 1; pop rbx; ret; 
0x000000000008c19c: nop dword ptr [rax]; mov eax, 1; ret; 
0x000000000013b095: nop dword ptr [rax]; mov eax, 2; ret; 
0x000000000010d0a9: nop dword ptr [rax]; mov eax, 8; syscall; 
0x0000000000086ddd: nop dword ptr [rax]; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001784cc: nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000010c1bc: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000155eb9: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x28]; ret; 
0x00000000000eca8d: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010b8fc: nop dword ptr [rax]; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008c1d9: nop dword ptr [rax]; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008d2f9: nop dword ptr [rax]; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000044dc9: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x19f3d6]; ret; 
0x0000000000154fa5: nop dword ptr [rax]; mov eax, dword ptr [rsi]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010c26d: nop dword ptr [rax]; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000042a8c: nop dword ptr [rax]; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000352bd: nop dword ptr [rax]; mov eax, edi; and eax, 0x7f; ret; 
0x000000000010198c: nop dword ptr [rax]; mov ecx, 0xcb; mov eax, ecx; syscall; 
0x000000000012c70c: nop dword ptr [rax]; mov ecx, 0xe4; mov rsi, rbp; mov edi, ebx; mov eax, ecx; syscall; 
0x00000000000b548d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000008537d: nop dword ptr [rax]; mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000055d05: nop dword ptr [rax]; mov edx, 0xffffffff; mov eax, edx; ret; 
0x000000000016b06c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165cac: nop dword ptr [rax]; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000165eac: nop dword ptr [rax]; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001660ac: nop dword ptr [rax]; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001885cd: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b789c: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b612d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000b94cd: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x000000000010d35d: nop dword ptr [rax]; mov edx, r12d; mov eax, 0x10d; syscall; 
0x00000000001221bd: nop dword ptr [rax]; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000063a3c: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x108; syscall; 
0x000000000011dd89: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x12e; syscall; 
0x000000000011f0a9: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000000e142c: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x3d; syscall; 
0x000000000004416c: nop dword ptr [rax]; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000011dccd: nop dword ptr [rax]; mov r10d, edx; mov eax, 0x121; mov edx, 8; syscall; 
0x000000000013b7e1: nop dword ptr [rax]; mov rax, -1; mov rdx, rax; ret; 
0x0000000000043f5c: nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x00000000000472b1: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ba5d: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x1a0]; ret; 
0x000000000011ba51: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000014d4a5: nop dword ptr [rax]; mov rax, qword ptr [rbp + 8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000145791: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000017841d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x00000000001740ed: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000155b2c: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000092f8d: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000154375: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x0000000000154d5d: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x0000000000155895: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 0x40]; 
0x0000000000154e89: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000154b35: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000011fabc: nop dword ptr [rax]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000932ac: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x15102d], rax; ret; 
0x000000000009324c: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x15103d], rax; ret; 
0x000000000014bdf4: nop dword ptr [rax]; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x00000000000dc0dc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x10e279]; lea rdi, [rip + 0x10a632]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009294c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x000000000008c799: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1576c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000083f7d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x15fee9]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000485f5: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x19b871]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048555: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x19b911]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044b35: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x19f331]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044955: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x19f511]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044155: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x19fd11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000354ac: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1aea31]; add rax, qword ptr fs:[0]; ret; 
0x00000000000354cc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1aea51]; add rax, qword ptr fs:[0]; ret; 
0x00000000000287e9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1c17d1]; ret; 
0x0000000000160eac: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x82fb9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015d96d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x864e9]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000012ec15: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xb5251]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120811: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xc79f9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000011476d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xcf6f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000113335: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd0b31]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001116b1: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd27b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011157c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd28e9]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x000000000010cbcc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd7299]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x0000000000047c6d: nop dword ptr [rax]; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000000b4dac: nop dword ptr [rax]; mov rax, rdi; ret; 
0x0000000000094bec: nop dword ptr [rax]; mov rax, rdx; ret; 
0x00000000000b618d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b54dd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b54ed: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a6c25: nop dword ptr [rax]; mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000009c529: nop dword ptr [rax]; mov rdi, qword ptr [rbx + 0x48]; call rax; 
0x00000000000f0655: nop dword ptr [rax]; mov rdi, qword ptr [rsi + 0x28]; call 0x25318; xor eax, eax; pop rbx; ret; 
0x00000000000e15fc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x102869]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b4c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x19b319]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000441f5: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x19fc71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011ef1c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xc4f49]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ecfc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xc5169]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011dfb4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xc5eb1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011dca4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xc61c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115ae5: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xce381]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011438c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcfad9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114264: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcfc01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011322c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd0c39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001126fd: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd1769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011220c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd1c59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d82c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd6639]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6b4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd67b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010cb9d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd72c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c61c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7849]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010b424: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8a41]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010b374: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8af1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000016ad6c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016abdc: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab4c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016533c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016adec: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016b5c9: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000008c5ed: nop dword ptr [rax]; mov rdx, r9; mov rsi, rbx; mov edi, dword ptr [rbp - 0x84]; mov eax, r10d; syscall; 
0x000000000011250d: nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000000a71a9: nop dword ptr [rax]; mov word ptr [rdi], si; lea rax, [rdi + rax - 1]; ret; 
0x000000000014f2b5: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x00000000000b553c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b555c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b55dc: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b559d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b55bc: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b6b9d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b5529: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000014f2c4: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014bd04: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014705d: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000155a65: nop dword ptr [rax]; movsx eax, byte ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000181339: nop dword ptr [rax]; movsxd rax, ecx; ret; 
0x0000000000101bfd: nop dword ptr [rax]; movzx eax, byte ptr [rdi + 9]; and eax, 0xf; ret; 
0x000000000018f9fd: nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000000aaecd: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000155af5: nop dword ptr [rax]; movzx eax, byte ptr [rsi]; lea rsi, [rsp + 4]; mov dword ptr [rsp + 4], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000ba649: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x00000000000a89ed: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016b1fc: nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016b8d9: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016b17c: nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000188c7d: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000018739d: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016b869: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000186b09: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000009352c: nop dword ptr [rax]; nop; mov dword ptr [rip + 0x150d79], 1; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x000000000008250d: nop dword ptr [rax]; or dword ptr [rdi], 0x20; ret; 
0x0000000000091ac4: nop dword ptr [rax]; pop rbx; ret; 
0x0000000000115bdd: nop dword ptr [rax]; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000032b11: nop dword ptr [rax]; ret; 
0x000000000008a3e5: nop dword ptr [rax]; shr eax, 4; and eax, 1; mov edx, eax; mov eax, edx; ret; 
0x000000000008a4d5: nop dword ptr [rax]; shr eax, 5; and eax, 1; mov edx, eax; mov eax, edx; ret; 
0x000000000016068c: nop dword ptr [rax]; sub rsp, 0x10; push 2; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000e15cd: nop dword ptr [rax]; sub rsp, 0x18; call 0x12bdd0; mov edi, eax; mov eax, 0x22; syscall; 
0x000000000011653d: nop dword ptr [rax]; sub rsp, 8; call 0x116220; mov qword ptr [rip + 0xd19e0], rax; add rsp, 8; ret; 
0x000000000004860c: nop dword ptr [rax]; sub rsp, 8; call 0x480d0; add rsp, 8; ret; 
0x000000000014012c: nop dword ptr [rax]; sub rsp, 8; call 0xe26e0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000185e5d: nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018806c: nop dword ptr [rax]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x00000000000ceaa5: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000008763d: nop dword ptr [rax]; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x0000000000111adc: nop dword ptr [rax]; xor eax, eax; pop rbx; ret; 
0x00000000000932bc: nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126ec: nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000008c1c9: nop dword ptr [rax]; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x000000000018607d: nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000000ce9b5: nop dword ptr [rax]; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x0000000000084f29: nop dword ptr [rax]; xor edi, edi; mov rax, rdi; ret; 
0x0000000000084e6d: nop dword ptr [rax]; xor edx, edx; mov rax, rdx; ret; 
0x000000000012df29: nop dword ptr [rax]; xor esi, esi; mov rax, rsi; ret; 
0x000000000011fa4c: nop dword ptr [rax]; xor r10d, r10d; mov eax, 0x1d; syscall; 
0x0000000000063ba7: nop dword ptr cs:[rax + rax]; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000ce487: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000018e787: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000018e797: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000018e7a7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000018e7b7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000018e7c7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000018e717: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000018e727: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000018e737: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000018e747: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000018e757: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000018e767: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000018e777: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cdf77: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cdf97: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cdf87: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 8]; ret; 
0x0000000000026c57: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x00000000000eaa97: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b6a27: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b5427: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000176177: nop dword ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000000a71d7: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b6447: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6107: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000063b97: nop dword ptr cs:[rax + rax]; mov eax, 0x10; ret; 
0x0000000000113407: nop dword ptr cs:[rax + rax]; mov eax, 0x10; syscall; 
0x000000000012c417: nop dword ptr cs:[rax + rax]; mov eax, 0x18; syscall; 
0x000000000012c417: nop dword ptr cs:[rax + rax]; mov eax, 0x18; syscall; ret; 
0x00000000000e3567: nop dword ptr cs:[rax + rax]; mov eax, 0x7e; ret; 
0x0000000000113207: nop dword ptr cs:[rax + rax]; mov eax, 0x8c; syscall; 
0x0000000000113e67: nop dword ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x000000000012c687: nop dword ptr cs:[rax + rax]; mov eax, 0xe5; syscall; 
0x00000000000e3577: nop dword ptr cs:[rax + rax]; mov eax, 0xfffa; ret; 
0x0000000000087497: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009c4f7: nop dword ptr cs:[rax + rax]; mov eax, 1; ret; 
0x0000000000147807: nop dword ptr cs:[rax + rax]; mov eax, 2; ret; 
0x000000000008c1a7: nop dword ptr cs:[rax + rax]; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000124227: nop dword ptr cs:[rax + rax]; mov eax, edx; ret; 
0x00000000000e1907: nop dword ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000176197: nop dword ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b6467: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x0000000000092907: nop dword ptr cs:[rax + rax]; mov rax, -1; ret; 
0x000000000014db47: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000092977: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000188027: nop dword ptr cs:[rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b64e7: nop dword ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000010cc12: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eae2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea22: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e802: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e472: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d732: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d792: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e592: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e892: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d762: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x0000000000101852: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x0000000000117682: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d702: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d29a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f102: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebd2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d882: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb12: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea52: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb22: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e172: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e1262: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5f2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2962: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e2992: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e29f2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a22: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a52: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbd2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e352: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e382: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017c2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017f2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x0000000000101822: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x0000000000101882: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x0000000000117712: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x0000000000117742: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x0000000000117772: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x0000000000114692: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146c2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x0000000000117582: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011da02: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e412: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db72: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b932: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b812: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e442: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e562: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5c2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000001560e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000176123: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b63f3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000011dd03: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441a3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8e3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8b3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f883: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b33: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e53: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x0000000000113243: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x0000000000091134: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000144fd3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 1; ret; 
0x0000000000152a43: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 2; ret; 
0x0000000000043f53: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000092943: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000b4da3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000008c2b3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000aad14: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126e3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000018e706: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6f6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b6416: nop dword ptr cs:[rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b6426: nop dword ptr cs:[rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x000000000011e865: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x11f; syscall; 
0x000000000011e8f5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x134; syscall; 
0x000000000011e985: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x13f; syscall; 
0x000000000010d0d5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000117656: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000000e1506: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x25; syscall; 
0x000000000011f0d5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x30; syscall; 
0x000000000011ead6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x31; syscall; 
0x000000000011ec35: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x32; syscall; 
0x000000000011eba6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x34; syscall; 
0x000000000011fa15: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x43; syscall; 
0x000000000010d856: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x50; syscall; 
0x000000000010cbe5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x53; syscall; 
0x000000000010eab5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x57; syscall; 
0x000000000010e9f5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x58; syscall; 
0x000000000010e146: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x5c; syscall; 
0x000000000011e775: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000000e2935: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x79; syscall; 
0x000000000011dba5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x7a; syscall; 
0x000000000011ddb5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x87; syscall; 
0x000000000010c9a5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x89; syscall; 
0x00000000001176e5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x95; syscall; 
0x0000000000114665: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x99; syscall; 
0x000000000011e325: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x9f; syscall; 
0x000000000011e4d5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xb1; syscall; 
0x000000000011e685: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xb4; syscall; 
0x000000000011b8a5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc2; syscall; 
0x000000000011b905: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc3; syscall; 
0x000000000011b7e5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc4; syscall; 
0x000000000011b995: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000dc9b6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xd9; syscall; 
0x000000000011e535: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xfe; syscall; 
0x0000000000092925: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000001477f5: nop dword ptr cs:[rax + rax]; nop; mov eax, 2; ret; 
0x00000000001123e6: nop dword ptr cs:[rax + rax]; nop; mov eax, 3; syscall; 
0x00000000000dc9e5: nop dword ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi]; ret; 
0x00000000000ce4a6: nop dword ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000092965: nop dword ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000176135: nop dword ptr cs:[rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b6405: nop dword ptr cs:[rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x000000000009be86: nop dword ptr cs:[rax + rax]; nop; ret; 
0x0000000000155ec6: nop dword ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x00000000000cdc95: nop dword ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000088dd7: nop dword ptr cs:[rax + rax]; pop rbx; ret; 
0x000000000008a2f7: nop dword ptr cs:[rax + rax]; ret; 
0x00000000001825b7: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x000000000013b877: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x000000000008d6c7: nop dword ptr cs:[rax + rax]; xor edi, edi; mov rax, rdi; ret; 
0x00000000000cdfa7: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000155eaa: nop word ptr [rax + rax]; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x0000000000144752: nop word ptr [rax + rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000014786a: nop word ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000043247: nop word ptr [rax + rax]; and edx, 0x80000000; mov dword ptr [rdi], edx; ret; 
0x0000000000034df2: nop word ptr [rax + rax]; and esi, dword ptr [rdi + 0x10]; lea rax, [rdi + rsi*4]; mov eax, dword ptr [rax + rdx]; ret; 
0x0000000000042dba: nop word ptr [rax + rax]; andpd xmm0, xmmword ptr [rip + 0x174fc8]; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x00000000000aa7b7: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000018254a: nop word ptr [rax + rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000aac77: nop word ptr [rax + rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000093e8a: nop word ptr [rax + rax]; call rax; 
0x0000000000098fba: nop word ptr [rax + rax]; jmp rax; 
0x00000000000b71ca: nop word ptr [rax + rax]; lea r11, [rip + 0xf3b09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b1a: nop word ptr [rax + rax]; lea r11, [rip + 0xf4fd9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000339c2: nop word ptr [rax + rax]; lea rax, [rip + 0x17bf7d]; ret; 
0x00000000000eaaaa: nop word ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x0000000000115cfa: nop word ptr [rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; mov byte ptr [rip + 0xd2204], cl; mov byte ptr [r8 - 1], 0; ret; 
0x000000000007ef22: nop word ptr [rax + rax]; mov dword ptr [rbp - 0x528], 1; mov r9, rsi; jmp rax; 
0x0000000000176187: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x0000000000176157: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x00000000001470a7: nop word ptr [rax + rax]; mov dword ptr [rsi], 0xa; ret; 
0x00000000001470c7: nop word ptr [rax + rax]; mov dword ptr [rsi], 0xc; ret; 
0x00000000001470b7: nop word ptr [rax + rax]; mov dword ptr [rsi], 8; ret; 
0x00000000000b949a: nop word ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000ba6d7: nop word ptr [rax + rax]; mov eax, 0x10; pop rbx; ret; 
0x000000000009aa6a: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000011f9ea: nop word ptr [rax + rax]; mov eax, 0x1e; syscall; 
0x000000000011fa7a: nop word ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ba6f7: nop word ptr [rax + rax]; mov eax, 0x20; pop rbx; ret; 
0x00000000000d297a: nop word ptr [rax + rax]; mov eax, 0x24; syscall; 
0x00000000000ba6e7: nop word ptr [rax + rax]; mov eax, 0x30; pop rbx; ret; 
0x00000000000ba717: nop word ptr [rax + rax]; mov eax, 0x40; pop rbx; ret; 
0x000000000010d50a: nop word ptr [rax + rax]; mov eax, 0x49; syscall; 
0x0000000000063a07: nop word ptr [rax + rax]; mov eax, 0x52; syscall; 
0x00000000000ba707: nop word ptr [rax + rax]; mov eax, 0x60; pop rbx; ret; 
0x000000000013b867: nop word ptr [rax + rax]; mov eax, 0x7fffffff; ret; 
0x0000000000044757: nop word ptr [rax + rax]; mov eax, 0x83; syscall; 
0x000000000011db47: nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x00000000000e355a: nop word ptr [rax + rax]; mov eax, 0xfc17; ret; 
0x000000000013b1d7: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000011274a: nop word ptr [rax + rax]; mov eax, 1; syscall; 
0x000000000014c7ea: nop word ptr [rax + rax]; mov eax, 2; ret; 
0x00000000000ba6c7: nop word ptr [rax + rax]; mov eax, 8; pop rbx; ret; 
0x0000000000154e42: nop word ptr [rax + rax]; mov eax, dword ptr [rdx]; lea rsi, [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000044dd7: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x19f3c2]; ret; 
0x0000000000154532: nop word ptr [rax + rax]; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121b12: nop word ptr [rax + rax]; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000834e2: nop word ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000011fd92: nop word ptr [rax + rax]; mov edx, 0x40; mov rsi, r8; mov edi, ebx; mov eax, 0x14; syscall; 
0x00000000000b545a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000001761d7: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001761e7: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x00000000001761b7: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000000b6457: nop word ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b64a7: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b64b7: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b6487: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000115c92: nop word ptr [rax + rax]; mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x000000000007eed7: nop word ptr [rax + rax]; mov r9, rsi; jmp rax; 
0x00000000000928e7: nop word ptr [rax + rax]; mov rax, -1; ret; 
0x000000000012b6f2: nop word ptr [rax + rax]; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000001461aa: nop word ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000155922: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 4]; call qword ptr [rax + 0x40]; 
0x000000000015466a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax]; 
0x0000000000147e72: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000009329a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x000000000009323a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x000000000009c287: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1a7: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x0000000000030ce7: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x0000000000026eb7: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x000000000016066a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x837f9]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x000000000015e7da: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x85689]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000012c762: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xb7701]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e242: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xc5c21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011ada2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xc90c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011840a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xcba59]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011464a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf819]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010faea: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd4379]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010cbb2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd72b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c98a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd74d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c932: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7531]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c8d2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c682: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd77e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c632: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7831]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010c5e2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd7881]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001019c2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xe24a1]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000a70ba: nop word ptr [rax + rax]; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000012c38a: nop word ptr [rax + rax]; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000186487: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x00000000000b66ca: nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x0000000000188fd7: nop word ptr [rax + rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000000b54ba: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000e1342: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0x102b21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012c74a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xb7719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f782: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc46e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f602: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4861]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f55a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4909]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f4b2: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc49b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f07a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011efba: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc4ea9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011ee5a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc5009]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011edba: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc50a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011e07a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc5de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011df02: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc5f61]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011de62: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xc6001]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011762a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc839]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011354a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd0919]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001134aa: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd09b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000112e3a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd1029]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112322: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd1b41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011174a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd2719]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d07a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd6de9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010c972: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd74f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c91a: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd7549]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a7007: nop word ptr [rax + rax]; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x00000000000a70d7: nop word ptr [rax + rax]; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000014bcf2: nop word ptr [rax + rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000147e92: nop word ptr [rax + rax]; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010b8ca: nop word ptr [rax + rax]; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000186b1a: nop word ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000187f3a: nop word ptr [rax + rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x0000000000145d0a: nop word ptr [rax + rax]; pop rbx; ret; 
0x00000000000e18ba: nop word ptr [rax + rax]; pop rdi; mov eax, 0x3a; syscall; 
0x00000000000268ea: nop word ptr [rax + rax]; ret; 
0x0000000000091c32: nop word ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000087322: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000000a0092: nop word ptr [rax + rax]; test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret; 
0x00000000001875a7: nop word ptr [rax + rax]; vzeroupper; ret; 
0x00000000000fe73a: nop word ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x0000000000092c3a: nop word ptr [rax + rax]; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000012c39a: nop word ptr [rax + rax]; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x000000000014716a: nop word ptr [rax + rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ba5c2: nop word ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000047162: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000181dda: nop word ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000012dfc7: nop word ptr [rax + rax]; xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000026bc7: nop word ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000008223a: nop word ptr [rax + rax]; xor edx, edx; mov rax, rdx; ret; 
0x00000000000cda0a: nop word ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000063ba6: nop word ptr cs:[rax + rax]; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000ce486: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000018e786: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000018e796: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000018e7a6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000018e7b6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000018e7c6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000018e716: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000018e726: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000018e736: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000018e746: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000018e756: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000018e766: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000018e776: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cdf76: nop word ptr cs:[rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cdf96: nop word ptr cs:[rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cdf86: nop word ptr cs:[rax + rax]; lea rax, [rdi - 8]; ret; 
0x0000000000026c56: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x188824]; ret; 
0x00000000000eaa96: nop word ptr cs:[rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b6a26: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b5426: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000176176: nop word ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000000a71d6: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b6446: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6106: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000063b96: nop word ptr cs:[rax + rax]; mov eax, 0x10; ret; 
0x0000000000113406: nop word ptr cs:[rax + rax]; mov eax, 0x10; syscall; 
0x000000000012c416: nop word ptr cs:[rax + rax]; mov eax, 0x18; syscall; 
0x000000000012c416: nop word ptr cs:[rax + rax]; mov eax, 0x18; syscall; ret; 
0x00000000000e3566: nop word ptr cs:[rax + rax]; mov eax, 0x7e; ret; 
0x0000000000113206: nop word ptr cs:[rax + rax]; mov eax, 0x8c; syscall; 
0x0000000000113e66: nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x000000000012c686: nop word ptr cs:[rax + rax]; mov eax, 0xe5; syscall; 
0x00000000000e3576: nop word ptr cs:[rax + rax]; mov eax, 0xfffa; ret; 
0x0000000000087496: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009c4f6: nop word ptr cs:[rax + rax]; mov eax, 1; ret; 
0x0000000000147806: nop word ptr cs:[rax + rax]; mov eax, 2; ret; 
0x000000000008c1a6: nop word ptr cs:[rax + rax]; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000124226: nop word ptr cs:[rax + rax]; mov eax, edx; ret; 
0x00000000000e1906: nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000176196: nop word ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b6466: nop word ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x0000000000092906: nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x000000000014db46: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000092976: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000188026: nop word ptr cs:[rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b64e6: nop word ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000010cc11: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eae1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea21: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e801: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e471: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d731: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d791: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e591: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e891: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d761: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x0000000000101851: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x0000000000117681: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d701: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d29a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f101: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebd1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d881: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb11: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea51: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb21: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e171: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e1261: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5f1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2961: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e2991: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e29f1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a21: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a51: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbd1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e351: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e381: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017c1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017f1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x0000000000101821: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x0000000000101881: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x0000000000117711: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x0000000000117741: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x0000000000117771: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x0000000000114691: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146c1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x0000000000117581: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011da01: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e411: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db71: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b931: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b811: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e441: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e561: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5c1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000001560e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000176122: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b63f2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000011dd02: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441a2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8e2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8b2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f882: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b32: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e52: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x0000000000113242: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x0000000000091133: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000144fd2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 1; ret; 
0x0000000000152a42: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 2; ret; 
0x0000000000043f52: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000092942: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000b4da2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000008c2b2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000aad13: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126e2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000018e705: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6f5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b6415: nop word ptr cs:[rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b6425: nop word ptr cs:[rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x000000000011e864: nop word ptr cs:[rax + rax]; nop; mov eax, 0x11f; syscall; 
0x000000000011e8f4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x134; syscall; 
0x000000000011e984: nop word ptr cs:[rax + rax]; nop; mov eax, 0x13f; syscall; 
0x000000000010d0d4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x15; syscall; 
0x0000000000117655: nop word ptr cs:[rax + rax]; nop; mov eax, 0x1c; syscall; 
0x00000000000e1505: nop word ptr cs:[rax + rax]; nop; mov eax, 0x25; syscall; 
0x000000000011f0d4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x30; syscall; 
0x000000000011ead5: nop word ptr cs:[rax + rax]; nop; mov eax, 0x31; syscall; 
0x000000000011ec34: nop word ptr cs:[rax + rax]; nop; mov eax, 0x32; syscall; 
0x000000000011eba5: nop word ptr cs:[rax + rax]; nop; mov eax, 0x34; syscall; 
0x000000000011fa14: nop word ptr cs:[rax + rax]; nop; mov eax, 0x43; syscall; 
0x000000000010d855: nop word ptr cs:[rax + rax]; nop; mov eax, 0x50; syscall; 
0x000000000010cbe4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x53; syscall; 
0x000000000010eab4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x57; syscall; 
0x000000000010e9f4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x58; syscall; 
0x000000000010e145: nop word ptr cs:[rax + rax]; nop; mov eax, 0x5c; syscall; 
0x000000000011e774: nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000000e2934: nop word ptr cs:[rax + rax]; nop; mov eax, 0x79; syscall; 
0x000000000011dba4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x7a; syscall; 
0x000000000011ddb4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x87; syscall; 
0x000000000010c9a4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x89; syscall; 
0x00000000001176e4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x95; syscall; 
0x0000000000114664: nop word ptr cs:[rax + rax]; nop; mov eax, 0x99; syscall; 
0x000000000011e324: nop word ptr cs:[rax + rax]; nop; mov eax, 0x9f; syscall; 
0x000000000011e4d4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xb1; syscall; 
0x000000000011e684: nop word ptr cs:[rax + rax]; nop; mov eax, 0xb4; syscall; 
0x000000000011b8a4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc2; syscall; 
0x000000000011b904: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc3; syscall; 
0x000000000011b7e4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc4; syscall; 
0x000000000011b994: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000dc9b5: nop word ptr cs:[rax + rax]; nop; mov eax, 0xd9; syscall; 
0x000000000011e534: nop word ptr cs:[rax + rax]; nop; mov eax, 0xfe; syscall; 
0x0000000000092924: nop word ptr cs:[rax + rax]; nop; mov eax, 0xffffffff; ret; 
0x00000000001477f4: nop word ptr cs:[rax + rax]; nop; mov eax, 2; ret; 
0x00000000001123e5: nop word ptr cs:[rax + rax]; nop; mov eax, 3; syscall; 
0x00000000000dc9e4: nop word ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi]; ret; 
0x00000000000ce4a5: nop word ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000092964: nop word ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000176134: nop word ptr cs:[rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b6404: nop word ptr cs:[rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x000000000009be85: nop word ptr cs:[rax + rax]; nop; ret; 
0x0000000000155ec5: nop word ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x00000000000cdc94: nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000088dd6: nop word ptr cs:[rax + rax]; pop rbx; ret; 
0x000000000008a2f6: nop word ptr cs:[rax + rax]; ret; 
0x00000000001825b6: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x000000000013b876: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x000000000008d6c6: nop word ptr cs:[rax + rax]; xor edi, edi; mov rax, rdi; ret; 
0x00000000000cdfa6: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000000ba424: nop; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000001087b4: nop; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000a5aac: nop; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d41; 
0x000000000016a937: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000089a54: nop; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089b56: nop; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x000000000004430f: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000f3cdc: nop; add byte ptr [rax], al; add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x000000000014f366: nop; add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000010bac4: nop; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xa0], eax; syscall; 
0x000000000018b20c: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004886c: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1a18af; add rsp, 8; ret; 
0x000000000012dc1c: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000cfc6a: nop; add dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x000000000012d1f2: nop; add eax, dword ptr [rax]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x0000000000077db3: nop; add rax, r14; jmp rax; 
0x00000000000a7185: nop; add rdx, r8; jmp rdx; 
0x00000000000a70b4: nop; add rdx, rax; jmp rdx; 
0x0000000000027bef: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000efed8: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000b8fdf: nop; bsf rdx, rdx; lea r11, [rip + 0xf1ec9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b865f: nop; bsf rdx, rdx; lea r11, [rip + 0xf27c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69af: nop; bsf rdx, rdx; lea r11, [rip + 0xf4299]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53af: nop; bsf rdx, rdx; lea r11, [rip + 0xf56c5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000aac6f: nop; bsr eax, eax; add rax, rdi; ret; 
0x000000000002835f: nop; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000015e22f: nop; call rax; 
0x000000000002836b: nop; call rcx; 
0x0000000000043c7f: nop; jmp rdx; 
0x000000000013a46f: nop; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x0000000000044e1f: nop; lea eax, [rdx - 1]; mov dword ptr [rip + 0x19f37f], eax; mov eax, edx; ret; 
0x000000000018e70f: nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6ff: nop; lea rax, [rdi]; ret; 
0x0000000000151a8f: nop; lea rax, [rip + 0x97f29]; pop rbx; ret; 
0x000000000007ad3d: nop; lea rdx, [rip - 0x441]; add rax, rdx; jmp rax; 
0x000000000011247f: nop; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000017848f: nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x0000000000063b35: nop; mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x00000000000eaa2f: nop; mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000a719f: nop; mov byte ptr [rdi], 0; lea rax, [rdi + rax - 1]; ret; 
0x000000000016550f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000b785f: nop; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x000000000014bd9f: nop; mov dword ptr [r8 + 4], 0; mov eax, 1; ret; 
0x000000000012c67f: nop; mov dword ptr [r8], edx; xor eax, eax; ret; 
0x0000000000044e7f: nop; mov dword ptr [rbp + 8], 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007edcf: nop; mov dword ptr [rbp - 0x510], 1; mov r9, rsi; jmp rax; 
0x000000000007ee9f: nop; mov dword ptr [rbp - 0x518], 1; mov r9, rsi; jmp rax; 
0x000000000017616f: nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b641f: nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b643f: nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b642f: nop; mov dword ptr [rdi], edx; ret; 
0x0000000000093553: nop; mov dword ptr [rip + 0x150d56], 1; mov dword ptr [rip + 0x150d48], eax; ret; 
0x0000000000093530: nop; mov dword ptr [rip + 0x150d79], 1; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x0000000000093503: nop; mov dword ptr [rip + 0x150da6], 1; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934e3: nop; mov dword ptr [rip + 0x150dc6], 1; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x0000000000093573: nop; mov dword ptr [rip + 0x154072], eax; ret; 
0x00000000001656ef: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001658cf: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b543f: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000011e86f: nop; mov eax, 0x11f; syscall; 
0x000000000011e8ff: nop; mov eax, 0x134; syscall; 
0x000000000011e98f: nop; mov eax, 0x13f; syscall; 
0x000000000010d0df: nop; mov eax, 0x15; syscall; 
0x000000000011765f: nop; mov eax, 0x1c; syscall; 
0x00000000000e150f: nop; mov eax, 0x25; syscall; 
0x000000000011f0df: nop; mov eax, 0x30; syscall; 
0x000000000011eadf: nop; mov eax, 0x31; syscall; 
0x000000000011ec3f: nop; mov eax, 0x32; syscall; 
0x000000000011ebaf: nop; mov eax, 0x34; syscall; 
0x000000000011fa1f: nop; mov eax, 0x43; syscall; 
0x000000000010d85f: nop; mov eax, 0x50; syscall; 
0x000000000010cbef: nop; mov eax, 0x53; syscall; 
0x000000000010e99f: nop; mov eax, 0x56; syscall; 
0x000000000010eabf: nop; mov eax, 0x57; syscall; 
0x000000000010e9ff: nop; mov eax, 0x58; syscall; 
0x000000000010e14f: nop; mov eax, 0x5c; syscall; 
0x000000000011e77f: nop; mov eax, 0x63; syscall; 
0x00000000000e293f: nop; mov eax, 0x79; syscall; 
0x000000000011dbaf: nop; mov eax, 0x7a; syscall; 
0x000000000011ddbf: nop; mov eax, 0x87; syscall; 
0x000000000010c9af: nop; mov eax, 0x89; syscall; 
0x00000000001176ef: nop; mov eax, 0x95; syscall; 
0x000000000011466f: nop; mov eax, 0x99; syscall; 
0x000000000011e32f: nop; mov eax, 0x9f; syscall; 
0x00000000001141af: nop; mov eax, 0xa3; syscall; 
0x000000000011e4df: nop; mov eax, 0xb1; syscall; 
0x000000000011e68f: nop; mov eax, 0xb4; syscall; 
0x000000000011b8af: nop; mov eax, 0xc2; syscall; 
0x000000000011b90f: nop; mov eax, 0xc3; syscall; 
0x000000000011b7ef: nop; mov eax, 0xc4; syscall; 
0x000000000011b99f: nop; mov eax, 0xc5; syscall; 
0x00000000001132ef: nop; mov eax, 0xc; syscall; 
0x000000000012bd94: nop; mov eax, 0xca; syscall; 
0x00000000000dc9bf: nop; mov eax, 0xd9; syscall; 
0x000000000011e53f: nop; mov eax, 0xfe; syscall; 
0x00000000001132cf: nop; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000639ff: nop; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000879bf: nop; mov eax, 0xffffffff; ret; 
0x00000000000ff2bf: nop; mov eax, 2; ret; 
0x00000000001123ef: nop; mov eax, 3; syscall; 
0x000000000014bd7f: nop; mov eax, dword ptr [r8]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009268f: nop; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000014704f: nop; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000ecaaf: nop; mov eax, dword ptr [rdi + 0x4c]; ret; 
0x000000000011277f: nop; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000dc9ef: nop; mov eax, dword ptr [rdi]; ret; 
0x000000000008d2ef: nop; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000012f2ff: nop; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000012f2cf: nop; mov eax, edi; rol ax, 8; ret; 
0x000000000016062f: nop; mov ecx, 0xcb; mov rdx, rsi; mov esi, 0x80; mov eax, ecx; syscall; 
0x000000000013957f: nop; mov edi, dword ptr [rdi]; mov eax, 3; syscall; 
0x000000000013957f: nop; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000009e47f: nop; mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x0000000000165aaf: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b6a5f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000186b2f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000001218ef: nop; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000087487: nop; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087452: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000001761af: nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b647f: nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000932b3: nop; mov qword ptr [rip + 0x15102d], rax; ret; 
0x00000000000932a3: nop; mov qword ptr [rip + 0x151035], rax; ret; 
0x0000000000093253: nop; mov qword ptr [rip + 0x15103d], rax; ret; 
0x0000000000093243: nop; mov qword ptr [rip + 0x151055], rax; ret; 
0x000000000013df9f: nop; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x000000000011e95f: nop; mov r10, rcx; mov eax, 0x137; syscall; 
0x000000000011e65f: nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000111d4f: nop; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000011e71f: nop; mov r10, rcx; mov eax, 0xb2; syscall; 
0x000000000011e74f: nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x000000000015a8ef: nop; mov r10, rcx; mov eax, 0xb5; syscall; 
0x000000000015a93f: nop; mov r10, rcx; mov eax, 0xb6; syscall; 
0x000000000011b87f: nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x000000000011b7bf: nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x000000000011186f: nop; mov r10d, ecx; mov eax, 0xdd; syscall; 
0x0000000000091adf: nop; mov rax, -1; ret; 
0x00000000000ce4af: nop; mov rax, 1; ret; 
0x000000000014d53f: nop; mov rax, qword ptr [rbp + 8]; lea rsi, [r12 + 0x18]; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x00000000000dc9af: nop; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008c27f: nop; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008c16f: nop; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000898cf: nop; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000009296f: nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000015589f: nop; mov rax, qword ptr [rdi + 8]; jmp qword ptr [rax + 0x48]; 
0x0000000000147eff: nop; mov rax, qword ptr [rdi + 8]; lea r12, [rsp + 0x10]; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000009a1ff: nop; mov rax, qword ptr [rdi + rax - 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000009354f: nop; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150d56], 1; mov dword ptr [rip + 0x150d48], eax; ret; 
0x00000000000934df: nop; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x150dc6], 1; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x000000000014e9af: nop; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014bcdf: nop; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x00000000000dbfef: nop; mov rax, qword ptr [rip + 0x10e369]; lea rdi, [rip + 0x10a722]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ceaaf: nop; mov rax, qword ptr [rip + 0x1153b9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000cea8f: nop; mov rax, qword ptr [rip + 0x1153d9]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000449af: nop; mov rax, qword ptr [rip + 0x19f4b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000004498f: nop; mov rax, qword ptr [rip + 0x19f4d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004215f: nop; mov rax, qword ptr [rip + 0x1a1d09]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000420ff: nop; mov rax, qword ptr [rip + 0x1a1d69]; mov dword ptr fs:[rax], 0x2a; mov rax, rcx; ret; 
0x000000000015e85f: nop; mov rax, qword ptr [rip + 0x85609]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015a98f: nop; mov rax, qword ptr [rip + 0x894d9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a96f: nop; mov rax, qword ptr [rip + 0x894f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015a91f: nop; mov rax, qword ptr [rip + 0x89549]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014011f: nop; mov rax, qword ptr [rip + 0xa3ec9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012f68f: nop; mov rax, qword ptr [rip + 0xb47c1]; add rax, qword ptr fs:[0]; ret; 
0x000000000011ba3f: nop; mov rax, qword ptr [rip + 0xc8429]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000001133ef: nop; mov rax, qword ptr [rip + 0xd0a79]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000003544f: nop; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000018829f: nop; mov rax, rdi; vzeroupper; ret; 
0x00000000000b54cf: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b54ff: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b550f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000009c45f: nop; mov rdi, rbp; call rax; 
0x00000000000e168f: nop; mov rdx, qword ptr [rip + 0x1027d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f82f: nop; mov rdx, qword ptr [rip + 0xc4639]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001136af: nop; mov rdx, qword ptr [rip + 0xd07b9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001135ff: nop; mov rdx, qword ptr [rip + 0xd0869]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010c66f: nop; mov rdx, qword ptr [rip + 0xd77f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c5cf: nop; mov rdx, qword ptr [rip + 0xd7899]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b6aaf: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b78ef: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x0000000000099ccf: nop; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x00000000000e56bf: nop; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000017614f: nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017613f: nop; mov word ptr [rcx], dx; ret; 
0x00000000000b640f: nop; mov word ptr [rdi], dx; ret; 
0x00000000000431af: nop; movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000b620f: nop; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b556f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b56df: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b569f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b56bf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b79df: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6b8f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b551f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b960f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000014f2ef: nop; movdqu xmm2, xmmword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014f2ff: nop; movdqu xmm3, xmmword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000004397f: nop; movmskps eax, xmm0; and eax, 8; ret; 
0x000000000013b23f: nop; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000008febf: nop; movzx eax, byte ptr [rdx]; ret; 
0x0000000000188c6f: nop; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000043f50: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000043f4f: nop; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x00000000000c7aa9: nop; or al, 0; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000011adac: nop; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011ad94: nop; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000430cf: nop; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000eae7f: nop; pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x000000000010b6af: nop; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000196c1f: nop; pop rbx; pop rbp; pop r12; ret; 
0x000000000009c09f: nop; pop rbx; ret; 
0x000000000014792f: nop; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000003148f: nop; ret; 
0x0000000000034d5b: nop; rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x1af081; mov qword ptr [rax], rdx; ret; 
0x000000000015da08: nop; rol byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000009e36c: nop; rol byte ptr [rcx], 0; cmovne rax, rdx; ret; 
0x0000000000127edf: nop; sub eax, edi; ret; 
0x00000000000926bf: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000135edf: nop; sub rsp, 0x10; push 2; call 0x135940; add rsp, 0x18; ret; 
0x00000000001821af: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018618f: nop; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018217f: nop; vzeroupper; xor eax, eax; ret; 
0x00000000000b947f: nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000dbdaf: nop; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114c1f: nop; xor eax, eax; add rsp, 8; ret; 
0x000000000010b6ff: nop; xor eax, eax; pop rbx; ret; 
0x000000000005362f: nop; xor eax, eax; ret; 
0x000000000011271f: nop; xor r10d, r10d; mov eax, 0x3d; syscall; 
0x00000000000cdc9f: nop; xor rax, rax; ret; 
0x000000000011e676: not byte ptr [rdi + 0xc]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011e976: not byte ptr [rsp + rcx]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ff736: not dh; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000114f65: not dword ptr [rbp + 0xd]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x30], cl; xor eax, eax; pop rbx; ret; 
0x0000000000042a3d: not eax; and eax, ecx; ret; 
0x0000000000042d6d: not eax; and eax, edx; ret; 
0x000000000015e7a3: not eax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x000000000012d375: not eax; clc; dec dword ptr [rax - 0x73]; add eax, 0xfff8d070; cmovne rax, rdx; ret; 
0x00000000001562c5: not eax; shr eax, 0x1f; ret; 
0x000000000015e7a2: not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x000000000009e0df: or ah, 0; add byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; add eax, 0x1b854; cmove rax, rdx; ret; 
0x00000000000989c8: or ah, ch; adc al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000015c750: or ah, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000001204f2: or al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000012446f: or al, 0; add byte ptr [rax + rax], al; add al, ch; mov cs, word ptr [rsi]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012276f: or al, 0; add byte ptr [rax + rax], al; add al, ch; mov gs, word ptr [rbx]; lock dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001225bf: or al, 0; add byte ptr [rax + rax], al; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x000000000007e212: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xffffed2f; mov r9, rcx; mov dword ptr [rbp - 0x4c8], 1; jmp rax; 
0x000000000017c967: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180579: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c995: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000120175: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001204cc: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000113342: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000014d468: or al, 0; add byte ptr [rax], al; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000009799c: or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x00000000000eae82: or al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000010b49d: or al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000001470d2: or al, 0; add byte ptr [rax], al; ret; 
0x00000000001132f1: or al, 0; add byte ptr [rax], al; syscall; 
0x00000000000999e2: or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009c60a: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007d8ca: or al, 0; add byte ptr [rcx + 0x29], cl; ret; 
0x00000000000c7aaa: or al, 0; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000501ac: or al, 0; add cl, ch; ret 0xfffd; 
0x0000000000120144: or al, 0; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000061c3b: or al, 0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000063bf6: or al, 0; add rsp, 0x80; ret; 
0x00000000001205b8: or al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000115b98: or al, 0; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000009ce1e: or al, 0; cmovne rax, rdx; ret; 
0x00000000000bb35a: or al, 0; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad6a: or al, 0; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf7a: or al, 0; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0fa: or al, 0; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad2a: or al, 0; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x0000000000077fb7: or al, 0; lea rax, [rip + 0x131c80]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000777b7: or al, 0; lea rax, [rip + 0x132380]; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000bae5a: or al, 0; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x000000000009e753: or al, 0; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e403: or al, 0; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e2a3: or al, 0; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x000000000011aa66: or al, 0; lea rsi, [rsp + 0xc]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114775: or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001174e5: or al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000118415: or al, 0; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001183e0: or al, 0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000114655: or al, 0; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011ea25: or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000001183ce: or al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000011ba45: or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000e19d0: or al, 0; mov eax, 0x142; syscall; 
0x00000000001210b5: or al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000012132d: or al, 0; mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000011b7a5: or al, 0; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x00000000000e2ff7: or al, 0; mov esi, esi; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000012081d: or al, 0; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000012091d: or al, 0; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000e8b6e: or al, 0; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x00000000000e6a76: or al, 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e3a01: or al, 0; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e910d: or al, 0; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000113e85: or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114075: or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011db95: or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000012039f: or al, 0; pop rbx; ret; 
0x00000000001172be: or al, 0; ret; 
0x00000000000bad8c: or al, 0; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x000000000011ab0d: or al, 0; xor esi, esi; mov edi, dword ptr [rsp + 0xc]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a89d6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000009796a: or al, 0x1e; mov rax, rsi; pop rbx; ret; 
0x0000000000043963: or al, 0x24; movdqa xmm0, xmm1; call 0x1905e0; add rsp, 0x20; pop rbx; ret; 
0x000000000011d8ca: or al, 0x30; ror byte ptr [rcx], 0xd0; ret; 
0x000000000010b6a4: or al, 0x31; ror byte ptr [rcx + 0x5d5b0453], 0x41; pop rsp; ret; 
0x0000000000036a48: or al, 0x39; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cd8f2: or al, 0x3b; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000011e26b: or al, 0x3f; shr eax, cl; and eax, 3; ret; 
0x000000000010d4c8: or al, 0x41; mov eax, eax; mov edi, dword ptr [rsp + 8]; mov eax, 0x48; syscall; 
0x00000000001164a3: or al, 0x48; add edx, 8; mov qword ptr [rip + 0xd1a81], rdx; ret; 
0x00000000000e13d1: or al, 0x48; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000004426c: or al, 0x48; add esp, 0x10; pop rbx; ret; 
0x00000000000e1686: or al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e15f6: or al, 0x48; add esp, 0x18; ret; 
0x0000000000062ecc: or al, 0x48; add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086041: or al, 0x48; add esp, 0x300; pop rbx; pop rbp; pop r12; ret; 
0x000000000004430b: or al, 0x48; add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f1d5: or al, 0x48; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112bd9: or al, 0x48; lea edx, [rsp + 0xc]; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x000000000013a49c: or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x000000000014d429: or al, 0x48; mov eax, dword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x0000000000150486: or al, 0x48; mov eax, dword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000bb051: or al, 0x48; mov eax, ebx; pop rbx; ret; 
0x000000000014d4c1: or al, 0x48; mov edi, ebp; call qword ptr [rax + 0x48]; 
0x00000000001205b2: or al, 0x48; mov edx, dword ptr [rip + 0xc7c3e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000dbac1: or al, 0x48; mov esi, ebx; xor edi, edi; mov eax, 0xe4; syscall; 
0x000000000011ab14: or al, 0x48; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000253a0: or al, 0x4c; sbb al, 0; pop rax; pop rbx; pop rbp; ret; 
0x00000000000e6a74: or al, 0x57; or al, 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009d083: or al, 0x5b; pop rbp; pop r12; ret; 
0x000000000012c00c: or al, 0x5b; pop rbp; ret; 
0x000000000012a5c3: or al, 0x5b; ret; 
0x000000000013f208: or al, 0x61; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x00000000000a714a: or al, 0x66; mov dword ptr [rdi + 4], eax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; mov rax, rdi; ret; 
0x00000000000a722f: or al, 0x66; mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7065: or al, 0x66; mov dword ptr [rdi + 4], edx; ret; 
0x0000000000048a6c: or al, 0x66; mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000000a2702: or al, 0x74; and ecx, dword ptr [rbp + 0x63490e78]; ret 0xf41; 
0x0000000000043483: or al, 0x75; or dh, bl; addps xmm0, xmm0; ret; 
0x000000000013c0eb: or al, 0x75; ret 0x758b; 
0x00000000000dbc95: or al, 0x7c; ret 0x850f; 
0x00000000000b5b5c: or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000074c9b: or al, 0x83; ret; 
0x000000000007a9af: or al, 0x84; ror byte ptr [rdi], cl; mov byte ptr [rsi - 0x9ffffe3], al; ret 0xf40; 
0x00000000000ba5f1: or al, 0x86; add rcx, rsi; jmp rcx; 
0x00000000000a6fdf: or al, 0x89; add rcx, r9; jmp rcx; 
0x000000000005de52: or al, 0x89; fdiv st(6); ret; 
0x00000000000ba67b: or al, 0x89; ret 0xe283; 
0x00000000000ad414: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018d4b9: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000121b1f: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000fe232: or al, 0x8f; add rcx, rdi; jmp rcx; 
0x000000000018aeef: or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000b52eb: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000008bd33: or al, 0xa3; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000007de0c: or al, 0xa; lea rax, [rip + 0x12c30b]; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000154700: or al, 0xab; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000048a70: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001161eb: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b52ef: or al, 0xb; jmp rcx; 
0x0000000000112bde: or al, 0xbe; adc byte ptr [rax + rax], dl; call 0x113410; add rsp, 0x18; ret; 
0x000000000011aa6c: or al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018cb30: or al, 0xc2; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000080836: or al, 0xc7; xor al, 0; add al, 0; add cl, ch; ret 0xfffc; 
0x000000000014d467: or al, 0xc; add byte ptr [rax], al; add byte ptr [rsi + 8], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000113264: or al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000113234: or al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000bd649: or al, 0xe8; and dword ptr [rdx - 0x38b60007], ebx; ret 0xfc01; 
0x00000000000e15ed: or al, 0xe8; cmp eax, 0x8b0004a8; and al, 0xc; add rsp, 0x18; ret; 
0x0000000000112c50: or al, 0xe8; ficom dword ptr [rcx + 0x448b0001]; and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x00000000000bfff9: or al, 0xe8; jno 0xc006d; stc; dec dword ptr [rcx - 0x39]; ret 0xc001; 
0x0000000000114304: or al, 0xe8; jnp 0x11430a; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000050299: or al, 0xe8; shr dword ptr [rbp], 1; add byte ptr [rcx - 0x39], cl; ret 0xc001; 
0x00000000000c2829: or al, 0xe8; stc; dec dword ptr [rcx - 0x39]; ret 0xff81; 
0x000000000008725c: or al, 0xeb; ret 0x5590; 
0x00000000001243c2: or al, 0xf0; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000124637: or al, 0xf0; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000016b403: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000061f34: or al, 0xf6; ret 0x7401; 
0x000000000006221f: or al, 0xf6; ret 0x7440; 
0x00000000000600c4: or al, 0xf6; ret 0xf01; 
0x000000000007a985: or al, 0xf6; ret 0xf08; 
0x000000000005d006: or al, 0xf6; ret; 
0x0000000000043273: or al, 0xf7; ret 0xffff; 
0x000000000005de04: or al, 0xf; test byte ptr [rip - 0x17000004], dh; add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x00000000000cd8f5: or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000017a4c7: or al, 0xf; test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000501a3: or al, 0xf; test dword ptr [rdx - 0x43000000], ebp; add byte ptr [rax + rax], cl; add cl, ch; ret 0xfffd; 
0x00000000000b5de3: or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x0000000000032c6f: or al, 0xf; xchg dword ptr [rdx + 0x4b000000], ebp; movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x000000000012e06a: or al, 0xff; call qword ptr [rax - 0x18]; 
0x00000000001490b8: or al, 1; add byte ptr [rax], al; add dh, dh; ret 0x7507; 
0x000000000010c1c2: or al, 1; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000010cb8e: or al, 1; add byte ptr [rax], al; syscall; 
0x000000000010c25c: or al, 1; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007e1a6: or al, 2; lea rax, [rip + 0x12bef1]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000b6020: or al, 5; add byte ptr [rax], al; ret; 
0x000000000014e371: or al, 6; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000012d15c: or al, 6; add byte ptr [rax - 0x73], cl; adc eax, 0x60bea; cmove rax, rdx; ret; 
0x0000000000113202: or al, al; add dword ptr [rax], eax; nop word ptr cs:[rax + rax]; mov eax, 0x8c; syscall; 
0x00000000000855d7: or al, byte ptr [eax]; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x00000000001095f8: or al, byte ptr [r8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000f6ef5: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; cmp eax, 0xb58ad; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000109079: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0xa46a5; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000c707d: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000017bb3d: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e751: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017bb61: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001161c5: or al, byte ptr [rax]; add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x00000000001470b2: or al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000117591: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000075ae3: or al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x00000000000be3de: or al, byte ptr [rax]; add byte ptr [rcx - 0x7d], al; ret 0x4c35; 
0x00000000000846b8: or al, byte ptr [rax]; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3d9: or al, byte ptr [rax]; add rsp, 0x80; mov eax, edx; ret; 
0x000000000008147d: or al, byte ptr [rax]; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x000000000008a5fd: or al, byte ptr [rax]; add rsp, 0x80; mov eax, r10d; pop rbx; ret; 
0x0000000000085715: or al, byte ptr [rax]; add rsp, 0x80; mov eax, r8d; pop rbx; ret; 
0x000000000008afe8: or al, byte ptr [rax]; add rsp, 0x80; pop rbx; ret; 
0x0000000000083801: or al, byte ptr [rax]; add rsp, 0x80; ret; 
0x0000000000145117: or al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000013fbcf: or al, byte ptr [rax]; lea rsi, [rip - 0x5a8]; lea rdi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001450f3: or al, byte ptr [rax]; lea rsi, [rip - 0xfc]; lea rdi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001409ad: or al, byte ptr [rax]; mov qword ptr [rax + 0x10], 0; pxor xmm0, xmm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000108433: or al, byte ptr [rax]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000140125: or al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000109081: or al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000001095f9: or al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000014513f: or al, byte ptr [rax]; ret; 
0x0000000000145101: or al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013fbdd: or al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013c4ab: or al, byte ptr [rax]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x0000000000134312: or al, byte ptr [rbp + 0xf]; mov bh, 0x1c; jns 0x13437f; and r11d, 0x840f2000; ret; 
0x00000000000fca56: or al, byte ptr [rbx]; or eax, dword ptr [rax]; movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x000000000010ea31: or al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000012d2dc: or al, byte ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x60a4a; cmove rax, rdx; ret; 
0x0000000000140124: or al, byte ptr ds:[rax]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000185047: or al, byte ptr es:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000085849: or al, byte ptr gs:[rax]; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x0000000000047af9: or al, ch; adc edi, edx; std; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x000000000005372d: or al, ch; add r15b, r14b; dec dword ptr [rax - 0x77]; ret; 
0x00000000001150f8: or al, ch; and cl, al; idiv bh; mov eax, 1; add rsp, 8; ret; 
0x00000000001486c6: or al, ch; cmp al, 0xcc; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001376a4: or al, ch; out 0x62, al; add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x00000000001456cb: or al, ch; outsd dx, dword ptr [rsi]; ret 0; 
0x000000000014f51b: or al, ch; pop rdi; ret 0xfffe; 
0x000000000004c0c8: or al, ch; ret 0xfd90; 
0x000000000010cd67: or al, ch; ret; 
0x000000000012576b: or al, ch; xchg eax, edi; sti; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x000000000010d784: or ax, 0xf700; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010d834: or ax, 0xf700; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001328be: or ax, word ptr [rax]; add byte ptr [rax + rax], al; add al, ch; sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000096294: or bh, bh; adc byte ptr [rax - 0x77], cl; ret 0x4890; 
0x00000000001474dd: or bh, byte ptr [rax + 2]; ret; 
0x00000000001446d0: or bh, ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f5fd9: or bh, dh; ret; 
0x0000000000118841: or bl, bpl; ret 0x1f0f; 
0x0000000000039c5d: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001016d8: or bl, byte ptr [rdx + 0x59]; pop rbx; ret; 
0x000000000013b8fa: or bl, byte ptr [rdx - 0x76b70012]; ret; 
0x00000000000b9126: or bl, byte ptr [rsi]; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000eae7c: or bl, ch; ficom dword ptr [rax + 0xcb85b]; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000013b746: or bl, ch; mov al, 0xe8; ret 0xff3a; 
0x0000000000154a59: or bl, ch; mov al, 0xe8; scasd eax, dword ptr [rdi]; cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rsi + 0x66]; 
0x00000000001544c8: or bl, ch; mov cl, 0xe8; lodsd eax, dword ptr [rsi]; std; call qword ptr [rbx + 0x48]; 
0x0000000000118842: or bl, ch; ret 0x1f0f; 
0x000000000016b5c3: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000008c394: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000000eaaa1: or byte ptr [r10], r11b; mov eax, 2; ret; 
0x0000000000145c0f: or byte ptr [r10], r13b; push 0x19; mov rcx, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000eaa31: or byte ptr [r10], r8b; xor eax, eax; ret; 
0x00000000000e66c2: or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000001187e8: or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x00000000000420b8: or byte ptr [r11 + r9*4 + 0x47], r9b; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x0000000000118726: or byte ptr [r11 + r9*4 + 0x57], r9b; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000056bbf: or byte ptr [r11 + rcx*4 + 0x4d], r9b; add byte ptr [rbp + 0x39], cl; ret 0x860f; 
0x00000000000e7a22: or byte ptr [r13 + 0x39], r8b; ret 0x1176; 
0x0000000000147f02: or byte ptr [r13 + r9*4 + 0x64], r9b; and al, 0x10; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000012c892: or byte ptr [r13 - 0x1f], sil; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x0000000000147193: or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000b1fa6: or byte ptr [r14 + 0xf], spl; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4cb0: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b4d91: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x000000000014724b: or byte ptr [r14 + 8], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d42c: or byte ptr [r14 + 8], r15b; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000000b20bf: or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000eaa26: or byte ptr [r14], r10b; mov eax, 1; ret; 
0x00000000000eaac6: or byte ptr [r14], r11b; mov eax, 2; ret; 
0x0000000000087e5b: or byte ptr [r15 + 0x48], dl; mov edi, ebp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x000000000008d91c: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000155d1a: or byte ptr [r15], r9b; adc dword ptr [rdi + 0x18], eax; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000152377: or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152167: or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d7: or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152247: or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x000000000008aaf0: or byte ptr [r15], r9b; mov dh, 0x10; pop rbx; mov eax, edx; ret; 
0x0000000000112d00: or byte ptr [r8 + 0x100], r15b; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000088858: or byte ptr [r8 + 0x29], r9b; ror dword ptr [rax + 0x29], cl; ret; 
0x0000000000092a88: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000008d342: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 0x16], r14b; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008d379: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 0xf], r14b; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008ea02: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x00000000000ecae2: or byte ptr [r8 + 0x63], r9b; ret 0xb60f; 
0x0000000000152d36: or byte ptr [r8 + 1], dil; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058827: or byte ptr [r8 + 2], r15b; ret; 
0x00000000000eaab1: or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000001546c2: or byte ptr [r8 - 0x3f], r9b; cli; and byte ptr [rax - 0x77], cl; push rsp; and al, 8; call qword ptr [rax + 8]; 
0x0000000000058858: or byte ptr [r8 - 0x3ffe], r15b; sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000015043e: or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001504c2: or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x00000000000f45fe: or byte ptr [r8 - 0x75], 4; ret 0x488b; 
0x000000000009a5c2: or byte ptr [r8 - 0x75], cl; adc byte ptr [r9 - 0x7d], al; ret; 
0x0000000000097b0f: or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000009a60a: or byte ptr [r8 - 0x75], cl; sbb byte ptr [r9 - 0x7d], al; ret 0x4901; 
0x00000000000b209e: or byte ptr [r8 - 0x76b7f7be], cl; clc; ret; 
0x0000000000146502: or byte ptr [r8 - 0x77], cl; fisttp word ptr [rax - 0x39]; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000012613c: or byte ptr [r8 - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000174148: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000015250d: or byte ptr [r8 - 0x77], r9b; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x00000000001461b2: or byte ptr [r8 - 0x77], r9b; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000000bb58a: or byte ptr [r8 - 0x7d], cl; ret; 
0x000000000010949a: or byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000118954: or byte ptr [r8 - 9], cl; ret 0xfffe; 
0x000000000009c7fd: or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000185222: or byte ptr [r8], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000ff00e: or byte ptr [r8], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rdx - 0xe]; 
0x000000000009cb8c: or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000005c197: or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000147f16: or byte ptr [r9 + r9*4 - 0x1a], cl; mov rdi, rbx; call qword ptr [rax]; 
0x000000000014657e: or byte ptr [r9 + r9*4 - 0xa], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000152652: or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x28]; 
0x00000000001524f2: or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x000000000014d4aa: or byte ptr [r9 + rcx*4 - 0x1a], r9b; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x00000000001187e4: or byte ptr [r9 - 0x75], r9b; or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x00000000000b20fe: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000000ea9f5: or byte ptr [r9], r11b; mov eax, 1; ret; 
0x000000000010b485: or byte ptr [r9], r14b; ror byte ptr [rcx - 0x7cb7ffa3], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000eaa8b: or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000eaa5d: or byte ptr [r9], r8b; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000eaa0e: or byte ptr [r9], r8b; mov eax, 1; ret; 
0x0000000000112d01: or byte ptr [rax + 0x100], bh; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000010cd47: or byte ptr [rax + 0x101], bh; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000145703: or byte ptr [rax + 0x10], bh; pop rbx; pop rbp; ret; 
0x000000000011181e: or byte ptr [rax + 0x10f], bh; syscall; 
0x00000000000a733d: or byte ptr [rax + 0x16], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000042eb1: or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000042e71: or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000088859: or byte ptr [rax + 0x29], cl; ror dword ptr [rax + 0x29], cl; ret; 
0x000000000008dc55: or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000012fc76: or byte ptr [rax + 0x33], cl; add ecx, dword ptr [rax + 9]; ret 0x850f; 
0x000000000011db09: or byte ptr [rax + 0x38], bh; syscall; 
0x000000000002f0e0: or byte ptr [rax + 0x39], cl; ret 0x2174; 
0x000000000002f17a: or byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000012e154: or byte ptr [rax + 0x39], cl; ret 0x976; 
0x000000000005b7b3: or byte ptr [rax + 0x39], cl; ret 0xef75; 
0x000000000015e909: or byte ptr [rax + 0x39], cl; ret 0xf177; 
0x00000000000304a4: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000092a89: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000008d343: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 0x16], r14b; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008d37a: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 0xf], r14b; lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000008ea03: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 6], r14b; movzx eax, byte ptr [rax]; ret; 
0x000000000010d4cf: or byte ptr [rax + 0x48], bh; syscall; 
0x00000000000fe22f: or byte ptr [rax + 0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x000000000014aed9: or byte ptr [rax + 0x63], cl; ret 0x1489; 
0x00000000000ecae3: or byte ptr [rax + 0x63], cl; ret 0xb60f; 
0x00000000000eb26b: or byte ptr [rax + 0x63], cl; ret; 
0x000000000014bd70: or byte ptr [rax + 0x66000000], 0x89; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x000000000010b49b: or byte ptr [rax + 0xc], bh; pop rbx; pop rbp; ret; 
0x000000000012c80b: or byte ptr [rax + 0xe6], bh; syscall; 
0x000000000004953d: or byte ptr [rax + 0xf], 0x44; ret 0x14eb; 
0x00000000000e7f9e: or byte ptr [rax + 0xf], 0xa3; ret 0x830f; 
0x000000000012f34e: or byte ptr [rax + 0xf], al; mov dh, 0xc6; or eax, edi; bswap eax; ret; 
0x0000000000093a0e: or byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000014bd0d: or byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014f2e5: or byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000152d37: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000014475b: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x00000000000a705b: or byte ptr [rax + 1], cl; clc; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x000000000012d3e5: or byte ptr [rax + 1], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000014bd0c: or byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000058828: or byte ptr [rax + 2], bh; ret; 
0x0000000000057314: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8949; 
0x00000000000eaab2: or byte ptr [rax + rdi*4], bl; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000f156e: or byte ptr [rax - 0x2f], cl; call 0xffffffff835901eb; ret; 
0x000000000008be64: or byte ptr [rax - 0x38b7ffeb], al; ret 0xffff; 
0x000000000010fb90: or byte ptr [rax - 0x39], cl; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001546c3: or byte ptr [rax - 0x3f], cl; cli; and byte ptr [rax - 0x77], cl; push rsp; and al, 8; call qword ptr [rax + 8]; 
0x0000000000058859: or byte ptr [rax - 0x3ffe], bh; sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000012b240: or byte ptr [rax - 0x73], 0x51; jo 0x12b255; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b434: or byte ptr [rax - 0x73], 0x51; jo 0x12b449; adc dword ptr [rbp - 0x78], edi; call rax; 
0x00000000000dbe9f: or byte ptr [rax - 0x73], cl; adc al, 0xff; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x00000000000bc681: or byte ptr [rax - 0x73], cl; add eax, 0x11b57; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x000000000012d2ad: or byte ptr [rax - 0x73], cl; add eax, 0x365db; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d12d: or byte ptr [rax - 0x73], cl; add eax, 0x3677b; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1ed: or byte ptr [rax - 0x73], cl; add eax, 0x3908b; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x0000000000145139: or byte ptr [rax - 0x73], cl; add eax, 0xa47bf; ret; 
0x000000000009e74d: or byte ptr [rax - 0x73], cl; add eax, 0xc516b; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3fd: or byte ptr [rax - 0x73], cl; add eax, 0xc549b; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e29d: or byte ptr [rax - 0x73], cl; add eax, 0xc7feb; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x0000000000118951: or byte ptr [rax - 0x73], cl; or byte ptr [r8 - 9], cl; ret 0xfffe; 
0x00000000000795fe: or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfff4; 
0x0000000000057c14: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000015043f: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001504c3: or byte ptr [rax - 0x73], cl; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x00000000000f45ff: or byte ptr [rax - 0x75], 4; ret 0x488b; 
0x0000000000100cb8: or byte ptr [rax - 0x75], 4; ret 0x8948; 
0x000000000009a5c3: or byte ptr [rax - 0x75], cl; adc byte ptr [r9 - 0x7d], al; ret; 
0x000000000015d8b9: or byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x0000000000121111: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000121172: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x40; ret; 
0x0000000000056c29: or byte ptr [rax - 0x75], cl; add byte ptr [r13 + 0x39], r9b; ret 0xcd74; 
0x00000000001097d1: or byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000000e2858: or byte ptr [rax - 0x75], cl; add eax, 0x107b50; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c8: or byte ptr [rax - 0x75], cl; add eax, 0x107be0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009388f: or byte ptr [rax - 0x75], cl; add eax, 0x150749; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x15063f]; mov qword ptr [rax], rdx; ret; 
0x000000000011891d: or byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x00000000000cf23f: or byte ptr [rax - 0x75], cl; and al, 0x30; call rax; 
0x0000000000151442: or byte ptr [rax - 0x75], cl; cmp al, 0x24; call rax; 
0x000000000014db19: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000000824f4: or byte ptr [rax - 0x75], cl; mov edi, 0xe0; call rax; 
0x0000000000097b10: or byte ptr [rax - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000014803f: or byte ptr [rax - 0x75], cl; pop rdi; sbb byte ptr [rbx + 0x5065e83b], cl; cld; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000014758a: or byte ptr [rax - 0x75], cl; push rax; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x000000000009a60b: or byte ptr [rax - 0x75], cl; sbb byte ptr [r9 - 0x7d], al; ret 0x4901; 
0x00000000000b209f: or byte ptr [rax - 0x76b7f7be], cl; clc; ret; 
0x000000000012aca7: or byte ptr [rax - 0x77], 0xda; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x000000000013b97b: or byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001164d6: or byte ptr [rax - 0x77], cl; adc eax, 0xd1a52; add rsp, 8; ret; 
0x00000000001164a7: or byte ptr [rax - 0x77], cl; adc eax, 0xd1a81; ret; 
0x000000000009c661: or byte ptr [rax - 0x77], cl; adc ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000150553: or byte ptr [rax - 0x77], cl; add al, 0x24; call qword ptr [rdx + 0x20]; 
0x000000000009c79b: or byte ptr [rax - 0x77], cl; add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000147f49: or byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rdi + 8]; movhps xmm0, qword ptr [rsp + 8]; movaps xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 8]; 
0x000000000008245c: or byte ptr [rax - 0x77], cl; call 0x5c4981bf; pop r13; ret; 
0x0000000000082495: or byte ptr [rax - 0x77], cl; call 0x5c4981f8; pop r13; ret; 
0x00000000000a74fd: or byte ptr [rax - 0x77], cl; call 0x5c4bd260; pop r13; ret; 
0x000000000012db41: or byte ptr [rax - 0x77], cl; call 0x5c5438a4; pop r13; ret; 
0x0000000000119085: or byte ptr [rax - 0x77], cl; call 0xffffffffe110ede8; nop dword ptr [rax]; ret; 
0x00000000000b1fb0: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012f188: or byte ptr [rax - 0x77], cl; clc; sar rax, 6; ret; 
0x00000000000a73fb: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000039523: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000015250e: or byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x0000000000086c34: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000146503: or byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x39]; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000012613d: or byte ptr [rax - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000b9595: or byte ptr [rax - 0x77], cl; jns 0xffffffffed3b9df5; mov byte ptr [rdi + 0xc], ch; ret; 
0x0000000000097264: or byte ptr [rax - 0x77], cl; mov esp, 0x8024; add dh, dh; ret 0x7504; 
0x0000000000174149: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000001551f9: or byte ptr [rax - 0x77], cl; out 0x4c, al; mov edi, esp; call qword ptr [rax]; 
0x00000000001461b3: or byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000015abca: or byte ptr [rax - 0x77], cl; out dx, eax; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000146eab: or byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x00000000000b9556: or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000098bfd: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x0000000000129747: or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000014938d: or byte ptr [rax - 0x77], cl; ret 0x3149; 
0x0000000000126a67: or byte ptr [rax - 0x77], cl; ret 0x4b8b; 
0x00000000000970de: or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000001546b7: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000014e615: or byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000416aa: or byte ptr [rax - 0x77], cl; ret 0xc085; 
0x0000000000051f31: or byte ptr [rax - 0x77], cl; ret; 
0x0000000000032bd1: or byte ptr [rax - 0x77], cl; rol byte ptr [rax - 0x75], 1; cmp byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000a74a3: or byte ptr [rax - 0x77], cl; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x000000000011901d: or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 0xd]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000869fd: or byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000140078: or byte ptr [rax - 0x7b], cl; push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091002: or byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rax - 0x58]; add dword ptr [rsp + rbp - 0x77], esi; ret 0x8948; 
0x0000000000106136: or byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000009c5d7: or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x000000000015d809: or byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rsi + 0x48], 0x8b; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x00000000000b7f19: or byte ptr [rax - 0x7bf0ffc8], al; ret 0; 
0x00000000000a62d6: or byte ptr [rax - 0x7d], cl; ret 0x2901; 
0x0000000000049f2d: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000002edc6: or byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000046506: or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ed3a0: or byte ptr [rax - 0x7d], cl; rol dword ptr [rcx], 0x39; ret 0xc675; 
0x00000000000bb56d: or byte ptr [rax - 0x7d], r9b; ret; 
0x000000000008d770: or byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000084aab: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000118955: or byte ptr [rax - 9], cl; ret 0xfffe; 
0x000000000017bd9c: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000420f5: or byte ptr [rax], 0x48; add ecx, dword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x000000000009c7fe: or byte ptr [rax], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000096d5a: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x4e72; 
0x0000000000094516: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000194419: or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000030c4a: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000019342a: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000037a47: or byte ptr [rax], al; add byte ptr [rax - 0x7af0cc07], al; ret 5; 
0x0000000000037a3e: or byte ptr [rax], al; add byte ptr [rax - 0x7bf0ce07], al; push rbp; or byte ptr [rax], al; add byte ptr [rax - 0x7af0cc07], al; ret 5; 
0x000000000017bd9d: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e8f1: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017bdc1: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000ff00f: or byte ptr [rax], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rdx - 0xe]; 
0x0000000000140200: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000009cb8d: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000011dc22: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x119; syscall; 
0x00000000000441e1: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7f; syscall; 
0x000000000004421e: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x0000000000044172: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000044028: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000044eb0: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x000000000014724e: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d42f: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x0000000000044246: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov edx, eax; mov eax, 0x82; syscall; 
0x00000000001117bc: or byte ptr [rax], al; add byte ptr [rax], al; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x00000000000ba6d1: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000027b01: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010d0b1: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000008c18c: or byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne al; ret; 
0x0000000000139b1e: or byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x0000000000190774: or byte ptr [rax], al; add byte ptr [rcx - 0x47], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000018bc30: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000015afda: or byte ptr [rax], al; add rsp, 8; ret; 
0x000000000015decd: or byte ptr [rax], al; call qword ptr [rax + 0x10]; 
0x000000000015abf9: or byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000015dc4d: or byte ptr [rax], al; call qword ptr [rax + 8]; 
0x000000000015abbb: or byte ptr [rax], al; call qword ptr [rax]; 
0x00000000000cf744: or byte ptr [rax], al; lea rdx, [rip - 0x8d]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x00000000000cf824: or byte ptr [rax], al; lea rdx, [rip - 0xad]; test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x000000000015abc4: or byte ptr [rax], al; lea rdx, [rsp + 8]; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000015e7e5: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015a8d5: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015e865: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015b90a: or byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x000000000011f643: or byte ptr [rax], al; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015aace: or byte ptr [rax], al; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000005c198: or byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000015afd3: or byte ptr [rax], al; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x00000000000dd512: or byte ptr [rax], al; mov rax, r14; call rax; 
0x000000000015b2bb: or byte ptr [rax], al; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b21e: or byte ptr [rax], al; mov rdi, rdx; mov rsi, r8; call qword ptr [rax + 8]; 
0x0000000000160deb: or byte ptr [rax], al; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015b50e: or byte ptr [rax], al; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x10]; 
0x000000000015b5ce: or byte ptr [rax], al; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000015d975: or byte ptr [rax], al; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000015a908: or byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000160675: or byte ptr [rax], al; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000160615: or byte ptr [rax], al; neg r8d; mov dword ptr fs:[rax], r8d; mov eax, 0xffffffff; ret; 
0x000000000015b0ef: or byte ptr [rax], al; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000015e958: or byte ptr [rax], al; ret; 
0x0000000000160caf: or byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015c6f1: or byte ptr [rax], al; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b33e: or byte ptr [rax], al; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b16e: or byte ptr [rax], al; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015aba1: or byte ptr [rax], al; sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x000000000015b1ad: or byte ptr [rax], al; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000015e94f: or byte ptr [rax], al; xor eax, eax; mov qword ptr [rip + 0x88c96], rsi; ret; 
0x00000000000b955d: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b959b: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b953b: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x000000000018381e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013b714: or byte ptr [rbp + 0x32], dh; add rsp, 0x38; ret; 
0x00000000000e7a23: or byte ptr [rbp + 0x39], al; ret 0x1176; 
0x000000000013b2ff: or byte ptr [rbp + 0x5d5b2b04], cl; ret; 
0x00000000000e8a68: or byte ptr [rbp + 0xf880fc0], al; add dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x0000000000043107: or byte ptr [rbp + 6], dh; addsd xmm0, xmm0; ret; 
0x00000000000b5b9f: or byte ptr [rbp + rcx*4 + 0x1d], 0xd9; str word ptr [r11 + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b724f: or byte ptr [rbp + rcx*4 + 0x1d], 9; cmp ecx, dword ptr [rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000056983: or byte ptr [rbp + rcx*4 + 0x2c], cl; ret 0x894c; 
0x0000000000147f03: or byte ptr [rbp + rcx*4 + 0x64], cl; and al, 0x10; lea rsi, [rsp + 0x18]; call qword ptr [rax]; 
0x000000000012d391: or byte ptr [rbp - 0x10], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60fb1]; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000009e381: or byte ptr [rbp - 0x10], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeffd1]; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000012d2d1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ac1]; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d211: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ba1]; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d151: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60c61]; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000009e771: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef651]; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e421: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef981]; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2c1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefb01]; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000014f5ef: or byte ptr [rbp - 0x1c7bf040], al; add eax, 0xc0310000; mov rsi, qword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000012c893: or byte ptr [rbp - 0x1f], dh; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x00000000000812bf: or byte ptr [rbp - 0x627bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001597dc: or byte ptr [rbp - 0x6d7bf040], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004639c: or byte ptr [rbp - 0x73], cl; sub al, 0x2e; call rax; 
0x0000000000026fff: or byte ptr [rbp - 0x757bf040], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000fd68b: or byte ptr [rbp - 0x77], cl; ret 0x8548; 
0x00000000000f0f00: or byte ptr [rbp - 0x9dc8b01], al; ret; 
0x0000000000084d09: or byte ptr [rbx + 0x14], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x00000000000929e4: or byte ptr [rbx + 0x15], 0; add dword ptr [rip + 0x154b75], 1; ret; 
0x00000000000fe818: or byte ptr [rbx + 0x38], 8; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000026b5c: or byte ptr [rbx + 0x4814247c], cl; mov edx, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000009c20a: or byte ptr [rbx + 0x50], 1; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rsi; call rcx; 
0x000000000015439e: or byte ptr [rbx + 0x5d], bl; jmp rax; 
0x0000000000147865: or byte ptr [rbx + 0x5d], bl; jmp rcx; 
0x0000000000098c48: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; jmp rax; 
0x000000000009c6e3: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000047051: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000e66c3: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000027bf3: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000097b14: or byte ptr [rbx + 0x94807e0], al; ret; 
0x0000000000097b13: or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000001187e9: or byte ptr [rbx + 0x94901e0], al; ret 0x894d; 
0x0000000000084bd2: or byte ptr [rbx + 0xb], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000012bbd3: or byte ptr [rbx + 0xbe7e605], cl; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe71b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000420b9: or byte ptr [rbx + rcx*4 + 0x47], cl; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x0000000000056bc0: or byte ptr [rbx + rcx*4 + 0x4d], cl; add byte ptr [rbp + 0x39], cl; ret 0x860f; 
0x0000000000118727: or byte ptr [rbx + rcx*4 + 0x57], cl; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000133513: or byte ptr [rbx - 0x17cfdb84], cl; ret; 
0x000000000015801e: or byte ptr [rbx - 0x6bf0f502], al; ret; 
0x00000000000ef18d: or byte ptr [rbx - 0x76bac7b2], cl; ret 0x418d; 
0x0000000000081995: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000012be74: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000005854b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000001494a2: or byte ptr [rcx + 0x31], cl; ror byte ptr [rbp - 0x75], 1; sbb dword ptr [rbp + 0x31], ecx; ret 0x314d; 
0x00000000000f0d0b: or byte ptr [rcx + 0x39], cl; ret; 
0x0000000000061969: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x000000000013f2b7: or byte ptr [rcx + 0x415d5bd8], cl; pop rsp; pop r13; ret; 
0x0000000000082814: or byte ptr [rcx + 0x415d5bf0], cl; pop rsp; pop r13; ret; 
0x00000000001466a8: or byte ptr [rcx + 0x428b49c3], cl; or byte ptr [rcx + rcx*4 - 0x29], cl; call qword ptr [rax + 0x20]; 
0x0000000000065078: or byte ptr [rcx + 0x44c001ca], 0x29; ret 0xd039; 
0x00000000000ef1c8: or byte ptr [rcx + 0x63493846], cl; ret 0x4c6; 
0x0000000000043285: or byte ptr [rcx + 0x66fc2454], 0xf; outsb dx, byte ptr [rsi]; and al, 0xfc; ret; 
0x000000000009127a: or byte ptr [rcx + 0xf], al; mov dh, 0x37; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000005688b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000000e3c54: or byte ptr [rcx + 3], bh; add byte ptr [rax - 0x77], cl; ret 0xc0e9; 
0x00000000001466ad: or byte ptr [rcx + r9*4 - 0x29], cl; call qword ptr [rax + 0x20]; 
0x00000000000576c0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x000000000012b59b: or byte ptr [rcx + rcx*4 - 0x16], 0xf; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b16f: or byte ptr [rcx + rcx*4 - 0x16], 0xf; adc dword ptr [rbp - 0x78], esi; call rax; 
0x00000000000ec76e: or byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118a5c: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000145f9b: or byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000147558: or byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d4ab: or byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x0000000000147f17: or byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call qword ptr [rax]; 
0x00000000001447e7: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001466ae: or byte ptr [rcx + rcx*4 - 0x29], cl; call qword ptr [rax + 0x20]; 
0x000000000014657f: or byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000012ac3c: or byte ptr [rcx + rcx*4 - 0xe], 0xf; adc dword ptr [rbp - 0x78], ebp; call rax; 
0x000000000012aa0e: or byte ptr [rcx + rcx*4 - 0xe], 0xf; adc dword ptr [rbp - 0x78], ecx; call rax; 
0x0000000000152653: or byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x28]; 
0x00000000001524f3: or byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 8]; 
0x0000000000148dd1: or byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, r13; call rax; 
0x00000000000a6f46: or byte ptr [rcx + rcx*8 - 0x3fce128b], al; ret; 
0x0000000000056892: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000043b57: or byte ptr [rcx - 0x3fcebf8d], cl; pop rbx; ret; 
0x00000000000562ae: or byte ptr [rcx - 0x75], cl; adc al, 0xc0; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000005651e: or byte ptr [rcx - 0x75], cl; adc al, 0xc8; mov qword ptr [rax + rcx*8], rdx; xor eax, eax; ret; 
0x00000000001187e5: or byte ptr [rcx - 0x75], cl; or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x00000000000b20ff: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000058699: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000014a5eb: or byte ptr [rcx - 0x77], al; ret 0x8948; 
0x0000000000079602: or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfff4; 
0x0000000000146638: or byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x00000000000957a4: or byte ptr [rcx - 0x77], cl; ret; 
0x0000000000118d36: or byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x00000000000b5ddb: or byte ptr [rcx - 0x7d], cl; call 0x7f98a5ef; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000bb309: or byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000151bda: or byte ptr [rcx], 0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000151bc8: or byte ptr [rcx], 0; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151bfa: or byte ptr [rcx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000058747: or byte ptr [rcx], 0xc6; mov rax, qword ptr [rdi]; mov word ptr [rsp - 0x10], si; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000636ac: or byte ptr [rcx], ah; test byte ptr [rax - 0x77], cl; ret; 
0x0000000000054a6d: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; ror byte ptr [r9 - 0x76a7dbac], 1; ret 0x31e9; 
0x0000000000054e37: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0x4e9; 
0x000000000010c1d2: or byte ptr [rcx], al; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000063a44: or byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000010c274: or byte ptr [rcx], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000eaa8c: or byte ptr [rcx], al; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000eaa5e: or byte ptr [rcx], al; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000eaa0f: or byte ptr [rcx], al; mov eax, 1; ret; 
0x0000000000148093: or byte ptr [rcx], al; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000001587d5: or byte ptr [rcx], bh; ret 0x3e75; 
0x0000000000156fc8: or byte ptr [rcx], bh; ret 0x5375; 
0x00000000000bcb73: or byte ptr [rcx], bh; ret 0x840f; 
0x00000000000ea9f6: or byte ptr [rcx], bl; mov eax, 1; ret; 
0x00000000000c8983: or byte ptr [rcx], ch; ret; 
0x0000000000094e86: or byte ptr [rcx], dh; call qword ptr [rsi + 0x48]; 
0x0000000000051f03: or byte ptr [rcx], dh; div byte ptr [rcx]; inc dword ptr [rcx - 0x47]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x000000000010462f: or byte ptr [rcx], dh; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x000000000005af21: or byte ptr [rcx], dh; push qword ptr [rcx]; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000047b63: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000fe81b: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000d5e86: or byte ptr [rcx], dh; rol byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; xchg eax, esp; ret 0x8d48; 
0x0000000000087df2: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x000000000010b747: or byte ptr [rcx], dh; ror byte ptr [rcx - 0x7cb7fbad], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010b486: or byte ptr [rcx], dh; ror byte ptr [rcx - 0x7cb7ffa3], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000156fc7: or byte ptr [rcx], dil; ret 0x5375; 
0x00000000001587d4: or byte ptr [rcx], r15b; ret 0x3e75; 
0x00000000000636ab: or byte ptr [rcx], spl; test byte ptr [rax - 0x77], cl; ret; 
0x00000000000a7176: or byte ptr [rdi + 0x1f], dh; lea r8, [rip + 0x1036dc]; mov edx, eax; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000a6fd1: or byte ptr [rdi + 0x24], dh; lea r9, [rip + 0x103839]; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x0000000000094c35: or byte ptr [rdi + 0x31], dl; call qword ptr [rax + 0x48]; 
0x0000000000087e5c: or byte ptr [rdi + 0x48], dl; mov edi, ebp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x00000000001516f6: or byte ptr [rdi + rbx*2 + 0x48], dh; mov eax, dword ptr [rbx + 8]; mov dword ptr [r10], 0xe; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000008aa17: or byte ptr [rdi], 0x84; ret 0; 
0x000000000002d540: or byte ptr [rdi], al; add byte ptr [rax], al; add cl, ch; sar esi, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000008d91d: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x00000000000910ed: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x38], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091028: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x38], eax; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000155d1b: or byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000152378: or byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152168: or byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d8: or byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152248: or byte ptr [rdi], cl; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x00000000000350b4: or byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x0000000000090f0f: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008d351: or byte ptr [rdi], cl; mov dh, 0; ret; 
0x000000000008aaf1: or byte ptr [rdi], cl; mov dh, 0x10; pop rbx; mov eax, edx; ret; 
0x000000000014213a: or byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000014cab5: or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x000000000015614a: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000010e990: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000011dd58: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000014798d: or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x0000000000052ff8: or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000eb267: or byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rax + 0x63], cl; ret; 
0x0000000000189c90: or byte ptr [rdi], cl; pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x0000000000147f57: or byte ptr [rdi], cl; sub dword ptr [rsp + 0x10], eax; call qword ptr [rax + 8]; 
0x0000000000145f78: or byte ptr [rdi], cl; sub dword ptr [rsp + 0x30], eax; push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000000ecbe1: or byte ptr [rdi], cl; test byte ptr [rbx + 0x5bffffff], al; ret; 
0x000000000017a0a1: or byte ptr [rdi], cl; test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000c5af1: or byte ptr [rdi], cl; test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7e51: or byte ptr [rdi], cl; test dword ptr [rax], ecx; add eax, 0x83480000; ret 0x4801; 
0x000000000005440d: or byte ptr [rdi], cl; test dword ptr [rcx - 0x7c000007], esi; ret 0x3901; 
0x00000000000c63a1: or byte ptr [rdi], cl; test eax, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c5d19: or byte ptr [rdi], cl; test eax, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c8041: or byte ptr [rdi], cl; test eax, edx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7c70: or byte ptr [rdi], cl; test ecx, ecx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7208: or byte ptr [rdi], cl; test ecx, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000001019ec: or byte ptr [rdi], cl; xchg eax, ebp; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000120854: or byte ptr [rdi], cl; xchg eax, edi; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000574b2: or byte ptr [rdi], cl; xchg eax, edx; ret 0x8949; 
0x00000000000f3c2c: or byte ptr [rdi], cl; xchg eax, esp; ret 0xc083; 
0x0000000000026bba: or byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000018db81: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000018d4a3: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000008c395: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000009cb7d: or byte ptr [rdx + 8], dh; mov qword ptr [rdi], rsi; ret; 
0x000000000010e99b: or byte ptr [rdx], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x56; syscall; 
0x00000000000eaa32: or byte ptr [rdx], al; xor eax, eax; ret; 
0x00000000000eaaa2: or byte ptr [rdx], bl; mov eax, 2; ret; 
0x0000000000145c10: or byte ptr [rdx], ch; push 0x19; mov rcx, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000101783: or byte ptr [rdx], ch; push r9; mov r9d, 1; call 0x101090; add rsp, 0x18; ret; 
0x00000000000ff2f3: or byte ptr [rdx], ch; push r9; mov r9d, edx; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000101743: or byte ptr [rdx], ch; push r9; xor r9d, r9d; call 0x101090; add rsp, 0x18; ret; 
0x000000000006275b: or byte ptr [rip + 0x100], ah; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000112782: or byte ptr [rip + 0x100f], ah; ret; 
0x0000000000112781: or byte ptr [rip + 0x100f], r12b; ret; 
0x000000000011782b: or byte ptr [rip + 0x415d5b00], cl; pop rsp; ret; 
0x0000000000113604: or byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x0000000000112811: or byte ptr [rip - 0x1010], ah; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000112810: or byte ptr [rip - 0x1010], r12b; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000c7e54: or byte ptr [rip - 0x7cb80000], al; ret 0x4801; 
0x0000000000112484: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x0000000000147194: or byte ptr [rsi + 0x20], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000b2074: or byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b1fa7: or byte ptr [rsi + 0xf], ah; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b4cb1: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b4d92: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000043951: or byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x20; pop rbx; ret; 
0x000000000014724c: or byte ptr [rsi + 8], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000014d42d: or byte ptr [rsi + 8], bh; mov rdi, rbp; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000000b20c0: or byte ptr [rsi - 0x77], ah; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000146d19: or byte ptr [rsi - 0x77], ah; test byte ptr [rdx + rdx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x00000000000eaac7: or byte ptr [rsi], bl; mov eax, 2; ret; 
0x00000000000eaa27: or byte ptr [rsi], dl; mov eax, 1; ret; 
0x000000000015d974: or byte ptr fs:[rax], al; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0x1b0]; jmp rax; 
0x000000000008c2a6: or ch, 0x80; cmp esi, 2; cmove edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000003745a: or ch, byte ptr [rdi]; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000042c1b: or cl, bl; std; fstp st(1); ret; 
0x0000000000055505: or cl, bpl; ret; 
0x0000000000181334: or cl, byte ptr [rax + 0x29]; clc; ret; 
0x0000000000030df1: or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x00000000000ebdc2: or cl, byte ptr [rax + 0x39]; ret 0x870f; 
0x000000000008820d: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x000000000007de0d: or cl, byte ptr [rax - 0x73]; add eax, 0x12c30b; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x000000000007e15a: or cl, byte ptr [rax - 0x73]; cmp eax, 0x12c03e; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000176072: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000017a463: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000ff0de: or cl, byte ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000641f4: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000126b07: or cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000148425: or cl, byte ptr [rax - 0x7d]; ret 0xf04; 
0x0000000000083db3: or cl, byte ptr [rax - 0x7d]; ret; 
0x000000000004865c: or cl, byte ptr [rcx + 0x10e9c117]; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000015e1f6: or cl, byte ptr [rcx + rcx*4 - 0xe]; add r9, qword ptr [rsp + 8]; call rax; 
0x0000000000125a98: or cl, byte ptr [rcx - 0x77]; fisttp qword ptr [rax + 0x29]; fimul word ptr [rax - 0x77]; ret; 
0x0000000000104754: or cl, byte ptr [rcx - 0x77]; ret 0xf44; 
0x00000000000ba5b6: or cl, byte ptr [rdi]; add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x00000000000ba5e6: or cl, byte ptr [rdi]; add cl, al; call 0xfec28fb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000176076: or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000017a467: or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000158021: or cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x0000000000113424: or cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000003ed78: or cl, ch; idiv dil; jmp qword ptr [rsi - 0x70]; 
0x0000000000089380: or cl, ch; paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x0000000000079606: or cl, ch; ret 0xfff4; 
0x00000000000418db: or cl, ch; ret 0xfffc; 
0x0000000000056106: or cl, ch; ret 0xfffe; 
0x0000000000055506: or cl, ch; ret; 
0x00000000000b9f15: or cl, cl; cmove rax, rdx; ret; 
0x000000000004adc3: or dh, al; and al, 0x67; add dword ptr [rcx - 0x77], ecx; ret 0x8944; 
0x000000000004de4b: or dh, al; and al, 0x6f; add dword ptr [rcx - 0x77], ecx; ret 0x8944; 
0x0000000000124581: or dh, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012485a: or dh, al; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000017b9e9: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000043485: or dh, bl; addps xmm0, xmm0; ret; 
0x000000000016b4e3: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000013aca7: or dh, byte ptr [rbp + rax*2 - 0x7d]; dec dword ptr [rbx]; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013dd12: or dh, byte ptr [rbp - 0x12]; jmp qword ptr [rsi + 0xf]; 
0x0000000000089257: or dh, byte ptr [rcx + rdi*4 + 0x48]; add esp, 0x18; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000122bb2: or dh, byte ptr [rcx]; rol byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, ebp; ret 0xdaf7; 
0x0000000000035ae3: or dh, byte ptr [rdi - 0x43]; lea rdx, [rip + 0x16f093]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000eca3a: or dh, byte ptr [rsi + rdi + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000097285: or dh, dh; ret 0x7404; 
0x0000000000094ed7: or dh, dh; ret 0xf02; 
0x000000000009724a: or dh, dh; ret 0xf04; 
0x000000000016d4f4: or dl, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d333c: or dl, byte ptr [rcx]; add byte ptr [rcx + 0x48d23102], cl; add esp, 8; mov rax, rdx; ret; 
0x000000000010c286: or dword ptr [rax + 0x1c], edi; syscall; 
0x000000000010c286: or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x00000000000f8ecb: or dword ptr [rax + 0x39], ecx; ret 0x850f; 
0x000000000011ee63: or dword ptr [rax + 0xc], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000000f93dc: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x0000000000101b64: or dword ptr [rax + 8], 0x2000; ret; 
0x00000000000e3a00: or dword ptr [rax + rax], 0x48; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e3d55: or dword ptr [rax + rax], 0xffffff89; test byte ptr [rax + 0x63], 4; mov dl, 0x48; add eax, edx; jmp rax; 
0x0000000000112c03: or dword ptr [rax + rax], edx; mov eax, 0x10; syscall; 
0x0000000000112c32: or dword ptr [rax + rax], edx; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x000000000013e9ad: or dword ptr [rax + rsi*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x000000000013b5ed: or dword ptr [rax - 0x3f], ecx; out 4, al; lea rax, [rdi + rsi + 8]; ret; 
0x000000000003235b: or dword ptr [rax - 0x72b7ffe5], eax; cmp eax, 0x1b43ba; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136e60: or dword ptr [rax - 0x73], ecx; cmp eax, 0xb2378; call rax; 
0x000000000014bc83: or dword ptr [rax - 0x73], ecx; mov ebx, 0xc8; call rax; 
0x0000000000176052: or dword ptr [rax - 0x73], ecx; or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x00000000000824b8: or dword ptr [rax - 0x75], ecx; mov edi, 0xe0; jmp rax; 
0x000000000005c332: or dword ptr [rax - 0x7cb7fa], ecx; or dword ptr [rdi - 0x2b], esi; mov rax, rsi; ret; 
0x0000000000039c0b: or dword ptr [rax - 0x7d], 0x4f8801c7; dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000033256: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000000c574b: or dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000000b4fde: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000015197c: or dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000e9ae1: or dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xdd75; 
0x00000000000fa034: or dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000017bccd: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001836cf: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017bc27: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000004216a: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000089277: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000002741a: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edi; ret; 
0x0000000000160dd9: or dword ptr [rax], eax; add byte ptr [rax], al; mov edi, eax; mov eax, 0x3e; syscall; 
0x0000000000052ee2: or dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, rdi; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x0000000000147097: or dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000011db43: or dword ptr [rax], eax; add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x000000000010b6b2: or dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000001174bd: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000117519: or dword ptr [rax], eax; add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000000b4205: or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000095d10: or dword ptr [rax], eax; add rsp, 0x80; add rsp, 8; ret; 
0x000000000008d4de: or dword ptr [rax], eax; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x00000000000929d8: or dword ptr [rax], eax; add rsp, 0x80; mov qword ptr [rip + 0x154b80], rdx; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000094bd7: or dword ptr [rax], eax; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000000993f2: or dword ptr [rax], eax; add rsp, 0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000090265: or dword ptr [rax], eax; add rsp, 0x80; ret; 
0x0000000000151875: or dword ptr [rax], eax; lea rdx, [rip + 0x983c2]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000015198d: or dword ptr [rax], eax; lea rsi, [rip - 0x126]; lea rdi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a45: or dword ptr [rax], eax; lea rsi, [rip - 0x1de]; lea rdi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b0d: or dword ptr [rax], eax; lea rsi, [rip - 0x2a6]; lea rdi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bed: or dword ptr [rax], eax; lea rsi, [rip - 0x386]; lea rdi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151ccd: or dword ptr [rax], eax; lea rsi, [rip - 0x466]; lea rdi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015187c: or dword ptr [rax], eax; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000151ca9: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97cca]; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bc9: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97db2]; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151ae9: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97eaa]; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a21: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151971: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x0000000000154395: or dword ptr [rax], eax; mov rax, qword ptr [rax + 0x10]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000009be82: or dword ptr [rax], eax; nop word ptr cs:[rax + rax]; nop; ret; 
0x0000000000151cb4: or dword ptr [rax], eax; pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bd4: or dword ptr [rax], eax; pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151af4: or dword ptr [rax], eax; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a2c: or dword ptr [rax], eax; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151a95: or dword ptr [rax], eax; pop rbx; ret; 
0x000000000015199b: or dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e3534: or dword ptr [rax], edx; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000013b236: or dword ptr [rbp + 0x441575c0], eax; mov eax, eax; ret; 
0x000000000010e163: or dword ptr [rbp + 0xd], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000018c326: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000011db63: or dword ptr [rbx + 0xc], esp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb63: or dword ptr [rbx + 0xd], esi; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000082503: or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008dc80: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000092f88: or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000b7253: or dword ptr [rbx], edi; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b71d3: or dword ptr [rbx], edi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000005f563: or dword ptr [rcx + 0x18], ecx; add byte ptr [rdx - 1], bh; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000113263: or dword ptr [rcx + 0x64d8f700], ecx; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f563: or dword ptr [rcx + 0xc], ecx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001142c3: or dword ptr [rcx + 0xd], esp; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x4b]; syscall; 
0x00000000000881d7: or dword ptr [rcx + rax], 0; mov rsi, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x00000000000b66c3: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xb6731; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000b7ee3: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xb7f51; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000b919f: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xb920d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b9923: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xb9991; nop dword ptr [rax + rax]; ret; 
0x0000000000127492: or dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000015187b: or dword ptr [rcx], 0; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000151ae8: or dword ptr [rcx], 0x89486400; add ecx, dword ptr [rax - 0x73]; add eax, 0x97eaa; pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a52: or dword ptr [rcx], 0xc8c14800; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000010e9d4: or dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000112563: or dword ptr [rcx], ebx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000636a7: or dword ptr [rcx], esp; test byte ptr [rax], dl; or byte ptr [rcx], spl; test byte ptr [rax - 0x77], cl; ret; 
0x000000000015e783: or dword ptr [rdi + rax*8], edx; xor eax, eax; ret; 
0x000000000005c338: or dword ptr [rdi - 0x2b], esi; mov rax, rsi; ret; 
0x0000000000082510: or dword ptr [rdi], 0x20; ret; 
0x000000000004490e: or dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000176056: or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000017a437: or dword ptr [rdi], ecx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000077d7e: or dword ptr [rdi], ecx; xchg byte ptr [rdi], cl; adc eax, 0x89490000; ret 0x3145; 
0x000000000005a50d: or dword ptr [rdi], ecx; xchg dword ptr [rax], eax; add eax, 0x63480000; ret 0x8d48; 
0x000000000009cf35: or dword ptr [rdi], ecx; xchg eax, esi; ret 0x3145; 
0x000000000009cedf: or dword ptr [rdi], ecx; xchg eax, esi; ret 0xf631; 
0x000000000013e97d: or dword ptr [rdi], ecx; xchg eax, esp; ret 0x841; 
0x000000000004ab46: or dword ptr [rdi], ecx; xchg esi, edi; sbb eax, 0x894c0000; ret 0x8948; 
0x0000000000112763: or dword ptr [rdi], edx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000011e463: or dword ptr [rdx + 0xc], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000009cfb7: or dword ptr [rdx - 1], edi; cmovbe eax, edx; ret; 
0x00000000001161c4: or dword ptr [rdx], 0x8000; mov eax, 1; add rsp, 8; ret; 
0x00000000000434b5: or dword ptr [rdx], ebx; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000112c63: or dword ptr [rdx], edx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000166e33: or dword ptr [rdx], esp; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000029b89: or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x00000000001134b4: or dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000014512f: or dword ptr [rip + 0xa47aa], 2; add rsp, 8; lea rax, [rip + 0xa47bf]; ret; 
0x000000000013fc09: or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x00000000000e1963: or dword ptr [rip - 0x2708fff0], esp; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000042163: or dword ptr [rip - 0x389bffe6], ebx; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000004fe13: or dword ptr [rsi + 0x15], edx; add byte ptr [rax + 0x63], cl; ret 0xc748; 
0x0000000000164073: or dword ptr [rsi + 5], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009cfb2: or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000001175c3: or dword ptr [rsi], ebp; or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000117299: or eax, 0; add bl, ch; mov word ptr [rax - 0x77], cs; ret 0xb9e9; 
0x0000000000093557: or eax, 0x10015; add byte ptr [rax], al; mov dword ptr [rip + 0x150d48], eax; ret; 
0x0000000000093534: or eax, 0x10015; add byte ptr [rax], al; mov qword ptr [rip + 0x150d4e], rax; ret; 
0x0000000000093507: or eax, 0x10015; add byte ptr [rax], al; mov qword ptr [rip + 0x150d73], rax; ret; 
0x00000000000934e7: or eax, 0x10015; add byte ptr [rax], al; mov qword ptr [rip + 0x150d8b], rax; ret; 
0x00000000000e2a72: or eax, 0x1013f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2a42: or eax, 0x101429; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2a12: or eax, 0x101459; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e29e2: or eax, 0x101489; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2982: or eax, 0x1014e9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2952: or eax, 0x101519; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2752: or eax, 0x101719; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1962: or eax, 0x102509; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e18d3: or eax, 0x102598; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1522: or eax, 0x102949; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1445: or eax, 0x102a26; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1252: or eax, 0x102c19; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a6fd6: or eax, 0x103839; mov ecx, eax; movsxd rcx, dword ptr [r9 + rcx*4]; add rcx, r9; jmp rcx; 
0x00000000000d29c2: or eax, 0x1114a9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d2992: or eax, 0x1114d9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b2114: or eax, 0x1120f66; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000cf872: or eax, 0x1145f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000185a2f: or eax, 0x13aac; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000006d4f6: or eax, 0x13c3b1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000006cb2d: or eax, 0x13cb6e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000064068: or eax, 0x144db3; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000018434e: or eax, 0x1518d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000114ba4: or eax, 0x15894800; xor cl, byte ptr [rip + 0x5894800]; xor r9b, byte ptr [rip + 0x58d4800]; sbb eax, 0x48000d32; add esp, 8; ret; 
0x0000000000182c75: or eax, 0x16866; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000042dcb: or eax, 0x174fb0; orpd xmm0, xmm1; ret; 
0x000000000018116f: or eax, 0x1836c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000056215: or eax, 0x18dc56; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055e82: or eax, 0x18dfe9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055dee: or eax, 0x18e07d; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044772: or eax, 0x19f6f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000441c2: or eax, 0x19fca9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017f1aa: or eax, 0x1a331; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000114b05: or eax, 0x1b800; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000017d8d5: or eax, 0x1bc06; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000b6d21: or eax, 0x1c478d48; ret; 
0x00000000000b7b81: or eax, 0x1d478d48; ret; 
0x00000000001760d8: or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000015369a: or eax, 0x1f0f4feb; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000114f86: or eax, 0x200; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000008ffa0: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x153ec4]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000017a4f9: or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000d2973: or eax, 0x2656e800; idiv bh; nop word ptr [rax + rax]; mov eax, 0x24; syscall; 
0x0000000000191a61: or eax, 0x2821a; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000113d19: or eax, 0x28c48348; ret; 
0x0000000000112cfc: or eax, 0x30; mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000d2b53: or eax, 0x30c48348; pop rbx; ret; 
0x000000000011787f: or eax, 0x31ae800; add byte ptr [rax], al; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x00000000000898aa: or eax, 0x394c428b; cmovne rax, rcx; ret; 
0x00000000000433f5: or eax, 0x3f000000; mov dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; mov dword ptr [rdi], edx; ret; 
0x0000000000042c74: or eax, 0x3ffe; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000008017a: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000809a2: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x0000000000115d0a: or eax, 0x40c64100; inc dword ptr [rax]; ret; 
0x0000000000044022: or eax, 0x41000000; mov edx, 8; mov eax, ecx; syscall; 
0x000000000011782c: or eax, 0x415d5b00; pop rsp; ret; 
0x000000000009ce8e: or eax, 0x450f4800; ret 0x66c3; 
0x000000000009e5f1: or eax, 0x450f4800; ret 0xfc3; 
0x00000000000afcf2: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x00000000000d8e98: or eax, 0x48c28900; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000d8e53: or eax, 0x48ce8900; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000d332a: or eax, 0x48d08948; add esp, 8; ret; 
0x000000000011f63a: or eax, 0x48ffb70f; lea eax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000014ca7f: or eax, 0x48ffffc1; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000113b7a: or eax, 0x4c894800; and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010b9c1: or eax, 0x528b4800; sbb byte ptr [rax - 0x73], cl; pushfq; ret 0x8207; 
0x0000000000114bab: or eax, 0x5894800; xor r9b, byte ptr [rip + 0x58d4800]; sbb eax, 0x48000d32; add esp, 8; ret; 
0x00000000000a726a: or eax, 0x58d4800; mov ebp, 0x48000037; cmove eax, edx; ret; 
0x0000000000114bb2: or eax, 0x58d4800; sbb eax, 0x48000d32; add esp, 8; ret; 
0x00000000000632d2: or eax, 0x5bd88948; ret; 
0x0000000000117daf: or eax, 0x5c415d00; ret; 
0x0000000000152092: or eax, 0x5c415d5b; ret; 
0x0000000000117d79: or eax, 0x5d5b5900; pop r12; ret; 
0x0000000000075eb8: or eax, 0x634c0000; ret; 
0x000000000010c4f5: or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c5d5: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010b37d: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000011331d: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x0000000000144e8d: or eax, 0x6902e; and esi, 7; movsxd rax, dword ptr [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000b5e05: or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x000000000010bb95: or eax, 0x748d4800; and al, 0x2c; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001139b8: or eax, 0x75c08500; sub bh, byte ptr [rax + 0x71]; syscall; 
0x0000000000113a68: or eax, 0x75c08500; sub bh, byte ptr [rax + 0x72]; syscall; 
0x0000000000113b21: or eax, 0x75c08500; xor dword ptr [rdx - 1], edi; mov esi, edi; mov eax, 0x75; mov edi, edx; syscall; 
0x0000000000113bf1: or eax, 0x75c08500; xor dword ptr [rdx - 1], edi; mov esi, edi; mov eax, 0x77; mov edi, edx; syscall; 
0x00000000000b6d18: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b78: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5688: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b97a8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x0000000000112829: or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000c9a5a: or eax, 0x80000000; mov dword ptr [rdx + 4], ecx; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000017c877: or eax, 0x83480000; ret 0x4910; 
0x000000000017e411: or eax, 0x83480000; ret 0xe910; 
0x000000000017c8a5: or eax, 0x83480000; ret 0xeb10; 
0x000000000006006a: or eax, 0x83480000; ret; 
0x00000000000341a3: or eax, 0x83486274; ret; 
0x00000000000e7b0d: or eax, 0x83489066; ret; 
0x00000000000fa43f: or eax, 0x840f013c; add rax, 0x2c890000; and al, 0xeb; ret; 
0x00000000000d28c6: or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000000bccc6: or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001134e5: or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x0000000000113445: or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010d015: or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000010d665: or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001175c5: or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001120c4: or eax, 0x85008b00; sal byte ptr [rbp + 0x24], 0x49; mov edx, ecx; mov eax, 0x146; syscall; 
0x00000000001117b2: or eax, 0x85008b00; sal byte ptr [rbp + 0x36], 0x41; mov eax, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x000000000010ce44: or eax, 0x85008b00; sal byte ptr [rbp + 0x65], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000010ccb5: or eax, 0x85008b00; sal byte ptr [rbp + 0x69], 0x89; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000010629f: or eax, 0x85fffffe; sal byte ptr [rsp + rbp*4 + 0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x00000000000b74c9: or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x0000000000047fcf: or eax, 0x89000003; ret 0x3d83; 
0x000000000015a955: or eax, 0x89516; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015a905: or eax, 0x89566; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000119022: or eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x00000000000d0f1b: or eax, 0x940fc085; ret; 
0x00000000000cdaca: or eax, 0x974c985; xor eax, eax; ret; 
0x000000000010907e: or eax, 0xa46a5; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000ee73c: or eax, 0xbdd3f; movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000002974e: or eax, 0xbe0f4890; ret 0xf641; 
0x0000000000027291: or eax, 0xc0890017; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000d36b8: or eax, 0xc0b60f00; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d6af3: or eax, 0xc1b60f00; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ce0e2: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x00000000001177ec: or eax, 0xc4834800; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000011f155: or eax, 0xc4d16; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f122: or eax, 0xc4d49; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0f2: or eax, 0xc4d79; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0c5: or eax, 0xc4da6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ec52: or eax, 0xc5219; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ec25: or eax, 0xc5246; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebf2: or eax, 0xc5279; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ebc2: or eax, 0xc52a9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eaf2: or eax, 0xc5379; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ea02: or eax, 0xc5469; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e975: or eax, 0xc54f6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e945: or eax, 0xc5526; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e8e5: or eax, 0xc5586; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e8b2: or eax, 0xc55b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e882: or eax, 0xc55e9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e855: or eax, 0xc5616; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e822: or eax, 0xc5649; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7f2: or eax, 0xc5679; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7c2: or eax, 0xc56a9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e792: or eax, 0xc56d9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e765: or eax, 0xc5706; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e735: or eax, 0xc5736; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e705: or eax, 0xc5766; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e675: or eax, 0xc57f6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e645: or eax, 0xc5826; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5e2: or eax, 0xc5889; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e5b2: or eax, 0xc58b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e582: or eax, 0xc58e9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e552: or eax, 0xc5919; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e525: or eax, 0xc5946; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e4f2: or eax, 0xc5979; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e492: or eax, 0xc59d9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e462: or eax, 0xc5a09; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e432: or eax, 0xc5a39; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e402: or eax, 0xc5a69; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011e342: or eax, 0xc5b29; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ddd2: or eax, 0xc6099; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dda5: or eax, 0xc60c6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dd22: or eax, 0xc6149; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbf2: or eax, 0xc6279; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbc2: or eax, 0xc62a9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011db62: or eax, 0xc6309; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011db2b: or eax, 0xc6340; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011da22: or eax, 0xc6449; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d9f2: or eax, 0xc6479; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb65: or eax, 0xc76400; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011333d: or eax, 0xc76400; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000112227: or eax, 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000010cbd5: or eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011b9e5: or eax, 0xc8486; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b9b2: or eax, 0xc84b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b985: or eax, 0xc84e6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b952: or eax, 0xc8519; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b922: or eax, 0xc8549; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8f5: or eax, 0xc8576; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8c2: or eax, 0xc85a9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b895: or eax, 0xc85d6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b865: or eax, 0xc8606; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b832: or eax, 0xc8639; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b802: or eax, 0xc8669; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b7d5: or eax, 0xc8696; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114f21: or eax, 0xc8c14800; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000117792: or eax, 0xcc6d9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117762: or eax, 0xcc709; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117732: or eax, 0xcc739; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117702: or eax, 0xcc769; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001176d5: or eax, 0xcc796; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001176a2: or eax, 0xcc7c9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117672: or eax, 0xcc7f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001175a2: or eax, 0xcc8c9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117572: or eax, 0xcc8f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001172f4: or eax, 0xccb77; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001146e2: or eax, 0xcf789; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001146b2: or eax, 0xcf7b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114682: or eax, 0xcf7e9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114352: or eax, 0xcfb19; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f2: or eax, 0xcfc79; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141c2: or eax, 0xcfca9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113fd2: or eax, 0xcfe99; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113e82: or eax, 0xcffe9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011787c: or eax, 0xd078f; call 0x117ba0; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000113422: or eax, 0xd0a49; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113262: or eax, 0xd0c09; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112e72: or eax, 0xd0ff9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000111d65: or eax, 0xd2106; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115d07: or eax, 0xd2204; mov byte ptr [r8 - 1], 0; ret; 
0x000000000010eb32: or eax, 0xd5339; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb02: or eax, 0xd5369; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ead2: or eax, 0xd5399; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eaa5: or eax, 0xd53c6; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea72: or eax, 0xd53f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea42: or eax, 0xd5429; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea12: or eax, 0xd5459; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e9e5: or eax, 0xd5486; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e9b2: or eax, 0xd54b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e1f5: or eax, 0xd5c76; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e1c2: or eax, 0xd5ca9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e192: or eax, 0xd5cd9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e162: or eax, 0xd5d09; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d8a2: or eax, 0xd65c9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d872: or eax, 0xd65f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d7b2: or eax, 0xd66b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d782: or eax, 0xd66e9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d752: or eax, 0xd6719; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d722: or eax, 0xd6749; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d6f2: or eax, 0xd6779; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d522: or eax, 0xd6949; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc32: or eax, 0xd7239; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cc02: or eax, 0xd7269; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb42: or eax, 0xd7329; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb12: or eax, 0xd7359; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9f2: or eax, 0xd7479; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c9c2: or eax, 0xd74a9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c4f2: or eax, 0xd7979; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101902: or eax, 0xe2569; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001018d2: or eax, 0xe2599; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001018a2: or eax, 0xe25c9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101872: or eax, 0xe25f9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101842: or eax, 0xe2629; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000101812: or eax, 0xe2659; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001017e2: or eax, 0xe2689; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001017b2: or eax, 0xe26b9; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001016d2: or eax, 0xe6611; mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000001129a2: or eax, 0xea894800; mov esi, 0x5401; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x000000000013f10e: or eax, 0xee6204e8; jmp qword ptr [rsi + 0xf]; 
0x000000000016b38a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000a3fe2: or eax, 0xf700002a; ret; 
0x000000000016b393: or eax, 0xf7f0ff3; ret; 
0x0000000000093422: or eax, 0xf80f44f6; add dword ptr [rbp + 0xe], esi; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000bb451: or eax, 0xf9834800; add al, 0x48; cmovne eax, edx; ret; 
0x0000000000042a94: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000441cd: or eax, 0xffffffff; ret; 
0x00000000001827f9: or eax, 1; ret; 
0x0000000000189731: or eax, 1; vzeroupper; ret; 
0x00000000000ff51b: or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x0000000000062761: or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001317d7: or eax, dword ptr [rax]; add byte ptr [rax + rax], al; add al, ch; cmp ebp, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001328bf: or eax, dword ptr [rax]; add byte ptr [rax + rax], al; add al, ch; sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001320cf: or eax, dword ptr [rax]; add byte ptr [rax + rax], al; add al, ch; xor ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000075be2: or eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x0000000000107dc1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x3101; 
0x000000000017ba6d: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e5b1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017ba91: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001470a2: or eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000117561: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000401b9: or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc07], al; xchg eax, esi; or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe07], al; ret; 
0x00000000000401c2: or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe07], al; ret; 
0x0000000000077b0b: or eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], al; out dx, al; add dword ptr [rax - 0x50f43], eax; jmp qword ptr [rax]; 
0x000000000004e268: or eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], al; ret 0x4835; 
0x000000000012bf03: or eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000489ee: or eax, dword ptr [rax]; add dword ptr [rax], eax; ret; 
0x000000000012f695: or eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x00000000001376e3: or eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000012e352: or eax, dword ptr [rax]; call 0xbbb80; add rsp, 8; ret; 
0x0000000000136e66: or eax, dword ptr [rax]; call rax; 
0x000000000012c9d5: or eax, dword ptr [rax]; lea rsi, [rip - 0x13e]; lea rdi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013770c: or eax, dword ptr [rax]; lea rsi, [rip - 0x45]; lea rdi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c76d: or eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f93d7: or eax, dword ptr [rax]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000f6efd: or eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f9bb1: or eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f8a49: or eax, dword ptr [rax]; movzx edx, cl; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000fa0bd: or eax, dword ptr [rax]; movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000fca58: or eax, dword ptr [rax]; movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x00000000000ee73f: or eax, dword ptr [rax]; movzx r12d, r12b; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000000fc7d6: or eax, dword ptr [rax]; movzx r13d, r13b; movsxd rax, dword ptr [rdi + r13*4]; add rax, rdi; jmp rax; 
0x00000000000ee836: or eax, dword ptr [rax]; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x000000000012c6a5: or eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012e01d: or eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000012c91c: or eax, dword ptr [rax]; pop rbp; ret; 
0x000000000012befc: or eax, dword ptr [rax]; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x000000000012bbe3: or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012b7ef: or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136e2c: or eax, dword ptr [rax]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000012c13f: or eax, dword ptr [rax]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000010ea94: or eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000012d21c: or eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x60b2a; cmove rax, rdx; ret; 
0x000000000007de11: or eax, ebx; adc al, byte ptr [rax]; mov r9, qword ptr [rbp - 0x500]; movsxd rax, dword ptr [rax + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000043179: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000042d67: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000afe07: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000989c5: or eax, edi; add eax, 0x14ec08; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012f31f: or eax, edi; bswap eax; ret; 
0x00000000000afe0e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000042ab3: or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000047c6a: or eax, edx; ret; 
0x0000000000043512: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000001127ce: or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000011d912: or eax, esi; ret; 
0x00000000000926b4: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000012c269: or ebp, ebx; and ecx, dword ptr [rdi]; mov cl, 0x35; lodsd eax, dword ptr [rsi]; ret; 
0x000000000012d654: or ebp, ecx; jp 0x12d648; jmp qword ptr [rsi + 0xf]; 
0x000000000012e6d4: or ebp, ecx; mov dh, 0xcd; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000015e7d4: or ebp, ecx; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000012ece4: or ebp, ecx; xchg al, dl; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000112f47: or ebp, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000084f20: or ebp, edx; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000153e21: or ebx, dword ptr [rsi - 1]; jmp qword ptr [rsi + 0x66]; 
0x000000000016b553: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000000901f7: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000a5cb6: or ecx, dword ptr [rax + 0x29]; ret; 
0x00000000000ecdff: or ecx, dword ptr [rax + 0x63]; ret 0x634c; 
0x000000000009a93f: or ecx, dword ptr [rax + 0x63]; ret; 
0x000000000008e547: or ecx, dword ptr [rax + 1]; ret 0x8949; 
0x0000000000084bd4: or ecx, dword ptr [rax - 0x73]; add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x0000000000082554: or ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0x18; ret; 
0x000000000014dd65: or ecx, dword ptr [rax - 0x77]; adc r11b, bpl; ret; 
0x000000000012e2cc: or ecx, dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000002eab5: or ecx, dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001164d2: or ecx, dword ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000127dcd: or ecx, dword ptr [rax - 0x7d]; ret 0x4830; 
0x00000000000bb144: or ecx, dword ptr [rax - 0x7d]; ret 0x8b04; 
0x00000000000e0e33: or ecx, dword ptr [rax - 0x7d]; ret 0xf01; 
0x00000000000d1d83: or ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000131c76: or ecx, dword ptr [rax]; add al, ch; ret 0x112; 
0x0000000000092f89: or ecx, dword ptr [rax]; pop rbx; ret; 
0x0000000000168e59: or ecx, dword ptr [rbp + rcx*4 + 0x1d]; lahf; add eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000cd994: or ecx, dword ptr [rbx + 0x463b2847]; sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000cd9e4: or ecx, dword ptr [rbx + 0x463b3847]; cmp byte ptr [rbp + 0x13], dh; ret; 
0x00000000000a54b0: or ecx, dword ptr [rcx + 0x29]; ret; 
0x00000000000c2761: or ecx, dword ptr [rcx - 7]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000017a497: or ecx, dword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b5dc3: or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000844eb: or ecx, dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000011331c: or ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd0b9d]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x000000000011333c: or ecx, dword ptr [rip + 0xc76400]; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000a8ba7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000125d8c: or edi, dword ptr [rax + 1]; ret; 
0x000000000012a594: or edi, dword ptr [rax + 7]; ret; 
0x000000000013acac: or edi, dword ptr [rdx + 0x104]; cmove eax, edx; ret; 
0x00000000000e34cb: or edi, dword ptr [rdx + 0x7f]; mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x0000000000118802: or edi, eax; mov qword ptr [rdx], rdi; pop rbx; pop rbp; ret; 
0x0000000000117763: or edi, eax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015e693: or edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000015e627: or edi, ebp; jmp qword ptr [rsi + 0xf]; 
0x00000000000b5423: or edi, edi; loope 0xb548d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b66c7: or edi, edi; loope 0xb6731; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000b6a23: or edi, edi; loope 0xb6a8d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b7ee7: or edi, edi; loope 0xb7f51; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000b86d3: or edi, edi; loope 0xb873d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b91a3: or edi, edi; loope 0xb920d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b9927: or edi, edi; loope 0xb9991; nop dword ptr [rax + rax]; ret; 
0x000000000008926f: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000117520: or edx, 0x40; mov eax, ecx; syscall; 
0x000000000010bfca: or edx, 0xffffffff; mov esi, eax; mov edi, edx; mov eax, 0x75; syscall; 
0x000000000010bff2: or edx, 0xffffffff; mov esi, eax; mov edi, edx; mov eax, 0x77; syscall; 
0x00000000000586c7: or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042a7f: or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x000000000004394b: or edx, eax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x00000000000435b2: or edx, eax; mov qword ptr [rsp - 0x30], rdx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x0000000000043073: or edx, eax; mov qword ptr [rsp - 8], rdx; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000005870c: or edx, eax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000e34c9: or edx, eax; or edi, dword ptr [rdx + 0x7f]; mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x00000000000b033f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce1cb: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b0500: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005bd4c: or edx, ecx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x0000000000058709: or edx, ecx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000432e8: or edx, edi; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f1b: or edx, edi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000586c5: or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000001293b9: or esi, 0xffffffff; dec dword ptr [rcx]; ret; 
0x000000000008998d: or esi, dword ptr [rcx]; rol byte ptr [rbx - 0x6af0f808], cl; ret 0xc283; 
0x0000000000145164: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000082661: or esi, eax; mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000058748: or esi, eax; mov rax, qword ptr [rdi]; mov word ptr [rsp - 0x10], si; mov qword ptr [rsp - 0x18], rax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000112817: or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000ba4a3: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016b473: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000012e0b7: or esi, edi; call qword ptr [rax - 0x18]; 
0x000000000014e8c2: or esi, edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000e4418: or esi, esi; ret 0xf04; 
0x000000000009cdaf: or esp, 0x40000000; lea rax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x0000000000082504: or esp, dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008dc81: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000111574: or esp, dword ptr [rsi - 0x77]; push rsi; xor ax, ax; ret; 
0x0000000000101b63: or qword ptr [rax + 8], 0x2000; ret; 
0x000000000015e782: or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000004490d: or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000176055: or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000017a436: or qword ptr [rdi], rcx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000011751f: or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000000eae7b: or r11b, bpl; ficom dword ptr [rax + 0xcb85b]; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000016b5c2: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x000000000016b552: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000014e8c1: or r14, rdi; jmp qword ptr [rsi + 0x66]; 
0x000000000017b9e8: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000016b4e2: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000016b472: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x0000000000145116: or r8b, byte ptr [r8]; add rsp, 8; ret; 
0x000000000014513e: or r8b, byte ptr [r8]; ret; 
0x0000000000145100: or r8b, byte ptr [r8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000109080: or r8b, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000012f694: or r8d, dword ptr [r8]; add rax, qword ptr fs:[0]; ret; 
0x00000000000d2008: or r9b, bpl; ret; 
0x0000000000030df0: or r9b, byte ptr [r8 + 0x39]; ret 0x1176; 
0x0000000000079605: or r9b, r13b; ret 0xfff4; 
0x00000000001760d7: or rax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000017a4f8: or rax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000080179: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000809a1: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x00000000000bb3ae: or rax, 0x450f4800; ret 0x66c3; 
0x00000000000c9a59: or rax, 0xffffffff80000000; mov dword ptr [rdx + 4], ecx; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000d6af2: or rax, 0xffffffffc1b60f00; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000441cc: or rax, 0xffffffffffffffff; ret; 
0x0000000000184f22: or rax, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000042d66: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000afe06: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000afe0d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000047c69: or rax, rdx; ret; 
0x0000000000043511: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000011d911: or rax, rsi; ret; 
0x000000000017a496: or rcx, qword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000a8ba6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000118801: or rdi, rax; mov qword ptr [rdx], rdi; pop rbx; pop rbp; ret; 
0x000000000004394a: or rdx, rax; mov qword ptr [rsp + 8], rdx; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x00000000000435b1: or rdx, rax; mov qword ptr [rsp - 0x30], rdx; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x0000000000043072: or rdx, rax; mov qword ptr [rsp - 8], rdx; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000005870b: or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000b033e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000ce1ca: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b04ff: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005bd4b: or rdx, rcx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x0000000000058708: or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f1a: or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042dd0: orpd xmm0, xmm1; ret; 
0x0000000000042f6a: orpd xmm0, xmmword ptr [rip + 0x174e2e]; mulsd xmm0, qword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f38: orpd xmm0, xmmword ptr [rip + 0x174e70]; mulsd xmm0, qword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042dd1: orps xmm0, xmm1; ret; 
0x000000000004332c: orps xmm0, xmmword ptr [rip + 0x174a8d]; mulss xmm0, dword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000432ff: orps xmm0, xmmword ptr [rip + 0x174ada]; mulss xmm0, dword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f6b: orps xmm0, xmmword ptr [rip + 0x174e2e]; mulsd xmm0, qword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f39: orps xmm0, xmmword ptr [rip + 0x174e70]; mulsd xmm0, qword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000001824d6: out 0, al; add byte ptr [rax], al; add rax, rdi; vzeroupper; ret; 
0x000000000012c7a6: out 0, al; add byte ptr [rax], al; syscall; 
0x0000000000147551: out 0, eax; add byte ptr [rax - 0x75], cl; and al, 8; mov esi, r12d; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012f331: out 0x10, eax; movzx eax, si; or eax, edi; bswap eax; ret; 
0x00000000000432e6: out 0x17, eax; or edx, edi; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000012f318: out 0x18, eax; and eax, 0xffffff; or eax, edi; bswap eax; ret; 
0x0000000000166855: out 0x27, eax; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000922f7: out 0x31, eax; ror byte ptr [rax - 0x73], cl; xor eax, 0xffffdf0f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000090809: out 0x31, eax; ror byte ptr [rax - 0x73], cl; xor eax, 0xfffff9fd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902f0: out 0x31, eax; ror byte ptr [rax - 0x73], cl; xor eax, 0xffffff16; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000042f15: out 0x34, eax; and rdx, rax; or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000164f95: out 0x3e, eax; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001481a3: out 0x41, al; call qword ptr [rdi + 0x40]; 
0x00000000000420f1: out 0x41, al; mov ecx, dword ptr [rax + rax*4 + 8]; add rcx, qword ptr [rdi + 0x20]; mov rax, rcx; ret; 
0x0000000000083560: out 0x41, eax; call qword ptr [rbp + 0x38]; 
0x000000000010c359: out 0x44, al; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000001488e8: out 0x44, eax; sub edx, esp; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x0000000000145115: out 0x47, eax; or al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000012a121: out 0x48, al; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000585bb: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000147e9d: out 0x48, al; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000145908: out 0x48, al; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000005c2a9: out 0x48, al; mov eax, esi; ret; 
0x0000000000075360: out 0x48, al; mov edi, dword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x00000000000454aa: out 0x48, al; mov edi, dword ptr [rsp + 0x18]; call rbx; 
0x000000000014755b: out 0x48, al; mov edi, ebp; call qword ptr [rax + 0x30]; 
0x000000000014d4ae: out 0x48, al; mov edi, ebp; call qword ptr [rax + 0x48]; 
0x000000000013ba25: out 0x48, al; mov edi, ebp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x0000000000084350: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x58]; 
0x0000000000147f1a: out 0x48, al; mov edi, ebx; call qword ptr [rax]; 
0x0000000000046394: out 0x48, al; mov edi, ebx; mov rax, qword ptr [rsp + 8]; lea r13, [r14 + rbp]; call rax; 
0x000000000008672d: out 0x48, al; mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000043ca3: out 0x48, al; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012d459: out 0x48, al; sub esp, 8; call 0x12dbd0; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x0000000000144748: out 0x48, eax; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000e2853: out 0x48, eax; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rip + 0x107b50]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e27c3: out 0x48, eax; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rip + 0x107be0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015529f: out 0x48, eax; mov dword ptr [rsp], eax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x00000000000badd0: out 0x48, eax; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000028367: out 0x48, eax; mov ecx, dword ptr [rbp - 0x70]; call rcx; 
0x00000000000361a0: out 0x48, eax; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009a288: out 0x48, eax; sub eax, 0x10; ret; 
0x000000000012e4e8: out 0x48, eax; sub esp, 8; call 0x12dbd0; nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000018e25f: out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000165556: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000454e5: out 0x4c, al; mov edi, ebp; call rbx; 
0x00000000000867b8: out 0x4c, al; mov edi, esi; call qword ptr [rax + 0x18]; 
0x00000000001551fc: out 0x4c, al; mov edi, esp; call qword ptr [rax]; 
0x000000000015529c: out 0x4c, al; mov edi, esp; mov qword ptr [rsp], rax; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 8]; 
0x0000000000089a5d: out 0x4c, eax; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089963: out 0x4c, eax; lea ecx, [rsp + 0x28]; call rbx; 
0x0000000000165386: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165482: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653ce: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009628f: out 0x4c, eax; mov dword ptr [rsp + 8], ebx; call qword ptr [rax]; 
0x000000000009fea0: out 0x4c, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000dbf38: out 0x5b, eax; pop rbp; pop r12; ret; 
0x00000000001376a6: out 0x62, al; add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; mov rdi, rbx; call rax; 
0x000000000013fac6: out 0x6e, al; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x00000000000352d3: out 0x80, eax; sete al; ret; 
0x0000000000151a31: out 0x81, eax; or dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000011b986: out 0x84, al; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013b351: out 0x88, eax; add dword ptr [rcx + 0xf], eax; mov dh, 0x42; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x000000000011e048: out 0x89, al; fistp qword ptr [rax + 0x113]; syscall; 
0x000000000011eeec: out 0x89, al; fistp qword ptr [rax + 0x2c]; syscall; 
0x000000000011eccc: out 0x89, al; fistp qword ptr [rax + 0x2d]; syscall; 
0x00000000000feec7: out 0x89, eax; ret 0xb60f; 
0x0000000000148df1: out 0x89, eax; ret; 
0x00000000001132ee: out 0x90, al; mov eax, 0xc; syscall; 
0x000000000012bd53: out 0xb, al; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe5df]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd23: out 0xb, al; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe607]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcf3: out 0xb, al; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe62f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcc3: out 0xb, al; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe657]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015e626: out 0xb, al; std; jmp qword ptr [rsi + 0xf]; 
0x000000000012bc93: out 0xb, eax; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe67f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc63: out 0xb, eax; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6a7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc33: out 0xb, eax; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc03: out 0xb, eax; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe6f7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbd7: out 0xb, eax; add byte ptr [rbp + 0x481674c0], al; mov eax, dword ptr [rip + 0xbe71b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb2b: out 0xbf, al; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000000e38fd: out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000000bb359: out 0xc, al; add byte ptr [rax - 0x73], cl; add eax, 0x116bd; cmove rax, rdx; ret; 
0x000000000018c955: out 0xc3, eax; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d016: out 0xc6, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000154419: out 0xc7, eax; add al, 0x24; add al, byte ptr [rax]; add byte ptr [rax], al; call rdx; 
0x000000000009d735: out 0xc7, eax; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x000000000016cd16: out 0xc9, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000009d495: out 0xc9, eax; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x000000000016ca16: out 0xcc, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c716: out 0xcf, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c416: out 0xd2, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c116: out 0xd5, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be16: out 0xd8, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000f05d2: out 0xe8, al; mov eax, 0x89ffffa8; ret 0xc031; 
0x00000000000ca0b4: out 0xe8, al; pop rdx; mov bl, 0xf5; jmp qword ptr [rsi + 0xf]; 
0x0000000000033ff7: out 0xe8, eax; adc r15d, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000358c9: out 0xe8, eax; add dword ptr [rdi + 6], esi; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000c25ab: out 0xe8, eax; jmp qword ptr [rax - 7]; 
0x0000000000196b8f: out 0xe8, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000bff27: out 0xe8, eax; jno 0xbff25; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000c275f: out 0xe8, eax; or ecx, dword ptr [rcx - 7]; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000029868: out 0xe8, eax; ret 0xffb9; 
0x0000000000152c68: out 0xe8, eax; stosb byte ptr [rdi], al; in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x000000000009e6e0: out 0xe8, eax; stosb byte ptr [rdi], al; push -8; lcall [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000013e8e2: out 0xe8, eax; xor byte ptr [rdx - 0x12], ch; jmp qword ptr [rsi + 0xf]; 
0x0000000000055b06: out 0xe9, eax; ret 0xfffd; 
0x00000000000489de: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048a2d: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x00000000000ced07: out 0xf, eax; test byte ptr [rdx + 0x4c000000], bl; mov dword ptr [rsp + 0x50], esp; mov rsi, r13; mov rdi, rbp; call rbx; 
0x00000000000ba604: out 0xf0, al; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x0000000000115b9b: out 0xf0, eax; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000016ad5a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016adda: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000010b80d: out 0xf8, eax; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000004486f: out 0xf8, eax; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000014722c: out 0xfc, al; call qword ptr [rax + 0x30]; 
0x00000000000a5231: out 0xff, al; dec dword ptr [rax - 0x75]; mov byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000097fca: out 0xff, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000fafc3: out 0xff, al; jmp qword ptr [rsi + 0x2e]; 
0x000000000005b5d2: out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x000000000008e836: out 0xff, eax; dec dword ptr [rax - 0x75]; adc al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000097f22: out 0xff, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012b711: out 0xff, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000074078: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000078cfb: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000010d81e: out 1, al; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010d6a7: out 1, eax; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000010d689: out 1, eax; add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000009d3ca: out 2, al; lea rax, [rip + 0xb8dd]; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x000000000013b5f0: out 4, al; lea rax, [rdi + rsi + 8]; ret; 
0x00000000001446cb: out 6, eax; add al, ch; std; or bh, ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000144e93: out 7, al; movsxd rax, dword ptr [rcx + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x000000000012f34d: out 8, eax; movzx eax, sil; or eax, edi; bswap eax; ret; 
0x0000000000134fe7: out dx, al; adc bh, dh; ret 0x8080; 
0x000000000016a3b7: out dx, al; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000a430b: out dx, al; add al, 0x83; cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4006; 
0x000000000009e5e9: out dx, al; add byte ptr [rax], al; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x0000000000071f00: out dx, al; add dword ptr [rax + rax*2 - 0x77], esi; ret 0x3145; 
0x000000000006986f: out dx, al; add dword ptr [rax + rcx*2 - 0x77], esi; ret 0x8948; 
0x0000000000077b10: out dx, al; add dword ptr [rax - 0x50f43], eax; jmp qword ptr [rax]; 
0x000000000007b8fa: out dx, al; add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x00000000000a085b: out dx, al; add dword ptr [rbp - 0xf], esi; xor eax, eax; ret; 
0x000000000007af8e: out dx, al; add dword ptr [rbx - 0x8f77b], ecx; inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x000000000004b973: out dx, al; add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x000000000013b086: out dx, al; add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000148859: out dx, al; call qword ptr [rbx + 0x40]; 
0x000000000009c2ee: out dx, al; call rax; 
0x000000000013ff35: out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x00000000001376dc: out dx, al; dec dword ptr [rax - 0x77]; add eax, 0xb2f3b; add rsp, 8; ret; 
0x000000000013b9a0: out dx, al; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000137b93: out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000137c48: out dx, al; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000014e6b5: out dx, al; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000014e6ed: out dx, al; dec dword ptr [rax - 0x77]; ret 0xc6eb; 
0x000000000013b8fc: out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000138d83: out dx, al; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000156443: out dx, al; in al, dx; jmp qword ptr [rsi + 0x2e]; 
0x000000000015e5bb: out dx, al; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000138da4: out dx, al; jmp qword ptr [rsi + 0x2e]; 
0x000000000013b8e3: out dx, al; jmp qword ptr [rsi + 0x66]; 
0x000000000013dd14: out dx, al; jmp qword ptr [rsi + 0xf]; 
0x000000000016b160: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011e269: out dx, al; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000005ca7e: out dx, al; mov bl, 0x15; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x25e8; 
0x0000000000141f40: out dx, al; mov dword ptr [rsp + 0x14], eax; mov edi, dword ptr [rsp + 0x10]; mov eax, 0x81; syscall; 
0x0000000000044f9a: out dx, al; mov dword ptr [rsp + 0x14], eax; mov edi, r12d; mov eax, 0x81; syscall; 
0x0000000000127671: out dx, al; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x000000000009d6eb: out dx, al; mov edi, dword ptr [rip + 0x14a032]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001135d0: out dx, al; mov edi, ebx; mov eax, 0x127; syscall; 
0x0000000000113680: out dx, al; mov edi, ebx; mov eax, 0x128; syscall; 
0x0000000000112107: out dx, al; mov edi, ebx; mov eax, 0x146; syscall; 
0x00000000000e14ae: out dx, al; mov edi, ebx; mov eax, 0xf7; syscall; 
0x000000000012c717: out dx, al; mov edi, ebx; mov eax, ecx; syscall; 
0x000000000011fe93: out dx, al; mov edi, ebx; mov qword ptr [rbp - 0x830], rax; mov eax, r14d; syscall; 
0x000000000011e0ea: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x130; syscall; 
0x000000000011347a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x13; syscall; 
0x000000000011351a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x14; syscall; 
0x000000000011eb4a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x2a; syscall; 
0x000000000011ea7a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x2b; syscall; 
0x000000000011ef8a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x2e; syscall; 
0x000000000011ee2a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 0x2f; syscall; 
0x000000000010d04a: out dx, al; mov edi, ebx; mov r8d, eax; mov eax, 1; syscall; 
0x000000000010cfaa: out dx, al; mov edi, ebx; mov r8d, eax; xor eax, eax; syscall; 
0x00000000001137be: out dx, al; mov edi, r12d; mov eax, 0x147; syscall; 
0x000000000011391e: out dx, al; mov edi, r12d; mov eax, 0x148; syscall; 
0x000000000012b77e: out dx, al; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000016555a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000011ded0: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x114; syscall; 
0x00000000001122f2: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x115; syscall; 
0x000000000011df82: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x116; syscall; 
0x000000000010b342: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x11; syscall; 
0x0000000000112390: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x11d; syscall; 
0x000000000011f482: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x120; syscall; 
0x000000000010b3f2: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x12; syscall; 
0x000000000011f5d2: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x133; syscall; 
0x00000000000e13ad: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000011f752: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0x45; syscall; 
0x000000000011de32: out dx, al; mov r8d, eax; mov edi, ebx; mov eax, 0xe8; syscall; 
0x0000000000044eaa: out dx, al; mov r8d, eax; mov r10d, 8; mov rdi, qword ptr [rsp]; mov eax, ecx; syscall; 
0x00000000001457b5: out dx, al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000001456ee: out dx, al; mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x0000000000075bea: out dx, al; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x00000000000ced15: out dx, al; mov rdi, rbp; call rbx; 
0x00000000001174b8: out dx, al; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000008eca8: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000008e755: out dx, al; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000009afcb: out dx, al; mov rdi, rbx; call rax; 
0x000000000010c4c9: out dx, al; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000000e1663: out dx, al; mov rdi, rbx; mov edx, eax; mov eax, 0x23; syscall; 
0x000000000010d801: out dx, al; mov rdi, rbx; mov edx, eax; mov eax, 0x55; syscall; 
0x0000000000048b1b: out dx, al; mov rdi, rbx; mov r8d, eax; mov eax, 0x13e; syscall; 
0x00000000001175fb: out dx, al; mov rdi, rbx; mov r8d, eax; mov eax, 0x1a; syscall; 
0x000000000011171b: out dx, al; mov rdi, rbx; mov r8d, eax; mov eax, 7; syscall; 
0x000000000016b16a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000bad69: out dx, al; or al, 0; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x000000000018357e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000002d837: out dx, al; ret 0; 
0x0000000000047298: out dx, al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000031f2e: out dx, al; sbb r8d, dword ptr [r8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000108dde: out dx, al; stc; dec dword ptr [rcx - 0x77]; ret 0x8545; 
0x00000000001665f0: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c20: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000585e3: out dx, al; xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000bb231: out dx, al; xor edi, edi; mov rax, rdi; ret; 
0x0000000000126689: out dx, al; xor r15d, r15d; call rax; 
0x00000000000cdc8d: out dx, eax; adc byte ptr [rax + 1], cl; clc; ret; 
0x000000000016a237: out dx, eax; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e3635: out dx, eax; add byte ptr [rax], al; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x0000000000117dad: out dx, eax; add cl, byte ptr [rip + 0x5c415d00]; ret; 
0x000000000012c1b1: out dx, eax; add dword ptr [rax + 0x39], ecx; ret 0x1174; 
0x0000000000139c88: out dx, eax; add ecx, dword ptr [rax - 0x7d]; call qword ptr [rcx]; 
0x0000000000145893: out dx, eax; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000008722e: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008728a: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000163dd4: out dx, eax; and byte ptr [rbp + rcx*4 + 0x1d], cl; movabs dword ptr [0x4993146349000550], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x000000000014722a: out dx, eax; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000146996: out dx, eax; call 0x10d660; mov rax, qword ptr [r15 + 0x38]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000147ac5: out dx, eax; call qword ptr [rax + 0x10]; 
0x0000000000091221: out dx, eax; call qword ptr [rax + 0x18]; 
0x00000000001457e0: out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000147904: out dx, eax; call qword ptr [rax + 0x28]; 
0x000000000014719c: out dx, eax; call qword ptr [rax + 0x30]; 
0x000000000007b1f2: out dx, eax; call qword ptr [rax + 0x38]; 
0x000000000014d4b1: out dx, eax; call qword ptr [rax + 0x48]; 
0x00000000001457a3: out dx, eax; call qword ptr [rax + 8]; 
0x0000000000087df7: out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000008e65e: out dx, eax; call qword ptr [rbx + 0x40]; 
0x0000000000147ad3: out dx, eax; call qword ptr [rbx]; 
0x0000000000026c02: out dx, eax; call rax; 
0x00000000000454e8: out dx, eax; call rbx; 
0x0000000000155d52: out dx, eax; call rcx; 
0x0000000000147596: out dx, eax; call rdx; 
0x00000000000e34fe: out dx, eax; cmp r8, 0x54190100; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000012fedf: out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001317e0: out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012576f: out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x000000000012954b: out dx, eax; dec dword ptr [rcx - 0x75]; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x00000000001276b4: out dx, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000125d6f: out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000093f4b: out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000012e3cc: out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000016b1e0: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000001666b3: out dx, eax; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001665f4: out dx, eax; lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce3: out dx, eax; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c24: out dx, eax; lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000146179: out dx, eax; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000bbe5d: out dx, eax; lea r9, [rsp + 0x30]; call rbx; 
0x000000000015abcd: out dx, eax; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000007ae86: out dx, eax; mov dword ptr [rbp - 0x978], r10d; mov byte ptr [rbp - 0x95c], r9b; call rax; 
0x000000000014587c: out dx, eax; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f6: out dx, eax; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000014d435: out dx, eax; mov dword ptr [rbx + 0x70], edx; call qword ptr [rax + 0x30]; 
0x00000000001174bb: out dx, eax; mov eax, 9; syscall; 
0x0000000000101bb0: out dx, eax; mov eax, dword ptr [rdx + 8]; ret; 
0x000000000008c3a0: out dx, eax; mov eax, r9d; syscall; 
0x0000000000146472: out dx, eax; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000016538a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165486: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653d2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a6c10: out dx, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000007cdbc: out dx, eax; mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000011ba38: out dx, eax; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000571b0: out dx, eax; mov rax, rdx; ret; 
0x000000000014bf4e: out dx, eax; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x00000000000bbfa9: out dx, eax; mov rdx, qword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000014c15d: out dx, eax; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x00000000000bc251: out dx, eax; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000016b1ea: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000018367d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000146eae: out dx, eax; pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000087e60: out dx, eax; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000088e6b: out dx, eax; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000018af73: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018af88: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018af9d: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f85ca: out dx, eax; ret 0x110f; 
0x000000000012c96d: out dx, eax; ret 0xb; 
0x0000000000117b7d: out dx, eax; ret 0xc; 
0x00000000000b9b73: out dx, eax; ret 0xf66; 
0x0000000000028f6d: out dx, eax; ret 0xffff; 
0x00000000000bacf0: out dx, eax; ret; 
0x00000000001560a0: out dx, eax; ror byte ptr [rdi], 0x11; and al, 0x28; call rdx; 
0x0000000000091ad7: out dx, eax; ror byte ptr [rdi], 0x11; cmp r11b, bpl; movabs dword ptr [0xffffffffc0c74890], eax; ret; 
0x000000000006571f: out dx, eax; ror byte ptr [rdi], 0x29; test dword ptr [rax - 0x16000005], edx; ret 0xfffd; 
0x000000000013ba28: out dx, eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x00000000000472d9: out dx, eax; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000018c48c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000018c475: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018c45e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018af1a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015023f: out dx, eax; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000015030b: out dx, eax; std; jmp qword ptr [rsi - 0x70]; 
0x000000000007af1f: out dx, eax; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000160cdd: out dx, eax; xchg eax, ebp; or byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000018b1ef: out dx, eax; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018b2ac: out dx, eax; xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018b25b: out dx, eax; xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000121449: out dx, eax; xor byte ptr [rcx], dh; rol byte ptr [rbx - 0x69f0f601], 0xc0; ret; 
0x000000000015516a: out dx, eax; xor eax, eax; call rcx; 
0x000000000011e23e: out dx, eax; xor eax, eax; ret; 
0x00000000000bc154: out dx, eax; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x000000000017dd1e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018e5ae: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000010353e: outsb dx, byte ptr [rsi]; add dword ptr [rcx + rcx*4 + 0x78], ecx; and byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000529b3: outsb dx, byte ptr [rsi]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000113b4e: outsb dx, byte ptr [rsi]; add rsp, 0x38; ret; 
0x000000000004323a: outsb dx, byte ptr [rsi]; and al, 0xfc; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000043225: outsb dx, byte ptr [rsi]; and al, 0xfc; ret; 
0x000000000009913e: outsb dx, byte ptr [rsi]; call 0xffffffff89529143; ret 0x8548; 
0x000000000011fafc: outsb dx, byte ptr [rsi]; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret; 
0x000000000017a9ae: outsb dx, byte ptr [rsi]; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x000000000004386e: outsb dx, byte ptr [rsi]; in eax, dx; adc al, 0; add rsp, 0x10; pop rbx; ret; 
0x000000000013fac7: outsb dx, byte ptr [rsi]; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x000000000009d42d: outsb dx, byte ptr [rsi]; or eax, 0x450f4800; ret 0x66c3; 
0x000000000010cfe4: outsb dx, byte ptr [rsi]; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x00000000001134e4: outsb dx, byte ptr [rsi]; or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000012e40b: outsb dx, byte ptr [rsi]; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000038d8e: outsb dx, byte ptr [rsi]; ret; 
0x00000000000375f6: outsb dx, byte ptr [rsi]; sub eax, 0x8d48001b; cmp eax, 0x1af35f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014f2f2: outsd dx, dword ptr [rsi]; adc bh, byte ptr [rax + 1]; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000001564b6: outsd dx, dword ptr [rsi]; adc byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000000ba2cc: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043954: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x20; pop rbx; ret; 
0x00000000000437f4: outsd dx, dword ptr [rsi]; add al, 0x24; call 0x1925e0; add rsp, 0x10; pop rbx; ret; 
0x00000000001369c8: outsd dx, dword ptr [rsi]; add al, byte ptr [rax]; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000000293e8: outsd dx, dword ptr [rsi]; add byte ptr [rcx + 0xf], al; xchg eax, ebp; mov byte ptr [rcx + 0xf], 0x95; ret; 
0x000000000009f482: outsd dx, dword ptr [rsi]; add cl, byte ptr [rax - 0x7d]; ret 0x6610; 
0x000000000004de4f: outsd dx, dword ptr [rsi]; add dword ptr [rcx - 0x77], ecx; ret 0x8944; 
0x00000000001503f6: outsd dx, dword ptr [rsi]; add eax, 0x67f74; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x000000000012aca1: outsd dx, dword ptr [rsi]; and al, 0x78; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x00000000000fee3d: outsd dx, dword ptr [rsi]; and al, 0xb; add al, ch; mov ah, byte ptr [rcx - 0xd]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000435bb: outsd dx, dword ptr [rsi]; and al, 0xc8; ret; 
0x000000000012aa08: outsd dx, dword ptr [rsi]; and al, 0xe8; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000005bd55: outsd dx, dword ptr [rsi]; and al, 0xe8; pinsrw xmm0, eax, 6; ret; 
0x000000000018c008: outsd dx, dword ptr [rsi]; call 0xf7fa8c1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d1d8: outsd dx, dword ptr [rsi]; call 0xf7fba91; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009e12f: outsd dx, dword ptr [rsi]; clc; dec dword ptr [rax + 1]; ret; 
0x000000000018d8fc: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000012d762: outsd dx, dword ptr [rsi]; cmc; call qword ptr [rax - 0x18]; 
0x000000000018bfed: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bded: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a7798: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000000ab5ce: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000018bf6d: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a77de: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000012ac37: outsd dx, dword ptr [rsi]; insd dword ptr [rdi], dx; call 0x4c9301c7; mov edx, esi; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x000000000013fa73: outsd dx, dword ptr [rsi]; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 0x10; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000013fa9d: outsd dx, dword ptr [rsi]; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx - 0x47], 8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000010c1a7: outsd dx, dword ptr [rsi]; mov edi, 0xf8; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000018bcb7: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bdb7: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014f236: outsd dx, dword ptr [rsi]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014bd0b: outsd dx, dword ptr [rsi]; or byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000113444: outsd dx, dword ptr [rsi]; or eax, 0x85008b00; sal byte ptr [rbp + 0x13], 0xb8; adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000012e3eb: outsd dx, dword ptr [rsi]; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000014f303: outsd dx, dword ptr [rsi]; pop rax; and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000018da54: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000012fedd: outsd dx, dword ptr [rsi]; push rcx; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000018beed: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bced: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c32d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000018c28d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x00000000000affea: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000b56e6: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000018bb1d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bbed: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b6d16: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b76: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5686: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000001456cd: outsd dx, dword ptr [rsi]; ret 0; 
0x000000000005ca84: outsd dx, dword ptr [rsi]; ret 0x25e8; 
0x00000000000439b1: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000087946: outsd dx, dword ptr [rsi]; ret 0x294c; 
0x00000000000944a2: outsd dx, dword ptr [rsi]; ret 0x4466; 
0x00000000000439d2: outsd dx, dword ptr [rsi]; ret 0x77e8; 
0x0000000000061dee: outsd dx, dword ptr [rsi]; ret 0x8349; 
0x000000000005f8e6: outsd dx, dword ptr [rsi]; ret 0xc3e8; 
0x0000000000043a5c: outsd dx, dword ptr [rsi]; ret 0xede8; 
0x00000000000b003a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000043a09: outsd dx, dword ptr [rsi]; ret; 
0x000000000018c34d: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c46e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018c2ad: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c3ed: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000005ca22: outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000000cba1a: outsd dx, dword ptr [rsi]; shr eax, 0xbf; imul ecx, dword ptr [rax + rax], -0x17; pop rdx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000014a795: outsd dx, dword ptr [rsi]; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x00000000000b659d: outsd dx, dword ptr [rsi]; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014f2cb: outsd dx, dword ptr [rsi]; xor byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014e8f6: outsd dx, dword ptr [rsi]; xor byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000007bacd: paddd mm7, mm7; inc esi; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x0000000000089382: paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x000000000010bfa3: paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000001103e6: paddw mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000044c69: pand mm0, mm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044c68: pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000cd9b8: pcmpeqb mm2, qword ptr [rip + 0x3b30478b]; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000ce474: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x00000000000ce45f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000000901fb: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000b9559: pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b94f7: pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000aabc5: pcmpgtd mm1, qword ptr [rdi]; xlatb; ret 0xc085; 
0x00000000000aac33: pcmpgtd mm1, qword ptr [rdi]; xlatb; rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x0000000000181328: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; lea rax, [rdx + rcx]; sub rax, rdi; ret; 
0x00000000001895d6: pextrw edi, mm0, 0x77; ret; 
0x0000000000184347: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; lea edx, [rcx + 1]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000182c6e: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; push 1; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000005bd5a: pinsrw mm0, eax, 6; ret; 
0x000000000005bd59: pinsrw xmm0, eax, 6; ret; 
0x00000000000430d1: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x0000000000043451: pmovmskb eax, mm0; and eax, 8; ret; 
0x00000000000aa6fc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000aabd3: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000430d0: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000043450: pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000aa6fb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000aabd2: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x0000000000080211: pop fs; adc al, byte ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000009e546: pop qword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xda0b0; cmovne rax, rdx; ret; 
0x0000000000141116: pop qword ptr [rax]; add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000090d65: pop qword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000001519fd: pop qword ptr [rax]; add byte ptr [rax], al; pop rbx; ret; 
0x00000000001017d1: pop qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011787d: pop qword ptr [rdi]; or eax, 0x31ae800; add byte ptr [rax], al; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x00000000000c8959: pop qword ptr [rip + 0x74db8500]; and byte ptr [rcx], bh; ret; 
0x00000000000c8905: pop qword ptr [rip + 0x75db8500]; fsubr qword ptr [rcx]; ret; 
0x000000000010f62f: pop r10; int1; dec dword ptr [rcx - 0x73]; push rdi; add dword ptr [rax + 0x39], ecx; ret 0xd72; 
0x000000000012bda5: pop r10; ret; 
0x00000000001484f6: pop r11; pop rbp; pop r12; ret; 
0x0000000000086733: pop r12; jmp rax; 
0x0000000000142f28: pop r12; pop r13; and eax, 2; pop r14; sub eax, 1; ret; 
0x00000000000840e8: pop r12; pop r13; jmp rax; 
0x00000000000cfbbb: pop r12; pop r13; mov qword ptr [rdi + 0x20], rcx; pop r14; pop r15; ret; 
0x000000000007a0a3: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000356ce: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000000270ea: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002653b: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000081319: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000028d3f: pop r12; pop r13; pop r14; ret; 
0x0000000000046b25: pop r12; pop r13; pop rbp; ret; 
0x0000000000026a23: pop r12; pop r13; ret; 
0x00000000000ce8a9: pop r12; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x00000000000ce819: pop r12; pop r14; ret; 
0x00000000000dfa4d: pop r12; pop rbp; ret; 
0x0000000000030e4d: pop r12; ret; 
0x0000000000142f2a: pop r13; and eax, 2; pop r14; sub eax, 1; ret; 
0x00000000000840ea: pop r13; jmp rax; 
0x00000000000cfbbd: pop r13; mov qword ptr [rdi + 0x20], rcx; pop r14; pop r15; ret; 
0x000000000007a0a5: pop r13; mov rax, r9; pop r14; ret; 
0x000000000011e123: pop r13; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000dbb7a: pop r13; pop r14; jmp rax; 
0x00000000000356d0: pop r13; pop r14; pop r15; jmp rax; 
0x00000000000270ec: pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002653d: pop r13; pop r14; pop r15; ret; 
0x000000000008131b: pop r13; pop r14; pop rbp; ret; 
0x0000000000028d41: pop r13; pop r14; ret; 
0x0000000000046b27: pop r13; pop rbp; ret; 
0x0000000000026a25: pop r13; ret; 
0x00000000000dbb7c: pop r14; jmp rax; 
0x00000000000ce8ab: pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x00000000000356d2: pop r14; pop r15; jmp rax; 
0x00000000000270ee: pop r14; pop r15; pop rbp; ret; 
0x000000000002653f: pop r14; pop r15; ret; 
0x000000000008131d: pop r14; pop rbp; ret; 
0x0000000000026f9d: pop r14; ret; 
0x0000000000142f2f: pop r14; sub eax, 1; ret; 
0x00000000000356d4: pop r15; jmp rax; 
0x00000000000270f0: pop r15; pop rbp; ret; 
0x0000000000026541: pop r15; ret; 
0x000000000014f25d: pop r8; add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000014f5a0: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x0000000000090b9b: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000090a98: pop r8; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000014cb21: pop r8; sub byte ptr [rax], al; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000001187e0: pop rax; adc byte ptr [rax - 0x77], cl; or byte ptr [r9 - 0x75], r9b; or byte ptr [r11 + 0x94901e0], al; ret 0x894d; 
0x0000000000082c14: pop rax; adc dl, byte ptr [rsi]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000014f25e: pop rax; add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000014f5a1: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; mov esi, dword ptr [rbx + 0x88]; mov rdi, r14; call qword ptr [rax + 0x28]; 
0x0000000000090b9c: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000013bb18: pop rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011aaf6: pop rax; add rsp, 0xe0; pop rbx; pop rbp; pop r12; ret; 
0x000000000014f304: pop rax; and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014ea63: pop rax; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014f404: pop rax; call rax; 
0x0000000000039574: pop rax; cmp al, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000f7284: pop rax; cmp dh, dh; ret; 
0x00000000000549a6: pop rax; dec dword ptr [rbx - 0x7a97db8c]; test byte ptr [rdi], 0x8e; ret; 
0x00000000000cf775: pop rax; idiv bh; nop dword ptr [rax + rax]; mov eax, 0x60; syscall; 
0x000000000014f266: pop rax; jmp rcx; 
0x000000000014ea80: pop rax; mov eax, 1; ret; 
0x0000000000035294: pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000035222: pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000147fe0: pop rax; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000150d36: pop rax; mov rax, qword ptr [rbx + 8]; pop rdx; call qword ptr [rax + 0x20]; 
0x0000000000090a99: pop rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000117e38: pop rax; mov rax, rbx; pop rdx; pop rbx; ret; 
0x000000000014de81: pop rax; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000003552d: pop rax; mov rdx, qword ptr [rip + 0x1ae9f3]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000015d542: pop rax; mov rdx, qword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000002d465: pop rax; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000010b8b6: pop rax; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000011e584: pop rax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000005de51: pop rax; or al, 0x89; fdiv st(6); ret; 
0x000000000005d005: pop rax; or al, 0xf6; ret; 
0x00000000000f5fd8: pop rax; or bh, dh; ret; 
0x00000000000b4204: pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000f6efc: pop rax; or eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000cf774: pop rax; pop rax; idiv bh; nop dword ptr [rax + rax]; mov eax, 0x60; syscall; 
0x00000000000253a4: pop rax; pop rbx; pop rbp; ret; 
0x000000000011db1b: pop rax; pop rdi; call rax; 
0x000000000011db1b: pop rax; pop rdi; call rax; mov rdi, rax; mov eax, 0x3c; syscall; 
0x000000000015da11: pop rax; pop rdx; pop rbx; ret; 
0x0000000000047cf8: pop rax; ret; 
0x0000000000043432: pop rax; sal bl, 0xf; adc dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000034b0c: pop rax; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1c0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014cb22: pop rax; sub byte ptr [rax], al; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000010353a: pop rax; sub byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; add dword ptr [rcx + rcx*4 + 0x78], ecx; and byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000088a5c: pop rax; sub r8, qword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x0000000000112902: pop rax; xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x00000000000cec77: pop rax; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000013a7d5: pop rbp; add bl, ch; lahf; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000009e162: pop rbp; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001181e1: pop rbp; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010624f: pop rbp; add byte ptr [rsp + rdx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000013a780: pop rbp; add dh, dh; ret; 
0x000000000002eaaf: pop rbp; add dword ptr [rax], eax; add byte ptr [rsi - 0x77], ah; or ecx, dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000142f2b: pop rbp; and eax, 2; pop r14; sub eax, 1; ret; 
0x000000000009f374: pop rbp; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e1dd3: pop rbp; clc; leave; ret; 
0x00000000001260bd: pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000083eef: pop rbp; jmp rax; 
0x00000000001456f5: pop rbp; jmp rcx; 
0x0000000000146eb2: pop rbp; jmp rdx; 
0x00000000000dbea5: pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000133e78: pop rbp; mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x00000000000f4dfa: pop rbp; mov dword ptr [r12 + 4], r13d; pop r12; pop r13; pop r14; ret; 
0x000000000012cc5f: pop rbp; mov eax, 0x89483f74; ret; 
0x00000000000de1b3: pop rbp; mov eax, edx; pop r12; pop r13; pop r14; ret; 
0x0000000000148081: pop rbp; mov eax, esi; ret; 
0x000000000010c36c: pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000a0da7: pop rbp; mov qword ptr [r13], r12; pop r12; pop r13; pop r14; ret; 
0x00000000000cfbbe: pop rbp; mov qword ptr [rdi + 0x20], rcx; pop r14; pop r15; ret; 
0x0000000000196960: pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x000000000009feb4: pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000034a04: pop rbp; mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000007a0a6: pop rbp; mov rax, r9; pop r14; ret; 
0x0000000000098fb3: pop rbp; mov rax, rdx; pop r12; ret; 
0x00000000001225be: pop rbp; or al, 0; add byte ptr [rax + rax], al; add al, ch; sub eax, 0x8948fff0; ret 0x8948; 
0x000000000011e124: pop rbp; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011e084: pop rbp; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000010e164: pop rbp; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000086732: pop rbp; pop r12; jmp rax; 
0x00000000000840e7: pop rbp; pop r12; pop r13; jmp rax; 
0x000000000009973a: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000002653a: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000028d3e: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000026a22: pop rbp; pop r12; pop r13; ret; 
0x00000000000ce818: pop rbp; pop r12; pop r14; ret; 
0x0000000000030f6f: pop rbp; pop r12; ret; 
0x00000000000dbb7b: pop rbp; pop r14; jmp rax; 
0x00000000000356d1: pop rbp; pop r14; pop r15; jmp rax; 
0x00000000000270ed: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x000000000002653e: pop rbp; pop r14; pop r15; ret; 
0x000000000008131c: pop rbp; pop r14; pop rbp; ret; 
0x0000000000028d42: pop rbp; pop r14; ret; 
0x0000000000046b28: pop rbp; pop rbp; ret; 
0x0000000000056898: pop rbp; pop rbx; ret; 
0x00000000000417cf: pop rbp; ret 0xffff; 
0x00000000000253a6: pop rbp; ret; 
0x000000000010bd34: pop rbx; add eax, dword ptr [rax]; add dh, dh; ret 0xf80; 
0x00000000000dc872: pop rbx; add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x1075f4]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001478a9: pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x00000000000ba6b6: pop rbx; and eax, 0x7ff80000; ret; 
0x000000000005c0e5: pop rbx; cmovb rax, rdi; ret; 
0x00000000000ba60b: pop rbx; cmove rax, rdx; ret; 
0x00000000000a0dd8: pop rbx; cmovne rax, rdi; ret; 
0x00000000000ba69b: pop rbx; cmovne rax, rdx; ret; 
0x0000000000090c04: pop rbx; jmp rax; 
0x0000000000117da9: pop rbx; lea rax, [rip + 0xd02ef]; pop rbp; pop r12; ret; 
0x0000000000151cb6: pop rbx; mov dword ptr [rip + 0x97f5f], 2; ret; 
0x0000000000151bd6: pop rbx; mov dword ptr [rip + 0x9803f], 2; ret; 
0x0000000000151af6: pop rbx; mov dword ptr [rip + 0x9811f], 2; ret; 
0x0000000000151a2e: pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x0000000000151977: pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x000000000012befe: pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x00000000000eae80: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x0000000000133ddb: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x0000000000061b8c: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000147924: pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000012c896: pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x00000000001062a7: pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x000000000010b6b0: pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000047cf5: pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000ba74b: pop rbx; mov eax, ecx; and eax, 0x7ff80000; div esi; mov eax, eax; ret; 
0x000000000014ee47: pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x000000000005f51d: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000008aaf5: pop rbx; mov eax, edx; ret; 
0x00000000000a0155: pop rbx; mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x00000000000a6d62: pop rbx; mov qword ptr [rdi], rdx; ret; 
0x0000000000047ea3: pop rbx; mov qword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000196588: pop rbx; mov qword ptr [rip + 0x5048c], 0; ret; 
0x00000000001967a3: pop rbx; mov qword ptr [rip + 0x510e1], 0; ret; 
0x0000000000088dc8: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000001186a2: pop rbx; mov rax, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000082476: pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x0000000000035aa5: pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000094fa1: pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000098c16: pop rbx; mov rax, rdx; pop rbp; pop r12; pop r13; ret; 
0x00000000000821ff: pop rbx; mov rax, rdx; pop rbp; pop r12; ret; 
0x000000000008d3dc: pop rbx; neg eax; ret; 
0x000000000011e27c: pop rbx; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e2a4: pop rbx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000081318: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000046b24: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000dfa4c: pop rbx; pop r12; pop rbp; ret; 
0x0000000000030e4c: pop rbx; pop r12; ret; 
0x0000000000026f9c: pop rbx; pop r14; ret; 
0x0000000000083eee: pop rbx; pop rbp; jmp rax; 
0x00000000001456f4: pop rbx; pop rbp; jmp rcx; 
0x00000000000dbea4: pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000148080: pop rbx; pop rbp; mov eax, esi; ret; 
0x000000000010c36b: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000009feb3: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000098fb2: pop rbx; pop rbp; mov rax, rdx; pop r12; ret; 
0x0000000000086731: pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000000840e6: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000028d3d: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000026a21: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000ce817: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000030f6e: pop rbx; pop rbp; pop r12; ret; 
0x00000000000476e3: pop rbx; pop rbp; pop r14; ret; 
0x00000000000253a5: pop rbx; pop rbp; ret; 
0x00000000000314f9: pop rbx; ret; 
0x00000000000dbad3: pop rbx; setbe al; movzx eax, al; ret; 
0x000000000010b6fa: pop rbx; setl al; ret; 
0x00000000001183ae: pop rbx; setne al; movzx eax, al; ret; 
0x00000000000ba61a: pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000000ba665: pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000142d1b: pop rbx; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000008e9c3: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000047cc4: pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000012c886: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000146eaf: pop rbx; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000039c5e: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000e2a13: pop rcx; adc al, 0x10; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000042f74: pop rcx; add eax, 0x175456; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f42: pop rcx; add eax, 0x175490; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000043335: pop rcx; add eax, 0x175751; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043308: pop rcx; add eax, 0x175782; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000012d35d: pop rcx; add eax, 0x440f4800; ret 0x66c3; 
0x0000000000163f23: pop rcx; add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ce3: pop rcx; and eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000160613: pop rcx; cmp byte ptr [rax], cl; add byte ptr [rcx - 9], al; fsub dword ptr [rsp + rax*2 - 0x77]; add byte ptr [rax - 1], bh; ret; 
0x00000000000df97a: pop rcx; hlt; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000018da55: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000018d428: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x00000000001466a3: pop rcx; mov r10, qword ptr [rsp + 8]; mov ebx, eax; mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x000000000011e494: pop rcx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e7dbf: pop rcx; or cl, ch; ret; 
0x0000000000117d7b: pop rcx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001016da: pop rcx; pop rbx; ret; 
0x000000000010ea13: pop rcx; push rsp; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010b31e: pop rcx; ret; 
0x0000000000112213: pop rcx; sbb al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000034a32: pop rcx; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c5: pop rcx; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004c944: pop rcx; shr cl, 0x3f; fdivp st(7); dec dword ptr [rbp - 0x77]; ret 0x8949; 
0x00000000000ba773: pop rcx; test al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x000000000014e0ad: pop rdi; adc esi, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000010cbda: pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000091219: pop rdi; add dword ptr [rcx + 0xf], eax; mov dh, 0x37; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000183d0d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000133b72: pop rdi; add ebx, ebp; cwde; xor eax, eax; ret; 
0x00000000001823b2: pop rdi; and ch, al; std; xlatb; ret; 
0x000000000011db1c: pop rdi; call rax; 
0x000000000011db1c: pop rdi; call rax; mov rdi, rax; mov eax, 0x3c; syscall; 
0x0000000000140c2e: pop rdi; cmp byte ptr [rdi], cl; mov bh, 0x40; add cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x00000000000e348e: pop rdi; cmp r8, 0x2478; mov edx, 0x7f; mov eax, 0xfffa; cmovne rax, rdx; ret; 
0x00000000000dc0bd: pop rdi; cmpsb byte ptr [rsi], byte ptr [rdi]; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c3baa: pop rdi; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000013fbad: pop rdi; idiv dh; jmp qword ptr [rsi + 0x66]; 
0x0000000000165929: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165739: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000356d5: pop rdi; jmp rax; 
0x0000000000153fad: pop rdi; mov dl, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x00000000000e18c0: pop rdi; mov eax, 0x3a; syscall; 
0x0000000000153588: pop rdi; mov rax, qword ptr [rbx + 0x18]; lea r12, [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000001516f8: pop rdi; mov rax, qword ptr [rbx + 8]; mov dword ptr [r10], 0xe; lea rsi, [r10 + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000011df0c: pop rdi; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000165559: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165389: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165485: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653d1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000270f1: pop rdi; pop rbp; ret; 
0x00000000000ea99a: pop rdi; push 0x2de8000c; cmpsb byte ptr [rsi], byte ptr [rdi]; hlt; jmp qword ptr [rsi + 0x2e]; 
0x000000000014f51d: pop rdi; ret 0xfffe; 
0x0000000000026542: pop rdi; ret; 
0x00000000000375fd: pop rdi; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001484a3: pop rdi; sbb byte ptr [rbx + 0x4c04e83b], cl; cld; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000148042: pop rdi; sbb byte ptr [rbx + 0x5065e83b], cl; cld; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000008f3ee: pop rdi; stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000015afad: pop rdi; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000015be6d: pop rdi; xchg eax, ecx; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x00000000001424a0: pop rdi; xor byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x8b4c; 
0x0000000000096a6d: pop rdx; adc byte ptr [rax + 0x39], cl; ret; 
0x00000000000dbd85: pop rdx; adc byte ptr [rdi - 0x3a], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009b832: pop rdx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0xa]; mov rdi, r13; call rax; 
0x000000000017d0e6: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x0000000000052a91: pop rdx; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000150d3b: pop rdx; call qword ptr [rax + 0x20]; 
0x00000000000ec05c: pop rdx; dec dword ptr [rcx + 0x29]; ret; 
0x000000000003b782: pop rdx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cba22: pop rdx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000007696a: pop rdx; in al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000010f630: pop rdx; int1; dec dword ptr [rcx - 0x73]; push rdi; add dword ptr [rax + 0x39], ecx; ret 0xd72; 
0x00000000000ca0b6: pop rdx; mov bl, 0xf5; jmp qword ptr [rsi + 0xf]; 
0x0000000000090b15: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000011e374: pop rdx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012bda4: pop rdx; pop r10; ret; 
0x0000000000117e3c: pop rdx; pop rbx; ret; 
0x00000000001016d9: pop rdx; pop rcx; pop rbx; ret; 
0x000000000012bdc9: pop rdx; pop rsi; ret; 
0x0000000000028d72: pop rdx; ret 0; 
0x000000000012bda6: pop rdx; ret; 
0x0000000000034929: pop rdx; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030cf4: pop rdx; sbb eax, dword ptr [rax]; ret; 
0x0000000000159731: pop rdx; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000149294: pop rsi; adc byte ptr [rbp + 0x31], cl; ret 0x314d; 
0x000000000002fbdf: pop rsi; adc dh, dh; ret; 
0x0000000000183c0e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000194c9e: pop rsi; add eax, 0x25060; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x000000000009f407: pop rsi; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000015b6cb: pop rsi; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000001535ae: pop rsi; cmp edi, edi; inc dword ptr [rbp + 0x483a74c0]; mov eax, dword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000007e036: pop rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000dbb7d: pop rsi; jmp rax; 
0x000000000003a1b6: pop rsi; mov cl, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x00000000000ce8ac: pop rsi; mov dword ptr [r11 + 0xc], r8d; ret; 
0x000000000011dfbc: pop rsi; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000012e01c: pop rsi; or eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000356d3: pop rsi; pop r15; jmp rax; 
0x00000000000270ef: pop rsi; pop r15; pop rbp; ret; 
0x0000000000026540: pop rsi; pop r15; ret; 
0x000000000008131e: pop rsi; pop rbp; ret; 
0x0000000000117c87: pop rsi; ret 0x4feb; 
0x0000000000026f9e: pop rsi; ret; 
0x0000000000142f30: pop rsi; sub eax, 1; ret; 
0x000000000017df30: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017d3e4: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000002a6e6: pop rsp; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000017ec30: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x0000000000063194: pop rsp; add rsp, 0x1018; pop rbx; pop rbp; ret; 
0x00000000000907ef: pop rsp; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000cebd5: pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000096292: pop rsp; and al, 8; call qword ptr [rax]; 
0x00000000000965f1: pop rsp; and al, 8; call rcx; 
0x000000000011891b: pop rsp; and al, 8; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000037400: pop rsp; cmc; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000097112: pop rsp; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000086734: pop rsp; jmp rax; 
0x0000000000144fae: pop rsp; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000011e24c: pop rsp; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011e193: pop rsp; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000017bdc0: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000009ce8d: pop rsp; or eax, 0x450f4800; ret 0x66c3; 
0x000000000010e194: pop rsp; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012b710: pop rsp; out 0xff, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000142f29: pop rsp; pop r13; and eax, 2; pop r14; sub eax, 1; ret; 
0x00000000000840e9: pop rsp; pop r13; jmp rax; 
0x00000000000cfbbc: pop rsp; pop r13; mov qword ptr [rdi + 0x20], rcx; pop r14; pop r15; ret; 
0x000000000007a0a4: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000356cf: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000000270eb: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002653c: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000008131a: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000028d40: pop rsp; pop r13; pop r14; ret; 
0x0000000000046b26: pop rsp; pop r13; pop rbp; ret; 
0x0000000000026a24: pop rsp; pop r13; ret; 
0x00000000000ce8aa: pop rsp; pop r14; mov dword ptr [r11 + 0xc], r8d; ret; 
0x00000000000ce81a: pop rsp; pop r14; ret; 
0x00000000000dfa4e: pop rsp; pop rbp; ret; 
0x0000000000030e4e: pop rsp; ret; 
0x00000000000dd491: pop rsp; xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008b360: pop rsp; xchg eax, edx; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000115792: pop rsp; xor byte ptr [rcx], dh; xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x0000000000115752: pop rsp; xor byte ptr [rcx], dh; xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x00000000000812c4: popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008df27: popfq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000018ad3f: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000000a2d08: popfq; add eax, dword ptr [rax]; add byte ptr [rcx - 9], al; ret 0xf800; 
0x0000000000076680: popfq; call 0xffffffffc807667c; test dword ptr [rax], ebp; idiv edi; call qword ptr [rax]; 
0x00000000000b72bf: popfq; cmp cl, byte ptr [rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014b282: popfq; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015226f: popfq; iretd; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000b90c2: popfq; lea r11, [rip + 0xf1e6a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7232: popfq; lea r11, [rip + 0xf3b26]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b82: popfq; lea r11, [rip + 0xf4ff6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000154fea: popfq; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax]; 
0x00000000000ec8d2: popfq; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000d1250: popfq; ret 0x3949; 
0x00000000000c33d0: popfq; ret 0x840; 
0x00000000001160ff: popfq; ret 0xfff6; 
0x000000000017f610: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001554fb: popfq; std; jmp qword ptr [rsi - 0x70]; 
0x000000000010b9bf: popfq; test byte ptr [rip + 0x528b4800], cl; sbb byte ptr [rax - 0x73], cl; pushfq; ret 0x8207; 
0x0000000000044da9: por mm0, mm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044da8: por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000004307b: pslld mm1, qword ptr [rdi]; adc byte ptr [rsp - 8], al; ret; 
0x0000000000086392: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000090acb: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000029da5: punpckldq mm0, mm4; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; add rsp, 0x18; ret; 
0x0000000000029da9: punpckldq mm1, mm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; add rsp, 0x18; ret; 
0x0000000000029da4: punpckldq xmm0, xmm4; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; add rsp, 0x18; ret; 
0x0000000000029da8: punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; add rsp, 0x18; ret; 
0x0000000000155d14: punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 8], rax; movups xmmword ptr [rdi + 0x18], xmm0; mov dword ptr [rdi + 0x28], edx; ret; 
0x000000000008dc6d: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000029dac: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; add rsp, 0x18; ret; 
0x0000000000113a10: punpcklqdq xmm0, xmm1; movups xmmword ptr [rsp + 0x18], xmm0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013e8e5: push -0x12; jmp qword ptr [rsi + 0xf]; 
0x000000000012b46d: push -0x16000001; xchg eax, ecx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000096d18: push -0x3c817; jmp qword ptr [rsi - 0x70]; 
0x000000000012211b: push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000122093: push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x000000000012201b: push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000121e1b: push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000121f1b: push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000121c1b: push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000121e9b: push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000121c9b: push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x0000000000121d1b: push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000121f9b: push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x0000000000121b9b: push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x000000000008b662: push -0x67; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000549ab: push -0x71f0097b; ret; 
0x00000000001045e2: push -0x76000002; rol byte ptr [rbx - 0x7bf0fd08], 1; mov ebp, 0x31000004; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x000000000009c0d2: push -0x76b7ffef; ret 0xc031; 
0x0000000000113b79: push -0x76b7fff3; and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006767c: push -0x7c000007; ret; 
0x000000000010666e: push -0x7cb80000; clc; dec dword ptr [rdi]; test byte ptr [rip - 0x76fffffd], dh; ret 0xc085; 
0x000000000014bd6c: push -0x7f48f0bf; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000017a0a4: push -0x7ffffffa; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000018e594: push -0x9ffffff; ret 0x7501; 
0x0000000000056070: push -0xcd17; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cdf47: push -0xfb872b8; ret; 
0x000000000009e6e3: push -8; lcall [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000e281f: push 0; add byte ptr [rax], al; syscall; 
0x00000000001016ec: push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000010b924: push 0; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000bb733: push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x00000000000bbc4f: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb89b: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000089958: push 0; lea rsi, [rbp + 0x50]; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000027a40: push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x10]; xor r8d, r8d; call rbx; 
0x00000000000bbfa5: push 0; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x10]; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000bc14d: push 0; mov rdx, r13; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bc43d: push 0; mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x00000000000bc245: push 0; mov rdx, r14; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000bbe53: push 0; mov rdx, r14; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000145c11: push 0; push 0x19; mov rcx, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000101784: push 0; push r9; mov r9d, 1; call 0x101090; add rsp, 0x18; ret; 
0x00000000000ff2f4: push 0; push r9; mov r9d, edx; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000101744: push 0; push r9; xor r9d, r9d; call 0x101090; add rsp, 0x18; ret; 
0x0000000000145c13: push 0x19; mov rcx, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x00000000000b90c6: push 0x1e; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000014e926: push 0x1f0fe1ff; add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000ea99b: push 0x2de8000c; cmpsb byte ptr [rsi], byte ptr [rdi]; hlt; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e35d0: push 0x39489123; ret 0x20ba; 
0x00000000000e3065: push 0x39489123; ret 0x840f; 
0x0000000000146169: push 0x3c; lea r8, [rip + 0x17e]; mov esi, 4; mov rdi, rbp; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000146229: push 0x3c; lea r8, [rip + 0xbe]; xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000015aca2: push 0x45; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000015b16c: push 0x480008f3; sub esp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000011247c: push 0x489066c3; lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000014f5fe: push 0x48ff894c; mov ecx, dword ptr [rsp + 0x30]; call rcx; 
0x0000000000131a44: push 0x48ffffa3; add esp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x0000000000029b54: push 0x48fffffa; lea edi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000036f5f: push 0x48ffffff; mov eax, dword ptr [rip + 0x1b33fe]; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b9048: push 0x49000f1e; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c8: push 0x49000f27; movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000147ab4: push 0x49ffedd7; mov eax, dword ptr [rbp + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x000000000013ca5e: push 0x5b000001; pop rbp; pop r12; pop r13; ret; 
0x0000000000145ee8: push 0x5c415d5b; pop r13; ret; 
0x000000000010b86b: push 0x6076110f; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000044015: push 0x7871110f; movups xmmword ptr [rcx + 0x88], xmm7; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000010b8bf: push 0x7e6f0ff3; jo 0x10b8d5; adc dword ptr [rdi + 0x78], edi; ret; 
0x00000000001139b7: push 0xd; add byte ptr [rbp - 0x47d58a40], al; jno 0x1139c1; add byte ptr [rax], al; syscall; 
0x00000000000431d4: push 0xf00161e; push rsp; ret; 
0x00000000000e73b0: push 0xffffd7; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c04; 
0x00000000000e7c6d: push 0xffffd7; add byte ptr [rax], al; add cl, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000010170c: push 1; call 0x101680; add rsp, 0x18; ret; 
0x000000000010b934: push 1; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000bbccb: push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000182c76: push 1; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000bb72d: push 1; mov rdi, qword ptr [r12]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x00000000000bbc4d: push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000bb899: push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000ff2d7: push 1; push r8; xor r8d, r8d; call 0xfe830; add rsp, 0x18; ret; 
0x00000000000bbcc7: push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x000000000014e91e: push 2; add rdi, 0x68; jmp rcx; 
0x0000000000160694: push 2; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000135597: push 2; call 0x134b30; add rsp, 0x18; ret; 
0x0000000000135ee4: push 2; call 0x135940; add rsp, 0x18; ret; 
0x00000000001606a4: push 3; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000b5fc2: push 5; add byte ptr [rax], al; ret; 
0x000000000011e706: push di; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000087e61: push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000088e6c: push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000010d932: push qword ptr [rax + rbx*8 + 0x49]; mov esi, edi; mov rdi, r14; mov eax, 0x4f; syscall; 
0x000000000011618d: push qword ptr [rax + rdx - 0x18]; wait; idiv r15; mov eax, 1; add rsp, 8; ret; 
0x00000000000b4c0f: push qword ptr [rax]; leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000018ff18: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x0000000000194ab2: push qword ptr [rbp + 0x4c]; add rsp, 0x30; pop rbx; ret; 
0x00000000001161e9: push qword ptr [rbp + 0xc]; mov eax, 1; ret; 
0x00000000001827a9: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x000000000010b8e9: push qword ptr [rbp + 5]; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000008e13f: push qword ptr [rbp + 7]; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x000000000013f1d4: push qword ptr [rbp + rax - 0x18]; cmp al, 0x61; out dx, al; jmp qword ptr [rsi + 0xf]; 
0x0000000000086a00: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000000571ae: push qword ptr [rbp - 0x11]; mov rax, rdx; ret; 
0x0000000000136d32: push qword ptr [rbp - 0x15]; pop rbx; ret; 
0x000000000014007b: push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012a11f: push qword ptr [rbp - 0x1a]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091bd0: push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004829d: push qword ptr [rbp - 0x4c]; xor eax, eax; ret; 
0x00000000000441bc: push qword ptr [rbx + 1]; ret; 
0x0000000000055de6: push qword ptr [rbx + 3]; xor eax, eax; ret; 
0x0000000000087229: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087285: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082552: push qword ptr [rbx + rcx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f0f02: push qword ptr [rbx - 0xa]; ret; 
0x0000000000196954: push qword ptr [rcx + rbx + 0x55]; mov rbp, rsp; call 0x15de30; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x0000000000082bd5: push qword ptr [rcx + rdi + 0x48]; mov eax, edx; pop rbx; ret; 
0x0000000000104732: push qword ptr [rcx]; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x0000000000110e44: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000006dfe0: push qword ptr [rcx]; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000000c6145: push qword ptr [rcx]; rol byte ptr [rbp - 0x3f6af037], 0x85; ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x000000000014c153: push qword ptr [rcx]; ror byte ptr [rax - 0x75], 0x74; and al, 0x40; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x0000000000159770: push qword ptr [rcx]; ror byte ptr [rax - 0x77], cl; ret; 
0x000000000012c1a8: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc0; add dword ptr [rax - 0x7d], ecx; out dx, eax; add dword ptr [rax + 0x39], ecx; ret 0x1174; 
0x000000000012a17a: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d89f: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008a9a8: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x0000000000038b4b: push qword ptr [rcx]; ror byte ptr [rbx - 0x76be7ecc], 0x34; test byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret 0xf177; 
0x0000000000028b2e: push qword ptr [rcx]; ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xf4e9; 
0x00000000000c603e: push qword ptr [rcx]; shr cl, 0x4e; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000005af23: push qword ptr [rcx]; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000011321c: push qword ptr [rdi + 0x11]; mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000000e191b: push qword ptr [rdi + 0x22]; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x00000000000e15e7: push qword ptr [rdi + 0x28]; mov dword ptr [rsp + 0xc], eax; call 0x12be30; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e15c9: push qword ptr [rdi + 0x34]; ret; 
0x000000000010d679: push qword ptr [rdi + 0x3c]; ret; 
0x00000000000e1649: push qword ptr [rdi + 0x44]; ret; 
0x000000000004422e: push qword ptr [rdi + 0x47]; ret; 
0x0000000000112c13: push qword ptr [rdi + 0x4a]; ret; 
0x00000000000e12f6: push qword ptr [rdi + 0x4f]; ret; 
0x00000000000e138c: push qword ptr [rdi + 0x51]; ret; 
0x0000000000048af9: push qword ptr [rdi + 0x54]; ret; 
0x000000000010cf86: push qword ptr [rdi + 0x57]; ret; 
0x000000000010b31c: push qword ptr [rdi + 0x59]; ret; 
0x00000000000e147f: push qword ptr [rdi + 0x5e]; ret; 
0x000000000011400c: push qword ptr [rdi + 0x61]; ret; 
0x000000000011ec92: push qword ptr [rdi + 0x6b]; ret; 
0x000000000011e00c: push qword ptr [rdi + 0x71]; ret; 
0x000000000011dc32: push qword ptr [rdi + 0x73]; ret; 
0x000000000011ad83: push qword ptr [rdi + 0xa]; ret; 
0x0000000000044182: push qword ptr [rdi + 0xb]; ret; 
0x0000000000063a1c: push qword ptr [rdi + 1]; ret; 
0x000000000010c5ca: push qword ptr [rdi + 3]; ret; 
0x00000000000441f1: push qword ptr [rdi + 4]; ret; 
0x000000000010c618: push qword ptr [rdi + 5]; ret; 
0x0000000000063a4f: push qword ptr [rdi + 6]; ret; 
0x000000000010c916: push qword ptr [rdi + 7]; ret; 
0x0000000000112df5: push qword ptr [rdi + 8]; ret; 
0x00000000001121b4: push qword ptr [rdi + 9]; ret; 
0x0000000000145cf7: push qword ptr [rdi + rax + 0x48]; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x00000000000dcde4: push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x0000000000145b49: push qword ptr [rdi + rcx + 0x48]; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000117da6: push qword ptr [rdi + rcx + 0x5b]; lea rax, [rip + 0xd02ef]; pop rbp; pop r12; ret; 
0x000000000010c4d6: push qword ptr [rdi - 0x32]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000150fbf: push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000047c93: push qword ptr [rdx + rdi + 0x31]; rol byte ptr [rax + 0x375003f], 0x5b; ret; 
0x0000000000047e73: push qword ptr [rdx + rdx + 0x48]; lea edx, [rip + 0x1a2293]; call 0xbbb80; pop rbx; ret; 
0x00000000001460c4: push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001460be: push qword ptr [rip + 0x72164]; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f84: push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f7e: push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001172b7: push qword ptr [rsi + rax - 0x77]; cmp eax, 0xcd088; ret; 
0x0000000000120909: push qword ptr [rsi + rax - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x000000000011e18c: push qword ptr [rsi - 0x14]; mov rdx, qword ptr [rip + 0xc5cda]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000117df5: push qword ptr [rsp + 0x18]; call 0x118110; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000117df1: push qword ptr [rsp + 0x18]; push qword ptr [rsp + 0x18]; call 0x118110; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x0000000000036f8e: push qword ptr [rsp + 0x48]; mov eax, dword ptr [rip + 0x1b33d0]; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014668f: push qword ptr [rsp + 0xe8]; mov qword ptr [rsp + 0x18], r10; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x0000000000091005: push qword ptr [rsp + rax - 0x58]; add dword ptr [rsp + rbp - 0x77], esi; ret 0x8948; 
0x0000000000106d11: push qword ptr [rsp + rbx*8 - 0x77]; ret 0xc085; 
0x000000000010c140: push r10; call 0x10b940; add rsp, 0x18; ret; 
0x000000000002acce: push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000011ea23: push r12; or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000001516e5: push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000002bdc5: push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002efd9: push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000011e823: push r14; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001516e3: push r14; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000009c558: push r8; add dword ptr [rbp - 0x2d], esi; mov rdi, rsi; call rax; 
0x000000000009c20b: push r8; add dword ptr [rdi], ecx; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rsi; call rcx; 
0x00000000000448cd: push r8; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x0000000000114940: push r8; sbb byte ptr [rax - 0x77], cl; and al, 0x20; mov eax, 0x65; syscall; 
0x00000000000ff2d9: push r8; xor r8d, r8d; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000101786: push r9; mov r9d, 1; call 0x101090; add rsp, 0x18; ret; 
0x00000000000ff2f6: push r9; mov r9d, edx; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000101746: push r9; xor r9d, r9d; call 0x101090; add rsp, 0x18; ret; 
0x00000000001458fc: push rax; adc byte ptr [rbp + 0x494974c0], al; mov edi, dword ptr [rbp]; mov rsi, r12; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000147ac7: push rax; adc byte ptr [rbp + 0x840fc0], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x00000000000926c1: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000095ff5: push rax; adc dh, dh; ret 0xf0f; 
0x0000000000194ca1: push rax; add al, byte ptr [rax]; movss dword ptr [rsp - 0x28], xmm0; ret; 
0x00000000000871d0: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000093290: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0x151037; ret; 
0x0000000000060f48: push rax; add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0x105617], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000062390: push rax; add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0x30917], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000008d34c: push rax; add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x0000000000074cef: push rax; add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000012d3d8: push rax; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000010117c: push rax; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ror byte ptr [rbp + rcx*4 + 5], 1; ret; 
0x000000000009c559: push rax; add dword ptr [rbp - 0x2d], esi; mov rdi, rsi; call rax; 
0x000000000009c20c: push rax; add dword ptr [rdi], ecx; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rsi; call rcx; 
0x0000000000163dda: push rax; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000015b2c1: push rax; and byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x000000000014ff9f: push rax; call 0x14fcb0; add rsp, 0x28; ret; 
0x00000000000c3a0c: push rax; call qword ptr [rcx]; 
0x0000000000027ac0: push rax; call rbx; 
0x000000000011f9bc: push rax; clc; add byte ptr [rax], al; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000148048: push rax; cld; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x0000000000155bcd: push rax; cld; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x000000000014758d: push rax; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x000000000009c132: push rax; dec byte ptr [rax + 0x63]; dec byte ptr [rdi]; adc dword ptr [rbx + 0x38], eax; mov qword ptr [rbx], rdi; call rcx; 
0x0000000000047234: push rax; dec dword ptr [rbx + rcx*4 + 0x2d]; ret; 
0x000000000012a1d1: push rax; dec dword ptr [rcx + 0xbe42b15]; add byte ptr [rbp + 0x31e37fc0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005f8b9: push rax; fsub qword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000011004f: push rax; int1; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000011008b: push rax; int1; jmp qword ptr [rsi + 3]; 
0x00000000001100e3: push rax; jmp qword ptr [rsi - 0x7d]; 
0x000000000014ff9a: push rax; mov eax, dword ptr [rsp + 0x28]; push rax; call 0x14fcb0; add rsp, 0x28; ret; 
0x000000000014f23f: push rax; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001122a1: push rax; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000002d46a: push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000002c3ac: push rax; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000000ced12: push rax; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000012a5b6: push rax; mov rsi, rdx; call rax; 
0x000000000010b866: push rax; movdqu xmm6, xmmword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000008639c: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000448ce: push rax; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000011edc4: push rax; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000000600c3: push rax; or al, 0xf6; ret 0xf01; 
0x00000000001544c7: push rax; or bl, ch; mov cl, 0xe8; lodsd eax, dword ptr [rsi]; std; call qword ptr [rbx + 0x48]; 
0x0000000000084d08: push rax; or byte ptr [rbx + 0x14], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000084bd1: push rax; or byte ptr [rbx + 0xb], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000097862: push rax; or dh, dh; ret 0xf02; 
0x000000000017bccc: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000014d4e9: push rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055ff7: push rax; pop rbx; ret; 
0x000000000010c13f: push rax; push r10; call 0x10b940; add rsp, 0x18; ret; 
0x000000000002accd: push rax; push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000002bdc4: push rax; push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002efd8: push rax; push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000012ca14: push rax; ret 0xb; 
0x0000000000062011: push rax; ret 0xf41; 
0x0000000000129b2c: push rax; ret 0xffff; 
0x0000000000042eef: push rax; ret; 
0x00000000000613c7: push rax; sal dh, 1; ret 0xf07; 
0x000000000014e9f4: push rax; sbb al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x0000000000114941: push rax; sbb byte ptr [rax - 0x77], cl; and al, 0x20; mov eax, 0x65; syscall; 
0x00000000000926b6: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000086b01: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000001272a9: push rax; sbb dh, dh; ret 0x7508; 
0x000000000012b745: push rax; shr ax, 0xe; and eax, 1; ret; 
0x00000000000b5b57: push rax; str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a24: push rax; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000009e72c: push rax; test eax, 0x8d48000e; adc eax, 0xea8e9; cmove rax, rdx; ret; 
0x00000000000ff2da: push rax; xor r8d, r8d; call 0xfe830; add rsp, 0x18; ret; 
0x000000000008995d: push rax; xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x00000000001122a5: push rax; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000109496: push rbp; adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000194d1b: push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000001485e8: push rbp; adc byte ptr [rcx], bh; ret; 
0x0000000000028414: push rbp; adc eax, dword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x68]; call rax; 
0x00000000000ec904: push rbp; add al, 1; ret 0x341; 
0x000000000005d52f: push rbp; add al, byte ptr [rax]; add byte ptr [rax - 0x14343], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000168de7: push rbp; add al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000047bd7: push rbp; add byte ptr [rax - 0x75], cl; jnp 0x47be5; call rax; 
0x00000000000ec64d: push rbp; add byte ptr [rcx], bh; ret; 
0x000000000008d225: push rbp; add cl, byte ptr [rax + 0x39]; ret 0x870f; 
0x0000000000101b00: push rbp; add rsp, 0x38; ret; 
0x00000000000815d1: push rbp; add rsp, 0xd0; pop rbx; ret; 
0x000000000008fabe: push rbp; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000008d5ce: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000008d74a: push rbp; cmp byte ptr [rax - 0x77], cl; ret 0x1b8; 
0x00000000001516e6: push rbp; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x00000000000fca52: push rbp; lea rdi, [rip + 0xb030a]; movzx esi, sil; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x000000000002bdc6: push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002efda: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000196957: push rbp; mov rbp, rsp; call 0x15de30; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x000000000011e884: push rbp; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000180758: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000012b23f: push rbp; or byte ptr [rax - 0x73], 0x51; jo 0x12b255; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b433: push rbp; or byte ptr [rax - 0x73], 0x51; jo 0x12b449; adc dword ptr [rbp - 0x78], edi; call rax; 
0x00000000000795fd: push rbp; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret 0xfff4; 
0x0000000000100cb7: push rbp; or byte ptr [rax - 0x75], 4; ret 0x8948; 
0x000000000012aca6: push rbp; or byte ptr [rax - 0x77], 0xda; movups xmmword ptr [rbp - 0x78], xmm4; call rax; 
0x0000000000037a46: push rbp; or byte ptr [rax], al; add byte ptr [rax - 0x7af0cc07], al; ret 5; 
0x000000000012b59a: push rbp; or byte ptr [rcx + rcx*4 - 0x16], 0xf; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b16e: push rbp; or byte ptr [rcx + rcx*4 - 0x16], 0xf; adc dword ptr [rbp - 0x78], esi; call rax; 
0x000000000012ac3b: push rbp; or byte ptr [rcx + rcx*4 - 0xe], 0xf; adc dword ptr [rbp - 0x78], ebp; call rax; 
0x000000000012aa0d: push rbp; or byte ptr [rcx + rcx*4 - 0xe], 0xf; adc dword ptr [rbp - 0x78], ecx; call rax; 
0x000000000015e5ba: push rbp; out dx, al; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x00000000000a6872: push rbp; ret 0x2ba; 
0x00000000000c933f: push rbp; ret 0xe; 
0x000000000012c923: push rbp; ret; 
0x00000000000eb03a: push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add qword ptr [rax - 0x7d], rcx; ret; 
0x0000000000060f4c: push rbp; sub dh, al; add byte ptr [rip - 0x105617], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000062394: push rbp; sub dh, al; add byte ptr [rip - 0x30917], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000008870a: push rbp; sub rdx, rsi; mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x00000000000e20ad: push rbp; test al, 0x85; ror byte ptr [rdi], 0x84; add dword ptr [rax], 0x83480000; ret 0x480f; 
0x0000000000032725: push rbp; test byte ptr [rcx + 1], cl; ret; 
0x0000000000091bcc: push rbp; xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f0602: push rbp; xor eax, eax; pop rbx; ret; 
0x000000000012c882: push rbx; adc al, 0x74; adc byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000087f94: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x00000000001188e2: push rbx; adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 9], cl; ret 0xfffe; 
0x00000000000ceab4: push rbx; adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000cea94: push rbx; adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000010b7b9: push rbx; add al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000010b74b: push rbx; add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000010b6a8: push rbx; add al, 0x5b; pop rbp; pop r12; ret; 
0x0000000000116a0c: push rbx; add dword ptr [rax], eax; add rsp, 0x80; ret; 
0x00000000000e6710: push rbx; add dword ptr [rdx + rdx*8 - 0x76b72d8b], eax; call 0x5c4fc478; ret; 
0x0000000000163ad1: push rbx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000c8182: push rbx; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000097ade: push rbx; and byte ptr [rax + 0x39], cl; ret 0x4273; 
0x000000000008dc58: push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000008db3e: push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000dffe7: push rbx; hlt; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000060939: push rbx; idiv edi; dec dword ptr [rax - 0x75]; test dword ptr [rax - 0x7d000000], esp; ret; 
0x000000000015fc1b: push rbx; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x0000000000110dc1: push rbx; int1; jmp qword ptr [rsi - 0x7d]; 
0x00000000000cdf2c: push rbx; lea rax, [rdi - 0x10]; ret; 
0x0000000000052ee0: push rbx; mov esi, 9; mov rbx, rdi; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x0000000000036412: push rbx; mov rax, qword ptr [rip + 0x1b3f4e]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011d92b: push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi; 
0x00000000000824ed: push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x000000000014884d: push rbx; mov rdi, qword ptr [rbx]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000001488e1: push rbx; mov rdi, qword ptr [rbx]; add r15, r12; sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x00000000000881e2: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000075d47: push rbx; movabs al, byte ptr [0x13defe3d8d480013]; add al, ch; jns 0x75d47; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000b7e42: push rbx; movq qword ptr [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b6622: push rbx; movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000b9882: push rbx; movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000011eaf4: push rbx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eab4: push rbx; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000008dc54: push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000012fc75: push rbx; or byte ptr [rax + 0x33], cl; add ecx, dword ptr [rax + 9]; ret 0x850f; 
0x00000000000304a3: push rbx; or byte ptr [rax + 0x39], cl; ret; 
0x0000000000118950: push rbx; or byte ptr [rax - 0x73], cl; or byte ptr [r8 - 9], cl; ret 0xfffe; 
0x000000000013b97a: push rbx; or byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000ef1c7: push rbx; or byte ptr [rcx + 0x63493846], cl; ret 0x4c6; 
0x000000000008ac10: push rbx; or byte ptr [rdi], cl; mov dh, 0x10; pop rbx; mov eax, edx; ret; 
0x000000000010ea74: push rbx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000060069: push rbx; or eax, 0x83480000; ret; 
0x00000000000ed62c: push rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000163c29: push rbx; push rdx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008b61f: push rbx; sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000e36f1: push rbx; setne al; ret; 
0x00000000000f0751: push rbx; sub byte ptr [rax - 0x75], cl; cmp eax, dword ptr [rcx]; ret 0xc083; 
0x000000000008e144: push rbx; sub rdx, rsi; mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x000000000010ed71: push rbx; xor dh, dh; ret 0x7501; 
0x00000000000fdab5: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x974; 
0x0000000000120851: push rcx; adc byte ptr [rdx + 8], dh; seta al; movzx eax, al; neg eax; ret; 
0x000000000012766b: push rcx; add byte ptr [rax], al; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [rbx + 0x28]; 
0x0000000000184350: push rcx; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000ba975: push rcx; add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000163ce9: push rcx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001933f8: push rcx; add edi, esi; ret 0x7ffe; 
0x00000000000a6d5d: push rcx; add esi, eax; add dword ptr [rax], eax; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x000000000005bc93: push rcx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000015c38d: push rcx; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000147e0d: push rcx; cmc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000004491b: push rcx; cmc; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dff32: push rcx; hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012b243: push rcx; jo 0x12b255; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b437: push rcx; jo 0x12b449; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000009d3af: push rcx; jo 0x9d3a9; ret 0; 
0x0000000000091216: push rcx; lea rbx, [r15 + 1]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000101787: push rcx; mov r9d, 1; call 0x101090; add rsp, 0x18; ret; 
0x00000000000ff2f7: push rcx; mov r9d, edx; call 0xfe830; add rsp, 0x18; ret; 
0x000000000009e752: push rcx; or al, 0; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x00000000000e7059: push rcx; or al, 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000011ed04: push rcx; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000001494a1: push rcx; or byte ptr [rcx + 0x31], cl; ror byte ptr [rbp - 0x75], 1; sbb dword ptr [rbp + 0x31], ecx; ret 0x314d; 
0x0000000000097284: push rcx; or dh, dh; ret 0x7404; 
0x00000000000e39ff: push rcx; or dword ptr [rax + rax], 0x48; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000013ff34: push rcx; out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x000000000012fede: push rcx; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012ec1b: push rcx; push rdx; or eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e138e: push rcx; ret; 
0x0000000000093a15: push rcx; sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x00000000000b59fb: push rcx; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000009e77b: push rcx; test byte ptr [rsi], 0; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x00000000000e36e8: push rcx; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x0000000000101747: push rcx; xor r9d, r9d; call 0x101090; add rsp, 0x18; ret; 
0x00000000000b96b2: push rdi; adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b7a82: push rdi; adc al, 0x48; lea eax, [rdi + 0x15]; ret; 
0x00000000000b9833: push rdi; adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b9731: push rdi; adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b9810: push rdi; adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b9791: push rdi; adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b9771: push rdi; adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000011872a: push rdi; adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000001019e9: push rdi; adc byte ptr [rdx + 8], dh; setne al; movzx eax, al; neg eax; ret; 
0x00000000000b9752: push rdi; adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b94e8: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b94fa: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b6a8a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000000b78ca: push rdi; add al, 0x48; lea eax, [rdi + 6]; ret; 
0x000000000016b419: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x0000000000034dc9: push rdi; add al, 0x73; and al, 0x83; ret 0x8b05; 
0x00000000000a7080: push rdi; add al, 0xf; mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7232: push rdi; add al, 0xf; mov dh, 0x54; and al, 0xe; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000b94ba: push rdi; add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x000000000010f635: push rdi; add dword ptr [rax + 0x39], ecx; ret 0xd72; 
0x0000000000057c17: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000000b6b3c: push rdi; add eax, 0xc478d48; ret; 
0x00000000000b798c: push rdi; add eax, 0xd478d48; ret; 
0x00000000000b9518: push rdi; add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000164125: push rdi; add rax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000186438: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182128: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000007af1b: push rdi; and byte ptr [rcx + rcx*4 - 0x11], cl; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000166ee5: push rdi; and dword ptr [rip + 0x14634900], eax; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001651d2: push rdi; call 0xfffffffff075db24; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165210: push rdi; call 0xfffffffff075db62; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165248: push rdi; call 0xfffffffff075db9a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000165286: push rdi; call 0xfffffffff075dbd8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001652be: push rdi; call 0xfffffffff075dc10; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001652e6: push rdi; call 0xfffffffff075dc38; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016530e: push rdi; call 0xfffffffff075dc60; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167ba2: push rdi; call 0xfffffffff07604f4; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167be0: push rdi; call 0xfffffffff0760532; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167c18: push rdi; call 0xfffffffff076056a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167c56: push rdi; call 0xfffffffff07605a8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167c8e: push rdi; call 0xfffffffff07605e0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167cb6: push rdi; call 0xfffffffff0760608; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167cde: push rdi; call 0xfffffffff0760630; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165218: push rdi; clc; ret; 
0x0000000000165390: push rdi; cld; ret; 
0x0000000000165eb7: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016acf9: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000082d96: push rdi; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x00000000000f6ae4: push rdi; cmp dh, dh; ret 0xf08; 
0x000000000018beee: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009b59e: push rdi; fmul dword ptr [rax + 0x39]; ret 0x5b74; 
0x000000000018bcee: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016ac79: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000cf855: push rdi; idiv bh; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x0000000000165925: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165735: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016aaca: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000f6b2a: push rdi; ljmp [rcx]; ret 0x6348; 
0x0000000000165ef6: push rdi; loope 0x165f45; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165f3e: push rdi; loope 0x165f8d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165f7c: push rdi; loope 0x165fcb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165fb4: push rdi; loope 0x166003; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ff2: push rdi; loope 0x166041; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016602a: push rdi; loope 0x166079; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166052: push rdi; loope 0x1660a1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001688c6: push rdi; loope 0x168915; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016890e: push rdi; loope 0x16895d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016894c: push rdi; loope 0x16899b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168984: push rdi; loope 0x1689d3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001689c2: push rdi; loope 0x168a11; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001689fa: push rdi; loope 0x168a49; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168a22: push rdi; loope 0x168a71; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018bfb8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018be38: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bf38: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018beb8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000090aa0: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000016ab5a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000087e5d: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; call qword ptr [rbp + 0x18]; 
0x0000000000088e68: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000000e6a75: push rdi; or al, 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000011e677: push rdi; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013a49b: push rdi; or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x000000000007a9f0: push rdi; or al, 0x83; ret; 
0x000000000007a9ae: push rdi; or al, 0x84; ror byte ptr [rdi], cl; mov byte ptr [rsi - 0x9ffffe3], al; ret 0xf40; 
0x000000000007a984: push rdi; or al, 0xf6; ret 0xf08; 
0x0000000000150552: push rdi; or byte ptr [rax - 0x77], cl; add al, 0x24; call qword ptr [rdx + 0x20]; 
0x0000000000097263: push rdi; or byte ptr [rax - 0x77], cl; mov esp, 0x8024; add dh, dh; ret 0x7504; 
0x00000000000b955c: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b959a: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b953a: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x000000000005854a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000005688a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000056891: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000008d350: push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x0000000000094ed6: push rdi; or dh, dh; ret 0xf02; 
0x0000000000097249: push rdi; or dh, dh; ret 0xf04; 
0x00000000000b6d20: push rdi; or eax, 0x1c478d48; ret; 
0x00000000000b7b80: push rdi; or eax, 0x1d478d48; ret; 
0x0000000000165555: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165385: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165481: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001653cd: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144fad: push rdi; pop rsp; lea rsi, [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000005606f: push rdi; push -0xcd17; jmp qword ptr [rsi + 0x2e]; 
0x000000000018c32e: push rdi; ret 0xff3; 
0x000000000004c745: push rdi; ret; 
0x00000000000d5477: push rdi; rol byte ptr [rax - 0x78f0f606], 1; ret; 
0x0000000000090ad1: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000bc685: push rdi; sbb eax, dword ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0x11930; cmovne rax, rdx; ret; 
0x00000000001660b7: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001658da: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x0000000000165cb7: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b52e6: push rdi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000155eb1: push rdi; sub byte ptr [rax + 1], bh; ret; 
0x00000000000e5bb4: push rdi; test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x00000000000b97f0: push rdi; wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000affeb: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000aa798: push rdi; xor eax, eax; ret; 
0x000000000005417e: push rdx; add al, byte ptr [rcx - 0x77]; ret; 
0x000000000011feea: push rdx; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x0000000000163bc0: push rdx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001946c5: push rdx; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010c141: push rdx; call 0x10b940; add rsp, 0x18; ret; 
0x0000000000102472: push rdx; fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x00000000000dfd92: push rdx; hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012bdb1: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000000e366c: push rdx; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000dc7b2: push rdx; mov esi, esp; dec dword ptr [rax - 0x77]; ret; 
0x0000000000035251: push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000dd69c: push rdx; mov rdx, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000167b49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x514e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001679f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51639]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51789]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167759: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x518d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167609: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51a29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51b79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167219: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51e19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51f69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f79: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x520b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e29: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52209]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166cd9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52359]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x524a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x525f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668e9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x52749]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165029: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53e49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ed9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x53f99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x540e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54239]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ae9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54389]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164999: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x544d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164849: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54629]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001646f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54779]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x548c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164459: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54a19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164309: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54b69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54cb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164069: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54e09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f19: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x54f59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011ebc4: push rdx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eb84: push rdx; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000108432: push rdx; or al, byte ptr [rax]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000970dd: push rdx; or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000009c5d6: push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x000000000012ec1c: push rdx; or eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012e40a: push rdx; outsb dx, byte ptr [rsi]; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000035221: push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000011140a: push rdx; ret 0xffff; 
0x000000000012c91a: push rdx; ret; 
0x000000000010b9c5: push rdx; sbb byte ptr [rax - 0x73], cl; pushfq; ret 0x8207; 
0x0000000000093dfe: push rdx; sbb byte ptr [rax - 9], cl; fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x00000000000b6258: push rsi; adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b6d77: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b7bd7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b56e7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000018af74: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004fde2: push rsi; adc eax, 0xc8b4800; ret 0x8b49; 
0x0000000000028362: push rsi; adc eax, dword ptr [rax]; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000016b412: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b94f4: push rsi; add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x000000000016b6b1: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000114feb: push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000016b721: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000004332d: push rsi; add eax, 0x174a8d; mulss xmm0, dword ptr [rip + 0x175751]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000043300: push rsi; add eax, 0x174ada; mulss xmm0, dword ptr [rip + 0x175782]; movss dword ptr [rsp - 4], xmm0; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000042f6c: push rsi; add eax, 0x174e2e; mulsd xmm0, qword ptr [rip + 0x175456]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f3a: push rsi; add eax, 0x174e70; mulsd xmm0, qword ptr [rip + 0x175490]; movsd qword ptr [rsp - 8], xmm0; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000016b3a2: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6b35: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b7985: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b54f5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b95b5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000018dd1f: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000133b5f: push rsi; add eax, 0x5bf08948; ret; 
0x000000000016b641: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b6aa3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000000b78e3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 7]; ret; 
0x00000000000b5493: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000b9513: push rsi; add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000e2acc: push rsi; add rsp, 0x38; ret; 
0x0000000000081770: push rsi; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000007518a: push rsi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff750; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000018af89: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000186ee3: push rsi; and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x00000000001460c6: push rsi; and dword ptr [rdi], eax; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x0000000000165326: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c7a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e7a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016607a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016530a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165c96: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165e96: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000166096: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165342: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000165ab1: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001654e9: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656c9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658a9: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165a89: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001656e5: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001658c5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165aa5: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000165505: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000018db1a: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000007fc62: push rsi; cli; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000165eb1: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016acf2: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018fa56: push rsi; cmc; sub eax, edx; ret; 
0x0000000000083d8c: push rsi; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000000b7206: push rsi; cmp ecx, dword ptr [rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000ffa6e: push rsi; dec dword ptr [rbx - 0x2e743]; dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x000000000018bb1e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000056216: push rsi; fcomp qword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000018bbee: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016ac72: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018fa46: push rsi; hlt; sub eax, edx; ret; 
0x0000000000193c36: push rsi; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d2976: push rsi; idiv bh; nop word ptr [rax + rax]; mov eax, 0x24; syscall; 
0x00000000000fda86: push rsi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000113a66: push rsi; imul ecx, dword ptr [rip + 0x75c08500], 0x72b82a; add byte ptr [rax], al; syscall; 
0x000000000016aac2: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000018fa16: push rsi; int1; sub eax, edx; ret; 
0x0000000000109b76: push rsi; mov ah, 0xf2; jmp qword ptr [rsi + 0xf]; 
0x000000000009e346: push rsi; mov cl, 0xe; add byte ptr [rax - 0x73], cl; add eax, 0xeb1af; cmove rax, rdx; ret; 
0x000000000018bae8: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018bbb8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016abe2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016ab52: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000009d3d6: push rsi; or al, 0; cmovne rax, rdx; ret; 
0x000000000011e794: push rsi; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000061f33: push rsi; or al, 0xf6; ret 0x7401; 
0x000000000006221e: push rsi; or al, 0xf6; ret 0x7440; 
0x00000000000b9594: push rsi; or byte ptr [rax - 0x77], cl; jns 0xffffffffed3b9df5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b9555: push rsi; or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000015e7e4: push rsi; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015e864: push rsi; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000093556: push rsi; or eax, 0x10015; add byte ptr [rax], al; mov dword ptr [rip + 0x150d48], eax; ret; 
0x00000000000b6d17: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7b77: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b5687: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b97a7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x0000000000112f46: push rsi; or ebp, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000005b5d1: push rsi; out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x00000000001516e4: push rsi; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x0000000000096509: push rsi; ret 0x750f; 
0x000000000006227a: push rsi; ret 0x7540; 
0x000000000006e704: push rsi; ret 0xf0a; 
0x000000000007c323: push rsi; ret 0xf10; 
0x000000000006c4df: push rsi; ret 0xffff; 
0x00000000000431df: push rsi; ret; 
0x000000000014928d: push rsi; sbb byte ptr [rcx + 0x31], cl; ror byte ptr [rbx + rcx*4 + 0x5e], 1; adc byte ptr [rbp + 0x31], cl; ret 0x314d; 
0x00000000001660b1: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000159bd7: push rsi; std; jmp qword ptr [rsi + 0xf]; 
0x00000000001658d2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000018db21: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000165cb1: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b5380: push rsi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000074cf3: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000018fa26: push rsi; sub eax, edx; ret; 
0x000000000016adf2: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000111577: push rsi; xor ax, ax; ret; 
0x000000000018af9e: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a54be: push rsp; adc byte ptr ss:[rcx + 0xf], al; xchg eax, ebx; ret; 
0x00000000000fac0e: push rsp; adc eax, 0x105c8d00; add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000112be1: push rsp; add byte ptr [rax], al; call 0x113410; add rsp, 0x18; ret; 
0x0000000000112c04: push rsp; add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x00000000001129a9: push rsp; add byte ptr [rax], al; mov eax, r10d; mov r12d, dword ptr fs:[r8]; syscall; 
0x0000000000112c33: push rsp; add byte ptr [rax], al; mov edi, ebx; mov r8d, eax; mov eax, 0x10; syscall; 
0x00000000001840c0: push rsp; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018408c: push rsp; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000163a0c: push rsp; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000042dc2: push rsp; add eax, 0x174fc8; andpd xmm1, xmmword ptr [rip + 0x174fb0]; orpd xmm0, xmm1; ret; 
0x00000000000cf97d: push rsp; add rsp, 0xe0; pop rbx; ret; 
0x000000000015e5ca: push rsp; and al, 0x10; call rdx; 
0x00000000000a7192: push rsp; and al, 0x10; mov qword ptr [rdi], rdx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000bbfac: push rsp; and al, 0x10; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000012110a: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012116b: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000046532: push rsp; and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000126684: push rsp; and al, 0x10; mov rsi, r13; xor r15d, r15d; call rax; 
0x00000000000462d2: push rsp; and al, 0x10; mov rsi, r15; mov rdi, rbx; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000126405: push rsp; and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rcx; 
0x00000000000a707b: push rsp; and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7084: push rsp; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x0000000000146698: push rsp; and al, 0x18; lea r9, [rsp + 0x40]; call qword ptr [rax]; 
0x00000000000a70a7: push rsp; and al, 0x18; lea rax, [rip + 0x103787]; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x000000000015d545: push rsp; and al, 0x18; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000150442: push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax + 0x28]; 
0x0000000000150409: push rsp; and al, 0x18; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000000a6ff2: push rsp; and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000009628a: push rsp; and al, 0x18; mov rdi, r12; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000014c160: push rsp; and al, 0x20; call rdx; 
0x00000000001503ec: push rsp; and al, 0x20; mov esi, 4; movdqa xmm0, xmmword ptr [rip + 0x67f74]; movaps xmmword ptr [rsp + 0x20], xmm0; call qword ptr [rax + 0x28]; 
0x00000000000965e7: push rsp; and al, 0x20; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x000000000011414e: push rsp; and al, 0x20; mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x0000000000052e4e: push rsp; and al, 0x20; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x00000000000965e2: push rsp; and al, 0x28; mov qword ptr [rsp + 0x20], r10; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x000000000015e1f1: push rsp; and al, 0x28; mov r9d, dword ptr [rdx]; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x00000000000dd69f: push rsp; and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000145c1c: push rsp; and al, 0x28; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000112907: push rsp; and al, 0x30; mov eax, 0x10; syscall; 
0x0000000000108437: push rsp; and al, 0x30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000015210d: push rsp; and al, 0x38; call qword ptr [rax + 0x18]; 
0x00000000001523fd: push rsp; and al, 0x40; call qword ptr [rax + 0x18]; 
0x000000000002a065: push rsp; and al, 0x48; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002c3aa: push rsp; and al, 0x50; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000002d463: push rsp; and al, 0x58; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000112bdc: push rsp; and al, 0xc; mov esi, 0x5410; call 0x113410; add rsp, 0x18; ret; 
0x00000000001504c6: push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x00000000000a722d: push rsp; and al, 0xc; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7063: push rsp; and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x00000000000435b6: push rsp; and al, 0xd0; movdqa xmm0, xmmword ptr [rsp - 0x38]; ret; 
0x00000000000a7236: push rsp; and al, 0xe; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a7215: push rsp; and al, 0xec; mov word ptr [rdi + 4], dx; ret; 
0x000000000005bd50: push rsp; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000a704b: push rsp; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x0000000000043077: push rsp; and al, 0xf8; mov dword ptr [rdi], ecx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042e2c: push rsp; and al, 0xf8; movq xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000042f1f: push rsp; and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000a702d: push rsp; and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000043220: push rsp; and al, 0xfc; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000432eb: push rsp; and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000009cc72: push rsp; and al, 8; add rsp, 0x10; pop rbx; ret; 
0x000000000009cbdd: push rsp; and al, 8; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001546ca: push rsp; and al, 8; call qword ptr [rax + 8]; 
0x000000000011db07: push rsp; and al, 8; mov eax, 0x38; syscall; 
0x00000000001466a6: push rsp; and al, 8; mov ebx, eax; mov rax, qword ptr [r10 + 8]; mov rdi, r10; call qword ptr [rax + 0x20]; 
0x0000000000112482: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000015abc8: push rsp; and al, 8; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000004394f: push rsp; and al, 8; movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x20; pop rbx; ret; 
0x0000000000096524: push rsp; and al, 8; xor edi, edi; call qword ptr [rax]; 
0x000000000014ea93: push rsp; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000001817b7: push rsp; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000000b7308: push rsp; cmp cl, byte ptr [rdi]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000dfe47: push rsp; hlt; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000110d8e: push rsp; int1; jmp qword ptr [rsi + 0x66]; 
0x00000000000aaccb: push rsp; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000009d468: push rsp; mov cl, byte ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0x12a4d; cmove rax, rdx; ret; 
0x000000000014e9b8: push rsp; mov eax, 1; ret; 
0x00000000000e3505: push rsp; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000002accf: push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000009e402: push rsp; or al, 0; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000011ea24: push rsp; or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000011e977: push rsp; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000042dca: push rsp; or eax, 0x174fb0; orpd xmm0, xmm1; ret; 
0x000000000010e9b4: push rsp; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000009e5e8: push rsp; out dx, al; add byte ptr [rax], al; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x0000000000106252: push rsp; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000e36ef: push rsp; push rbx; setne al; ret; 
0x00000000001211a4: push rsp; ret 0x8940; 
0x00000000000431d9: push rsp; ret; 
0x00000000000780e8: push rsp; sbb al, 0x13; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r14; jmp rax; 
0x000000000017dbf0: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x0000000000127150: pushfq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000f6e84: pushfq; add byte ptr [rax], al; add byte ptr [rdi], cl; pushfq; ret 0xd108; 
0x00000000000f6e82: pushfq; and al, 0x9c; add byte ptr [rax], al; add byte ptr [rdi], cl; pushfq; ret 0xd108; 
0x0000000000092e30: pushfq; and edx, edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000bb521: pushfq; idiv bh; mov rax, rbx; pop rbx; ret; 
0x0000000000150d70: pushfq; in al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x00000000000dd50b: pushfq; mov rdi, r14; call 0x15d990; mov rax, r14; call rax; 
0x000000000017e8f0: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c8a4: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x00000000000d0b85: pushfq; ret 0x3949; 
0x000000000010b9c9: pushfq; ret 0x8207; 
0x00000000000c48de: pushfq; ret 0x8d41; 
0x00000000000f6e89: pushfq; ret 0xd108; 
0x000000000007a350: pushfq; ret; 
0x00000000000cdae3: pushfq; sal bh, 0xd8; cmp ecx, r8d; cmovg eax, edx; ret; 
0x000000000018972d: pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x00000000001664a0: pushfq; sub eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000092778: pushfq; sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x00000000001409b8: pxor mm0, mm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000115be1: pxor mm0, mm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000015609f: pxor mm0, mm0; movups xmmword ptr [rsp + 0x28], xmm0; call rdx; 
0x00000000001409b7: pxor xmm0, xmm0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000115be0: pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000015609e: pxor xmm0, xmm0; movups xmmword ptr [rsp + 0x28], xmm0; call rdx; 
0x000000000002accc: rcl byte ptr [rax + 0x41], 0x54; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000002bdc3: rcl byte ptr [rax + 0x41], 0x55; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002efd7: rcl byte ptr [rax + 0x41], 0x55; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000000ec8fe: rcl byte ptr [rax - 0x74fbbc75], 0x55; add al, 1; ret 0x341; 
0x00000000000b7dec: rcl byte ptr [rax], 0x4c; lea ebx, [rip + 0xf2ffb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65cc: rcl byte ptr [rax], 0x4c; lea ebx, [rip + 0xf463b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000006d955: rcl byte ptr [rbx], 0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000026419: rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1c3d26], eax; ret; 
0x000000000012fd2d: rcl byte ptr [rcx], 0xeb; ret 0x8b48; 
0x000000000007e106: rcl byte ptr [rdx], 0; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000007e15f: rcl byte ptr [rdx], 0; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x00000000000d6aea: rcl byte ptr [rip - 0x72b80000], cl; xor eax, 0xd4c47; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000007e15e: rcl byte ptr ds:[rdx], 0; mov r9, rsi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x000000000009a1da: rcl dword ptr [rax + rax], cl; add dword ptr [rax - 0x77], ecx; ret 0x4574; 
0x00000000000287f3: rcl dword ptr [rdi], 1; sbb al, 0; ret; 
0x0000000000042b87: rcr bl, 0x3f; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000102b91: rcr byte ptr [rax + rax], 0x31; ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg eax, esp; ret 0x1589; 
0x000000000011bc3d: rcr byte ptr [rax + rax], 0x84; ror byte ptr [rdi], 0x84; ret 0xc; 
0x000000000015b87a: rcr byte ptr [rax + rax], 0x84; ror byte ptr [rdi], 0x84; ret; 
0x0000000000099ab3: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000039c60: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000de0de: rcr byte ptr [rbp + 0x41], 1; pop rsp; pop r13; pop r14; ret; 
0x0000000000098c19: rcr byte ptr [rbp + 0x41], 1; pop rsp; pop r13; ret; 
0x000000000005f51f: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000056897: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x00000000000a0a08: rcr byte ptr [rbp - 0x17], cl; movabs eax, dword ptr [0xe074c08490fffff6]; pop rbx; pop rbp; ret; 
0x0000000000133e77: rcr byte ptr [rbp - 0x3a], 2; add byte ptr [rcx + 0x5c], al; pop r13; ret; 
0x00000000000a6d71: rcr byte ptr [rbx + 0x48], cl; mov dword ptr [rdi], edx; ret; 
0x0000000000098c15: rcr byte ptr [rbx + 0x48], cl; mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x0000000000028d3c: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000047b65: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000ce816: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r14; ret; 
0x0000000000047488: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000154371: rcr byte ptr [rbx + 0x5d], 0xc3; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x10]; 
0x0000000000154d59: rcr byte ptr [rbx + 0x5d], 0xc3; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x00000000000de1a4: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; pop r14; ret; 
0x000000000006196b: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x0000000000055cbf: rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000053818: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000098fb1: rcr byte ptr [rbx + 0x5d], cl; mov rax, rdx; pop r12; ret; 
0x00000000000840e5: rcr byte ptr [rbx + 0x5d], cl; pop r12; pop r13; jmp rax; 
0x000000000008d3db: rcr byte ptr [rbx - 9], 0xd8; ret; 
0x0000000000150719: rcr byte ptr [rcx - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x0000000000147c6b: rcr dword ptr [rax + rax - 0x477cb800], 1; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000114e2c: rcr dword ptr [rbx + 0x31], cl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000568c9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000017e5ac: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183a69: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000183289: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000183679: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182e99: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f10c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e8ec: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017e0cc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000183038: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017ec2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e40c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017dbec: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017edcc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000183529: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d49: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183e59: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017df2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e062: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ed62: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e882: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018342a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183d5a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017f0a2: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e3a2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000017dec2: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ebc2: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000018357a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182d9a: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000c8d4b: rcr ecx, 1; adc dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018b129: rcr edx, cl; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000008b359: rep movsb byte ptr [rdi], byte ptr [rsi]; adc eax, 0xe9c93100; pop rsp; xchg eax, edx; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ba079: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000ba06b: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015d3d4: rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000ba463: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000097f93: rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000004487a: rep stosq qword ptr [rdi], rax; ret; 
0x0000000000026571: ret 0; 
0x00000000000e06ba: ret 0x1075; 
0x00000000000dff72: ret 0x107c; 
0x00000000000b6dca: ret 0x10; 
0x00000000000bd8f4: ret 0x10eb; 
0x000000000008da7a: ret 0x110f; 
0x0000000000131c7a: ret 0x112; 
0x000000000005686c: ret 0x114d; 
0x00000000000d2aaa: ret 0x114e; 
0x00000000000d0be2: ret 0x116c; 
0x00000000000fb599: ret 0x1172; 
0x000000000012c1b5: ret 0x1174; 
0x0000000000030df4: ret 0x1176; 
0x00000000000daf9b: ret 0x1189; 
0x000000000004daaa: ret 0x11; 
0x00000000000e55c2: ret 0x11eb; 
0x000000000011642c: ret 0x1274; 
0x000000000007df80: ret 0x12; 
0x000000000015e81f: ret 0x1389; 
0x00000000000b0b4a: ret 0x13; 
0x00000000000737c2: ret 0x13c5; 
0x0000000000054b6d: ret 0x13e9; 
0x00000000000d6fdf: ret 0x144; 
0x0000000000194614: ret 0x145; 
0x000000000013a909: ret 0x1472; 
0x00000000000aad09: ret 0x147c; 
0x00000000001929a6: ret 0x1484; 
0x00000000000c6aab: ret 0x1489; 
0x00000000000675b5: ret 0x148; 
0x0000000000091bf2: ret 0x149; 
0x0000000000097b84: ret 0x14; 
0x000000000005a51a: ret 0x14ae; 
0x000000000006445e: ret 0x14b8; 
0x000000000009b55a: ret 0x14c0; 
0x0000000000064576: ret 0x14c; 
0x000000000018d9ff: ret 0x14d; 
0x00000000000e3b06: ret 0x14e9; 
0x0000000000049541: ret 0x14eb; 
0x00000000000640aa: ret 0x14fa; 
0x0000000000098209: ret 0x1521; 
0x0000000000093606: ret 0x153f; 
0x0000000000091e9a: ret 0x1556; 
0x000000000009049e: ret 0x1570; 
0x00000000000bc192: ret 0x1572; 
0x00000000000635f9: ret 0x157d; 
0x0000000000102b9d: ret 0x1589; 
0x000000000005bc78: ret 0x15; 
0x0000000000070caa: ret 0x15e; 
0x000000000004b916: ret 0x15eb; 
0x0000000000091023: ret 0x160f; 
0x000000000004baf1: ret 0x16; 
0x00000000000d8380: ret 0x16e; 
0x0000000000182166: ret 0x1776; 
0x0000000000038b89: ret 0x1798; 
0x0000000000067be6: ret 0x17; 
0x0000000000112a3d: ret 0x180; 
0x000000000018d93c: ret 0x180f; 
0x0000000000063b09: ret 0x1868; 
0x000000000013f77d: ret 0x1874; 
0x00000000000aa805: ret 0x1876; 
0x00000000000cfc69: ret 0x190; 
0x000000000008c91a: ret 0x1976; 
0x0000000000047b09: ret 0x19; 
0x0000000000044de2: ret 0x19f3; 
0x0000000000030deb: ret 0x1a72; 
0x000000000009795b: ret 0x1a74; 
0x0000000000037c32: ret 0x1a; 
0x00000000000636c0: ret 0x1ae8; 
0x00000000000ef638: ret 0x1aeb; 
0x0000000000033756: ret 0x1b30; 
0x0000000000043212: ret 0x1b75; 
0x000000000008d74e: ret 0x1b8; 
0x0000000000097b03: ret 0x1ba; 
0x00000000000d1807: ret 0x1be; 
0x00000000000a0325: ret 0x1beb; 
0x0000000000025292: ret 0x1bee; 
0x0000000000025092: ret 0x1bef; 
0x00000000000c3442: ret 0x1d74; 
0x00000000000c4a41: ret 0x1d7e; 
0x000000000003886d: ret 0x1de8; 
0x0000000000117bfd: ret 0x1e2; 
0x00000000000e3a19: ret 0x1e9; 
0x000000000002e3a2: ret 0x1f0f; 
0x000000000004e5fa: ret 0x1fe9; 
0x0000000000034cd7: ret 0x200; 
0x00000000000c18c4: ret 0x2040; 
0x0000000000051ef5: ret 0x2041; 
0x000000000010daf0: ret 0x2044; 
0x00000000000ee3f3: ret 0x2073; 
0x00000000000b7fed: ret 0x2074; 
0x0000000000066dee: ret 0x20; 
0x000000000010c76e: ret 0x20b9; 
0x00000000000e35d5: ret 0x20ba; 
0x000000000010e3c4: ret 0x2141; 
0x000000000012632a: ret 0x2144; 
0x0000000000057194: ret 0x2173; 
0x000000000002f0e3: ret 0x2174; 
0x000000000008dc5c: ret 0x2175; 
0x0000000000187986: ret 0x21; 
0x000000000005a906: ret 0x2274; 
0x00000000000b7f7b: ret 0x2275; 
0x0000000000080e83: ret 0x227c; 
0x00000000000b4fd8: ret 0x2288; 
0x000000000018c492: ret 0x2373; 
0x00000000000a6cca: ret 0x2374; 
0x00000000000e1668: ret 0x23b8; 
0x00000000000f54ed: ret 0x2476; 
0x00000000000feba0: ret 0x2573; 
0x0000000000080fd3: ret 0x257c; 
0x000000000005ca85: ret 0x25e8; 
0x00000000000d8f10: ret 0x25e9; 
0x000000000013dfbf: ret 0x2674; 
0x000000000002b494: ret 0x2675; 
0x00000000000d0b15: ret 0x267e; 
0x00000000000b0496: ret 0x2774; 
0x00000000000551de: ret 0x2775; 
0x00000000000b0ce5: ret 0x280f; 
0x000000000009b5ad: ret 0x2874; 
0x00000000000aa7f5: ret 0x2876; 
0x000000000002a1b9: ret 0x28b; 
0x00000000000d601a: ret 0x28f5; 
0x00000000000a62d9: ret 0x2901; 
0x00000000000439b2: ret 0x290f; 
0x0000000000181246: ret 0x2910; 
0x00000000001814f7: ret 0x2912; 
0x0000000000186ab7: ret 0x2920; 
0x000000000013dec7: ret 0x2937; 
0x00000000000d7835: ret 0x293c; 
0x00000000000c0d1f: ret 0x2941; 
0x000000000006257a: ret 0x2944; 
0x000000000004a970: ret 0x2948; 
0x000000000005fa2b: ret 0x2949; 
0x0000000000031d90: ret 0x294c; 
0x000000000004c6b6: ret 0x294d; 
0x00000000000e35bc: ret 0x2974; 
0x00000000000cdc44: ret 0x2975; 
0x0000000000093404: ret 0x2977; 
0x000000000003e905: ret 0x29; 
0x0000000000066c4a: ret 0x2a1; 
0x000000000011545c: ret 0x2aeb; 
0x0000000000028f99: ret 0x2b48; 
0x0000000000128698: ret 0x2b49; 
0x000000000014e632: ret 0x2b74; 
0x00000000001490f0: ret 0x2b8; 
0x00000000000a6873: ret 0x2ba; 
0x00000000001155db: ret 0x2beb; 
0x00000000000a6aef: ret 0x2bf; 
0x000000000013f359: ret 0x2c3c; 
0x000000000009a25a: ret 0x2c74; 
0x0000000000086fda: ret 0x2c; 
0x00000000000a6dd8: ret 0x2d74; 
0x0000000000096823: ret 0x2d75; 
0x000000000018b43a: ret 0x2d7; 
0x0000000000047585: ret 0x2e66; 
0x00000000000f0897: ret 0x2f73; 
0x000000000005134a: ret 0x2fe9; 
0x000000000004863a: ret 0x3039; 
0x000000000014ae1b: ret 0x3074; 
0x0000000000107dc6: ret 0x3101; 
0x000000000002b3b4: ret 0x3145; 
0x00000000001493b1: ret 0x3148; 
0x0000000000149390: ret 0x3149; 
0x0000000000149298: ret 0x314d; 
0x0000000000044b30: ret 0x31c3; 
0x0000000000054a7b: ret 0x31e9; 
0x000000000010c902: ret 0x3375; 
0x000000000013efbe: ret 0x33e9; 
0x00000000000ec907: ret 0x341; 
0x00000000000f4630: ret 0x3439; 
0x00000000000f465f: ret 0x343b; 
0x00000000000aace9: ret 0x347c; 
0x00000000000cf421: ret 0x348; 
0x000000000010c8a0: ret 0x3575; 
0x0000000000048d25: ret 0x35e8; 
0x000000000007c5c5: ret 0x36e9; 
0x0000000000182146: ret 0x3776; 
0x0000000000103a3a: ret 0x37b; 
0x00000000001009db: ret 0x37e9; 
0x00000000000cf32a: ret 0x3840; 
0x00000000000a0c33: ret 0x3841; 
0x0000000000082f26: ret 0x3873; 
0x00000000000aa7e5: ret 0x3876; 
0x0000000000082b66: ret 0x38b; 
0x0000000000054415: ret 0x3901; 
0x000000000013a2f9: ret 0x3904; 
0x00000000000cfb91: ret 0x3907; 
0x000000000013b471: ret 0x3908; 
0x00000000000a6e49: ret 0x3941; 
0x00000000000808af: ret 0x3944; 
0x000000000009ffe5: ret 0x3945; 
0x000000000004aca6: ret 0x3948; 
0x0000000000045602: ret 0x3949; 
0x000000000003373e: ret 0x394c; 
0x0000000000042521: ret 0x394d; 
0x00000000000b9a22: ret 0x3a01; 
0x000000000018c47b: ret 0x3a73; 
0x000000000015d943: ret 0x3a83; 
0x00000000000f08b7: ret 0x3b41; 
0x000000000006f7ec: ret 0x3b44; 
0x000000000006f4dc: ret 0x3b45; 
0x00000000000ba201: ret 0x3b48; 
0x000000000014e692: ret 0x3b74; 
0x000000000010d68f: ret 0x3b8; 
0x00000000000b7f61: ret 0x3c75; 
0x0000000000044032: ret 0x3d48; 
0x00000000000289fb: ret 0x3d83; 
0x00000000000f672d: ret 0x3de8; 
0x00000000000e3bdd: ret 0x3de9; 
0x00000000001587d7: ret 0x3e75; 
0x000000000008a004: ret 0x3e9; 
0x0000000000084679: ret 0x3f7; 
0x000000000005899a: ret 0x3f; 
0x0000000000136cd3: ret 0x3fe9; 
0x0000000000036356: ret 0x4001; 
0x00000000000a4315: ret 0x4006; 
0x00000000000bb743: ret 0x408d; 
0x00000000001423cc: ret 0x4100; 
0x0000000000033259: ret 0x4101; 
0x00000000000c7b11: ret 0x4102; 
0x000000000002ee07: ret 0x4104; 
0x00000000000d0e01: ret 0x4107; 
0x0000000000069705: ret 0x4108; 
0x000000000004c6c6: ret 0x4118; 
0x000000000004f60b: ret 0x4135; 
0x00000000000a6d13: ret 0x4153; 
0x000000000011050c: ret 0x4164; 
0x00000000000f0568: ret 0x4189; 
0x00000000000ef193: ret 0x418d; 
0x00000000001186be: ret 0x4190; 
0x0000000000029e3e: ret 0x41c3; 
0x000000000009b719: ret 0x41e8; 
0x000000000002ef7f: ret 0x41e9; 
0x000000000014762f: ret 0x4203; 
0x00000000000a8bea: ret 0x4266; 
0x0000000000097ae2: ret 0x4273; 
0x00000000000eff4f: ret 0x428b; 
0x00000000000d0ace: ret 0x428d; 
0x000000000008b991: ret 0x42e9; 
0x000000000014989f: ret 0x4388; 
0x00000000000863f4: ret 0x4389; 
0x000000000013f016: ret 0x43e9; 
0x0000000000039c38: ret 0x4401; 
0x0000000000061b2b: ret 0x4404; 
0x000000000004b229: ret 0x4418; 
0x00000000000788b6: ret 0x4420; 
0x00000000000944a3: ret 0x4466; 
0x00000000000bdfef: ret 0x4489; 
0x0000000000153489: ret 0x448b; 
0x00000000000d7ccf: ret 0x448d; 
0x0000000000042ba1: ret 0x44c7; 
0x00000000000e6aca: ret 0x44c; 
0x00000000000d4858: ret 0x44f6; 
0x00000000000a4f24: ret 0x4501; 
0x000000000013b142: ret 0x4502; 
0x00000000000bacea: ret 0x4504; 
0x000000000005a648: ret 0x453c; 
0x00000000000cbbdf: ret 0x4540; 
0x000000000009a1e0: ret 0x4574; 
0x0000000000027f76: ret 0x4589; 
0x0000000000082939: ret 0x45f7; 
0x00000000000cdc27: ret 0x4675; 
0x00000000000d0bad: ret 0x4689; 
0x00000000000a5808: ret 0x470e; 
0x00000000000ee3ab: ret 0x473; 
0x00000000000a6ea4: ret 0x474; 
0x0000000000057e26: ret 0x4774; 
0x00000000000ce894: ret 0x477f; 
0x000000000005f413: ret 0x47e9; 
0x0000000000027ad8: ret 0x4801; 
0x000000000002c609: ret 0x4802; 
0x000000000007a1cd: ret 0x4803; 
0x000000000002bd57: ret 0x4804; 
0x0000000000121fc2: ret 0x4805; 
0x0000000000121ec2: ret 0x4806; 
0x0000000000121e42: ret 0x4807; 
0x000000000005643a: ret 0x4808; 
0x00000000000d26fd: ret 0x4809; 
0x0000000000036957: ret 0x480a; 
0x0000000000121b42: ret 0x480b; 
0x00000000000cea1e: ret 0x480e; 
0x00000000000e20b9: ret 0x480f; 
0x0000000000058396: ret 0x4810; 
0x0000000000025394: ret 0x4811; 
0x0000000000151369: ret 0x4812; 
0x0000000000074b52: ret 0x4817; 
0x000000000003637b: ret 0x481a; 
0x0000000000074b72: ret 0x4820; 
0x0000000000036302: ret 0x4822; 
0x000000000013d753: ret 0x482e; 
0x0000000000127dd0: ret 0x4830; 
0x000000000004e26d: ret 0x4835; 
0x000000000005b026: ret 0x4840; 
0x00000000000269dd: ret 0x4864; 
0x000000000009efc7: ret 0x4876; 
0x00000000000f4603: ret 0x488b; 
0x0000000000096299: ret 0x4890; 
0x0000000000101c8a: ret 0x489; 
0x000000000009ebbb: ret 0x48b; 
0x00000000000b01e8: ret 0x48c3; 
0x00000000000484be: ret 0x48d; 
0x00000000000299fc: ret 0x4901; 
0x000000000002b4b2: ret 0x4904; 
0x00000000000bb308: ret 0x4908; 
0x00000000000d73e2: ret 0x490f; 
0x00000000000c6bfc: ret 0x4910; 
0x00000000000c8e62: ret 0x4917; 
0x000000000015d842: ret 0x4918; 
0x0000000000127c5a: ret 0x4964; 
0x00000000000577c6: ret 0x4974; 
0x00000000000967c3: ret 0x4a10; 
0x00000000000d8dfc: ret 0x4a8b; 
0x0000000000026f29: ret 0x4a8d; 
0x000000000011423f: ret 0x4ab8; 
0x0000000000126a6a: ret 0x4b8b; 
0x00000000001142ef: ret 0x4bb8; 
0x000000000008108a: ret 0x4be9; 
0x0000000000049eaa: ret 0x4c01; 
0x000000000011fef1: ret 0x4c02; 
0x00000000000e73ba: ret 0x4c04; 
0x000000000005c909: ret 0x4c08; 
0x00000000000fe48a: ret 0x4c10; 
0x000000000005c3ac: ret 0x4c20; 
0x0000000000102476: ret 0x4c28; 
0x0000000000126e6b: ret 0x4c30; 
0x00000000000be3e3: ret 0x4c35; 
0x00000000000cbed0: ret 0x4c40; 
0x00000000000dbd55: ret 0x4c48; 
0x0000000000181ab6: ret 0x4c60; 
0x00000000000ef1ce: ret 0x4c6; 
0x00000000000d48df: ret 0x4c80; 
0x000000000002b5e0: ret 0x4d01; 
0x000000000002ac04: ret 0x4d02; 
0x00000000000b5762: ret 0x4d10; 
0x0000000000186eeb: ret 0x4d20; 
0x0000000000191519: ret 0x4de9; 
0x0000000000027f73: ret 0x4e0f; 
0x0000000000096d5f: ret 0x4e72; 
0x000000000011ff19: ret 0x4e73; 
0x0000000000057535: ret 0x4e74; 
0x0000000000054e3e: ret 0x4e9; 
0x00000000000e1d95: ret 0x4f08; 
0x000000000016a17a: ret 0x4f2; 
0x0000000000117c88: ret 0x4feb; 
0x0000000000196032: ret 0x506; 
0x000000000003853a: ret 0x50e8; 
0x000000000018c464: ret 0x5173; 
0x00000000000ce549: ret 0x5180; 
0x00000000000f0549: ret 0x5189; 
0x00000000000ba973: ret 0x518d; 
0x00000000000a7539: ret 0x51e8; 
0x0000000000156fca: ret 0x5375; 
0x0000000000127679: ret 0x53ff; 
0x000000000009a16c: ret 0x5409; 
0x00000000001647ba: ret 0x546; 
0x00000000000aacc9: ret 0x547c; 
0x00000000000546dc: ret 0x5488; 
0x00000000000586c8: ret 0x5489; 
0x000000000008725e: ret 0x5590; 
0x000000000010d806: ret 0x55b8; 
0x000000000012701a: ret 0x55ff; 
0x00000000000b7f47: ret 0x5675; 
0x00000000000e32f4: ret 0x56e9; 
0x0000000000042e60: ret 0x574; 
0x000000000012e2bb: ret 0x576; 
0x0000000000182126: ret 0x5776; 
0x000000000012e042: ret 0x577; 
0x00000000000f8025: ret 0x57e; 
0x000000000004692b: ret 0x589; 
0x00000000000d6fcf: ret 0x5a58; 
0x000000000009b5a2: ret 0x5b74; 
0x0000000000147bda: ret 0x5b8b; 
0x0000000000063070: ret 0x5ba; 
0x00000000000feeee: ret 0x5ce8; 
0x00000000000f8495: ret 0x5de9; 
0x0000000000190d55: ret 0x5e9; 
0x000000000008bada: ret 0x5e; 
0x00000000000912c5: ret 0x6074; 
0x00000000000563d9: ret 0x60e9; 
0x0000000000105df4: ret 0x6176; 
0x000000000010897a: ret 0x61e9; 
0x000000000011cc4a: ret 0x625; 
0x00000000000c920b: ret 0x6273; 
0x0000000000055f79: ret 0x6348; 
0x00000000000a7181: ret 0x6349; 
0x00000000000ece02: ret 0x634c; 
0x00000000000d5a96: ret 0x634d; 
0x00000000000cdc0a: ret 0x6375; 
0x00000000000315f3: ret 0x6411; 
0x00000000000aacb9: ret 0x647c; 
0x0000000000065926: ret 0x64; 
0x00000000000eacfd: ret 0x65e9; 
0x00000000001157d7: ret 0x6602; 
0x000000000009f486: ret 0x6610; 
0x00000000000aa771: ret 0x6620; 
0x000000000009cd73: ret 0x66c3; 
0x000000000009d82e: ret 0x672; 
0x000000000010f646: ret 0x674; 
0x00000000000eca26: ret 0x6774; 
0x0000000000182116: ret 0x6776; 
0x0000000000117be0: ret 0x67a; 
0x00000000000ce546: ret 0x6948; 
0x00000000000ff0e1: ret 0x69e8; 
0x00000000000e19b2: ret 0x6b75; 
0x000000000009af0b: ret 0x6be2; 
0x00000000000e3baf: ret 0x6be9; 
0x00000000000d7c6d: ret 0x6eb8; 
0x0000000000042e16: ret 0x6f75; 
0x000000000013f421: ret 0x705; 
0x0000000000147418: ret 0x72e8; 
0x0000000000061f36: ret 0x7401; 
0x0000000000099a92: ret 0x7402; 
0x0000000000097287: ret 0x7404; 
0x0000000000086a04: ret 0x7408; 
0x0000000000084eed: ret 0x7420; 
0x0000000000062221: ret 0x7440; 
0x0000000000050fc2: ret 0x7489; 
0x000000000002a33f: ret 0x7501; 
0x000000000009c42a: ret 0x7502; 
0x000000000009726e: ret 0x7504; 
0x00000000001490be: ret 0x7507; 
0x000000000002ce18: ret 0x7508; 
0x000000000009650b: ret 0x750f; 
0x000000000018e56b: ret 0x7510; 
0x0000000000083422: ret 0x7520; 
0x000000000006227c: ret 0x7540; 
0x00000000000eb7d1: ret 0x7580; 
0x000000000013c0ed: ret 0x758b; 
0x0000000000135805: ret 0x75e8; 
0x0000000000107235: ret 0x75e9; 
0x000000000018b352: ret 0x7677; 
0x00000000000d08d4: ret 0x76b; 
0x0000000000194af6: ret 0x7775; 
0x0000000000056c52: ret 0x777; 
0x00000000000439d3: ret 0x77e8; 
0x0000000000109290: ret 0x77e9; 
0x00000000000d0b34: ret 0x77e; 
0x00000000000a75a2: ret 0x78e8; 
0x0000000000106ae4: ret 0x7976; 
0x000000000009a3f3: ret 0x7a74; 
0x0000000000054647: ret 0x7c8b; 
0x000000000008a63d: ret 0x7ce9; 
0x00000000000aa711: ret 0x7e20; 
0x000000000018207c: ret 0x7e40; 
0x00000000001171d1: ret 0x7ee9; 
0x00000000000a779c: ret 0x7f10; 
0x00000000001933fb: ret 0x7ffe; 
0x0000000000192d6b: ret 0x7fff; 
0x00000000000a8979: ret 0x8000; 
0x00000000000362de: ret 0x8001; 
0x00000000000379e8: ret 0x8040; 
0x0000000000143d0d: ret 0x8041; 
0x00000000000b5b9d: ret 0x8072; 
0x0000000000128e9a: ret 0x8080; 
0x0000000000168fae: ret 0x80; 
0x00000000000491da: ret 0x80e8; 
0x00000000001818f5: ret 0x8101; 
0x0000000000139c31: ret 0x8103; 
0x0000000000189fb5: ret 0x8104; 
0x000000000013b44c: ret 0x8108; 
0x00000000000d2edc: ret 0x8141; 
0x0000000000194ae0: ret 0x8148; 
0x00000000000ecb53: ret 0x8166; 
0x0000000000095bba: ret 0x818; 
0x000000000010b9ca: ret 0x8207; 
0x00000000000334ca: ret 0x820f; 
0x000000000004424e: ret 0x82b8; 
0x000000000009cf9a: ret 0x8301; 
0x0000000000138f29: ret 0x8303; 
0x00000000000ef287: ret 0x8304; 
0x00000000000a3b1c: ret 0x8305; 
0x00000000001819c5: ret 0x8308; 
0x0000000000048c9c: ret 0x830f; 
0x0000000000181990: ret 0x8310; 
0x0000000000181962: ret 0x8320; 
0x0000000000127cba: ret 0x8330; 
0x00000000000aabe1: ret 0x8340; 
0x0000000000054973: ret 0x8341; 
0x000000000002765b: ret 0x8348; 
0x0000000000032f5b: ret 0x8349; 
0x000000000012f27a: ret 0x834; 
0x0000000000039368: ret 0x8401; 
0x00000000000c33d1: ret 0x840; 
0x0000000000042fa2: ret 0x840f; 
0x000000000002cd18: ret 0x841; 
0x00000000001914e8: ret 0x8441; 
0x000000000004ab71: ret 0x8445; 
0x00000000000c6bc0: ret 0x844; 
0x00000000000a2ae6: ret 0x845; 
0x00000000000e31c6: ret 0x84e9; 
0x00000000000c8c06: ret 0x850b; 
0x000000000002f17d: ret 0x850f; 
0x0000000000182601: ret 0x8520; 
0x00000000000546d4: ret 0x8545; 
0x000000000002a9ce: ret 0x8548; 
0x0000000000039a69: ret 0x854d; 
0x00000000000db4f8: ret 0x8589; 
0x00000000000d3296: ret 0x858b; 
0x0000000000129d3e: ret 0x85e9; 
0x00000000000332d0: ret 0x860f; 
0x00000000000e1c61: ret 0x8674; 
0x000000000007c56e: ret 0x86e9; 
0x000000000015c71a: ret 0x86f; 
0x000000000007d5a6: ret 0x870f; 
0x00000000000562ac: ret 0x874; 
0x00000000000aa815: ret 0x876; 
0x000000000004adc1: ret 0x87e; 
0x000000000008ac26: ret 0x87eb; 
0x0000000000036e7e: ret 0x8801; 
0x000000000002b1ee: ret 0x8804; 
0x00000000000d768b: ret 0x8830; 
0x000000000015bf6a: ret 0x884; 
0x000000000006416c: ret 0x8873; 
0x0000000000090371: ret 0x8901; 
0x0000000000081056: ret 0x8908; 
0x00000000001211a5: ret 0x8940; 
0x000000000004c3ad: ret 0x8941; 
0x000000000002a1c7: ret 0x8944; 
0x00000000000a2a0a: ret 0x8945; 
0x00000000000281ff: ret 0x8948; 
0x0000000000029e44: ret 0x8949; 
0x00000000000362bd: ret 0x894c; 
0x0000000000035f2d: ret 0x894d; 
0x00000000000576bb: ret 0x894e; 
0x000000000008ab09: ret 0x89eb; 
0x0000000000039a71: ret 0x8a75; 
0x000000000007b106: ret 0x8a77; 
0x00000000000809aa: ret 0x8b04; 
0x0000000000034dce: ret 0x8b05; 
0x000000000003859a: ret 0x8b08; 
0x000000000018a072: ret 0x8b10; 
0x000000000002bbba: ret 0x8b41; 
0x000000000002c3c5: ret 0x8b44; 
0x00000000000307be: ret 0x8b48; 
0x000000000002aaf7: ret 0x8b49; 
0x000000000005763e: ret 0x8b4a; 
0x0000000000041647: ret 0x8b4c; 
0x0000000000082ab8: ret 0x8b64; 
0x000000000015ea09: ret 0x8b9; 
0x000000000005e199: ret 0x8c0f; 
0x000000000007f308: ret 0x8ce9; 
0x00000000000a3a93: ret 0x8d01; 
0x000000000005c7e1: ret 0x8d04; 
0x000000000002d77b: ret 0x8d0f; 
0x00000000000a5a7e: ret 0x8d41; 
0x00000000000968ee: ret 0x8d44; 
0x00000000000db091: ret 0x8d45; 
0x00000000000d0b22: ret 0x8d46; 
0x0000000000028de3: ret 0x8d48; 
0x000000000004850e: ret 0x8d49; 
0x00000000000c0b96: ret 0x8d4a; 
0x000000000010195d: ret 0x8d4b; 
0x0000000000056825: ret 0x8d4c; 
0x0000000000035f0d: ret 0x8d4d; 
0x0000000000193292: ret 0x8d4f; 
0x0000000000052ae3: ret 0x8d74; 
0x000000000007a785: ret 0x8d89; 
0x0000000000045b1a: ret 0x8e0f; 
0x00000000000bc96e: ret 0x8ee9; 
0x000000000005d279: ret 0x8f0f; 
0x0000000000084a4b: ret 0x8feb; 
0x00000000000f556d: ret 0x9066; 
0x0000000000034c9d: ret 0x90c3; 
0x000000000009fb59: ret 0x91e8; 
0x00000000000f6558: ret 0x92e8; 
0x00000000000feb02: ret 0x930f; 
0x000000000013f092: ret 0x93e9; 
0x000000000006b520: ret 0x940f; 
0x0000000000058fb1: ret 0x941; 
0x0000000000042f19: ret 0x948; 
0x0000000000192dbc: ret 0x949; 
0x000000000004360c: ret 0x94c; 
0x0000000000193371: ret 0x94d; 
0x000000000011c305: ret 0x954; 
0x000000000005bcdb: ret 0x9574; 
0x000000000011bd04: ret 0x95f; 
0x000000000011bdd6: ret 0x960; 
0x00000000000e775b: ret 0x960f; 
0x0000000000126e6f: ret 0x9675; 
0x00000000000878d4: ret 0x96e8; 
0x00000000000fa69a: ret 0x974; 
0x0000000000099a1c: ret 0x976; 
0x00000000001565d6: ret 0x9775; 
0x000000000012e094: ret 0x977; 
0x000000000015187a: ret 0x983; 
0x00000000000b7f95: ret 0x9874; 
0x0000000000067554: ret 0x9975; 
0x0000000000076210: ret 0x9be9; 
0x00000000000a6183: ret 0x9ceb; 
0x00000000000b5b80: ret 0x9d72; 
0x00000000000d3239: ret 0x9ee9; 
0x00000000000fe43a: ret 0xa0e9; 
0x00000000000880ba: ret 0xa3c; 
0x00000000000a468b: ret 0xa3eb; 
0x000000000014539a: ret 0xa45; 
0x000000000013f662: ret 0xa47; 
0x000000000008a403: ret 0xa4eb; 
0x00000000000ce8ed: ret 0xa77e; 
0x0000000000061a79: ret 0xa7d; 
0x0000000000094791: ret 0xa8e9; 
0x0000000000078593: ret 0xa; 
0x00000000001360f0: ret 0xab8; 
0x0000000000141d2b: ret 0xabe9; 
0x000000000011aede: ret 0xabe; 
0x00000000001039a9: ret 0xabf; 
0x0000000000093ff1: ret 0xac75; 
0x000000000010151c: ret 0xace9; 
0x000000000010afc0: ret 0xae8; 
0x0000000000116f81: ret 0xb1e9; 
0x00000000000788ca: ret 0xb2e; 
0x00000000000d2685: ret 0xb3e9; 
0x0000000000149714: ret 0xb45; 
0x00000000000e3295: ret 0xb5e9; 
0x0000000000058f6d: ret 0xb60f; 
0x000000000013215a: ret 0xb6d; 
0x0000000000038f6c: ret 0xb70f; 
0x00000000000a380e: ret 0xb841; 
0x0000000000043067: ret 0xb848; 
0x0000000000043193: ret 0xb8; 
0x000000000009cf88: ret 0xb8c3; 
0x000000000009e855: ret 0xb941; 
0x0000000000042d49: ret 0xb948; 
0x00000000000ce8db: ret 0xb97e; 
0x00000000000e7a6e: ret 0xb9e9; 
0x000000000002562c: ret 0xb; 
0x000000000009a2ea: ret 0xba41; 
0x00000000000cefc2: ret 0xba; 
0x000000000002ec26: ret 0xbb41; 
0x000000000012bf8a: ret 0xbc6; 
0x000000000013c183: ret 0xbc73; 
0x000000000009e892: ret 0xbd01; 
0x000000000007d86e: ret 0xbd83; 
0x000000000007a7b7: ret 0xbd89; 
0x00000000000e82ab: ret 0xbde9; 
0x00000000000773d7: ret 0xbe01; 
0x0000000000072ea0: ret 0xbe08; 
0x000000000009b69c: ret 0xbee8; 
0x00000000000a8839: ret 0xc000; 
0x00000000000502a1: ret 0xc001; 
0x000000000013a917: ret 0xc019; 
0x0000000000036dfb: ret 0xc031; 
0x00000000000bad8a: ret 0xc04; 
0x000000000003163e: ret 0xc083; 
0x0000000000116425: ret 0xc084; 
0x00000000000416ad: ret 0xc085; 
0x00000000000e3c5a: ret 0xc0e9; 
0x00000000000e4b25: ret 0xc0eb; 
0x000000000004ad64: ret 0xc101; 
0x0000000000026985: ret 0xc148; 
0x000000000005c0c8: ret 0xc149; 
0x00000000000604da: ret 0xc166; 
0x0000000000120a7c: ret 0xc175; 
0x0000000000155b5f: ret 0xc189; 
0x00000000000484c4: ret 0xc229; 
0x00000000000481f0: ret 0xc269; 
0x000000000009889b: ret 0xc275; 
0x0000000000089995: ret 0xc283; 
0x000000000018c334: ret 0xc2b2; 
0x0000000000058998: ret 0xc2e8; 
0x00000000000d5d7f: ret 0xc329; 
0x00000000000ecb8a: ret 0xc35b; 
0x0000000000030b95: ret 0xc389; 
0x00000000000f28d1: ret 0xc3b; 
0x00000000000a08b8: ret 0xc3c3; 
0x000000000005f8e7: ret 0xc3e8; 
0x000000000010f6f1: ret 0xc3f6; 
0x00000000001820e1: ret 0xc540; 
0x0000000000109f81: ret 0xc5e9; 
0x00000000000e2535: ret 0xc60f; 
0x000000000013dfa2: ret 0xc641; 
0x00000000000ed3a6: ret 0xc675; 
0x000000000005c9b7: ret 0xc689; 
0x000000000014e6f1: ret 0xc6eb; 
0x000000000008bb03: ret 0xc701; 
0x000000000004a019: ret 0xc748; 
0x00000000000cdc61: ret 0xc75; 
0x00000000000d7cde: ret 0xc781; 
0x0000000000074a12: ret 0xc789; 
0x0000000000120152: ret 0xc7f; 
0x00000000000863e9: ret 0xc883; 
0x0000000000042a74: ret 0xc889; 
0x00000000001564eb: ret 0xc8b; 
0x0000000000193cd7: ret 0xc931; 
0x0000000000076206: ret 0xc985; 
0x00000000000b4f31: ret 0xc9ff; 
0x0000000000062f6e: ret 0xc; 
0x000000000002677c: ret 0xca21; 
0x00000000000661dd: ret 0xcb73; 
0x000000000009aa1a: ret 0xcb8; 
0x00000000000b5b50: ret 0xcd72; 
0x0000000000056c30: ret 0xcd74; 
0x00000000000296da: ret 0xce80; 
0x000000000018260d: ret 0xce89; 
0x00000000000c0278: ret 0xceb; 
0x00000000000bddcc: ret 0xcf75; 
0x000000000015969d: ret 0xcf89; 
0x00000000000c69d8: ret 0xd008; 
0x00000000000ee80f: ret 0xd009; 
0x00000000000994a2: ret 0xd020; 
0x00000000000cef94: ret 0xd029; 
0x000000000006507f: ret 0xd039; 
0x0000000000056ccd: ret 0xd074; 
0x000000000009cb6d: ret 0xd084; 
0x000000000008a3ef: ret 0xd089; 
0x0000000000113302: ret 0xd0b; 
0x0000000000102139: ret 0xd101; 
0x00000000000f6e8a: ret 0xd108; 
0x0000000000112daa: ret 0xd10; 
0x00000000000d31bc: ret 0xd129; 
0x00000000000f391a: ret 0xd139; 
0x000000000009c922: ret 0xd148; 
0x00000000000280f4: ret 0xd17d; 
0x000000000011634c: ret 0xd189; 
0x00000000000899c6: ret 0xd201; 
0x00000000000420c0: ret 0xd231; 
0x0000000000088edd: ret 0xd274; 
0x0000000000026bbd: ret 0xd284; 
0x00000000000309de: ret 0xd285; 
0x0000000000102dcc: ret 0xd289; 
0x00000000000933df: ret 0xd2f7; 
0x00000000000a6d20: ret 0xd308; 
0x0000000000044e6b: ret 0xd321; 
0x000000000004ff9d: ret 0xd348; 
0x00000000001913b6: ret 0xd349; 
0x00000000000ef2d5: ret 0xd5e8; 
0x00000000000e8098: ret 0xd5eb; 
0x0000000000069a99: ret 0xd629; 
0x0000000000068010: ret 0xd729; 
0x000000000010f639: ret 0xd72; 
0x00000000000f307a: ret 0xd739; 
0x000000000010c4aa: ret 0xd79; 
0x00000000000a3ba5: ret 0xd889; 
0x00000000000a408e: ret 0xd989; 
0x000000000010e2da: ret 0xd; 
0x000000000013a73e: ret 0xda21; 
0x000000000014829e: ret 0xda39; 
0x000000000011b44b: ret 0xda80; 
0x00000000000ba979: ret 0xda89; 
0x0000000000042a70: ret 0xdaf7; 
0x0000000000104112: ret 0xdb31; 
0x00000000000c9968: ret 0xdc00; 
0x00000000000e9ae6: ret 0xdd75; 
0x0000000000048f7d: ret 0xdde8; 
0x000000000009f00f: ret 0xde75; 
0x00000000000a438f: ret 0xde89; 
0x000000000006bd26: ret 0xdee9; 
0x0000000000032fba: ret 0xdf5; 
0x000000000007317b: ret 0xdfe8; 
0x000000000004b6ba: ret 0xdfe9; 
0x00000000000a86f9: ret 0xe000; 
0x000000000018e529: ret 0xe074; 
0x000000000011c04c: ret 0xe083; 
0x0000000000041d2a: ret 0xe0e8; 
0x0000000000089f06: ret 0xe181; 
0x000000000007a76b: ret 0xe183; 
0x0000000000041e65: ret 0xe281; 
0x000000000002cca9: ret 0xe283; 
0x00000000000f6e53: ret 0xe2c1; 
0x0000000000189eef: ret 0xe2c4; 
0x0000000000098b8a: ret 0xe2e9; 
0x00000000000a70b7: ret 0xe2ff; 
0x00000000000934a2: ret 0xe375; 
0x0000000000196f4d: ret 0xe475; 
0x000000000005ee38: ret 0xe57f; 
0x000000000005e0d5: ret 0xe5e8; 
0x00000000000a5187: ret 0xe675; 
0x00000000000ba602: ret 0xe680; 
0x00000000000265ed: ret 0xe683; 
0x00000000000ec10f: ret 0xe76; 
0x000000000009a286: ret 0xe775; 
0x00000000001814ff: ret 0xe7f; 
0x0000000000039727: ret 0xe801; 
0x00000000000a1635: ret 0xe875; 
0x000000000005e26d: ret 0xe87f; 
0x00000000000cfbf5: ret 0xe883; 
0x0000000000053e8a: ret 0xe8; 
0x00000000000f6c84: ret 0xe8c0; 
0x000000000011c1bc: ret 0xe8c1; 
0x00000000000e0c70: ret 0xe901; 
0x0000000000036928: ret 0xe902; 
0x0000000000115758: ret 0xe904; 
0x00000000000b4fc6: ret 0xe908; 
0x000000000017da56: ret 0xe910; 
0x000000000007522d: ret 0xe920; 
0x00000000000e8164: ret 0xe975; 
0x00000000000535be: ret 0xe983; 
0x000000000007a758: ret 0xe9c0; 
0x00000000000ba987: ret 0xe9e9; 
0x000000000003c751: ret 0xe; 
0x0000000000047a03: ret 0xea76; 
0x00000000000ea10f: ret 0xea7f; 
0x000000000014d9cd: ret 0xea89; 
0x0000000000043ead: ret 0xeab8; 
0x000000000007a77b: ret 0xeac0; 
0x000000000002ccbe: ret 0xeac1; 
0x00000000000c33eb: ret 0xead1; 
0x00000000000a2e42: ret 0xeb01; 
0x00000000000e556f: ret 0xeb02; 
0x0000000000038795: ret 0xeb04; 
0x000000000017ba96: ret 0xeb10; 
0x0000000000130734: ret 0xeb11; 
0x000000000012521a: ret 0xeb73; 
0x000000000009f492: ret 0xeb75; 
0x000000000005dc6c: ret 0xeb83; 
0x00000000000a11b9: ret 0xec75; 
0x000000000003369e: ret 0xece8; 
0x0000000000057560: ret 0xed75; 
0x0000000000043a5d: ret 0xede8; 
0x00000000000ed087: ret 0xee7f; 
0x000000000006a912: ret 0xee83; 
0x000000000013706a: ret 0xeee0; 
0x000000000012e3ca: ret 0xef6d; 
0x000000000005c914: ret 0xef72; 
0x000000000005630e: ret 0xef75; 
0x00000000000fc139: ret 0xefe9; 
0x00000000000a85b9: ret 0xf000; 
0x000000000011e239: ret 0xf009; 
0x000000000002e860: ret 0xf01; 
0x0000000000032fa7: ret 0xf02; 
0x000000000008065e: ret 0xf039; 
0x0000000000032f92: ret 0xf04; 
0x00000000000613ca: ret 0xf07; 
0x000000000009cb64: ret 0xf083; 
0x0000000000058733: ret 0xf089; 
0x000000000007a987: ret 0xf08; 
0x000000000011be6a: ret 0xf093; 
0x000000000006e706: ret 0xf0a; 
0x0000000000095ff8: ret 0xf0f; 
0x000000000007c325: ret 0xf10; 
0x0000000000038b5a: ret 0xf177; 
0x00000000000aadbc: ret 0xf188; 
0x00000000000b07f4: ret 0xf20; 
0x0000000000087978: ret 0xf2e8; 
0x00000000000f3d5a: ret 0xf314; 
0x000000000010103a: ret 0xf349; 
0x00000000000f7e2a: ret 0xf375; 
0x000000000012b0a9: ret 0xf3f8; 
0x000000000006077f: ret 0xf40; 
0x000000000002686b: ret 0xf41; 
0x00000000000f5792: ret 0xf44; 
0x00000000000e77d4: ret 0xf45; 
0x000000000009d8f9: ret 0xf475; 
0x000000000002a9ca: ret 0xf48; 
0x0000000000042497: ret 0xf49; 
0x00000000000e812b: ret 0xf4c; 
0x0000000000028b38: ret 0xf4e9; 
0x00000000000481f2: ret 0xf4ec; 
0x00000000000d566a: ret 0xf4fa; 
0x0000000000060281: ret 0xf50; 
0x000000000018182e: ret 0xf5c5; 
0x000000000005b5c5: ret 0xf631; 
0x0000000000029753: ret 0xf641; 
0x00000000000433c3: ret 0xf66; 
0x000000000002ae24: ret 0xf685; 
0x00000000000c9a0a: ret 0xf6b5; 
0x00000000000e3b24: ret 0xf6e9; 
0x0000000000044651: ret 0xf701; 
0x000000000005587c: ret 0xf741; 
0x00000000000396ba: ret 0xf748; 
0x0000000000056c38: ret 0xf749; 
0x00000000000bb000: ret 0xf74; 
0x00000000000bfa0a: ret 0xf755; 
0x000000000002c46b: ret 0xf800; 
0x00000000000d9af0: ret 0xf801; 
0x000000000010bd39: ret 0xf80; 
0x0000000000080316: ret 0xf839; 
0x00000000000326eb: ret 0xf883; 
0x00000000000bf4e2: ret 0xf8; 
0x0000000000092a73: ret 0xf8b; 
0x00000000000432a7: ret 0xf8c1; 
0x0000000000185b26: ret 0xf8c5; 
0x000000000012d25a: ret 0xf8cd; 
0x000000000005fcdc: ret 0xf980; 
0x0000000000026f58: ret 0xf983; 
0x00000000000431f7: ret 0xf9c1; 
0x00000000000e3251: ret 0xf9e9; 
0x00000000001628ae: ret 0xf; 
0x000000000004154e: ret 0xfa83; 
0x00000000000d7cbe: ret 0xfac1; 
0x000000000007299a: ret 0xfb28; 
0x000000000013f775: ret 0xfb80; 
0x0000000000151d7f: ret 0xfb81; 
0x00000000000ca4eb: ret 0xfb83; 
0x00000000000a8339: ret 0xfc00; 
0x000000000004d511: ret 0xfc01; 
0x00000000001168d9: ret 0xfc07; 
0x0000000000047cc9: ret 0xfc3; 
0x000000000005c21a: ret 0xfc90; 
0x00000000000cfb5a: ret 0xfd83; 
0x000000000004c0ca: ret 0xfd90; 
0x00000000001505ba: ret 0xfdb7; 
0x00000000000a81f9: ret 0xfe00; 
0x0000000000040052: ret 0xfe52; 
0x0000000000192d73: ret 0xfe83; 
0x0000000000042a80: ret 0xfeb8; 
0x00000000000c2ad5: ret 0xfeb; 
0x000000000013f0fc: ret 0xfee9; 
0x00000000000a80b9: ret 0xff00; 
0x00000000000f44e9: ret 0xff04; 
0x0000000000043167: ret 0xff25; 
0x000000000016ab21: ret 0xff2; 
0x0000000000182879: ret 0xff2d; 
0x00000000000a8b1a: ret 0xff3; 
0x000000000013b74a: ret 0xff3a; 
0x0000000000126305: ret 0xff41; 
0x00000000000b7f44: ret 0xff48; 
0x00000000000a7f79: ret 0xff80; 
0x000000000004a491: ret 0xff81; 
0x000000000005fe03: ret 0xff85; 
0x000000000007255a: ret 0xffa2; 
0x0000000000030f97: ret 0xffb8; 
0x000000000002986a: ret 0xffb9; 
0x000000000005005b: ret 0xffbf; 
0x00000000000a7e39: ret 0xffc0; 
0x0000000000072477: ret 0xffcf; 
0x000000000007f75a: ret 0xffdc; 
0x00000000000a7cf9: ret 0xffe0; 
0x000000000010991b: ret 0xffe6; 
0x00000000000d4e3a: ret 0xffe7; 
0x0000000000057a3a: ret 0xffec; 
0x00000000000d56e3: ret 0xffee; 
0x0000000000049639: ret 0xffef; 
0x00000000000a7bb9: ret 0xfff0; 
0x0000000000108e1a: ret 0xfff1; 
0x00000000000408a7: ret 0xfff3; 
0x0000000000060d85: ret 0xfff4; 
0x000000000012ef5b: ret 0xfff5; 
0x000000000003c4f7: ret 0xfff6; 
0x000000000016073d: ret 0xfff7; 
0x00000000000a7a79: ret 0xfff8; 
0x00000000000542a6: ret 0xfff9; 
0x000000000009a251: ret 0xfff; 
0x00000000000760ba: ret 0xfffa; 
0x00000000000a5750: ret 0xfffb; 
0x000000000002dc8f: ret 0xfffc; 
0x0000000000030a2f: ret 0xfffd; 
0x000000000002f918: ret 0xfffe; 
0x0000000000028e4c: ret 0xffff; 
0x00000000000652b2: ret 1; 
0x0000000000035601: ret 2; 
0x000000000018c0f2: ret 3; 
0x00000000000aae69: ret 4; 
0x0000000000037a4f: ret 5; 
0x000000000005e9c1: ret 6; 
0x0000000000060e81: ret 7; 
0x00000000000aae85: ret 8; 
0x0000000000114cba: ret 9; 
0x000000000002535f: ret; 
0x0000000000146d16: rol ax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000012f2d2: rol ax, 8; ret; 
0x000000000012c684: rol bl, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xe5; syscall; 
0x00000000000aa76e: rol bl, 0x83; ret 0x6620; 
0x00000000000ba24d: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x0000000000047c97: rol byte ptr [rax + 0x375003f], 0x5b; ret; 
0x00000000000a8af2: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000018ab16: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861c6: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018214b: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x00000000000b0492: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000000ed2e7: rol byte ptr [rax + 0xf00657b], cl; xchg eax, ebp; ret 0xd201; 
0x00000000000a0831: rol byte ptr [rax + 0xf], 0x95; mov dword ptr [rbp + 0x38], 0x940f41d0; ret; 
0x00000000001935e1: rol byte ptr [rax + 0xf], 1; xchg eax, esp; mov dword ptr [rbx + 0x1f0f02c7], 0x80; add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x0000000000089239: rol byte ptr [rax + rax*8 - 0x7cb7e38c], 0xc4; sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000dfcb6: rol byte ptr [rax + rax], 0x48; add esp, 0x80; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000016c417: rol byte ptr [rax + rax], cl; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000032bd5: rol byte ptr [rax - 0x75], 1; cmp byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000d5478: rol byte ptr [rax - 0x78f0f606], 1; ret; 
0x0000000000034d5c: rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x1af081; mov qword ptr [rax], rdx; ret; 
0x00000000000c63a4: rol byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000082a44: rol byte ptr [rax], 0; add byte ptr [rbp + 0x48117ec0], al; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000008dd06: rol byte ptr [rax], 0; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000089fda: rol byte ptr [rax], 0; add byte ptr [rbx - 0x760e76cd], cl; ret 0xe181; 
0x0000000000043e78: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000018b25d: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000101c15: rol byte ptr [rax], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000001457eb: rol byte ptr [rax], 1; add byte ptr [rax - 0x75], cl; and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000015262f: rol byte ptr [rax], 1; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax], al; call rax; 
0x00000000001526c9: rol byte ptr [rax], 1; add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000014c664: rol byte ptr [rax], 1; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014bf19: rol byte ptr [rax], 1; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000043e80: rol byte ptr [rax], 1; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x00000000000815d5: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; ret; 
0x000000000009acb2: rol byte ptr [rax], cl; add byte ptr [rax], al; call rax; 
0x00000000001457d6: rol byte ptr [rax], cl; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000009d4e7: rol byte ptr [rbp + 0x480e74c0], 1; lea eax, [rip + 0x14a1cd]; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x00000000001812a9: rol byte ptr [rbp + 0x48d274f6], 0x63; ror dword ptr [rax + 1], 0xd0; sub rax, rdi; ret; 
0x00000000000aa9b2: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000182635: rol byte ptr [rbp + 0xf8674c0], 1; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000aad49: rol byte ptr [rbp + 0xfd274c0], 1; mov ebp, 0xf80148c0; ret; 
0x00000000001825e7: rol byte ptr [rbp + 0xfd474c0], 1; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000006d056: rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000000c6147: rol byte ptr [rbp - 0x3f6af037], 0x85; ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x00000000000ff601: rol byte ptr [rbp - 0x3f6bf02e], 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000112793: rol byte ptr [rbp - 0x74f7872e], 0x47; or byte ptr [rip + 0x100f], ah; ret; 
0x00000000000cbc7f: rol byte ptr [rbp - 0x77], 1; ret 0x8348; 
0x00000000000d5e88: rol byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; xchg eax, esp; ret 0x8d48; 
0x0000000000122bb4: rol byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, ebp; ret 0xdaf7; 
0x0000000000182552: rol byte ptr [rbx + 0x14820c0], 0xf8; vzeroupper; ret; 
0x0000000000182562: rol byte ptr [rbx + 0x14840c0], 0xf8; vzeroupper; ret; 
0x0000000000182572: rol byte ptr [rbx + 0x14860c0], 0xf8; ret; 
0x00000000000eca37: rol byte ptr [rbx + 0x3e740afb], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000010c281: rol byte ptr [rbx + 0x97404fa], 0xb8; sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000010c281: rol byte ptr [rbx + 0x97404fa], 0xb8; sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x000000000008254f: rol byte ptr [rbx + 0xb74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000568cb: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000103c11: rol byte ptr [rbx - 0x19743], 0xff; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd009; 
0x00000000001148bc: rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000ecaa7: rol byte ptr [rbx - 0x3f7cfd20], 8; ret; 
0x000000000005a507: rol byte ptr [rbx - 0x57ccf16], 1; or dword ptr [rdi], ecx; xchg dword ptr [rax], eax; add eax, 0x63480000; ret 0x8d48; 
0x0000000000077693: rol byte ptr [rbx - 0x67b7df18], cl; movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x000000000012144c: rol byte ptr [rbx - 0x69f0f601], 0xc0; ret; 
0x0000000000087641: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000008998f: rol byte ptr [rbx - 0x6af0f808], cl; ret 0xc283; 
0x000000000015e819: rol byte ptr [rbx - 0x6bf00008], cl; ret 0x1389; 
0x00000000000352d1: rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x00000000001045e7: rol byte ptr [rbx - 0x7bf0fd08], 1; mov ebp, 0x31000004; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x000000000010bd21: rol byte ptr [rbx - 0x7c99cf20], 1; clc; adc byte ptr [rdi], cl; test byte ptr [rdi - 0x9fffffd], bl; ret 0xf20; 
0x000000000012c3de: rol byte ptr [rbx - 0x7cb7fd18], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ce4d2: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000013c161: rol byte ptr [rbx], 0x25; cld; inc dword ptr [rcx]; add byte ptr [rax + 0x29], cl; ret 0x149; 
0x0000000000147126: rol byte ptr [rbx], 0x83; ret 0x8303; 
0x00000000000cbf15: rol byte ptr [rcx + 0x29], 1; ret 0x2948; 
0x0000000000142f27: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; and eax, 2; pop r14; sub eax, 1; ret; 
0x000000000012c888: rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x00000000000de1b5: rol byte ptr [rcx + 0x5c], 1; pop r13; pop r14; ret; 
0x0000000000098fb6: rol byte ptr [rcx + 0x5c], 1; ret; 
0x0000000000101c11: rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000094510: rol byte ptr [rcx + 0xf], 0x11; xor byte ptr [rax + 8], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000a0c2f: rol byte ptr [rcx + 0xf], 0x95; ret 0x3841; 
0x00000000000ba24e: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x00000000000a6e45: rol byte ptr [rcx + 0xf], 1; xchg eax, ebp; ret 0x3941; 
0x00000000000c6bbc: rol byte ptr [rcx + 0xf], 1; xchg eax, ebx; ret 0x844; 
0x000000000014ac7b: rol byte ptr [rcx + 0xf], 1; xchg eax, esi; ror byte ptr [rcx + rdi - 0xd], 0xf; xchg eax, ebx; ret 0x841; 
0x00000000000a6efb: rol byte ptr [rcx + 0xf], 1; xchg eax, esp; ret 0x3941; 
0x00000000000a0838: rol byte ptr [rcx + 0xf], 1; xchg eax, esp; ret; 
0x00000000000c7a91: rol byte ptr [rcx + 0xf], cl; xchg eax, ebx; ret 0x844; 
0x000000000012f2f4: rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000000e13a7: rol byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov r8d, eax; mov edi, ebx; mov eax, 0x3d; syscall; 
0x000000000013b242: rol byte ptr [rcx + rcx*4 - 0x40], cl; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000044ead: rol byte ptr [rcx - 0x46], 8; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp al, 0x24; mov eax, ecx; syscall; 
0x00000000000a69b2: rol byte ptr [rcx - 0x48], 2; add byte ptr [rax], al; add byte ptr [rbx + 0x458880c8], al; ret 0xd889; 
0x00000000000a6a73: rol byte ptr [rcx - 0x48], 2; add byte ptr [rax], al; add byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x0000000000127ca3: rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000015da09: rol byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000ce4b2: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000009e36d: rol byte ptr [rcx], 0; cmovne rax, rdx; ret; 
0x0000000000113203: rol byte ptr [rcx], 0; nop word ptr cs:[rax + rax]; mov eax, 0x8c; syscall; 
0x00000000000ed084: rol byte ptr [rcx], 0x39; ret 0xee7f; 
0x0000000000038b57: rol byte ptr [rcx], 0x39; ret 0xf177; 
0x0000000000027abe: rol byte ptr [rcx], 0x50; call rbx; 
0x000000000012090d: rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000044c61: rol byte ptr [rcx], 0x66; shufps xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044da1: rol byte ptr [rcx], 0x66; shufps xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000549a3: rol byte ptr [rcx], 0x88; pop rax; dec dword ptr [rbx - 0x7a97db8c]; test byte ptr [rdi], 0x8e; ret; 
0x0000000000152762: rol byte ptr [rcx], 0x89; ret; 
0x000000000008341d: rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0x7520; 
0x0000000000117f9f: rol byte ptr [rcx], 0xd9; ret 0x3941; 
0x0000000000044c6f: rol byte ptr [rcx], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000a6f42: rol byte ptr [rcx], 0xf; mov esi, 0x75c98408; in eax, dx; xor eax, eax; ret; 
0x00000000000ba96f: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x00000000000914dc: rol byte ptr [rcx], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000062ed0: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000808ad: rol byte ptr [rcx], 1; ret 0x3944; 
0x000000000010c30c: rol byte ptr [rcx], cl; ror byte ptr [rax + 0x39], 1; div dword ptr [rdi - 0x14]; ret; 
0x00000000000b66bc: rol byte ptr [rdi + rcx], 0x4b; movsxd rcx, dword ptr [rbx + rax*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000012181d: rol byte ptr [rdi + rcx], 0xb7; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000155bc8: rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x0000000000155bf8: rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, 1; ret; 
0x00000000000ce512: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000d0b31: rol byte ptr [rdi], 0x39; ret 0x77e; 
0x0000000000135291: rol byte ptr [rdi], cl; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000ce4c2: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000018cc63: rol byte ptr [rdx], 0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000013b3b6: rol byte ptr [rdx], 0x45; mov dword ptr [rax], edx; mov qword ptr [r9], rax; mov eax, edx; ret; 
0x00000000000a27bb: rol byte ptr [rdx], 1; add byte ptr [rcx - 9], al; ret 0; 
0x000000000017a43a: rol byte ptr [rdx], cl; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018b947: rol byte ptr [rdx], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000001216ed: rol byte ptr [rip + 0x48c0b70f], 0x8b; push rsp; ret 0x8940; 
0x0000000000064bd0: rol byte ptr [rsi + 0x14], 0; movzx eax, al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000ce502: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000001821cf: rol ch, 1; std; xlatb; ret; 
0x00000000001861ef: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000185f46: rol ch, cl; std; xlatb; ret; 
0x00000000000d0abb: rol cl, cl; cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x000000000011b68d: rol dh, 1; add al, byte ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x000000000018ca6a: rol dl, cl; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000ce45c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000015d3c9: rol dword ptr [rax + 0x48000001], 0x89; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000ba45b: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000016c597: rol dword ptr [rax + rax], 1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000002a418: rol dword ptr [rax + rcx*2], 0x83; ret; 
0x000000000013b0b2: rol dword ptr [rax - 0x69f0fe07], cl; ret 0x8341; 
0x000000000012c9c6: rol dword ptr [rax], cl; add byte ptr [rax], al; leave; ret; 
0x0000000000190eee: rol dword ptr [rbp + 0x29], cl; ret 0x8944; 
0x0000000000182100: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000aa794: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000aac37: rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x00000000000aac66: rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x000000000018e52f: rol dword ptr [rbp + 0x661075c0], cl; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x0000000000115c8d: rol dword ptr [rbp + 0x66d275d2], 1; nop dword ptr [rax + rax]; mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x00000000000a0826: rol dword ptr [rbp + 0xf], 0xb6; add dword ptr [rdi + rcx - 0x4a], eax; adc dword ptr [rbp - 0x7c], eax; rol byte ptr [rax + 0xf], 0x95; mov dword ptr [rbp + 0x38], 0x940f41d0; ret; 
0x00000000001821c3: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000185c93: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000000aa764: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001863c7: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000001820c3: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000000268e4: rol dword ptr [rcx + 0x21], cl; fucomi st(3); mov bl, 0x66; nop dword ptr [rax + rax]; ret; 
0x00000000000f088a: rol dword ptr [rcx + 0x39], 0x1c; mov byte ptr [rdi], cl; mov ebx, ds; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x2f73; 
0x00000000000cfbba: rol dword ptr [rcx + 0x5c], 0x41; pop rbp; mov qword ptr [rdi + 0x20], rcx; pop r14; pop r15; ret; 
0x000000000007a0a2: rol dword ptr [rcx + 0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x0000000000192a52: rol dword ptr [rcx + 0xf], 0x92; ret 0x3145; 
0x00000000000a08f8: rol dword ptr [rcx + 0xf], 0x94; ret 0x8445; 
0x00000000000a2ae2: rol dword ptr [rcx + 0xf], 1; xchg eax, ebx; ret 0x845; 
0x000000000006f530: rol dword ptr [rcx + rcx*2], 1; ret; 
0x00000000000a2841: rol dword ptr [rcx + rcx*4 - 0x29], 0xc1; call qword ptr [rdx]; 
0x0000000000110e41: rol dword ptr [rcx + rsi*8 - 1], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c3396: rol dword ptr [rcx - 0x77], 1; ret 0xc085; 
0x00000000000be1c2: rol dword ptr [rcx - 0x77], 1; ret; 
0x0000000000097250: rol dword ptr [rcx], 0; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000013662a: rol dword ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x000000000009e366: rol dword ptr [rcx], 0; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x00000000000ed3a3: rol dword ptr [rcx], 0x39; ret 0xc675; 
0x000000000012f693: rol dword ptr [rdi + 0xb], 0; add rax, qword ptr fs:[0]; ret; 
0x00000000000b7579: rol dword ptr [rdi], cl; add byte ptr [rax], al; ret; 
0x00000000000b697f: rol dword ptr [rdx + 0xf], 1; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000018b83e: rol dword ptr [rdx], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000012d35e: rol dword ptr [rip + 0x440f4800], 0xc2; ret; 
0x000000000012d357: rol dword ptr [rip + 0x58d4800], 0x8f; rol dword ptr [rip + 0x440f4800], 0xc2; ret; 
0x000000000012d356: rol dword ptr ss:[rip + 0x58d4800], 0x8f; rol dword ptr [rip + 0x440f4800], 0xc2; ret; 
0x0000000000026418: rol eax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x0000000000146d17: rol eax, 8; mov word ptr [rsp + 0x192], ax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000012f2d3: rol eax, 8; ret; 
0x000000000004494d: rol eax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000182875: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x000000000013c606: rol esi, 0x45; ret; 
0x000000000013c605: rol r14d, 0x45; ret; 
0x0000000000026417: rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x000000000004494c: rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000011b68c: rol sil, 1; add al, byte ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x000000000016c596: rol word ptr [rax + rax], 1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011254c: ror ah, 1; add byte ptr [rax + 0x23], bh; syscall; 
0x0000000000033966: ror byte ptr [r8 - 0x73], 1; add eax, 0x1b2ed1; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x00000000001666af: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163cdf: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000054a74: ror byte ptr [r9 - 0x76a7dbac], 1; ret 0x31e9; 
0x0000000000042dae: ror byte ptr [rax + 0x21], 0xd0; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000015e7a4: ror byte ptr [rax + 0x21], 1; add al, 0xd7; xor eax, eax; ret; 
0x000000000004494e: ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x00000000000b0347: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000ce17c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000088a91: ror byte ptr [rax + 0x29], 1; ret; 
0x000000000002a5fb: ror byte ptr [rax + 0x29], cl; ret 0x8348; 
0x000000000009cb79: ror byte ptr [rax + 0x39], 0x77; or byte ptr [rdx + 8], dh; mov qword ptr [rdi], rsi; ret; 
0x000000000010eb6e: ror byte ptr [rax + 0x39], 0xd1; seta al; sbb eax, 0; ret; 
0x000000000012c3a1: ror byte ptr [rax + 0x39], 0xf7; sete al; ret; 
0x000000000012b7cc: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000010c30e: ror byte ptr [rax + 0x39], 1; div dword ptr [rdi - 0x14]; ret; 
0x000000000010c89d: ror byte ptr [rax + 0x39], 1; ret 0x3575; 
0x0000000000097963: ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000151eb4: ror byte ptr [rax + 0x39], 1; sub byte ptr [rsi + rax + 0x5b], dh; pop rbp; pop r12; ret; 
0x000000000007278c: ror byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000002d778: ror byte ptr [rax + 0x39], cl; ret 0x8d0f; 
0x000000000005e26a: ror byte ptr [rax + 0x39], cl; ret 0xe87f; 
0x0000000000082f2b: ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000012b6e8: ror byte ptr [rax + 0x48], 0x39; sal byte ptr [rdx - 0xf], 1; xor eax, eax; ret; 
0x00000000000c1bc8: ror byte ptr [rax + 0x63], 1; ret; 
0x00000000000e9111: ror byte ptr [rax + 0x63], 4; xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x00000000000f2373: ror byte ptr [rax + 0x63], cl; ret; 
0x00000000001812ad: ror byte ptr [rax + 0x63], cl; ror dword ptr [rax + 1], 0xd0; sub rax, rdi; ret; 
0x00000000000269d9: ror byte ptr [rax + 0xf], 0x44; ret 0x4864; 
0x00000000000cf74f: ror byte ptr [rax + 0xf], 0x44; ret 0x8348; 
0x000000000012c912: ror byte ptr [rax + 0xf], 0x44; ret 0x8948; 
0x00000000001424a4: ror byte ptr [rax + 0xf], 0x44; ret 0x8b4c; 
0x00000000000550b5: ror byte ptr [rax + 0xf], 0x44; ret; 
0x00000000000d0b9e: ror byte ptr [rax + 0xf], 0x4f; ret 0x8b48; 
0x0000000000185d46: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x000000000018263c: ror byte ptr [rax + 1], 0xf8; add rax, r8; vzeroupper; ret; 
0x00000000000aa88c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000018aa18: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860d8: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000182238: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x00000000000aada8: ror byte ptr [rax + 1], 0xf8; add rax, rsi; ret; 
0x00000000000aa7b2: ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000018aad3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186193: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x0000000000182193: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000039803: ror byte ptr [rax + 1], 1; ret; 
0x000000000013b3eb: ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x0000000000037fee: ror byte ptr [rax + 1], cl; ret 0x8b41; 
0x00000000000c57e5: ror byte ptr [rax + 1], cl; ret 0x8b48; 
0x00000000000b0344: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000ce179: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000013a77a: ror byte ptr [rax + 1], cl; ror dword ptr [rax - 0x77], cl; pop rbp; add dh, dh; ret; 
0x00000000000afe05: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000001927ab: ror byte ptr [rax + 9], 1; ror byte ptr [rcx - 0x77], 1; ret 0xf49; 
0x00000000001172bd: ror byte ptr [rax + rax], 1; ret; 
0x00000000000aaef5: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x0000000000034c92: ror byte ptr [rax - 0x39], 1; ret 0xffff; 
0x0000000000143651: ror byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000018aa21: ror byte ptr [rax - 0x3f], 1; call 0x78116f2b; ret; 
0x000000000018aad9: ror byte ptr [rax - 0x3f], 1; call 0x78116fe3; ret; 
0x000000000018aafd: ror byte ptr [rax - 0x3f], 1; call 0x78117007; ret; 
0x000000000018ab1d: ror byte ptr [rax - 0x3f], 1; call 0x78117027; ret; 
0x000000000018ab69: ror byte ptr [rax - 0x3f], 1; call 0x78117073; ret; 
0x000000000018ac0a: ror byte ptr [rax - 0x3f], 1; call 0x78117114; ret; 
0x000000000018ad8e: ror byte ptr [rax - 0x3f], 1; call 0x78117298; ret; 
0x000000000018adb2: ror byte ptr [rax - 0x3f], 1; call 0x781172bc; ret; 
0x000000000018add2: ror byte ptr [rax - 0x3f], 1; call 0x781172dc; ret; 
0x000000000018adf2: ror byte ptr [rax - 0x3f], 1; call 0x781172fc; ret; 
0x000000000018ae29: ror byte ptr [rax - 0x3f], 1; call 0x78117333; ret; 
0x000000000018ae4d: ror byte ptr [rax - 0x3f], 1; call 0x78117357; ret; 
0x000000000018ae6d: ror byte ptr [rax - 0x3f], 1; call 0x78117377; ret; 
0x000000000018aeb9: ror byte ptr [rax - 0x3f], 1; call 0x781173c3; ret; 
0x000000000012d352: ror byte ptr [rax - 0x73], 0x15; rol dword ptr ss:[rip + 0x58d4800], 0x8f; rol dword ptr [rip + 0x440f4800], 0xc2; ret; 
0x0000000000075d19: ror byte ptr [rax - 0x73], 0x34; ret; 
0x0000000000148de7: ror byte ptr [rax - 0x73], 0x35; mov fs, word ptr [rcx - 0x76b3fffa]; out 0x89, eax; ret; 
0x0000000000045f55: ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x00000000000e3750: ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x00000000000aa7a2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x00000000000aa7d2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x00000000000aaca2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dh; ret; 
0x00000000000aa7c2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000009a24d: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000112904: ror byte ptr [rax - 0x73], 0x54; and al, 0x30; mov eax, 0x10; syscall; 
0x0000000000172c93: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000b0b40: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x0000000000172ccf: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000168ddb: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000bb354: ror byte ptr [rax - 0x73], 1; adc eax, 0xce624; lea rax, [rip + 0x116bd]; cmove rax, rdx; ret; 
0x00000000000bad64: ror byte ptr [rax - 0x73], 1; adc eax, 0xceee4; lea rax, [rip + 0x11fdd]; cmove rax, rdx; ret; 
0x00000000000baf74: ror byte ptr [rax - 0x73], 1; adc eax, 0xcf114; lea rax, [rip + 0x12a9d]; cmove rax, rdx; ret; 
0x00000000000bb0f4: ror byte ptr [rax - 0x73], 1; adc eax, 0xcf6e4; lea rax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x00000000000bad24: ror byte ptr [rax - 0x73], 1; adc eax, 0xcf884; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x00000000000bae54: ror byte ptr [rax - 0x73], 1; adc eax, 0xcfb74; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x00000000000a7264: ror byte ptr [rax - 0x73], 1; adc eax, 0xdb0c4; lea rax, [rip + 0x37bd]; cmove rax, rdx; ret; 
0x000000000009fd34: ror byte ptr [rax - 0x73], 1; adc eax, 0xe24b4; lea rax, [rip + 0xaaed]; cmove rax, rdx; ret; 
0x000000000009fd74: ror byte ptr [rax - 0x73], 1; adc eax, 0xe5f54; lea rax, [rip + 0xff2d]; cmove rax, rdx; ret; 
0x000000000009d464: ror byte ptr [rax - 0x73], 1; adc eax, 0xe8a54; lea rax, [rip + 0x12a4d]; cmove rax, rdx; ret; 
0x000000000009d2c4: ror byte ptr [rax - 0x73], 1; adc eax, 0xe8dc4; lea rax, [rip + 0x12edd]; cmove rax, rdx; ret; 
0x000000000009d304: ror byte ptr [rax - 0x73], 1; adc eax, 0xe8f14; lea rax, [rip + 0x1303d]; cmove rax, rdx; ret; 
0x0000000000033967: ror byte ptr [rax - 0x73], 1; add eax, 0x1b2ed1; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x0000000000145111: ror byte ptr [rax - 0x73], 1; add eax, 0xa47e7; add rsp, 8; ret; 
0x000000000018a62b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185b1b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000835d8: ror byte ptr [rax - 0x73], cl; xor eax, 0x1e0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x00000000000922f9: ror byte ptr [rax - 0x73], cl; xor eax, 0xffffdf0f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f96: ror byte ptr [rax - 0x73], cl; xor eax, 0xffffe272; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c90: ror byte ptr [rax - 0x73], cl; xor eax, 0xffffe578; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009080b: ror byte ptr [rax - 0x73], cl; xor eax, 0xfffff9fd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083b9d: ror byte ptr [rax - 0x73], cl; xor eax, 0xfffffc1b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902f2: ror byte ptr [rax - 0x73], cl; xor eax, 0xffffff16; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000146c6e: ror byte ptr [rax - 0x75], 0x4c; and al, 8; call rcx; 
0x00000000001211a1: ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000010ced3: ror byte ptr [rax - 0x75], 0x74; and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000014bf46: ror byte ptr [rax - 0x75], 0x74; and al, 0x30; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000014c155: ror byte ptr [rax - 0x75], 0x74; and al, 0x40; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x000000000014f5f9: ror byte ptr [rax - 0x75], 0x74; and al, 0x68; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000009c5d3: ror byte ptr [rax - 0x75], 1; push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x000000000013f65e: ror byte ptr [rax - 0x75], 5; ret 0xa47; 
0x000000000009cb93: ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000155d17: ror byte ptr [rax - 0x77], 0x47; or byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000086395: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000090ace: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000a6c2c: ror byte ptr [rax - 0x77], 0xa; ret; 
0x000000000014c808: ror byte ptr [rax - 0x77], 0xd6; add rdi, 0x10; jmp rcx; 
0x000000000014c828: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f258: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e918: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc38: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000a0dd4: ror byte ptr [rax - 0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x0000000000112ae0: ror byte ptr [rax - 0x77], 0xe2; mov eax, ecx; syscall; 
0x0000000000154416: ror byte ptr [rax - 0x77], 0xe7; mov dword ptr [rsp], 2; call rdx; 
0x0000000000087df4: ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x00000000000bbe5a: ror byte ptr [rax - 0x77], 0xef; lea r9, [rsp + 0x30]; call rbx; 
0x00000000000e2b91: ror byte ptr [rax - 0x77], 1; and al, 0x18; mov rax, qword ptr [rip + 0x107812]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af1: ror byte ptr [rax - 0x77], 1; and al, 0x18; mov rax, qword ptr [rip + 0x1078b2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000042e8d: ror byte ptr [rax - 0x77], 1; and al, 0xf8; movq xmm1, qword ptr [rsp - 8]; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000018a91d: ror byte ptr [rax - 0x77], 1; mul dword ptr [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000010c40b: ror byte ptr [rax - 0x77], 1; ret 0x3d48; 
0x000000000007bb82: ror byte ptr [rax - 0x77], 1; ret 0x8348; 
0x0000000000032f58: ror byte ptr [rax - 0x77], 1; ret 0x8349; 
0x000000000008e739: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x000000000005f975: ror byte ptr [rax - 0x77], 1; ret 0x8d4d; 
0x000000000009fb56: ror byte ptr [rax - 0x77], 1; ret 0x91e8; 
0x0000000000026982: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000193a46: ror byte ptr [rax - 0x77], 1; ret 0xd148; 
0x0000000000041e62: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000088c05: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000014bdba: ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x00000000001183aa: ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x0000000000154c8b: ror byte ptr [rax - 0x77], 4; and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000e6715: ror byte ptr [rax - 0x77], cl; call 0x5c4fc478; ret; 
0x000000000010c4c6: ror byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000001496ee: ror byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000159772: ror byte ptr [rax - 0x77], cl; ret; 
0x000000000013a9dd: ror byte ptr [rax - 0x77], cl; xor eax, eax; ret; 
0x00000000001909ea: ror byte ptr [rax - 0x7b], cl; fild dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x3145; 
0x000000000008c192: ror byte ptr [rax - 0x7d], 0x7f; sbb byte ptr [rax], al; setne al; ret; 
0x000000000012c1aa: ror byte ptr [rax - 0x7d], 0xc0; add dword ptr [rax - 0x7d], ecx; out dx, eax; add dword ptr [rax + 0x39], ecx; ret 0x1174; 
0x000000000018ab13: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861c3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821b3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x00000000001861a3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001821a3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000056340: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000476de: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x000000000008d3d4: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x000000000004704d: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000004896e: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000014cab1: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x000000000011dd54: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000147989: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x0000000000052ff4: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000010e993: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000012c005: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d5b0ce0], al; ret; 
0x000000000008d8a1: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000639c4: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000ff606: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000aad02: ror byte ptr [rax - 0x7d], 0xea; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000001825a2: ror byte ptr [rax - 0x7d], 0xea; and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000aace2: ror byte ptr [rax - 0x7d], 0xea; and byte ptr [rax + 1], cl; ret 0x347c; 
0x0000000000168ddf: ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168d1f: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016625b: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000aacc2: ror byte ptr [rax - 0x7d], 0xea; xor byte ptr [rax + 1], cl; ret 0x547c; 
0x00000000001666b0: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce0: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000051eee: ror byte ptr [rax - 0x7d], 0xfa; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x2041; 
0x000000000013dfc9: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000047598: ror byte ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000011f378: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000008a9aa: ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x00000000000a4312: ror byte ptr [rax - 0x7d], cl; ret 0x4006; 
0x00000000000b5b76: ror byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000c0dda: ror byte ptr [rax - 0x7d], cl; ret 0x8b04; 
0x000000000012a505: ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b9e6b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x00000000001824c9: ror byte ptr [rax - 0x7f], 0xea; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000e36ea: ror byte ptr [rax - 0x7f], 0xfa; push rsp; push rbx; setne al; ret; 
0x00000000000b9e68: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000b9e65: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000015decc: ror byte ptr [rax], 0; call qword ptr [rax + 0x10]; 
0x0000000000146d18: ror byte ptr [rax], 0x66; mov dword ptr [rsp + 0x192], eax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000000e1d92: ror byte ptr [rax], 0x83; ret 0x4f08; 
0x0000000000056105: ror byte ptr [rax], 0xe9; ret 0xfffe; 
0x00000000000b9f14: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x00000000000d0dae: ror byte ptr [rbp + 0x480f0750], 1; ret 0x8341; 
0x00000000000cfb54: ror byte ptr [rbp + 0x480f0750], 1; ret 0xfd83; 
0x00000000000b6939: ror byte ptr [rbp + rcx*4 + 0x1d], cl; adc eax, dword ptr [rbx + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f6: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add dl, byte ptr [rcx + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b862b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add dword ptr [rax], ebp; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fab: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add dword ptr [rdi], ebx; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5356: ror byte ptr [rbp + rcx*4 + 0x1d], cl; and dl, byte ptr [rdi + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b3: ror byte ptr [rbp + rcx*4 + 0x1d], cl; cdq; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7096: ror byte ptr [rbp + rcx*4 + 0x1d], cl; cmp al, 0xf; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a1f: ror byte ptr [rbp + rcx*4 + 0x1d], cl; fst dword ptr [rax + 0xf]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b697b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; rol dword ptr [rdx + 0xf], 1; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70bf: ror byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rdi + rcx], edi; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85e9: ror byte ptr [rbp + rcx*4 + 0x1d], cl; sub byte ptr [r15], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8606: ror byte ptr [rbp + rcx*4 + 0x1d], cl; sub byte ptr es:[rdi], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6956: ror byte ptr [rbp + rcx*4 + 0x1d], cl; test byte ptr [rdx + 0xf], 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000d2585: ror byte ptr [rbp + rcx*4 + 0x60], 1; dec dword ptr [rax - 0x77]; ret 0x8d4a; 
0x0000000000101182: ror byte ptr [rbp + rcx*4 + 5], 1; ret; 
0x00000000000a54bb: ror byte ptr [rbp - 0x73], 1; push rsp; adc byte ptr ss:[rcx + 0xf], al; xchg eax, ebx; ret; 
0x00000000001494a5: ror byte ptr [rbp - 0x75], 1; sbb dword ptr [rbp + 0x31], ecx; ret 0x314d; 
0x00000000000f18e5: ror byte ptr [rbp - 0x77], cl; ret 0xf749; 
0x0000000000193ec4: ror byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x95; ret 0xc931; 
0x0000000000189741: ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x0000000000149291: ror byte ptr [rbx + rcx*4 + 0x5e], 1; adc byte ptr [rbp + 0x31], cl; ret 0x314d; 
0x000000000012c803: ror byte ptr [rbx - 0x74f3db8c], 0x7c; and al, 8; mov eax, 0xe6; syscall; 
0x0000000000038b4d: ror byte ptr [rbx - 0x76be7ecc], 0x34; test byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret 0xf177; 
0x00000000000e34ca: ror byte ptr [rbx], 1; mov edx, 0x7f; mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x00000000000e34c8: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov edx, 0x7f; mov eax, 0xfde8; cmovne rax, rdx; ret; 
0x0000000000112de4: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x00000000000aa4d3: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000010c8ff: ror byte ptr [rcx + 0x39], 1; ret 0x3375; 
0x00000000000c48d9: ror byte ptr [rcx + 0x39], cl; ror dword ptr [rdi], 0x9c; ret 0x8d41; 
0x000000000010b6a6: ror byte ptr [rcx + 0x5d5b0453], 0x41; pop rsp; ret; 
0x0000000000043233: ror byte ptr [rcx + 0x66fc2444], 1; movd mm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000101936: ror byte ptr [rcx + 0xf], cl; int1; mov eax, ecx; syscall; 
0x0000000000190d62: ror byte ptr [rcx + 9], cl; fld dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x3145; 
0x0000000000146559: ror byte ptr [rcx + rbp - 0x20], 0x48; mov dword ptr [rbp + 0x18], eax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000048baf: ror byte ptr [rcx + rbp - 0x3a], 1; syscall; 
0x0000000000061b72: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x00000000000cec79: ror byte ptr [rcx + rcx*4 + 0x7c], 0x24; push rax; call rbx; 
0x00000000001493e2: ror byte ptr [rcx + rcx*4 + 7], 1; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000089a5a: ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000089960: ror byte ptr [rcx + rcx*4 - 0x19], 0x4c; lea ecx, [rsp + 0x28]; call rbx; 
0x000000000010bb28: ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000043ec7: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000048ba9: ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, r10d; sub rsi, r8; syscall; 
0x000000000011fddd: ror byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, 0x14; syscall; 
0x0000000000120b93: ror byte ptr [rcx + rdi - 0x39], 0xf; xchg bl, dl; add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x000000000014ac7f: ror byte ptr [rcx + rdi - 0xd], 0xf; xchg eax, ebx; ret 0x841; 
0x0000000000042ab4: ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000001545fc: ror byte ptr [rcx - 0x35c6b72f], 0x75; mov eax, 0x8478b48; call qword ptr [rax + 8]; 
0x000000000009e8b9: ror byte ptr [rcx - 0x39], cl; ret; 
0x00000000000b009c: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000149389: ror byte ptr [rcx - 0x3f], 0xe0; or byte ptr [rax - 0x77], cl; ret 0x3149; 
0x00000000000788ad: ror byte ptr [rcx - 0x56f4b], 1; dec dword ptr [rax - 0x7d]; ret 0x4420; 
0x0000000000125b81: ror byte ptr [rcx - 0x73], 0x40; dec dword ptr [rax + 0x39]; ret; 
0x0000000000088851: ror byte ptr [rcx - 0x75], 1; adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ror dword ptr [rax + 0x29], cl; ret; 
0x0000000000152638: ror byte ptr [rcx - 0x75], 1; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x0000000000054a75: ror byte ptr [rcx - 0x76a7dbac], 1; ret 0x31e9; 
0x00000000001927ae: ror byte ptr [rcx - 0x77], 1; ret 0xf49; 
0x00000000001496fb: ror byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000010b749: ror byte ptr [rcx - 0x7cb7fbad], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010b488: ror byte ptr [rcx - 0x7cb7ffa3], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b575f: ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x0000000000028b30: ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xf4e9; 
0x0000000000186ee8: ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x000000000011d8cc: ror byte ptr [rcx], 0xd0; ret; 
0x00000000000feed8: ror byte ptr [rcx], 1; ret; 
0x0000000000043f62: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000001560a1: ror byte ptr [rdi], 0x11; and al, 0x28; call rdx; 
0x0000000000091ad8: ror byte ptr [rdi], 0x11; cmp r11b, bpl; movabs dword ptr [0xffffffffc0c74890], eax; ret; 
0x000000000008d919: ror byte ptr [rdi], 0x11; or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000125e08: ror byte ptr [rdi], 0x11; xor byte ptr [r8 + 1], dil; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001460b8: ror byte ptr [rdi], 0x29; and al, 0x30; push qword ptr [rip + 0x72164]; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000065720: ror byte ptr [rdi], 0x29; test dword ptr [rax - 0x16000005], edx; ret 0xfffd; 
0x000000000011b7b0: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000010bec1: ror byte ptr [rdi], 0x44; ret 0x8b48; 
0x0000000000117ad1: ror byte ptr [rdi], 0x45; ret 0xc084; 
0x0000000000047cc6: ror byte ptr [rdi], 0x48; ret 0xfc3; 
0x0000000000113227: ror byte ptr [rdi], 0x49; ret 0xfc3; 
0x000000000011ac27: ror byte ptr [rdi], 0x84; adc al, byte ptr [rcx]; add byte ptr [rax], al; call rax; 
0x0000000000147aca: ror byte ptr [rdi], 0x84; add byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbx]; 
0x00000000000e20b0: ror byte ptr [rdi], 0x84; add dword ptr [rax], 0x83480000; ret 0x480f; 
0x00000000001609aa: ror byte ptr [rdi], 0x84; add dword ptr [rcx], 0x89480000; ret; 
0x000000000009ba91: ror byte ptr [rdi], 0x84; call 0x4809ba99; mov esi, ebp; mov rdi, rbx; call rax; 
0x00000000000d5212: ror byte ptr [rdi], 0x84; call qword ptr [rsi]; 
0x000000000007fc6a: ror byte ptr [rdi], 0x84; call rdx; 
0x00000000000aaddc: ror byte ptr [rdi], 0x84; cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000009bc39: ror byte ptr [rdi], 0x84; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 0x19]; call rax; 
0x000000000015d61d: ror byte ptr [rdi], 0x84; imul eax, dword ptr [rcx], 0x89480000; ret; 
0x000000000011aa9c: ror byte ptr [rdi], 0x84; lea eax, [rax]; add byte ptr [rax], al; call rax; 
0x00000000000823bc: ror byte ptr [rdi], 0x84; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a0673: ror byte ptr [rdi], 0x84; mov byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000014f069: ror byte ptr [rdi], 0x84; movabs al, byte ptr [0x4c70468b49000001]; mov edi, esp; call qword ptr [rax + 0x20]; 
0x00000000000822bd: ror byte ptr [rdi], 0x84; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000012dc19: ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000812c1: ror byte ptr [rdi], 0x84; popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009adef: ror byte ptr [rdi], 0x84; ret 0; 
0x000000000015f5e9: ror byte ptr [rdi], 0x84; ret 0xa; 
0x000000000011bc41: ror byte ptr [rdi], 0x84; ret 0xc; 
0x000000000007bc54: ror byte ptr [rdi], 0x84; ret 0xe; 
0x00000000000dd881: ror byte ptr [rdi], 0x84; ret 0xfffd; 
0x0000000000069305: ror byte ptr [rdi], 0x84; ret; 
0x000000000009acaf: ror byte ptr [rdi], 0x84; rol byte ptr [rax], cl; add byte ptr [rax], al; call rax; 
0x00000000001457d3: ror byte ptr [rdi], 0x84; rol byte ptr [rax], cl; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000136627: ror byte ptr [rdi], 0x84; rol dword ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x000000000008ad2b: ror byte ptr [rdi], 0x84; sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000008a15b: ror byte ptr [rdi], 0x84; scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000f1ddf: ror byte ptr [rdi], 0x84; scasb al, byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000008c986: ror byte ptr [rdi], 0x84; stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000014fe25: ror byte ptr [rdi], 0x84; test byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000001597de: ror byte ptr [rdi], 0x84; xchg eax, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000aaba6: ror byte ptr [rdi], 0x85; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000111373: ror byte ptr [rdi], 0x85; add dword ptr [r8], eax; add byte ptr [rbx - 0x2117c385], cl; ret 0xffff; 
0x0000000000172c9a: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000017a992: ror byte ptr [rdi], 0x85; cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000017a94c: ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000181282: ror byte ptr [rdi], 0x85; lahf; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6610; 
0x00000000000f1dd1: ror byte ptr [rdi], 0x85; mov esp, 0x8bfffff6; test dword ptr [rdi + rdi*8 - 1], ecx; inc dword ptr [rbp - 0x517bf040]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b4201: ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000005ffc7: ror byte ptr [rdi], 0x85; ret 0; 
0x00000000000b0b47: ror byte ptr [rdi], 0x85; ret 0x13; 
0x0000000000078590: ror byte ptr [rdi], 0x85; ret 0xa; 
0x00000000000355fe: ror byte ptr [rdi], 0x85; ret 2; 
0x000000000007bc36: ror byte ptr [rdi], 0x85; ret; 
0x00000000000aac4e: ror byte ptr [rdi], 0x85; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x000000000018243c: ror byte ptr [rdi], 0x85; sub eax, 0xc5000001; std; xlatb; ret; 
0x000000000008e92a: ror byte ptr [rdi], 0x88; ret; 
0x00000000000e8a6a: ror byte ptr [rdi], 0x88; sgdt [rax]; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x000000000012714d: ror byte ptr [rdi], 0x8e; pushfq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000060d82: ror byte ptr [rdi], 0x8e; ret 0xfff4; 
0x0000000000088b36: ror byte ptr [rdi], 0x8e; ret; 
0x000000000009cb61: ror byte ptr [rdi], 0x92; ret 0xf083; 
0x0000000000102b9a: ror byte ptr [rdi], 0x94; ret 0x1589; 
0x000000000010e3c1: ror byte ptr [rdi], 0x94; ret 0x2141; 
0x00000000000cf327: ror byte ptr [rdi], 0x94; ret 0x3840; 
0x0000000000150604: ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x000000000013e9b1: ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x000000000006ae35: ror byte ptr [rdi], 0x94; ret 0xb60f; 
0x00000000001813dc: ror byte ptr [rdi], 0x94; ret 0xc085; 
0x00000000000d0f1d: ror byte ptr [rdi], 0x94; ret; 
0x0000000000052ff1: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000639c1: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000010e843: ror byte ptr [rdi], 0x95; ret 0x2141; 
0x0000000000193cd4: ror byte ptr [rdi], 0x95; ret 0xc931; 
0x00000000000c0275: ror byte ptr [rdi], 0x95; ret 0xceb; 
0x00000000000899c3: ror byte ptr [rdi], 0x95; ret 0xd201; 
0x000000000005380d: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x00000000000e7434: ror byte ptr [rdi], 0x95; ret; 
0x000000000014caae: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x0000000000149cba: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000148f3c: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000639f3: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; ret; 
0x00000000000e374d: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x0000000000148f3f: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000639f6: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; ret; 
0x00000000001019ef: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000ba195: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000000cfb4e: ror byte ptr [rdi], 1; mov bh, 0x47; adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xfd83; 
0x00000000000d0da5: ror byte ptr [rdi], 1; mov bh, 5; add ebp, dword ptr [rbx + 0x11]; add byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0x8341; 
0x00000000000efcb8: ror byte ptr [rdi], 1; mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x00000000000fac0b: ror byte ptr [rdi], 1; mov dh, 0x54; adc eax, 0x105c8d00; add dword ptr [rax + 0x63], ecx; ret; 
0x00000000000c5bcd: ror byte ptr [rdi], 1; test ah, bh; add al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000151b9a: ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48000000], ah; add eax, 0xa0; pop rbx; ret; 
0x0000000000151aba: ror byte ptr [rdi], 1; test byte ptr [rdi + 0x48000000], ah; sub eax, -0x80; pop rbx; ret; 
0x00000000001519fa: ror byte ptr [rdi], 1; test byte ptr [rdi + 0x5b000000], cl; ret; 
0x0000000000156542: ror byte ptr [rdi], 1; xchg eax, ebx; ret 0xd108; 
0x000000000007a9b1: ror byte ptr [rdi], cl; mov byte ptr [rsi - 0x9ffffe3], al; ret 0xf40; 
0x000000000002c463: ror byte ptr [rdi], cl; mov byte ptr [rsi], dh; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000027ab9: ror byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; push rax; call rbx; 
0x00000000000aad4d: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000102b95: ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg eax, esp; ret 0x1589; 
0x0000000000193b7c: ror byte ptr [rdi], cl; test byte ptr [rax], dh; add eax, 0x89480000; ret 0xc148; 
0x00000000000ce05f: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000b03eb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000000b022b: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000000c614e: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x0000000000190e8d: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xd348; 
0x0000000000154c88: ror byte ptr [rdi], cl; xchg eax, ebp; ror byte ptr [rax - 0x77], 4; and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000009cb6a: ror byte ptr [rdi], cl; xchg eax, esp; ret 0xd084; 
0x00000000000ff603: ror byte ptr [rdi], cl; xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ad410: ror byte ptr [rsi], 0; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008885c: ror dword ptr [rax + 0x29], cl; ret; 
0x00000000000f8a4d: ror dword ptr [rax + 0x63], 1; add al, 0x96; mov r11, rdi; add rax, rsi; jmp rax; 
0x00000000000e28c1: ror dword ptr [rax + 0x63], cl; ret; 
0x00000000000f2370: ror dword ptr [rax + 0x63], cl; ror byte ptr [rax + 0x63], cl; ret; 
0x00000000001812b0: ror dword ptr [rax + 1], 0xd0; sub rax, rdi; ret; 
0x0000000000048aaa: ror dword ptr [rax + 1], 0xf0; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000181415: ror dword ptr [rax + 1], 0xf8; ret; 
0x00000000001597c8: ror dword ptr [rax + 1], cl; ret; 
0x000000000015e77a: ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000015e75a: ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000058fb4: ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x0000000000045b6d: ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x00000000000d58a1: ror dword ptr [rax - 0x73], 4; mov byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000bb44b: ror dword ptr [rax - 0x73], 5; insd dword ptr [rdi], dx; or eax, 0xf9834800; add al, 0x48; cmovne eax, edx; ret; 
0x000000000005636b: ror dword ptr [rax - 0x73], cl; adc byte ptr [r8 + 0x39], cl; ret 0x8d48; 
0x0000000000111814: ror dword ptr [rax - 0x75], 0x74; and al, 0x10; mov rdi, qword ptr [rsp + 8]; mov eax, 0x10f; syscall; 
0x00000000000fdab2: ror dword ptr [rax - 0x75], 1; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x974; 
0x000000000012a5aa: ror dword ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbp + 0x48], 0x8b; jp 0x12a607; mov rsi, rdx; call rax; 
0x0000000000125ae6: ror dword ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4801; 
0x00000000000eff5c: ror dword ptr [rax - 0x75], cl; sub cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000056473: ror dword ptr [rax - 0x77], 0x34; ret 0x8348; 
0x00000000000563d5: ror dword ptr [rax - 0x77], 0xc; ret 0x60e9; 
0x00000000001135cd: ror dword ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 0x127; syscall; 
0x000000000011367d: ror dword ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 0x128; syscall; 
0x000000000005f410: ror dword ptr [rax - 0x77], 1; ret 0x47e9; 
0x00000000000e6623: ror dword ptr [rax - 0x77], cl; call 0x5c4fc386; ret; 
0x000000000013a77d: ror dword ptr [rax - 0x77], cl; pop rbp; add dh, dh; ret; 
0x0000000000149735: ror dword ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000e4770: ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000134fb8: ror dword ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x00000000000c85f2: ror dword ptr [rax - 0x7d], 1; ret 0x4102; 
0x000000000012beec: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000181a73: ror dword ptr [rax - 0x7d], 1; ret 0x4c20; 
0x0000000000181a93: ror dword ptr [rax - 0x7d], 1; ret 0x4c40; 
0x0000000000181ab3: ror dword ptr [rax - 0x7d], 1; ret 0x4c60; 
0x000000000007522a: ror dword ptr [rax - 0x7d], 1; ret 0xe920; 
0x0000000000127cad: ror dword ptr [rax - 0x7d], 1; ret; 
0x00000000000e1d8f: ror dword ptr [rax - 0x7d], 1; ror byte ptr [rax], 0x83; ret 0x4f08; 
0x0000000000074b6f: ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x000000000011feee: ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x000000000009341f: ror dword ptr [rax], 0x75; or eax, 0xf80f44f6; add dword ptr [rbp + 0xe], esi; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000ec049: ror dword ptr [rbp + 0x39], cl; fadd qword ptr [rcx + 0xf]; xchg eax, ebx; ret; 
0x0000000000150531: ror dword ptr [rbp - 0x13], cl; dec dword ptr [rax - 0x77]; ret; 
0x00000000000cfb46: ror dword ptr [rbp - 0x3576f8bf], 0xf; ror byte ptr [rdi], 1; mov bh, 0x47; adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xfd83; 
0x00000000000cf376: ror dword ptr [rcx + 0x1fe8c1c8], 0x29; ret 0x8944; 
0x00000000000ceeaf: ror dword ptr [rcx + 0x1fe8c1c8], 0x29; ret; 
0x000000000014707d: ror dword ptr [rcx + 0x63], 0x14; mov byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x00000000000a6fdc: ror dword ptr [rcx + 0x63], 0xc; mov dword ptr [rcx + rax - 0x37], ecx; jmp rcx; 
0x00000000000fdaf8: ror dword ptr [rcx + 0x63], 1; adc al, 0x90; add rdx, r8; jmp rdx; 
0x00000000000ba635: ror dword ptr [rcx + 0xe181d0], 0xfc; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000001818ce: ror dword ptr [rcx + rax - 0x3f], 1; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000011883e: ror dword ptr [rcx + rcx*4 + 0x48], 1; or bl, ch; ret 0x1f0f; 
0x000000000011f528: ror dword ptr [rcx + rcx*4 - 0xa], 0x89; fistp qword ptr [rax + 0x12b]; syscall; 
0x000000000011403a: ror dword ptr [rcx + rcx*4 - 0xa], 0x89; fistp qword ptr [rax + 0x17]; syscall; 
0x000000000011f7fa: ror dword ptr [rcx + rcx*4 - 0xa], 0x89; fistp qword ptr [rax + 0x46]; syscall; 
0x00000000000576b8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000005ee23: ror dword ptr [rcx - 0x77], 0x14; ret 0x8b48; 
0x0000000000113710: ror dword ptr [rcx - 0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000000113870: ror dword ptr [rcx - 0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall; 
0x0000000000111aa6: ror dword ptr [rcx - 0x77], cl; sar byte ptr [rax + 0x11d], cl; mov rdx, rsi; xor esi, esi; syscall; 
0x000000000018e527: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000029daf: ror dword ptr [rdi], 0x11; add rsp, 0x18; ret; 
0x0000000000113a13: ror dword ptr [rdi], 0x11; and al, 0x18; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cdae9: ror dword ptr [rdi], 0x4f; ret 0x66c3; 
0x0000000000127427: ror dword ptr [rdi], 0x84; ret 0; 
0x0000000000102186: ror dword ptr [rdi], 0x84; ret 0xfffc; 
0x000000000018bac8: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018c1d4: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018bfa6: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x000000000018d0d0: ror dword ptr [rdi], 0x85; cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018bf26: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000018bd5b: ror dword ptr [rdi], 0x85; jno 0x18bd67; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018be23: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018baa0: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000c48dc: ror dword ptr [rdi], 0x9c; ret 0x8d41; 
0x00000000000aabd5: ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000018245e: ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000000a6d17: ror dword ptr [rdi], 1; xchg eax, esp; ret; 
0x00000000000867af: ror dword ptr [rdi], cl; xchg byte ptr [rdx + 0x44000001], bl; mov esi, esp; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000000c6bb6: ror dword ptr [rdi], cl; xchg eax, ebx; ret 0x394c; 
0x00000000001946ad: ror dword ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000012d2db: ror dword ptr [rdx], 6; add byte ptr [rax - 0x73], cl; adc eax, 0x60a4a; cmove rax, rdx; ret; 
0x000000000010d014: ror dword ptr [rip - 0x7aff7500], cl; sal byte ptr [rbp + 0x13], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000026ea5: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; add rsp, 0x28; jmp rax; 
0x0000000000026b96: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b60: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000052e52: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x000000000005598f: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba2a: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x00000000000835e1: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x0000000000142638: ror edi, 0x11; xor rdi, qword ptr fs:[0x30]; call rax; 
0x00000000000472db: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000004729a: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000026ea4: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; add rsp, 0x28; jmp rax; 
0x0000000000026b95: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b5f: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000052e51: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x000000000005598e: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba29: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x00000000000835e0: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x0000000000142637: ror rdi, 0x11; xor rdi, qword ptr fs:[0x30]; call rax; 
0x00000000000472da: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000047299: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000008ad2e: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009651e: sahf; fcom dword ptr [rax + rax]; mov qword ptr [rsp + 8], rdx; xor edi, edi; call qword ptr [rax]; 
0x000000000008a12e: sahf; fdivr st(7); jmp qword ptr [rsi + 0x66]; 
0x00000000000dc90e: sahf; hlt; add al, 0; add rsp, 0x80; pop rbx; ret; 
0x00000000001836ce: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000579b9: sahf; ret 0x3948; 
0x0000000000045f5b: sahf; ret 0x3949; 
0x00000000000d5a95: sahf; ret 0x634d; 
0x00000000000ebd2e: sahf; ret; 
0x0000000000155353: sahf; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cdae4: sal bh, 0xd8; cmp ecx, r8d; cmovg eax, edx; ret; 
0x000000000018972e: sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x00000000000639f9: sal bh, 0xd8; pop rbx; ret; 
0x00000000000639cb: sal bh, 0xd8; ret; 
0x00000000000a8977: sal bh, 1; ret 0x8000; 
0x00000000000a8837: sal bh, 1; ret 0xc000; 
0x00000000000a86f7: sal bh, 1; ret 0xe000; 
0x00000000000a85b7: sal bh, 1; ret 0xf000; 
0x00000000000a8477: sal bh, 1; ret 0xf800; 
0x00000000000a8337: sal bh, 1; ret 0xfc00; 
0x00000000000a81f7: sal bh, 1; ret 0xfe00; 
0x00000000000a80b7: sal bh, 1; ret 0xff00; 
0x00000000000a7f77: sal bh, 1; ret 0xff80; 
0x00000000000a7e37: sal bh, 1; ret 0xffc0; 
0x00000000000a7cf7: sal bh, 1; ret 0xffe0; 
0x00000000000a7bb7: sal bh, 1; ret 0xfff0; 
0x00000000000a7a77: sal bh, 1; ret 0xfff8; 
0x00000000000a7937: sal bh, 1; ret 0xfffc; 
0x00000000000a77f7: sal bh, 1; ret 0xfffe; 
0x0000000000192d66: sal bh, cl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000043433: sal bl, 0xf; adc dword ptr [rsp - 4], eax; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000001822cf: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000012aa04: sal bl, 1; movq mm1, qword ptr [r12 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm1; call rax; 
0x000000000012ac33: sal bl, 1; movq mm5, qword ptr [r13 - 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; movups xmmword ptr [rbp - 0x78], xmm5; call rax; 
0x00000000000a0a11: sal byte ptr [rax + 0x5b], 0x5d; ret; 
0x000000000009d697: sal byte ptr [rax + rbp + 0x48], cl; mov eax, dword ptr [rip + 0x14ccd7]; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114afd: sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd3299; mov eax, 1; add rsp, 8; ret; 
0x00000000000c8dc5: sal byte ptr [rax + rbx*2 + 0x48], 0x8d; add r13b, cl; ret; 
0x0000000000147f11: sal byte ptr [rax + rdx + 0x48], 0x8b; or byte ptr [r9 + r9*4 - 0x1a], cl; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000149dcd: sal byte ptr [rax + rdx + 0x48], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000a6d0e: sal byte ptr [rax + rsi*2 + 0x44], 0x38; ret 0x4153; 
0x0000000000149ead: sal byte ptr [rbp + 0x10], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000018e531: sal byte ptr [rbp + 0x10], 0x66; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x000000000011de9d: sal byte ptr [rbp + 0x10], 0xb8; adc al, 1; add byte ptr [rax], al; syscall; 
0x000000000010b3bd: sal byte ptr [rbp + 0x10], 0xb8; adc al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010b30d: sal byte ptr [rbp + 0x10], 0xb8; adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000011dffd: sal byte ptr [rbp + 0x10], 0xb8; adc eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000011f44d: sal byte ptr [rbp + 0x10], 0xb8; and byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000011effd: sal byte ptr [rbp + 0x10], 0xb8; sub al, 0; add byte ptr [rax], al; syscall; 
0x000000000011f4ed: sal byte ptr [rbp + 0x10], 0xb8; sub eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000011f59d: sal byte ptr [rbp + 0x10], 0xb8; xor eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000000e137a: sal byte ptr [rbp + 0x13], 0x45; xor edx, edx; mov eax, 0x3d; syscall; 
0x00000000001134ea: sal byte ptr [rbp + 0x13], 0xb8; adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000011344a: sal byte ptr [rbp + 0x13], 0xb8; adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010d01a: sal byte ptr [rbp + 0x13], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000010d66a: sal byte ptr [rbp + 0x13], 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e15ba: sal byte ptr [rbp + 0x13], 0xb8; and al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e163a: sal byte ptr [rbp + 0x13], 0xb8; and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001175ca: sal byte ptr [rbp + 0x13], 0xb8; sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011eb1a: sal byte ptr [rbp + 0x13], 0xb8; sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011ea4a: sal byte ptr [rbp + 0x13], 0xb8; sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011e0ba: sal byte ptr [rbp + 0x13], 0xb8; xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000014caea: sal byte ptr [rbp + 0x13], 0xc7; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000146245: sal byte ptr [rbp + 0x14], 0x48; mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000013b238: sal byte ptr [rbp + 0x15], 0x44; mov eax, eax; ret; 
0x000000000008c7c8: sal byte ptr [rbp + 0x15], 0x48; mov edi, ebx; call 0x25318; xor eax, eax; pop rbx; ret; 
0x0000000000150e6f: sal byte ptr [rbp + 0x15], 1; add rsp, 0x10; pop rbx; ret; 
0x000000000009d4a7: sal byte ptr [rbp + 0x16], 0x48; lea eax, [rip + 0x14a20f]; mov qword ptr [rip + 0x14a1f0], rax; ret; 
0x0000000000026bbf: sal byte ptr [rbp + 0x16], cl; mov edx, 0x3c; nop word ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000011358d: sal byte ptr [rbp + 0x18], 0x45; xor eax, eax; mov eax, 0x127; syscall; 
0x000000000011363d: sal byte ptr [rbp + 0x18], 0x45; xor eax, eax; mov eax, 0x128; syscall; 
0x00000000000e146d: sal byte ptr [rbp + 0x18], 0x45; xor eax, eax; mov eax, 0xf7; syscall; 
0x0000000000145f94: sal byte ptr [rbp + 0x19], 0x49; mov eax, dword ptr [rsp + 8]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000004421a: sal byte ptr [rbp + 0x1b], 0xbe; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x0000000000063b80: sal byte ptr [rbp + 0x1d], 0x48; mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000043eea: sal byte ptr [rbp + 0x1f], 0x48; add esp, 0x118; ret; 
0x000000000011dc1d: sal byte ptr [rbp + 0x20], 0x41; mov ecx, 8; mov eax, 0x119; syscall; 
0x000000000011ee9d: sal byte ptr [rbp + 0x20], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec7d: sal byte ptr [rbp + 0x20], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x0000000000113028: sal byte ptr [rbp + 0x22], 1; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112bfa: sal byte ptr [rbp + 0x23], 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall; 
0x00000000001120c9: sal byte ptr [rbp + 0x24], 0x49; mov edx, ecx; mov eax, 0x146; syscall; 
0x00000000001139bb: sal byte ptr [rbp + 0x2a], 0xb8; jno 0x1139c1; add byte ptr [rax], al; syscall; 
0x00000000000e281b: sal byte ptr [rbp + 0x2a], 0xb8; push 0; add byte ptr [rax], al; syscall; 
0x000000000018ad72: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000186402: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x0000000000146b80: sal byte ptr [rbp + 0x2d], 0x81; ret; 
0x000000000012c3c0: sal byte ptr [rbp + 0x2d], 0xb8; and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001948ed: sal byte ptr [rbp + 0x2d], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000001140ec: sal byte ptr [rbp + 0x31], 0x49; mov eax, ebx; mov eax, 0x10e; syscall; 
0x00000000001117b7: sal byte ptr [rbp + 0x36], 0x41; mov eax, 8; mov rdx, rbx; mov eax, 0x10f; syscall; 
0x000000000012c7a2: sal byte ptr [rbp + 0x3b], 0xb8; out 0, al; add byte ptr [rax], al; syscall; 
0x00000000000aa9d2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000151969: sal byte ptr [rbp + 0x4c], 0x48; lea eax, [rip + 0x982cd]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9829e], 2; ret; 
0x000000000015e5be: sal byte ptr [rbp + 0x4f], 0x89; ret; 
0x00000000001946c3: sal byte ptr [rbp + 0x52], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000cf97b: sal byte ptr [rbp + 0x54], 0x48; add esp, 0xe0; pop rbx; ret; 
0x000000000010ce49: sal byte ptr [rbp + 0x65], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000010ccba: sal byte ptr [rbp + 0x69], 0x89; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000000587b9: sal byte ptr [rbp + 0x74], 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000014d60b: sal byte ptr [rbp + 0x7f], 1; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000039c5b: sal byte ptr [rbp + 0xa], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000145162: sal byte ptr [rbp + 0xb], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001462a2: sal byte ptr [rbp + 0xb], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000989c3: sal byte ptr [rbp + 0xb], 0xc7; add eax, 0x14ec08; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000140169: sal byte ptr [rbp + 0xc], 0x5b; pop rbp; pop r12; ret; 
0x00000000001562f1: sal byte ptr [rbp + 0xc], cl; mov eax, 1; ret; 
0x00000000000632d0: sal byte ptr [rbp + 0xd], 0x48; mov eax, ebx; pop rbx; ret; 
0x00000000000bb217: sal byte ptr [rbp + 0xd], 0x48; mov eax, edi; ret; 
0x00000000000d3328: sal byte ptr [rbp + 0xd], 0x48; mov eax, edx; add rsp, 8; ret; 
0x0000000000113d17: sal byte ptr [rbp + 0xd], 1; add rsp, 0x28; ret; 
0x0000000000149d77: sal byte ptr [rbp + 0xe], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000013b32f: sal byte ptr [rbp + 0xe], 0x83; ret 0x3901; 
0x00000000000ba452: sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x00000000000ceb37: sal byte ptr [rbp + 5], 1; add rsp, 0x28; ret; 
0x0000000000114826: sal byte ptr [rbp + 5], 1; add rsp, 0x58; ret; 
0x0000000000156214: sal byte ptr [rbp + 6], 1; add rsp, 0x10; pop rbx; ret; 
0x000000000015077c: sal byte ptr [rbp + 6], 1; sub rsp, -0x80; pop rbx; ret; 
0x0000000000034dee: sal byte ptr [rbp + 7], cl; ret; 
0x0000000000043db1: sal byte ptr [rbp + 8], 1; add rsp, 0x148; ret; 
0x000000000012bd91: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000008fb84: sal byte ptr [rbp + 9], cl; ret; 
0x0000000000026bfd: sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x000000000009aa22: sal byte ptr [rbp + rax + 0x48], cl; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x0000000000147591: sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x00000000000a0988: sal byte ptr [rbp + rax - 0x80], cl; cli; cmp eax, 0x8348f075; mov dword ptr [rcx], 0xb8; add byte ptr [rdx + rdx*8 - 0x38baf0b8], al; ret; 
0x00000000001519c9: sal byte ptr [rbp + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000010c400: sal byte ptr [rbp + rbp + 0x31], 0xd2; xor esi, esi; mov rdi, rbx; call rax; 
0x000000000012a5b0: sal byte ptr [rbp + rbp + 0x48], 0x8b; jp 0x12a607; mov rsi, rdx; call rax; 
0x00000000000dc0b0: sal byte ptr [rbp + rbx + 0x48], 0x8b; add eax, 0x10e2ae; lea rdi, [rip + 0x10a65f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbfc4: sal byte ptr [rbp + rbx + 0x48], 0x8b; add eax, 0x10e39a; lea rdi, [rip + 0x10a74b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c8d3e: sal byte ptr [rbp + rbx + 0x48], 0x8b; add eax, 0x121620; lea rdi, [rip + 0x11d9d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000039500: sal byte ptr [rbp + rbx + 0x48], 0x8b; add eax, 0x1b0e5e; lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dc287: sal byte ptr [rbp + rbx + 0x48], cl; mov eax, dword ptr [rip + 0x10e0d7]; lea rdi, [rip + 0x10a488]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394a0: sal byte ptr [rbp + rbx + 0x48], cl; mov eax, dword ptr [rip + 0x1b0eb6]; lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037454: sal byte ptr [rbp + rbx + 0x48], cl; mov eax, dword ptr [rip + 0x1b2f0a]; lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d22: sal byte ptr [rbp + rbx + 0x48], cl; mov eax, dword ptr [rip + 0x1b363c]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003555e: sal byte ptr [rbp + rbx + 0x48], cl; mov eax, dword ptr [rip + 0x1b4df8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034348: sal byte ptr [rbp + rbx + 0x48], cl; mov eax, dword ptr [rip + 0x1b6016]; lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000185d40: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x0000000000181410: sal byte ptr [rbp + rbx*8 + 0x48], cl; movsxd rax, ecx; add rax, rdi; ret; 
0x00000000000ce0e0: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000001158c9: sal byte ptr [rbp + rdx + 0x48], 0x39; ret; 
0x00000000000ce458: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000000e2530: sal byte ptr [rbp + rsi*2 + 0x48], 0x83; ret 0xc60f; 
0x000000000012bda1: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x00000000000a6db5: sal byte ptr [rbp - 0x10], cl; ret; 
0x00000000000b9c50: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x0000000000086320: sal byte ptr [rbp - 0x13], cl; ret; 
0x00000000000a6cda: sal byte ptr [rbp - 0x15], cl; xor edx, edx; mov qword ptr [rdi], rdx; ret; 
0x000000000012e44b: sal byte ptr [rbp - 0x16], cl; sub rsp, 8; call 0x12dbd0; nop word ptr [rax + rax]; ret; 
0x0000000000126949: sal byte ptr [rbp - 0x1c], 0x48; add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000a8c9b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000041e7c: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000114d39: sal byte ptr [rbp - 0x2c], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000114e2a: sal byte ptr [rbp - 0x2d], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000e6621: sal byte ptr [rbp - 0x2d], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a9db: sal byte ptr [rbp - 0x2e], 1; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000000e6713: sal byte ptr [rbp - 0x2e], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000115c8f: sal byte ptr [rbp - 0x2e], cl; nop word ptr [rax + rax]; mov r8, rsi; mov byte ptr [r8 - 1], 0; ret; 
0x00000000001821cd: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x0000000000114f6b: sal byte ptr [rbp - 0x30], cl; xor eax, eax; pop rbx; ret; 
0x00000000000dbeb7: sal byte ptr [rbp - 0x35], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001821c5: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x0000000000194953: sal byte ptr [rbp - 0x39], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000c6b41: sal byte ptr [rbp - 0x4e], 0x83; ret; 
0x0000000000185c9d: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x000000000012e5e8: sal byte ptr [rbp - 0x67], cl; mov rax, rdi; ret; 
0x0000000000185c95: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x0000000000101bea: sal byte ptr [rbp - 0x69], cl; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x000000000012d5a6: sal byte ptr [rbp - 0x6b], 0x48; mov eax, edi; ret; 
0x00000000000efed6: sal byte ptr [rbp - 0x70], cl; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009c5da: sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000bc6bb: sal byte ptr [rbp - 0xe], cl; ret; 
0x00000000000e119c: sal byte ptr [rbp - 0xf], 0x84; sal byte ptr [rdi + rax - 0x3a], 2; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000092a8c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000146350: sal byte ptr [rbx + 0x48], 0x8b; sbb ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000010c492: sal byte ptr [rbx + rbp + 0x31], 0xd2; call rax; 
0x0000000000083c7a: sal byte ptr [rbx + rbx + 0x48], 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000182232: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000000bb569: sal byte ptr [rbx + rbx*2 - 0x75], 0x46; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ff162: sal byte ptr [rbx + rcx + 0x31], 0xc0; ret; 
0x00000000001164d0: sal byte ptr [rbx + rcx + 0x48], 0x83; ret 0x4808; 
0x000000000013a0d0: sal byte ptr [rbx + rcx - 0x3a], 2; ljmp [rax + 0x4e850f02]; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x00000000000a6e40: sal byte ptr [rbx + rdx + 0x41], 0x39; rol byte ptr [rcx + 0xf], 1; xchg eax, ebp; ret 0x3941; 
0x0000000000036f94: sal byte ptr [rbx], 1; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000185a29: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, [rip + 0x13aac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000181169: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, [rip + 0x1836c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017f1a4: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, [rip + 0x1a331]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000047e9c: sal byte ptr [rcx + rbx + 0x48], 0x8b; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000147914: sal byte ptr [rcx + rbx + 0x48], 0x8b; cmp dword ptr [rax + 0x48000023], -0x77; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000013fa78: sal byte ptr [rcx + rbx - 0x47], 0x10; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000013faa2: sal byte ptr [rcx + rbx - 0x47], 8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000000824b6: sal byte ptr [rcx + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000000136e5e: sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0xb2378; call rax; 
0x000000000014bc81: sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x00000000000b028c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000015d80c: sal byte ptr [rcx + rsi + 0x48], 0x8b; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x00000000000a031c: sal byte ptr [rcx + rsi*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x1beb; 
0x000000000010cfaf: sal byte ptr [rcx], 0xc0; syscall; 
0x00000000001016e9: sal byte ptr [rcx], 0xc9; push 0; call 0x101680; add rsp, 0x18; ret; 
0x0000000000101709: sal byte ptr [rcx], 0xc9; push 1; call 0x101680; add rsp, 0x18; ret; 
0x0000000000027ab5: sal byte ptr [rcx], 0xc9; xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x000000000018a763: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c53: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a783: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c73: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a7c1: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185cb1: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a743: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c33: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000012b7ca: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000ba731: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x00000000001121f9: sal byte ptr [rcx], cl; idiv byte ptr [rax + 0x118]; syscall; 
0x00000000000e16ff: sal byte ptr [rcx], cl; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x00000000000e12e2: sal byte ptr [rcx], cl; sar byte ptr [rdi - 1], cl; mov eax, 0x3d; syscall; 
0x000000000010c404: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call rax; 
0x000000000010c431: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; mov eax, 0x135; syscall; 
0x000000000012e34a: sal byte ptr [rdi + 0x11], 1; lea rdx, [rip + 0xbbdbc]; call 0xbbb80; add rsp, 8; ret; 
0x00000000000badce: sal byte ptr [rdi + 0x48], 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000009afc6: sal byte ptr [rdi + 0x48], 0x89; out dx, al; mov rdi, rbx; call rax; 
0x0000000000150cfe: sal byte ptr [rdi + 0x48], 0x89; ret; 
0x00000000000e0bb8: sal byte ptr [rdi + rax - 0x3a], 2; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000000e34fc: sal byte ptr [rdi + rbp*8 + 0x49], 1; cmp eax, 0x54190100; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x0000000000082586: sal byte ptr [rdi + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x00000000000ec58f: sal byte ptr [rdi + rdi - 0x7d], 0xc1; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000b045b: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000000ce0cb: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000160e53: sal byte ptr [rdx + rbx*8 + 0x5b], 0x31; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001535b3: sal byte ptr [rdx + rdi + 0x48], 0x8b; sbb byte ptr [r9 + r9*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x00000000000b07d3: sal byte ptr [rdx + rdi - 0xa], cl; ret 0x7501; 
0x00000000001580bb: sal byte ptr [rdx + rdx + 0x31], 0xdb; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b4fd3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x00000000000aad4b: sal byte ptr [rdx + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x00000000001459db: sal byte ptr [rdx + rsi*2 + 0x48], 0x8b; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000018c34f: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c470: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000c532c: sal byte ptr [rdx - 0x5f], 1; mov eax, 0xffffffff; pop rbx; pop rbp; pop r14; ret; 
0x000000000012b6ec: sal byte ptr [rdx - 0xf], 1; xor eax, eax; ret; 
0x0000000000091375: sal byte ptr [rsi + 0x10], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000014e95e: sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x14e9cd; call rax; 
0x000000000014f3fe: sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x14f45d; call rax; 
0x0000000000182637: sal byte ptr [rsi + rax*4 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; add rax, r8; vzeroupper; ret; 
0x0000000000043c97: sal byte ptr [rsi + rbx + 0x48], 0x8b; add eax, 0x1a66a7; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000a0aa7: sal byte ptr [rsi + rcx + 0x48], 0x89; ret 0x8948; 
0x000000000015afcb: sal byte ptr [rsi + rcx + 0x48], 0x8d; adc eax, 0x8874b; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x000000000009d4e9: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x14a1cd; mov qword ptr [rip + 0x14a1ae], rax; add rsp, 8; ret; 
0x000000000011fdd9: sal byte ptr [rsi + rcx + 1], cl; ror byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, 0x14; syscall; 
0x0000000000145871: sal byte ptr [rsi + rdi + 0x48], 0x8b; and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x0000000000160d97: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x8954f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d67: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x89577; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d37: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x8959f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160d07: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x895c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160cd7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x895ef; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000160ca7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0x89617; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd57: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe5df; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bd27: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe607; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcf7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe62f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bcc7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe657; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc97: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe67f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc67: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe6a7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc37: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe6cf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bc07: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe6f7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bba7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe70f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bbdb: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe71b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012bb77: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe737; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb47: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe75f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bb17: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe787; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bae7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe7af; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bab7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe7d7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba57: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe827; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ba27: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe84f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9f7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe877; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b9c7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe89f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b997: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe8c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b967: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe8ef; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b937: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe917; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b907: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe93f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8d7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe967; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b8a7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe98f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b877: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe9b7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b847: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe9df; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b817: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbe9ff; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012b7e7: sal byte ptr [rsi + rdx + 0x48], 0x8b; add eax, 0xbeb07; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000aa887: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000001161c1: sal byte ptr [rsi + rdx*8 - 0x7f], cl; or al, byte ptr [rax]; add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x0000000000031a49: sal byte ptr [rsp + 0x48], 0x8b; add eax, 0x1b8915; lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbf0a: sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x00000000001062a4: sal byte ptr [rsp + rbp*4 + 0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x0000000000150fb7: sal byte ptr [rsp + rbx + 0x48], 0x8b; cmp byte ptr [rax - 0x7b], cl; push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000001164a1: sal byte ptr [rsp + rcx + 0x48], 0x83; ret 0x4808; 
0x000000000009d081: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000011b613: sal byte ptr [rsp + rdi + 0x48], 0x39; ret; 
0x000000000019695c: sal byte ptr [rsp + rdi*8 - 1], 1; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x000000000013facc: sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x000000000011fb01: sal byte ptr [rsp + rdx + 0x48], 0x89; ret; 
0x00000000001825e9: sal byte ptr [rsp + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000000efcd4: sal byte ptr [rsp + rsi + 0x49], 0x63; ret 0xb60f; 
0x0000000000127486: sal dh, 1; ret 0x7502; 
0x00000000000613c8: sal dh, 1; ret 0xf07; 
0x000000000014130f: sal dh, 1; ret; 
0x000000000012e39c: sal dword ptr [rbp - 0x17], 1; sub rsp, 8; call 0x12dbd0; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000ec8fa: sal dword ptr [rbp - 0x48], 0xeb; rcl byte ptr [rax - 0x74fbbc75], 0x55; add al, 1; ret 0x341; 
0x0000000000155c74: sal dword ptr [rbx + 9], 1; xor eax, eax; ret; 
0x00000000000bb142: sal dword ptr [rbx + rcx + 0x48], 0x83; ret 0x8b04; 
0x00000000000a6c2a: sal dword ptr [rcx], 0xc0; mov qword ptr [rdx], rcx; ret; 
0x000000000018c2af: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c3ef: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000aa4d6: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000013f37b: sal dword ptr [rsi + rdx + 0x48], 0x83; ret; 
0x00000000000ba0f3: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000043176: sal edi, 0xd8; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x000000000018c2ae: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c3ee: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000127485: sal sil, 1; ret 0x7502; 
0x0000000000067cd4: sar ah, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000012d376: sar al, 1; dec dword ptr [rax - 0x73]; add eax, 0xfff8d070; cmovne rax, rdx; ret; 
0x000000000012ece7: sar al, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000017455d: sar bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x000000000017b3b3: sar bh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000586a5: sar bh, 0xff; ret; 
0x0000000000058665: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000005885c: sar bh, 0xff; sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000002823e: sar bh, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000131f52: sar bh, cl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000111aa9: sar byte ptr [rax + 0x11d], cl; mov rdx, rsi; xor esi, esi; syscall; 
0x000000000011dcd2: sar byte ptr [rax + 0x121], cl; mov edx, 8; syscall; 
0x000000000015aac6: sar byte ptr [rax + 0x17], 0x48; lea eax, [rip + 0x8f2b0]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000011fa52: sar byte ptr [rax + 0x1d], cl; syscall; 
0x000000000008d7c7: sar byte ptr [rax + 0x2d], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ce980: sar byte ptr [rax + 0x35], 0x83; clc; sbb dword ptr [rdi + 0x18], edi; mov rax, rbx; pop rbx; ret; 
0x00000000000e137f: sar byte ptr [rax + 0x3d], cl; syscall; 
0x000000000015aee2: sar byte ptr [rax + 0xb], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000013b7d7: sar byte ptr [rax + 0xe], cl; mov rax, rdx; movsxd rdx, esi; ret; 
0x0000000000112795: sar byte ptr [rax + 8], cl; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000001133da: sar byte ptr [rax - 0x4a], 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000011db13: sar byte ptr [rbx + rdx + 0x74], 1; ret; 
0x0000000000114713: sar byte ptr [rcx + 3], 0xc6; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x0000000000096d13: sar byte ptr [rcx + rcx*4 + 0x44], 0x24; push -0x3c817; jmp qword ptr [rsi - 0x70]; 
0x00000000000c3440: sar byte ptr [rcx], cl; ret 0x1d74; 
0x00000000000d0b13: sar byte ptr [rcx], cl; ret 0x267e; 
0x0000000000055e09: sar byte ptr [rdi + 2], cl; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000012a1da: sar byte ptr [rdi - 0x1d], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e12e4: sar byte ptr [rdi - 1], cl; mov eax, 0x3d; syscall; 
0x000000000013b85d: sar byte ptr [rdx + 0x7fffffff], 1; cmovs eax, edx; ret; 
0x00000000001293b2: sar byte ptr [rdx + 1], 0xe8; or esi, 0xffffffff; dec dword ptr [rcx]; ret; 
0x0000000000044b28: sar byte ptr [rdx + 1], cl; cmove eax, edx; ret; 
0x0000000000155d47: sar byte ptr [rdx - 1], 0x48; mov esi, ebx; mov rdi, rbp; call rcx; 
0x00000000000afad5: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000082a49: sar byte ptr [rsi + 0x11], 0x48; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000008c267: sar byte ptr [rsi + 0x16], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c157: sar byte ptr [rsi + 0x16], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000009b387: sar byte ptr [rsi + 0x26], 0x85; fisttp dword ptr [rdi]; xchg eax, esp; ret; 
0x0000000000077773: sar byte ptr [rsi + 1], cl; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x0000000000031501: sar byte ptr [rsi + 8], 0x83; call 0x8469e0b; pop rbx; ret; 
0x00000000001236dc: sar ch, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000018da37: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000007d1d2: sar ch, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000035996: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000152190: sar ch, 1; jmp qword ptr [rsi + 0x66]; 
0x000000000012e047: sar ch, cl; call qword ptr [rax - 0x18]; 
0x0000000000159372: sar cl, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000010f6eb: sar dh, 0xff; dec dword ptr [rax - 0x77]; ret 0xc3f6; 
0x0000000000158e72: sar dh, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000012718e: sar dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000007d1a4: sar dl, 0xff; call qword ptr [rax - 0x75]; 
0x000000000006a7da: sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000006f453: sar dl, 0xff; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx - 0x1f7cfe10], al; add dword ptr [rax - 0x5b77b], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000070481: sar dl, 0xff; jmp qword ptr [rbp]; 
0x000000000006dfdd: sar dl, 0xff; push qword ptr [rcx]; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x000000000018d3f5: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d3fc: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x18d400; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d403: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x18d408; ret; 
0x00000000001154b7: sar dword ptr [rax], 0xf; xchg eax, esp; ret 0xd108; 
0x00000000000ba692: sar dword ptr [rax], 1; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000018e25c: sar dword ptr [rbp + 0x48], 1; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x00000000001167ab: sar dword ptr [rbp - 1], 1; inc dword ptr [rbp - 0x7cd28b40]; ret; 
0x00000000000f6e80: sar dword ptr [rbx], 0x9c; and al, 0x9c; add byte ptr [rax], al; add byte ptr [rdi], cl; pushfq; ret 0xd108; 
0x00000000000485df: sar dword ptr [rcx], 0x30; add byte ptr [rax], al; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x000000000011f685: sar dword ptr [rdx], 1; cmovb rax, rdx; ret; 
0x0000000000189289: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x00000000001153f2: sar dword ptr [rsp + rbx*2], 0xf; xchg eax, esp; ret 0xd108; 
0x0000000000042a88: sar eax, 0x10; ret; 
0x000000000004317b: sar eax, 0x1f; not eax; and eax, edx; ret; 
0x000000000015a8c4: sar eax, 0x1f; ret; 
0x0000000000042a38: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x0000000000043515: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000042d6a: sar eax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000a16de: sar eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000eac95: sar eax, 1; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000088a65: sar eax, 2; call qword ptr [rbp + 0x30]; 
0x000000000008732c: sar eax, 2; lea eax, [r8 - 1]; ret; 
0x000000000008a082: sar eax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000087ae9: sar eax, 2; ret; 
0x000000000012f18d: sar eax, 6; ret; 
0x000000000012eca7: sar eax, cl; jmp qword ptr [rsi + 0xf]; 
0x00000000000aaef1: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000087f8b: sar ecx, cl; dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000014ca80: sar edi, 0xff; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000001320f4: sar edi, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000007d39a: sar edi, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000047c14: sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x00000000001555a2: sar edx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001546c5: sar edx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x0000000000047c27: sar edx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000007af24: sar edx, 2; call qword ptr [rbx + 0x38]; 
0x00000000000873d2: sar edx, 2; sub eax, edx; ret; 
0x000000000013cc2c: sar edx, 4; mov qword ptr [rbx + 0x10], rax; mov eax, 0x14; add edx, 1; syscall; 
0x00000000000aaef7: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000002d546: sar esi, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000019496a: sar esi, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000005923a: sar esp, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000007cdc1: sar esp, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007cdc0: sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007d399: sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000088a64: sar r8, 2; call qword ptr [rbp + 0x30]; 
0x000000000008732b: sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000043514: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000042d69: sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000000008a081: sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000087ae8: sar rax, 2; ret; 
0x000000000012f18c: sar rax, 6; ret; 
0x00000000000aaef0: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000001555a1: sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001546c4: sar rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x0000000000047c26: sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000007af23: sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000000873d1: sar rdx, 2; sub eax, edx; ret; 
0x000000000013cc2b: sar rdx, 4; mov qword ptr [rbx + 0x10], rax; mov eax, 0x14; add edx, 1; syscall; 
0x00000000000aaef6: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000005ca23: sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000145fd6: sbb al, 0; add byte ptr [rax], al; add bl, ch; mov edx, 0xfe922ee8; jmp qword ptr [rsi + 0x66]; 
0x000000000010c288: sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000010c288: sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x0000000000029b4f: sbb al, 0; lea rsi, [rip - 0x598]; lea rdi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000002539b: sbb al, 0; mov qword ptr [rip + 0x1c4c0c], rdx; pop rax; pop rbx; pop rbp; ret; 
0x00000000000253a2: sbb al, 0; pop rax; pop rbx; pop rbp; ret; 
0x0000000000026420: sbb al, 0; ret; 
0x0000000000026b93: sbb al, 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077fbd: sbb al, 0x13; add byte ptr [rax + 0x63], cl; add al, 0x88; add rax, r14; jmp rax; 
0x00000000000780e9: sbb al, 0x13; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r14; jmp rax; 
0x0000000000083451: sbb al, 0x25; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000150f1f: sbb al, 0x41; call qword ptr [rdx]; 
0x000000000010ced0: sbb al, 0x41; mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000001502ec: sbb al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000008923d: sbb al, 0x48; add esp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008dd00: sbb al, 0x83; adc eax, 0xc08b8b00; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x00000000001547f0: sbb al, 0xaa; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000eaab3: sbb al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000014e9f5: sbb al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x000000000015e2b8: sbb al, 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000000846d0: sbb al, 0xd4; add byte ptr [rax], al; mov eax, edi; ret; 
0x00000000001121c4: sbb al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000112226: sbb al, 0xd; add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000016a9e0: sbb al, 0xe8; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000015647c: sbb al, 0xf; xchg eax, ebx; ret 0x3948; 
0x000000000015d5ce: sbb al, 0xfd; jmp qword ptr [rsi + 0x2e]; 
0x0000000000167374: sbb al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000158b19: sbb al, byte ptr [r8]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000158b1a: sbb al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000047ea9: sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001175ce: sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000035533: sbb al, byte ptr [rax]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000035495: sbb al, byte ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000048875: sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000047e7b: sbb al, byte ptr [rax]; call 0xbbb80; pop rbx; ret; 
0x0000000000043df5: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000042d2f: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042105: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x2a; mov rax, rcx; ret; 
0x0000000000042165: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000034d65: sbb al, byte ptr [rax]; mov qword ptr [rax], rdx; ret; 
0x0000000000035246: sbb al, byte ptr [rax]; mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000043c9f: sbb al, byte ptr [rax]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000034da5: sbb al, byte ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000035265: sbb al, byte ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000036a28: sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013acce: sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x0000000000117882: sbb al, byte ptr [rbx]; add byte ptr [rax], al; lea rax, [rip + 0xd0783]; add rsp, 8; ret; 
0x0000000000114eea: sbb al, byte ptr [rcx + rsi*8]; dec dword ptr [rax - 0x77]; add eax, 0xd566b; add rsp, 8; ret; 
0x0000000000191a62: sbb al, byte ptr [rdx + 0x63480002]; add al, 0x81; add rcx, rax; jmp rcx; 
0x0000000000167576: sbb al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000ef5b9: sbb al, byte ptr [rip - 0x7cb7ac8b]; ret; 
0x0000000000117df8: sbb al, ch; adc al, byte ptr [rbx]; add byte ptr [rax], al; lea rax, [rip + 0xd025b]; add rsp, 0x18; ret; 
0x00000000000e15d3: sbb al, ch; mul dword ptr [rdi - 0x3876fffc]; mov eax, 0x22; syscall; 
0x00000000001521dd: sbb bh, al; and al, 0x30; add al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000001523f2: sbb bh, al; and al, 0x30; add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr [rsp + 0x40], rdx; call qword ptr [rax + 0x18]; 
0x0000000000152102: sbb bh, al; and al, 0x30; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rdx; call qword ptr [rax + 0x18]; 
0x000000000015237d: sbb bh, al; and al, 0x30; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000015216d: sbb bh, al; and al, 0x30; add eax, dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000000eaaa3: sbb bh, byte ptr [rax + 2]; ret; 
0x00000000001284ea: sbb bh, byte ptr [rcx + 0x6348000b]; ret 0x4864; 
0x00000000000c8a55: sbb bh, byte ptr [rcx]; ret; 
0x0000000000101796: sbb bl, al; nop dword ptr [rax + rax]; mov eax, 0x8e; syscall; 
0x000000000011250b: sbb bl, al; nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000108c0f: sbb bl, byte ptr [rax + rcx*2 - 0x7d]; ret; 
0x000000000012b237: sbb bl, dh; movq mm7, qword ptr [r13 + 0x30]; mov dword ptr [rbp - 0x80], edx; lea rdx, [rcx + 0x70]; movups xmmword ptr [rbp - 0x78], xmm7; call rax; 
0x00000000000b7afa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62da: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b6cfa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b5a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b566a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b6cbb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b1b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b562b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b7af9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b62d9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b6cf9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7b59: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b5669: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b6cba: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7b1a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b562a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000001474d7: sbb byte ptr [r11 + 0xa7603f8], r8b; mov eax, 2; ret; 
0x000000000015358c: sbb byte ptr [r13 + r9*4 + 0x63], cl; adc bh, al; adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000090ac9: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000008d920: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000000420bc: sbb byte ptr [r15], r9b; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x000000000015da0f: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000155bd1: sbb byte ptr [r8 + 1], r15b; ret; 
0x000000000008dc62: sbb byte ptr [r8 - 0x77], cl; adc dword ptr [rax + 0x31000000], -0x40; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x00000000001261dc: sbb byte ptr [r8 - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000dbf06: sbb byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x0000000000026bf9: sbb byte ptr [r8 - 0x7b], r9b; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x0000000000125ae9: sbb byte ptr [r8 - 0x7d], r9b; ret 0x4801; 
0x00000000000de062: sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000140816: sbb byte ptr [r8], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000005f564: sbb byte ptr [r8], al; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x00000000000b9734: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b9756: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b9794: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000005f674: sbb byte ptr [r8], r8b; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x00000000001535b8: sbb byte ptr [r9 + r9*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000086729: sbb byte ptr [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000194d17: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000009a60e: sbb byte ptr [r9 - 0x7d], al; ret 0x4901; 
0x00000000000b5fb6: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f98a7d9; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b76e5: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f98bf07; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000dbc91: sbb byte ptr [r9], dil; or al, 0x7c; ret 0x850f; 
0x0000000000155b9b: sbb byte ptr [r9], r13b; mov esi, esi; mov dword ptr [rdi + 0x28], edx; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000010cedc: sbb byte ptr [rax + 0x101], bh; syscall; 
0x0000000000114155: sbb byte ptr [rax + 0x10e], bh; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x000000000015da10: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000000d7500: sbb byte ptr [rax + 0x63], cl; ret 0x8944; 
0x0000000000155b6c: sbb byte ptr [rax + 1], bh; mov dword ptr [rdi + 0x28], edx; ret; 
0x0000000000155bd2: sbb byte ptr [rax + 1], bh; ret; 
0x000000000015abe8: sbb byte ptr [rax + 2], bh; cmp ebx, 3; cmove ebx, eax; mov rax, qword ptr [rip + 0x8a955]; call qword ptr [rax + 0x28]; 
0x00000000000a70a9: sbb byte ptr [rax - 0x73], cl; add eax, 0x103787; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x0000000000095759: sbb byte ptr [rax - 0x73], cl; and byte ptr [r9 + 0x39], cl; ret 0x850f; 
0x00000000000e2916: sbb byte ptr [rax - 0x73], cl; call 0x416a6a7a; pop rbp; pop rbp; ret; 
0x000000000010b9c6: sbb byte ptr [rax - 0x73], cl; pushfq; ret 0x8207; 
0x00000000000e2b96: sbb byte ptr [rax - 0x75], cl; add eax, 0x107812; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e2af6: sbb byte ptr [rax - 0x75], cl; add eax, 0x1078b2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113c44: sbb byte ptr [rax - 0x75], cl; add eax, 0xd6764; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b74: sbb byte ptr [rax - 0x75], cl; add eax, 0xd6834; mov qword ptr [rsp + 0x10], rcx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091827: sbb byte ptr [rax - 0x75], cl; add rsp, 0x20; mov ecx, edx; xor edx, edx; pop rbx; jmp rax; 
0x00000000000472d3: sbb byte ptr [rax - 0x75], cl; jo 0x472f8; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000015e5c7: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x00000000001499ca: sbb byte ptr [rax - 0x76b704ad], cl; ret 0xc148; 
0x000000000008dc63: sbb byte ptr [rax - 0x77], cl; adc dword ptr [rax + 0x31000000], -0x40; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000114aff: sbb byte ptr [rax - 0x77], cl; add eax, 0xd3299; mov eax, 1; add rsp, 8; ret; 
0x0000000000114942: sbb byte ptr [rax - 0x77], cl; and al, 0x20; mov eax, 0x65; syscall; 
0x000000000008d5e6: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000044f95: sbb byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + 0x244489ee]; adc al, 0x44; mov edi, esp; mov eax, 0x81; syscall; 
0x0000000000083eea: sbb byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x00000000001261dd: sbb byte ptr [rax - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000090ad2: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000014d548: sbb byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x48]; 
0x000000000014bf21: sbb byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 8]; 
0x000000000009434e: sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000129115: sbb byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x00000000000ff72f: sbb byte ptr [rax - 0x7b], cl; div byte ptr [rcx + rbx - 0x17]; not dh; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000e402f: sbb byte ptr [rax - 0x7b], cl; div byte ptr [rcx + rbx - 0x17]; test byte ptr [rbp + 0xf66fffb], 0x1f; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000026bfa: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000000dbf07: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x00000000000d6433: sbb byte ptr [rax - 0x7bf0f706], al; ret; 
0x00000000000964dc: sbb byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x0000000000125aea: sbb byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000de063: sbb byte ptr [rax - 0x7d], cl; ret; 
0x0000000000089241: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000093dff: sbb byte ptr [rax - 9], cl; fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x00000000000d94c7: sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000c6f14: sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x000000000002b7df: sbb byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000101861: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000012c421: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; ret; 
0x00000000000720d3: sbb byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x0000000000140817: sbb byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000005f565: sbb byte ptr [rax], al; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000055df1: sbb byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000063a25: sbb byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000026c65: sbb byte ptr [rax], al; ret; 
0x000000000008c196: sbb byte ptr [rax], al; setne al; ret; 
0x00000000000b9735: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b9757: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b9795: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x0000000000063198: sbb byte ptr [rax], dl; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000014586f: sbb byte ptr [rbp + 0x483e74c0], al; mov eax, dword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000000ed13e: sbb byte ptr [rbp + 1], cl; ret; 
0x000000000014669a: sbb byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x40; call qword ptr [rax]; 
0x000000000015358d: sbb byte ptr [rbp + rcx*4 + 0x63], cl; adc bh, al; adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x000000000012714b: sbb byte ptr [rbp - 0x6371f040], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x000000000004626c: sbb byte ptr [rbp - 0x7b], cl; in al, 0xf; xchg eax, ebp; ret 0x8548; 
0x00000000001484a4: sbb byte ptr [rbx + 0x4c04e83b], cl; cld; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000148043: sbb byte ptr [rbx + 0x5065e83b], cl; cld; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000012c009: sbb byte ptr [rbx + 0x5d5b0ce0], al; ret; 
0x00000000000bb7e5: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000010ca65: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000008b588: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000000745c9: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000008b620: sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000044e7b: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001474d8: sbb byte ptr [rbx + 0xa7603f8], al; mov eax, 2; ret; 
0x000000000009a5bf: sbb byte ptr [rbx + rcx*4 + 0x41], cl; or byte ptr [rax - 0x75], cl; adc byte ptr [r9 - 0x7d], al; ret; 
0x0000000000077fbc: sbb byte ptr [rbx + rdx], 0; movsxd rax, dword ptr [rax + rcx*4]; add rax, r14; jmp rax; 
0x00000000000926b7: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000150782: sbb byte ptr [rbx - 0x3d], 0xe8; xchg dl, ch; std; jmp qword ptr [rsi + 0xf]; 
0x000000000003235c: sbb byte ptr [rbx], 0; lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014928e: sbb byte ptr [rcx + 0x31], cl; ror byte ptr [rbx + rcx*4 + 0x5e], 1; adc byte ptr [rbp + 0x31], cl; ret 0x314d; 
0x0000000000093a16: sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x00000000000965ee: sbb byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 8; call rcx; 
0x00000000001535b9: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x000000000009628c: sbb byte ptr [rcx + rcx*4 - 0x19], cl; mov qword ptr [rsp + 8], r11; call qword ptr [rax]; 
0x000000000008672a: sbb byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000001458f7: sbb byte ptr [rcx + rcx*4 - 0x1a], cl; call qword ptr [rax + 0x10]; 
0x00000000000e17c2: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000080d29: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008c947: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000010ed10: sbb byte ptr [rcx + rcx*4 - 0xa], cl; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x0000000000194d18: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000007af18: sbb byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rcx + rcx*4 - 0x11], cl; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000075187: sbb byte ptr [rcx - 0x75], cl; push rsi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff750; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000000dd48e: sbb byte ptr [rcx - 0x77], al; pop rsp; xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000007a023: sbb byte ptr [rcx - 0x77], cl; ret 0x3948; 
0x000000000009a60f: sbb byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x000000000009a3af: sbb byte ptr [rcx - 0x7d], al; ret; 
0x00000000000b5fb7: sbb byte ptr [rcx - 0x7d], cl; call 0x7f98a7d9; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b76e6: sbb byte ptr [rcx - 0x7d], cl; call 0x7f98bf07; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000014e9c9: sbb byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x0000000000055ff0: sbb byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x50; pop rbx; ret; 
0x0000000000043ef0: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000001121a9: sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000000dbc92: sbb byte ptr [rcx], bh; or al, 0x7c; ret 0x850f; 
0x00000000000e83ff: sbb byte ptr [rcx], bh; ret; 
0x0000000000155b9c: sbb byte ptr [rcx], ch; mov esi, esi; mov dword ptr [rdi + 0x28], edx; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000009a16a: sbb byte ptr [rcx], cl; ret 0x5409; 
0x0000000000153fdd: sbb byte ptr [rcx], dh; shr al, 0x4b; adc ebp, ebp; dec dword ptr [rax - 0x2f]; call 0xffffffff895e0775; ret; 
0x0000000000153e4d: sbb byte ptr [rcx], dh; shr al, 0xdb; adc ch, ch; dec dword ptr [rax - 0x2f]; call 0xffffffff895e05e5; ret; 
0x000000000015b5cc: sbb byte ptr [rdi - 0x76b3fff8], 0xce; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000008d921: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000000639c8: sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000420bd: sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x000000000011da94: sbb byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x00000000000e9c64: sbb byte ptr [rdi], cl; xchg dword ptr [rsi + rdi*8 - 0x7cb70001], esi; ret 0xf01; 
0x000000000014a529: sbb byte ptr [rdi], cl; xchg eax, edi; ret 0xd284; 
0x000000000014a99e: sbb byte ptr [rdi], cl; xchg eax, edx; ret 0x8b48; 
0x00000000000eb03b: sbb byte ptr [rdx + rdx*2 - 0x73], dh; add qword ptr [rax - 0x7d], rcx; ret; 
0x0000000000048ae4: sbb byte ptr [rdx], bl; add byte ptr [rbx + 0x75c08500], cl; adc edi, dword ptr [rax + 0x13e]; syscall; 
0x0000000000167764: sbb byte ptr [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012f319: sbb byte ptr [rip + 0xffffff], ah; or eax, edi; bswap eax; ret; 
0x0000000000086b02: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000015d547: sbb byte ptr [rsi + 0x40], bh; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000090aca: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000150444: sbb byte ptr [rsi + 6], bh; call qword ptr [rax + 0x28]; 
0x000000000015040b: sbb byte ptr [rsi + 6], bh; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000120922: sbb byte ptr [rsi - 0x7d], ah; add byte ptr [rcx], al; ret; 
0x0000000000120921: sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x0000000000129114: sbb byte ptr gs:[rax - 0x77], cl; ret 0x2b49; 
0x00000000000d94c6: sbb byte ptr ss:[rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000e83fc: sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x000000000009795d: sbb cl, byte ptr [rax + 0x29480614]; ror byte ptr [rax + 0x39], 1; ret; 
0x000000000013b9d5: sbb cl, byte ptr [rax - 0x73]; adc eax, 0x7235b; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000098909: sbb cl, byte ptr [rax - 0x73]; cmp eax, 0x14ecc7; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000092a1f: sbb cl, byte ptr [rax - 0x73]; cmp eax, 0x154b39; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000090253: sbb cl, byte ptr [rax - 0x73]; cmp eax, 0x157305; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x00000000000837ef: sbb cl, byte ptr [rax - 0x73]; cmp eax, 0x163d29; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x000000000012c139: sbb cl, byte ptr [rax - 0x73]; cmp eax, 0xbc4df; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000064065: sbb cl, byte ptr [rax - 0x73]; or eax, 0x144db3; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000027658: sbb cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x000000000010cacc: sbb cl, byte ptr [rax - 0x7d]; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000108ad8: sbb cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000153d48: sbb cl, byte ptr [rcx + 0x430f41c8]; ret 0xf801; 
0x000000000009d833: sbb cl, byte ptr [rcx + rcx*4 - 0x30]; pop rbx; ret; 
0x000000000013b13f: sbb cl, byte ptr [rcx - 0x7d]; ret 0x4502; 
0x00000000000c66ca: sbb cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000030ded: sbb cl, byte ptr [rdi]; mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x00000000000b5fbf: sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000017c43d: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e5ad: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c02d: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017bb39: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c349: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183a6a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000018328a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000018367a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182e9a: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f10d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e8ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017bdbd: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e0cd: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000017c0fd: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017c419: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183039: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c4e9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ec2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e40d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017dbed: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017edcd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000017c29d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017ba8d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017be8d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000018352a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d4a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183e5a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c36d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017bb5d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017df2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017bbff: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017bf5d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017e063: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ed63: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e883: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018342b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183d5b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c1cd: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f0a3: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e3a3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000017dec3: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ebc3: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000018357b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182d9b: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017bc23: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001123c4: sbb cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009f7cf: sbb cl, ch; ret; 
0x000000000014d93e: sbb dh, bh; jmp qword ptr [rsi + 0x66]; 
0x00000000000ee834: sbb dh, bl; or eax, dword ptr [rax]; movzx r13d, r13b; movsxd rax, dword ptr [rdx + r13*4]; add rax, rdx; jmp rax; 
0x00000000001272aa: sbb dh, dh; ret 0x7508; 
0x000000000012eb7f: sbb dh, dh; ret 0x7520; 
0x000000000008425f: sbb dl, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000052f7e: sbb dword ptr [r8], eax; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x000000000017f868: sbb dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000ea9f7: sbb dword ptr [rax + 1], edi; ret; 
0x00000000000e1253: sbb dword ptr [rax + rdx], ebp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000047e9e: sbb dword ptr [rax - 0x75], ecx; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000036435: sbb dword ptr [rax - 0x75], ecx; add eax, 0x1b3f23; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000156fbe: sbb dword ptr [rax - 0x75], ecx; add ecx, dword ptr [rbx - 0x7483dbac]; or byte ptr [rcx], dil; ret 0x5375; 
0x0000000000145c14: sbb dword ptr [rax - 0x75], ecx; and al, 0x30; mov rdx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000147916: sbb dword ptr [rax - 0x75], ecx; cmp dword ptr [rax + 0x48000023], -0x77; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000000587b6: sbb dword ptr [rax - 0x7b], ecx; sal byte ptr [rbp + 0x74], 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000015a72c: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x000000000006d65c: sbb dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000d9b8c: sbb dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000017f7f1: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f869: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011e664: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000536d5: sbb dword ptr [rax], eax; lea rax, [rip + 0x193d22]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000052d76: sbb dword ptr [rax], eax; lea rdi, [rsp + 0x40]; xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000055632: sbb dword ptr [rax], eax; lea rsi, [rip - 0x3fb]; lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000559f5: sbb dword ptr [rax], eax; lea rsi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000536dc: sbb dword ptr [rax], eax; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000043f35: sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044a8d: sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000449b5: sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000048c05: sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000044e27: sbb dword ptr [rax], eax; mov eax, edx; ret; 
0x00000000000441c5: sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044195: sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048b55: sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000044dd4: sbb dword ptr [rax], eax; ret; 
0x0000000000055640: sbb dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000047387: sbb dword ptr [rax], eax; sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000047f54: sbb dword ptr [rax], eax; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x0000000000052f7f: sbb dword ptr [rax], eax; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x00000000001494a8: sbb dword ptr [rbp + 0x31], ecx; ret 0x314d; 
0x0000000000196956: sbb dword ptr [rbp + 0x48], edx; mov ebp, esp; call 0x15de30; pop rbp; mov qword ptr [rip + 0x522fc], 0; ret; 
0x000000000011b953: sbb dword ptr [rbp - 0x2708fff4], eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000147006: sbb dword ptr [rbx + 0x247401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000000fe6ea: sbb dword ptr [rbx - 0x1f3efe20], eax; add al, 0x89; ret 0xb60f; 
0x0000000000048b53: sbb dword ptr [rbx - 0x2708ffe7], esi; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000011af83: sbb dword ptr [rbx - 0x76b70010], esp; ret; 
0x000000000011e553: sbb dword ptr [rcx + 0xc], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000145f96: sbb dword ptr [rcx - 0x75], ecx; and al, 8; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000013d916: sbb dword ptr [rcx - 0x7d], eax; ret 0x4101; 
0x00000000000ec0c5: sbb dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000011dc27: sbb dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000113553: sbb dword ptr [rcx], ecx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x000000000015db46: sbb dword ptr [rcx], esi; shr bl, 0xd7; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x000000000015dc3e: sbb dword ptr [rcx], esi; shr bl, 0xdc; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x00000000000ce985: sbb dword ptr [rdi + 0x18], edi; mov rax, rbx; pop rbx; ret; 
0x0000000000064063: sbb dword ptr [rdi + 0x1a], esi; lea rcx, [rip + 0x144db3]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000012c753: sbb dword ptr [rdi + 0xb], esi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000010d753: sbb dword ptr [rdi + 0xd], esp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000b70c3: sbb dword ptr [rdi + rcx], edi; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b76ee: sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000e2753: sbb dword ptr [rdi], edx; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000111753: sbb dword ptr [rdi], esp; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000c9363: sbb dword ptr [rdx + 0x39480011], eax; ret; 
0x000000000011ec53: sbb dword ptr [rdx + 0xc], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000164463: sbb dword ptr [rdx + 5], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000114374: sbb dword ptr [rdx], edx; sub byte ptr [rdi - 0x11e2153], bh; mov eax, 0xa9; syscall; 
0x00000000001676c6: sbb dword ptr [rip + 0x14634900], eax; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000112564: sbb dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2953: sbb dword ptr [rip - 0x2708fff0], edx; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e1905: sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000009e3e3: sbb dword ptr [rsi + rcx + 0x440f4800], ebp; ret 0xfc3; 
0x0000000000167223: sbb dword ptr [rsi], ebx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000017a0ac: sbb eax, -1; ret; 
0x00000000000b4c0d: sbb eax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000010eb75: sbb eax, 0; ret; 
0x0000000000145e66: sbb eax, 0x18c48348; pop rbx; pop rbp; ret; 
0x000000000018cf75: sbb eax, 0x2bdc6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cefb: sbb eax, 0x2be40; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce6c: sbb eax, 0x2becf; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc61: sbb eax, 0x2c0da; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb2f: sbb eax, 0x2c20c; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca69: sbb eax, 0x2c2d2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9eb: sbb eax, 0x2c350; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c954: sbb eax, 0x2c3e7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c758: sbb eax, 0x2c5e3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c627: sbb eax, 0x2c714; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c526: sbb eax, 0x2c815; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b945: sbb eax, 0x2d2b6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8cb: sbb eax, 0x2d330; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b83c: sbb eax, 0x2d3bf; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b631: sbb eax, 0x2d5ca; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4ff: sbb eax, 0x2d6fc; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b439: sbb eax, 0x2d7c2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3bb: sbb eax, 0x2d840; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b324: sbb eax, 0x2d8d7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b128: sbb eax, 0x2dad3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff7: sbb eax, 0x2dc04; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee8: sbb eax, 0x2dd13; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000036d24: sbb eax, 0x3c058b48; sbb eax, dword ptr ss:[rax]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000016b385: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016b380: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000111aab: sbb eax, 0x48000001; mov edx, esi; xor esi, esi; syscall; 
0x00000000000bae5f: sbb eax, 0x48000134; cmove eax, edx; ret; 
0x0000000000114bb7: sbb eax, 0x48000d32; add esp, 8; ret; 
0x000000000010512f: sbb eax, 0x48000e52; lea esi, [rip - 0x2bda]; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dbaff: sbb eax, 0x480010ac; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000016d4f3: sbb eax, 0x4c208; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d195: sbb eax, 0x4c566; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d340: sbb eax, 0x4c5fb; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d015: sbb eax, 0x4c6e6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d0d8: sbb eax, 0x4c863; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce95: sbb eax, 0x4c866; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf58: sbb eax, 0x4c9e3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd15: sbb eax, 0x4c9e6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd8: sbb eax, 0x4cb63; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb95: sbb eax, 0x4cb66; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc59: sbb eax, 0x4cce2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca15: sbb eax, 0x4cce6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad8: sbb eax, 0x4ce63; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c895: sbb eax, 0x4ce66; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c958: sbb eax, 0x4cfe3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c715: sbb eax, 0x4cfe6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d8: sbb eax, 0x4d163; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c595: sbb eax, 0x4d166; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c658: sbb eax, 0x4d2e3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c415: sbb eax, 0x4d2e6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d8: sbb eax, 0x4d463; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c295: sbb eax, 0x4d466; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c358: sbb eax, 0x4d5e3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c115: sbb eax, 0x4d5e6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d8: sbb eax, 0x4d763; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf95: sbb eax, 0x4d766; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c058: sbb eax, 0x4d8e3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be15: sbb eax, 0x4d8e6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed8: sbb eax, 0x4da63; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc95: sbb eax, 0x4da66; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb1c: sbb eax, 0x4dbdf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd58: sbb eax, 0x4dbe3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd8: sbb eax, 0x4dd63; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b91d: sbb eax, 0x4ddde; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba9b: sbb eax, 0x4dea0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b93f: sbb eax, 0x4dffc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b6049: sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x000000000016a9df: sbb eax, 0x4e81c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6b5: sbb eax, 0x4eb46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a84c: sbb eax, 0x4ebef; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a535: sbb eax, 0x4ecc6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f8: sbb eax, 0x4ee43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3b5: sbb eax, 0x4ee46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a478: sbb eax, 0x4efc3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a235: sbb eax, 0x4efc6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f8: sbb eax, 0x4f143; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0b5: sbb eax, 0x4f146; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a179: sbb eax, 0x4f2c2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f35: sbb eax, 0x4f2c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff8: sbb eax, 0x4f443; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169db5: sbb eax, 0x4f446; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e78: sbb eax, 0x4f5c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c35: sbb eax, 0x4f5c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf8: sbb eax, 0x4f743; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ab5: sbb eax, 0x4f746; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b78: sbb eax, 0x4f8c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169935: sbb eax, 0x4f8c6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f8: sbb eax, 0x4fa43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697b5: sbb eax, 0x4fa46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169878: sbb eax, 0x4fbc3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169635: sbb eax, 0x4fbc6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f8: sbb eax, 0x4fd43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694b5: sbb eax, 0x4fd46; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169578: sbb eax, 0x4fec3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169335: sbb eax, 0x4fec6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f8: sbb eax, 0x50043; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691b5: sbb eax, 0x50046; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016903c: sbb eax, 0x501bf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169278: sbb eax, 0x501c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168de6: sbb eax, 0x50255; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168d29: sbb eax, 0x50312; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f8: sbb eax, 0x50343; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e5c: sbb eax, 0x5039f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c3e: sbb eax, 0x503fd; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fbb: sbb eax, 0x50480; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b73: sbb eax, 0x504c8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e49: sbb eax, 0x505f2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167b52: sbb eax, 0x514e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167ab4: sbb eax, 0x51587; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167a02: sbb eax, 0x51639; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167964: sbb eax, 0x516d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001678b2: sbb eax, 0x51789; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167814: sbb eax, 0x51827; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167762: sbb eax, 0x518d9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001676c4: sbb eax, 0x51977; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167612: sbb eax, 0x51a29; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167574: sbb eax, 0x51ac7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001674c2: sbb eax, 0x51b79; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167424: sbb eax, 0x51c17; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167372: sbb eax, 0x51cc9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001672d4: sbb eax, 0x51d67; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167222: sbb eax, 0x51e19; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167189: sbb eax, 0x51eb2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001670d2: sbb eax, 0x51f69; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000167034: sbb eax, 0x52007; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166f82: sbb eax, 0x520b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ee4: sbb eax, 0x52157; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166e32: sbb eax, 0x52209; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166d94: sbb eax, 0x522a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166ce2: sbb eax, 0x52359; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166c44: sbb eax, 0x523f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166b92: sbb eax, 0x524a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166af4: sbb eax, 0x52547; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166a42: sbb eax, 0x525f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001669a4: sbb eax, 0x52697; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001668f2: sbb eax, 0x52749; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166854: sbb eax, 0x527e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001667a8: sbb eax, 0x52893; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001666b7: sbb eax, 0x52984; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001665f8: sbb eax, 0x52a43; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016658e: sbb eax, 0x52aad; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016649f: sbb eax, 0x52b9c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166265: sbb eax, 0x52c16; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663da: sbb eax, 0x52c61; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016618b: sbb eax, 0x52cf0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165182: sbb eax, 0x53cf9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001650e4: sbb eax, 0x53d97; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000165032: sbb eax, 0x53e49; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164f94: sbb eax, 0x53ee7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ee2: sbb eax, 0x53f99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164e44: sbb eax, 0x54037; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164d92: sbb eax, 0x540e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164cf4: sbb eax, 0x54187; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164c42: sbb eax, 0x54239; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164ba4: sbb eax, 0x542d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164af2: sbb eax, 0x54389; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164a54: sbb eax, 0x54427; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001649a2: sbb eax, 0x544d9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164904: sbb eax, 0x54577; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164852: sbb eax, 0x54629; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b9: sbb eax, 0x546c2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164702: sbb eax, 0x54779; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164664: sbb eax, 0x54817; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001645b2: sbb eax, 0x548c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164514: sbb eax, 0x54967; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164462: sbb eax, 0x54a19; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001643c4: sbb eax, 0x54ab7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164312: sbb eax, 0x54b69; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164274: sbb eax, 0x54c07; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001641c2: sbb eax, 0x54cb9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164124: sbb eax, 0x54d57; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000164072: sbb eax, 0x54e09; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163fd4: sbb eax, 0x54ea7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163f22: sbb eax, 0x54f59; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163e84: sbb eax, 0x54ff7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163dd8: sbb eax, 0x550a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce7: sbb eax, 0x55194; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c28: sbb eax, 0x55253; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bbe: sbb eax, 0x552bd; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163acf: sbb eax, 0x553ac; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a0a: sbb eax, 0x55471; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b77ad: sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x00000000001672d6: sbb eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000b9150: sbb eax, 0x634b000f; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000151a1f: sbb eax, 0x64000982; mov qword ptr [rbx], rax; lea rax, [rip + 0x97f92]; pop rbx; mov dword ptr [rip + 0x981e7], 2; ret; 
0x00000000000dbaf4: sbb eax, 0x64058b48; call 0xffffffff8d55bb0e; cmp eax, 0x10ac1d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001477ef: sbb eax, 0x66fffe7a; nop word ptr cs:[rax + rax]; nop; mov eax, 2; ret; 
0x00000000000375f2: sbb eax, 0x6e058b48; sub eax, 0x8d48001b; cmp eax, 0x1af35f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011dabd: sbb eax, 0x78c48348; ret; 
0x0000000000074b4d: sbb eax, 0x83480000; ret 0x4817; 
0x00000000001161e4: sbb eax, 0x8548000d; push qword ptr [rbp + 0xc]; mov eax, 1; ret; 
0x000000000004ab4a: sbb eax, 0x894c0000; ret 0x8948; 
0x000000000015ca5f: sbb eax, 0x89fffb02; ret; 
0x00000000001840bf: sbb eax, 0x8b000154; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000360c1: sbb eax, 0x9f058b48; sbb eax, dword ptr [rax]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000fa0ba: sbb eax, 0xb2979; movzx esi, sil; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x00000000000f93d4: sbb eax, 0xb347b; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000185d42: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000001203b2: sbb eax, 0xc3fa9; pop rbx; ret; 
0x000000000012039c: sbb eax, 0xc3fbf; pop rbx; ret; 
0x000000000008482c: sbb eax, 0xc7480016; ret 0xffff; 
0x0000000000042164: sbb eax, 0xc764001a; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000181782: sbb eax, 0xcfbc0ff3; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000037588: sbb eax, 0xd0058b48; sub eax, 0x8d48001b; cmp eax, 0x1af3c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008fb66: sbb eax, 0xe5ebdf74; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000b991b: sbb eax, 0xf1614; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9197: sbb eax, 0xf1d98; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b916e: sbb eax, 0xf1dc1; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b914e: sbb eax, 0xf1de1; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9125: sbb eax, 0xf1e0a; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9100: sbb eax, 0xf1e2f; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90e2: sbb eax, 0xf1e4d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9062: sbb eax, 0xf1e4d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9047: sbb eax, 0xf1e68; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b90c5: sbb eax, 0xf1e6a; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9095: sbb eax, 0xf1e9a; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b9012: sbb eax, 0xf1e9d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fe6: sbb eax, 0xf1ec9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fd0: sbb eax, 0xf1edf; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8fae: sbb eax, 0xf1f01; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f89: sbb eax, 0xf1f26; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f6c: sbb eax, 0xf1f43; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8f05: sbb eax, 0xf1faa; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b86c7: sbb eax, 0xf2768; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8692: sbb eax, 0xf279d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8666: sbb eax, 0xf27c9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8650: sbb eax, 0xf27df; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b862e: sbb eax, 0xf2801; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8609: sbb eax, 0xf2826; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b85ec: sbb eax, 0xf2843; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b8594: sbb eax, 0xf289b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7edb: sbb eax, 0xf2e80; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7df0: sbb eax, 0xf2ffb; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7ddb: sbb eax, 0xf3010; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7dbc: sbb eax, 0xf302f; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7307: sbb eax, 0xf3a54; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72de: sbb eax, 0xf3a7d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b72be: sbb eax, 0xf3a9d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7295: sbb eax, 0xf3ac6; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7270: sbb eax, 0xf3aeb; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7252: sbb eax, 0xf3b09; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b71d2: sbb eax, 0xf3b09; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7235: sbb eax, 0xf3b26; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7205: sbb eax, 0xf3b56; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70f0: sbb eax, 0xf3beb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70c2: sbb eax, 0xf3c19; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7099: sbb eax, 0xf3c42; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6a17: sbb eax, 0xf4238; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69e2: sbb eax, 0xf426d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69b6: sbb eax, 0xf4299; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b69a0: sbb eax, 0xf42af; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b697e: sbb eax, 0xf42d1; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b6959: sbb eax, 0xf42f6; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b693c: sbb eax, 0xf4313; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b68e4: sbb eax, 0xf436b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b66bb: sbb eax, 0xf44c0; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65d0: sbb eax, 0xf463b; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b65bb: sbb eax, 0xf4650; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b659c: sbb eax, 0xf466f; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c57: sbb eax, 0xf4f24; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c2e: sbb eax, 0xf4f4d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5c0e: sbb eax, 0xf4f6d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5be5: sbb eax, 0xf4f96; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5bc0: sbb eax, 0xf4fbb; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5ba2: sbb eax, 0xf4fd9; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b22: sbb eax, 0xf4fd9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b85: sbb eax, 0xf4ff6; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b55: sbb eax, 0xf5026; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a50: sbb eax, 0xf50ab; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a22: sbb eax, 0xf50d9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b59f9: sbb eax, 0xf5102; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5417: sbb eax, 0xf5664; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53e2: sbb eax, 0xf5699; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53b6: sbb eax, 0xf56c5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b53a0: sbb eax, 0xf56db; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b537e: sbb eax, 0xf56fd; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5359: sbb eax, 0xf5722; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b533c: sbb eax, 0xf573f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b52e4: sbb eax, 0xf5797; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000035560: sbb eax, 0xf8058b48; sbb r8, qword ptr [r8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ea140: sbb eax, 0xfff02ae9; jmp qword ptr [rsi + 0x2e]; 
0x000000000003619b: sbb eax, dword ptr [r8]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032363: sbb eax, dword ptr [r8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000017f611: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f689: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000117691: sbb eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000026ec5: sbb eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x00000000000360c7: sbb eax, dword ptr [rax]; lea rdi, [rbx + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000039508: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1ad38f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000394a8: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1ad3ef]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000375f8: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af35f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003758e: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af3c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003745c: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af4fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000373fb: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af55c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037323: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af5f4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000370cf: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af648]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000372cc: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af64b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f96: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af781]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003709d: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af7fa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f68: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af92f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d2a: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d03: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a21: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036af7: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afe20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a4a: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afe4d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036ab0: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1afe67]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000035566: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034b0d: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1c0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034a33: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1ce4]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000349c6: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1d51]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003492a: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034350: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b23c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034319: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b23fe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034132: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003235d: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b43ba]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f29: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b47ee]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031de7: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b4930]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031d0f: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b4a08]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c8d: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b4a8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a51: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b4cc6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a11: sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b4d06]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003396d: sbb eax, dword ptr [rax]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x0000000000027415: sbb eax, dword ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x00000000000339e5: sbb eax, dword ptr [rax]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003619c: sbb eax, dword ptr [rax]; mov rdi, r12; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000026b56: sbb eax, dword ptr [rax]; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000030cf5: sbb eax, dword ptr [rax]; ret; 
0x0000000000031a18: sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b5d: sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000034e8a: sbb eax, dword ptr [rax]; xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000759b2: sbb eax, dword ptr [rbx - 0x8d743]; call qword ptr [rax]; 
0x0000000000043214: sbb eax, dword ptr [rcx + 0xe2]; xor bl, 0xf; adc dword ptr [rdi], eax; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000bc686: sbb eax, dword ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0x11930; cmovne rax, rdx; ret; 
0x000000000011e811: sbb eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001674c4: sbb eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000003396c: sbb eax, dword ptr cs:[rax]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x0000000000036d29: sbb eax, dword ptr ss:[rax]; lea rdi, [rip + 0x1af9ed]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036d02: sbb eax, dword ptr ss:[rax]; lea rdi, [rip + 0x1afb94]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c004: sbb eax, eax; add rsp, 0x18; and eax, 0xc; pop rbx; pop rbp; ret; 
0x00000000001148bb: sbb eax, eax; and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000ecaa6: sbb eax, eax; and eax, 2; add eax, 8; ret; 
0x00000000000568ca: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000001827f7: sbb eax, eax; or eax, 1; ret; 
0x000000000013a918: sbb eax, eax; ret; 
0x000000000018ff35: sbb eax, eax; sbb eax, -1; ret; 
0x000000000013b084: sbb eax, ecx; out dx, al; add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000114653: sbb eax, edi; or al, 0; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000009c526: sbb ebp, ebx; nop dword ptr [rax]; mov rdi, qword ptr [rbx + 0x48]; call rax; 
0x0000000000114353: sbb ebx, edi; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115b53: sbb ebx, esp; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000083c7c: sbb ecx, dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000146355: sbb ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000012d844: sbb ecx, dword ptr [rbp - 0x77]; ret 0x3145; 
0x0000000000149811: sbb ecx, dword ptr [rcx - 0x77]; ret; 
0x00000000001422ef: sbb ecx, dword ptr [rdx]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ba5e5: sbb ecx, dword ptr [rdx]; sldt ecx; call 0xfec28fb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000011232c: sbb ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000ff734: sbb ecx, ebp; not dh; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000e4034: sbb ecx, ebp; test byte ptr [rbp + 0xf66fffb], 0x1f; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x00000000000e28e9: sbb edi, dword ptr [rcx]; ret; 
0x00000000000a2d22: sbb edi, dword ptr [rip - 0x8bf0000]; ret 0; 
0x000000000004421c: sbb edi, dword ptr [rsi + 8]; mov eax, 0x82; syscall; 
0x000000000014d68f: sbb edi, esi; jmp qword ptr [rsi + 0x66]; 
0x00000000000dff31: sbb edx, dword ptr [rcx - 0xc]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000058411: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000011608e: sbb esi, dword ptr [rbp + 0x9e80009]; ret; 
0x0000000000182234: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000009cdad: sbb esi, esi; or esp, 0x40000000; lea rax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x0000000000043a6c: sbb esp, dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000012bbe1: sbb esp, edi; or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000196cf9: sbb esp, esi; call 0x387cff; ret; 
0x00000000000e37de: sbb esp, esi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000055631: sbb qword ptr [r8], r8; lea rsi, [rip - 0x3fb]; lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000559f4: sbb qword ptr [r8], rax; lea rsi, [rsp + 0x24]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000058410: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000e37dd: sbb r12, r14; dec dword ptr [rax - 0x77]; ret; 
0x0000000000035565: sbb r8, qword ptr [r8]; lea rdi, [rip + 0x1b1331]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a17: sbb r8, qword ptr [r8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a57: sbb r8, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031f2f: sbb r8d, dword ptr [r8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000017a0ab: sbb rax, -1; ret; 
0x00000000000b4c0c: sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000031ded: sbb rax, qword ptr [r8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c93: sbb rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008a15e: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017d592: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183abe: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x0000000000168d25: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b6f: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166261: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166187: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000026c73: scasb al, byte ptr [rdi]; cmpsb byte ptr [rsi], byte ptr [rdi]; sbb byte ptr [rax], al; ret; 
0x00000000000f1de2: scasb al, byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000076916: scasb al, byte ptr [rdi]; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000013a462: scasb al, byte ptr [rdi]; out dx, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000183bbd: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000fc7df: scasd eax, dword ptr [rdi]; add rax, rdi; jmp rax; 
0x0000000000155b0c: scasd eax, dword ptr [rdi]; call 0x12f210; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000154a5d: scasd eax, dword ptr [rdi]; cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000148eed: scasd eax, dword ptr [rdi]; ret 0; 
0x00000000000ba972: scasd eax, dword ptr [rdi]; ret 0x518d; 
0x00000000000453d3: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000012a3e5: scasd eax, dword ptr [rdi]; ret 0xc083; 
0x00000000001905d3: scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000000420bf: scasd eax, dword ptr [rdi]; ret 0xd231; 
0x00000000000ba978: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000000ba986: scasd eax, dword ptr [rdi]; ret 0xe9e9; 
0x00000000000a6abe: scasd eax, dword ptr [rdi]; ret; 
0x0000000000088850: scasd eax, dword ptr [rdi]; ror byte ptr [rcx - 0x75], 1; adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ror dword ptr [rax + 0x29], cl; ret; 
0x00000000000b69a1: scasd eax, dword ptr [rdi]; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000120855: seta al; movzx eax, al; neg eax; ret; 
0x000000000010eb72: seta al; sbb eax, 0; ret; 
0x000000000012b7d0: setae al; ret; 
0x00000000000dbad4: setbe al; movzx eax, al; ret; 
0x0000000000121450: setbe al; ret; 
0x00000000000d2a8f: sete al; add eax, 0x16d; ret; 
0x00000000000639c2: sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000ff604: sete al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000052ff2: sete al; add rsp, 8; movzx eax, al; ret; 
0x00000000001446f8: sete al; add rsp, 8; ret; 
0x00000000000e374b: sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000154564: sete al; movzx eax, al; ret; 
0x00000000000352d5: sete al; ret; 
0x000000000012c3dc: sete al; sub eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000035a84: sete bpl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000035a85: sete ch; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043b72: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000015e81d: sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x0000000000043b71: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x00000000000cca01: setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cc9ca: setl al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cdae2: setl al; neg eax; cmp ecx, r8d; cmovg eax, edx; ret; 
0x000000000018972c: setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000010b6fb: setl al; ret; 
0x000000000011dd7c: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000eca81: setne al; add rsp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000014caaf: setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x000000000011dd52: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000011620f: setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000101c18: setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000154c89: setne al; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000148f3d: setne al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000639f4: setne al; movzx eax, al; neg eax; pop rbx; ret; 
0x00000000001019ed: setne al; movzx eax, al; neg eax; ret; 
0x0000000000044988: setne al; movzx eax, al; ret; 
0x0000000000087645: setne al; neg eax; ret; 
0x000000000008c198: setne al; ret; 
0x0000000000027404: setne bh; add rsp, 8; mov eax, edi; neg eax; ret; 
0x0000000000027403: setne dil; add rsp, 8; mov eax, edi; neg eax; ret; 
0x0000000000168d24: sfence; lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168b6e: sfence; lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166260: sfence; lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166186: sfence; lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008367d: sgdt [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000e8a6d: sgdt [rax]; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x6bf0a206], r8d; ret 0xb60f; 
0x000000000012befa: shl ah, cl; or eax, dword ptr [rax]; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x0000000000182574: shl byte ptr [rax + 0x48], 1; clc; ret; 
0x000000000018ab62: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186212: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018216b: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x000000000018aaf6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001861a6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000018212b: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x000000000008fb61: shl byte ptr [rbx + rax*4 + 0x7d], 0; sbb eax, 0xe5ebdf74; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000043231: shl byte ptr [rcx], 1; ror byte ptr [rcx + 0x66fc2444], 1; movd mm1, dword ptr [rsp - 4]; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x000000000014588d: shl byte ptr [rdx], 0; add byte ptr [rax - 0x77], cl; out dx, eax; add qword ptr [rbx + 0x22a8], 1; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000ba733: shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x00000000000b9b6f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x00000000000432a3: shl byte ptr [rsi + 0xf], 0x7e; ret 0xf8c1; 
0x0000000000043163: shl byte ptr [rsi + 0xf], 0x7e; ret 0xff25; 
0x000000000018e523: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000afc85: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000018c45b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018c472: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000435b8: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; and al, 0xc8; ret; 
0x00000000000439ae: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000b0037: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000b0026: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000aab98: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000018c351: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000011f634: shl byte ptr [rsi - 0x7d], 0xff; adc dh, byte ptr [rdi + 0xd]; movzx edi, di; lea rax, [rip + 0x8e57b]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000192d68: shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x00000000001148c1: shl byte ptr [rsi], 0x64; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000061d99: shl dword ptr [rax + 0x15], cl; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000012d2a7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x365db]; lea rdx, [rip + 0x3bb44]; cmovne rax, rdx; ret; 
0x000000000012d127: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x3677b]; lea rdx, [rip + 0x3bce4]; cmovne rax, rdx; ret; 
0x000000000012d1e7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x3908b]; lea rdx, [rip + 0x3e6f4]; cmovne rax, rdx; ret; 
0x000000000009e747: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc516b]; lea rdx, [rip + 0xca6d4]; cmovne rax, rdx; ret; 
0x000000000009e3f7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc549b]; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x000000000009e297: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc7feb]; lea rdx, [rip + 0xcd654]; cmovne rax, rdx; ret; 
0x0000000000121b19: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000011dcab: shl dword ptr [rcx + 0xc], 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000018e51b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000431f3: shl dword ptr [rsi + 0xf], 0x7e; ret 0xf9c1; 
0x0000000000044c6b: shl dword ptr [rsi + 0xf], 0xc6; rol byte ptr [rcx], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000b0022: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000b99cb: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000018c3d6: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c48d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000018c476: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018c45f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018af1b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018c3f1: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000aa5cc: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x00000000000aadb8: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xf188; 
0x000000000018c2b1: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000053628: shl eax, 0x1e; or eax, edx; ret; 
0x000000000011d90b: shl eax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x000000000004865a: shl eax, 0xa; mov dword ptr [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000013b5ba: shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x0000000000062759: shl eax, 8; and eax, 0x100; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000004490b: shl eax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000015e79c: shl eax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000044983: shl eax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000b033b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000013b485: shl ecx, 4; mov byte ptr [rax + 2], 0; shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x000000000005705c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056fe7: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056fb6: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000012f330: shl edi, 0x10; movzx eax, si; or eax, edi; bswap eax; ret; 
0x00000000000432e5: shl edi, 0x17; or edx, edi; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000012f317: shl edi, 0x18; and eax, 0xffffff; or eax, edi; bswap eax; ret; 
0x0000000000042f14: shl edi, 0x34; and rdx, rax; or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000012f34c: shl edi, 8; movzx eax, sil; or eax, edi; bswap eax; ret; 
0x0000000000047c66: shl edx, 0x20; or rax, rdx; ret; 
0x00000000000afe0a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000013b448: shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000013b4c3: shl edx, 4; xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000001493dd: shl edx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x000000000015e77c: shl edx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000015e75c: shl edx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000013b5ef: shl esi, 4; lea rax, [rdi + rsi + 8]; ret; 
0x00000000000585ba: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000005705b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056fe6: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056fb5: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011d90a: shl rax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x000000000004490a: shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000015e79b: shl rax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000044982: shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000b033a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000013b484: shl rcx, 4; mov byte ptr [rax + 2], 0; shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x0000000000042f13: shl rdi, 0x34; and rdx, rax; or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000047c65: shl rdx, 0x20; or rax, rdx; ret; 
0x00000000000afe09: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000013b4c2: shl rdx, 4; xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000001493dc: shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x000000000015e77b: shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000015e75b: shl rdx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000013b5ee: shl rsi, 4; lea rax, [rdi + rsi + 8]; ret; 
0x00000000000585b9: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057054: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056fe0: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000057053: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056fdf: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000013529a: shr al, 0; ret 0xfff4; 
0x0000000000129b03: shr al, 0x37; ret; 
0x0000000000158b17: shr al, 0x43; sbb al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000153fdf: shr al, 0x4b; adc ebp, ebp; dec dword ptr [rax - 0x2f]; call 0xffffffff895e0775; ret; 
0x000000000011142f: shr al, 0x4b; mov eax, 0x4389ffff; cmp al, 0x85; ror byte ptr [rdi], 0x88; ret; 
0x00000000001141a8: shr al, 0x62; mov al, 1; add byte ptr [rsi - 0x70], ah; mov eax, 0xa3; syscall; 
0x0000000000129acd: shr al, 0x6d; ret; 
0x0000000000046bb1: shr al, 0x79; in eax, 0xfd; dec dword ptr [rax - 0x77]; ret; 
0x00000000001569d4: shr al, 0x86; cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000115092: shr al, 0x98; add cl, dh; dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x000000000011faf9: shr al, 0xb1; outsb dx, byte ptr [rsi]; dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret; 
0x0000000000153e4f: shr al, 0xdb; adc ch, ch; dec dword ptr [rax - 0x2f]; call 0xffffffff895e05e5; ret; 
0x00000000001351b5: shr al, 0xe5; ret 0xfff4; 
0x000000000015509d: shr al, 0xfd; ret; 
0x000000000008d4dc: shr al, 1; or dword ptr [rax], eax; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x0000000000044751: shr al, cl; mov ecx, 0x66000eaa; nop dword ptr [rax + rax]; mov eax, 0x83; syscall; 
0x0000000000153fab: shr al, cl; pop rdi; mov dl, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x000000000012b746: shr ax, 0xe; and eax, 1; ret; 
0x000000000014d4a2: shr bl, 0x2d; nop dword ptr [rax]; mov rax, qword ptr [rbp + 8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x00000000000482ca: shr bl, 0xb3; mov eax, 0xffffffff; ret; 
0x000000000015db48: shr bl, 0xd7; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x000000000015dc40: shr bl, 0xdc; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c339]; call qword ptr [rax + 8]; 
0x00000000000a8c9f: shr byte ptr [rcx], 0xc8; ret; 
0x0000000000117b30: shr byte ptr [rcx], 1; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000d0acc: shr byte ptr [rcx], cl; ret 0x428d; 
0x0000000000030a00: shr byte ptr [rcx], cl; ret; 
0x00000000000bbcca: shr byte ptr [rdx + 1], cl; lea r9, [rsp + 0x20]; call rbx; 
0x000000000003758c: shr byte ptr [rip - 0x72b7ffe5], 1; cmp eax, 0x1af3c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014801b: shr ch, cl; dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; int1; shr ch, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000148024: shr ch, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000004c945: shr cl, 0x3f; fdivp st(7); dec dword ptr [rbp - 0x77]; ret 0x8949; 
0x00000000000c6040: shr cl, 0x4e; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000193e84: shr cl, 0x66; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000a46d1: shr cl, cl; ret 0xfffa; 
0x0000000000156442: shr dh, cl; in al, dx; jmp qword ptr [rsi + 0x2e]; 
0x000000000018e56e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000154439: shr dword ptr [rbp + 0x1f0ffffd], cl; add byte ptr [rax + 1], bh; ret; 
0x000000000005029b: shr dword ptr [rbp], 1; add byte ptr [rcx - 0x39], cl; ret 0xc001; 
0x0000000000038d89: shr dword ptr [rbx + 0x6ee9001a], cl; ret; 
0x00000000000ff2d6: shr dword ptr [rdx + 1], 1; push r8; xor r8d, r8d; call 0xfe830; add rsp, 0x18; ret; 
0x00000000000d8e51: shr dword ptr [rdx], cl; or eax, 0x48ce8900; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x000000000003396b: shr dword ptr [rsi], 1; sbb eax, dword ptr [rax]; mov byte ptr [rip + 0x1b2f28], dl; ret; 
0x000000000012f373: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012f382: shr eax, 0x18; ret; 
0x0000000000127b76: shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000127bb3: shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000042a9b: shr eax, 0x1f; ret; 
0x000000000011d8ad: shr eax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000048ab1: shr eax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x000000000005bd48: shr eax, 0x20; or rdx, rcx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000001905d6: shr eax, 0x38; ret; 
0x0000000000042d98: shr eax, 0x3f; ret; 
0x00000000000cba1b: shr eax, 0xbf; imul ecx, dword ptr [rax + rax], -0x17; pop rdx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000ba5e9: shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000ba679: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000011d8c8: shr eax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000ba61b: shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000012b747: shr eax, 0xe; and eax, 1; ret; 
0x000000000004548b: shr eax, 1; imul rax, rdi; lea r12, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000000ce06b: shr eax, 2; ret; 
0x000000000018aa23: shr eax, 2; vzeroupper; ret; 
0x000000000004738d: shr eax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000001966ec: shr eax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000013b5be: shr eax, 4; and eax, 0x7f; ret; 
0x000000000008a3e8: shr eax, 4; and eax, 1; mov edx, eax; mov eax, edx; ret; 
0x000000000008d2f2: shr eax, 4; and eax, 1; ret; 
0x000000000009328b: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x000000000008a4d8: shr eax, 5; and eax, 1; mov edx, eax; mov eax, edx; ret; 
0x000000000008d302: shr eax, 5; and eax, 1; ret; 
0x00000000000ba666: shr eax, 6; and eax, 0x3fffc00; ret; 
0x000000000015e77f: shr eax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000015e75f: shr eax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x00000000001211eb: shr eax, cl; and eax, 1; ret; 
0x000000000011e26d: shr eax, cl; and eax, 3; ret; 
0x0000000000148b81: shr eax, cl; mov dword ptr [rsi - 2], esp; jmp qword ptr [rsi + 0xf]; 
0x00000000000a6d79: shr ebx, 0xdf; nop dword ptr [rax]; ret; 
0x000000000015516e: shr ebx, 1; leave; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000000e7568: shr ebx, cl; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e7b0b: shr ebx, cl; or eax, 0x83489066; ret; 
0x000000000004865f: shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x0000000000127bed: shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000127c24: shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x0000000000097110: shr ecx, 0x5c; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000013b48d: shr ecx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x000000000012e067: shr ecx, 3; or al, 0xff; call qword ptr [rax - 0x18]; 
0x000000000015d3d1: shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000097f90: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000044877: shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000005716c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000570f1: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000570c0: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000012f36a: shr edi, 8; and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000127f07: shr edi, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000042a7c: shr edx, 0x1f; or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000155762: shr edx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001547b5: shr edx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x0000000000144e9a: shr edx, 3; add rax, rcx; jmp rax; 
0x000000000015e79f: shr edx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x000000000013b085: shr esi, 3; mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000005716b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000570f0: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000570bf: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011d8ac: shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000048ab0: shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x000000000005bd47: shr rax, 0x20; or rdx, rcx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000001905d5: shr rax, 0x38; ret; 
0x0000000000042d97: shr rax, 0x3f; ret; 
0x000000000011d8c7: shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000004548a: shr rax, 1; imul rax, rdi; lea r12, [rsi + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000000ce06a: shr rax, 2; ret; 
0x000000000018aa22: shr rax, 2; vzeroupper; ret; 
0x000000000004738c: shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000001966eb: shr rax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000013b5bd: shr rax, 4; and eax, 0x7f; ret; 
0x000000000009328a: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x000000000015e77e: shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000015e75e: shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000013b48c: shr rcx, 3; mov byte ptr [rax + 1], cl; pop rbx; ret; 
0x0000000000155761: shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x00000000001547b4: shr rdx, 0x20; mov qword ptr [rsp + 8], rdx; call qword ptr [rax + 8]; 
0x0000000000144e99: shr rdx, 3; add rax, rcx; jmp rax; 
0x000000000015e79e: shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000057164: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000570ea: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000057163: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000570e9: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000044c6c: shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044c5e: shufpd xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044d9e: shufpd xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044c63: shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044da3: shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044c6d: shufps xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044c5f: shufps xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044d9f: shufps xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001885b5: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000186b25: shufps xmm0, xmmword ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000044c64: shufps xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044da4: shufps xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000ba5e7: sldt ecx; call 0xfec28fb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000011d8b3: sldt word ptr [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000000fdaf2: stc; adc byte ptr [rdi + 0x12], dh; movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x00000000000cf873: stc; adc dword ptr [r8], r8d; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018fb5f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000e2a73: stc; adc edx, dword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000bb455: stc; add al, 0x48; cmovne eax, edx; ret; 
0x000000000002b1a8: stc; add al, 0x74; xor cl, byte ptr [rcx - 0x73]; add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000c720b: stc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000103e29: stc; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000003e8f8: stc; add cl, byte ptr [rdi]; test dh, ah; sub dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fc07], al; ret 0x29; 
0x0000000000127c9f: stc; add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000000148061: stc; add dword ptr [rbx + rcx + 0x48], esi; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000013b0b4: stc; add dword ptr [rdi], ecx; xchg eax, esi; ret 0x8341; 
0x000000000010b811: stc; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000003a7d9: stc; add ecx, dword ptr [rdi]; test dl, dl; and byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fe07], al; jmp qword ptr [rax]; 
0x0000000000166a43: stc; and eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000101873: stc; and eax, 0xd8f7000e; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000165183: stc; cmp al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000087f8c: stc; dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000008c7e6: stc; dec dword ptr [rax - 0x77]; fucomip st(0); sub byte ptr [rbx - 0x3fce0007], cl; pop rbx; ret; 
0x0000000000106a5a: stc; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000086a73: stc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000bd58b: stc; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000bfffd: stc; dec dword ptr [rcx - 0x39]; ret 0xc001; 
0x00000000000bd64d: stc; dec dword ptr [rcx - 0x39]; ret 0xfc01; 
0x00000000000c282d: stc; dec dword ptr [rcx - 0x39]; ret 0xff81; 
0x0000000000108de0: stc; dec dword ptr [rcx - 0x77]; ret 0x8545; 
0x0000000000109697: stc; dec dword ptr [rcx - 0x77]; ret 0x8948; 
0x00000000000e9a73: stc; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000101c13: stc; inc al; add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000132413: stc; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000008ac3f: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000008ffbf: stc; jmp qword ptr [rsi + 0x66]; 
0x000000000008a928: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000008ab1c: stc; jmp qword ptr [rsi - 0x70]; 
0x00000000000fe236: stc; jmp rcx; 
0x000000000018860f: stc; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001660b8: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000ff533: stc; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000001660b2: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000188607: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b57: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000001817af: stc; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001817cf: stc; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000044773: stc; neg byte ptr [rcx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011f873: stc; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a2701: stc; or al, 0x74; and ecx, dword ptr [rbp + 0x63490e78]; ret 0xf41; 
0x0000000000075ae2: stc; or al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x00000000000d333b: stc; or dl, byte ptr [rcx]; add byte ptr [rcx + 0x48d23102], cl; add esp, 8; mov rax, rdx; ret; 
0x0000000000077d7d: stc; or dword ptr [rdi], ecx; xchg byte ptr [rdi], cl; adc eax, 0x89490000; ret 0x3145; 
0x000000000009cfb1: stc; or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000010d873: stc; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001408d3: stc; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000571ad: stc; push qword ptr [rbp - 0x11]; mov rax, rdx; ret; 
0x000000000010ea73: stc; push rbx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013ff33: stc; push rcx; out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x0000000000067cd3: stc; sar ah, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000036d30: stc; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005f673: stc; sbb byte ptr [r8], r8b; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x00000000001211ea: stc; shr eax, cl; and eax, 1; ret; 
0x000000000012ec47: stc; std; call qword ptr [rax - 0x18]; 
0x00000000000eaa21: stc; sub eax, 0x47c6e875; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x0000000000044873: stc; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000114773: stc; test byte ptr [rax + rax], 0x64; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018d904: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000186b5f: stc; vzeroupper; ret; 
0x000000000011b3d3: stc; wait; int1; jmp qword ptr [rsi + 0xf]; 
0x000000000015a973: stc; xchg eax, esp; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000182877: stc; xlatb; ret 0xff2d; 
0x00000000001694b7: std; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012c65e: std; add al, byte ptr [rax]; add byte ptr [rax], al; mov edi, edx; syscall; 
0x00000000000e34d3: std; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000168c3f: std; add eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012e048: std; call qword ptr [rax - 0x18]; 
0x0000000000154aee: std; call qword ptr [rbp + 0x53]; 
0x00000000001544ce: std; call qword ptr [rbx + 0x48]; 
0x000000000015056e: std; call qword ptr [rbx - 0x42]; 
0x00000000000e3a15: std; dec dword ptr [rax - 0x77]; ret 0x1e9; 
0x00000000000551ad: std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000046bb5: std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000047afd: std; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000042c1d: std; fstp st(1); ret; 
0x000000000010bfc8: std; inc dword ptr [rbx - 0x39760036]; mov edi, edx; mov eax, 0x75; syscall; 
0x000000000010bff0: std; inc dword ptr [rbx - 0x39760036]; mov edi, edx; mov eax, 0x77; syscall; 
0x000000000008b362: std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000058df0: std; jmp qword ptr [rsi + 0x66]; 
0x000000000012ebe8: std; jmp qword ptr [rsi + 0xf]; 
0x000000000014ff8c: std; jmp qword ptr [rsi - 0x70]; 
0x00000000001885eb: std; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001658d3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001885e7: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b47: std; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000001658db: std; mov word ptr [rdi - 2], cx; ret; 
0x000000000017f1df: std; movabs byte ptr [0x82048b8a0c8b0001], al; sub eax, ecx; ret; 
0x000000000009e640: std; or al, 0; cmovne rax, rdx; ret; 
0x0000000000114074: std; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001446cf: std; or bh, ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b537f: std; push rsi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000ba078: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000015509f: std; ret; 
0x000000000004415c: std; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018e051: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000018df3a: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018d634: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3fa: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018db22: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000186b4b: std; vzeroupper; ret; 
0x0000000000058f43: std; xchg eax, ecx; mov edi, 0x8c0fffff; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000001821c9: std; xlatb; ret 0xc085; 
0x00000000001826b3: std; xlatb; ret 0xe883; 
0x00000000001821d1: std; xlatb; ret; 
0x0000000000185f44: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x00000000001820fe: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000001821c1: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000185c91: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000186ee6: std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x000000000018245c: std; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000169637: sti; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d0aa3: sti; add al, byte ptr [rcx + 1]; ret; 
0x0000000000107cbf: sti; add cl, byte ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000038fd2: sti; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000001553a4: sti; add dword ptr [rbp + 0x27], esi; mov rax, qword ptr [r12 + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x00000000001551f1: sti; add dword ptr [rbp + 0x72], esi; mov rax, qword ptr [r12 + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax]; 
0x0000000000107ce5: sti; add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x000000000012e6c0: sti; add eax, 0xf9834800; add al, 0x48; cmovne eax, edx; ret; 
0x000000000017a311: sti; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000015abef: sti; add ecx, dword ptr [rdi]; fmul dword ptr [rax - 0x75]; add eax, 0x8a955; call qword ptr [rax + 0x28]; 
0x00000000000f8a54: sti; add rax, rsi; jmp rax; 
0x000000000013f771: sti; and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xfb80; 
0x00000000000d1f3f: sti; dec dword ptr [rax + 0x39]; ret; 
0x00000000000e1828: sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000015d371: sti; fdivp st(7); jmp qword ptr [rsi + 0x2e]; 
0x0000000000037461: sti; hlt; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000076ce3: sti; jmp qword ptr [rsi + 0x66]; 
0x0000000000075d55: sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000074ddc: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000152ab7: sti; jmp qword ptr [rsi - 0x7d]; 
0x00000000000dde51: sti; jno 0xdde48; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000115e41: sti; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000165cb8: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000052ee8: sti; mov eax, 0x3e; mov edi, dword ptr [rdi + 0x10]; syscall; 
0x0000000000165cb2: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001183f8: sti; mov rdi, qword ptr [rdi]; call 0x25318; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000155f0b: sti; mov rdi, rax; call 0x25318; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000011d92e: sti; mov rdi, rcx; sub rsp, 8; call rsi; 
0x00000000000bae59: sti; or al, 0; lea rax, [rip + 0x1341d]; cmove rax, rdx; ret; 
0x00000000001142a4: sti; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011431c: sti; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000032c6e: sti; or al, 0xf; xchg dword ptr [rdx + 0x4b000000], ebp; movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x00000000000eca39: sti; or dh, byte ptr [rsi + rdi + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000012576e: sti; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x00000000000437a8: sti; push rax; ret; 
0x000000000005005a: sti; ret 0xffbf; 
0x00000000001151d4: sti; ret 9; 
0x0000000000036d09: sti; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e83fb: sti; sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x000000000004427c: sti; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000824f0: sti; sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x000000000018d626: sti; vmovups zmmword ptr [r9 - 0x100], zmm12; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d8f6: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018dc1d: sti; vmovups zmmword ptr [rsi - 0x100], zmm2; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000143031: sti; xchg eax, esi; hlt; jmp qword ptr [rsi + 0x66]; 
0x00000000000e1335: stosb byte ptr [rdi], al; add al, 0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000032c72: stosb byte ptr [rdi], al; add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000009bdb2: stosb byte ptr [rdi], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; mov rdx, rbx; mov rsi, r12; call rax; 
0x000000000009fd40: stosb byte ptr [rdi], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000012964a: stosb byte ptr [rdi], al; add dword ptr [rax], eax; add al, ch; lodsd eax, dword ptr [rsi]; ret; 
0x00000000000ee83f: stosb byte ptr [rdi], al; add rax, rdx; jmp rax; 
0x000000000007f002: stosb byte ptr [rdi], al; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000015a54f: stosb byte ptr [rdi], al; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x0000000000152c6a: stosb byte ptr [rdi], al; in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x0000000000113e62: stosb byte ptr [rdi], al; mov bl, 1; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xaa; syscall; 
0x00000000000ba464: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000009e409: stosb byte ptr [rdi], al; or al, 0; cmovne rax, rdx; ret; 
0x000000000009e6e2: stosb byte ptr [rdi], al; push -8; lcall [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001547f1: stosb byte ptr [rdi], al; std; jmp qword ptr [rsi + 0x66]; 
0x000000000018a14a: stosb byte ptr [rdi], al; vzeroupper; ret; 
0x00000000000aac51: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x000000000002a029: stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret; 
0x000000000008c989: stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001126b2: stosd dword ptr [rdi], eax; call 0x12f210; nop dword ptr [rax + rax]; mov eax, 0x22; syscall; 
0x00000000000b0504: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000ce174: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000005eeb8: stosd dword ptr [rdi], eax; in al, 0xff; jmp qword ptr [rsi + 0x44]; 
0x000000000014a796: stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rsi + 0xf]; 
0x00000000001478f3: stosd dword ptr [rdi], eax; mov al, 0x23; add byte ptr [rax], al; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000000f3cdb: stosd dword ptr [rdi], eax; nop; add byte ptr [rax], al; add byte ptr [rbx - 0x16f7dbb4], cl; ret 0xfffe; 
0x0000000000124859: stosd dword ptr [rdi], eax; or dh, al; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000097f95: stosd dword ptr [rdi], eax; pop rbx; ret; 
0x00000000000b5a51: stosd dword ptr [rdi], eax; push rax; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000004487c: stosd dword ptr [rdi], eax; ret; 
0x000000000015460f: stosd dword ptr [rdi], eax; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000152ab6: stosd dword ptr [rdi], eax; sti; jmp qword ptr [rsi - 0x7d]; 
0x0000000000097f94: stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000004487b: stosq qword ptr [rdi], rax; ret; 
0x00000000000b5b87: str word ptr [r11 + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5b24: str word ptr [r9 + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000c500a: str word ptr [rax + 0x21]; ret 0x8948; 
0x00000000000ba5b7: str word ptr [rax + 0x63]; add al, 0xbe; add rax, rsi; jmp rax; 
0x00000000000c50da: str word ptr [rax - 0x77]; ret 0xc148; 
0x0000000000042e5c: str word ptr [rax - 0x7b]; ret 0x574; 
0x00000000000b5b58: str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b52e7: str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b7edd: str word ptr cs:[rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000011eea7: sub al, 0; add byte ptr [rax], al; syscall; 
0x0000000000151549: sub al, 0; pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000e1254: sub al, 0x10; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000004639f: sub al, 0x2e; call rax; 
0x00000000000e6dce: sub al, 0x34; in eax, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x00000000000cd9a2: sub al, 0x3b; sub al, 0x75; pop rax; ret; 
0x000000000015af7f: sub al, 0x48; add esp, 0x18; ret; 
0x00000000000dfa47: sub al, 0x48; lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000010bb4e: sub al, 0x48; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000034130: sub al, 0x62; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b25e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001895d2: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000000cd9a5: sub al, 0x75; pop rax; ret; 
0x0000000000189fb3: sub al, 0x83; ret 0x8104; 
0x00000000000f081b: sub al, 0x89; call 0x30529166; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009100b: sub al, 0x89; ret 0x8948; 
0x000000000010151a: sub al, 0x89; ret 0xace9; 
0x00000000001548e0: sub al, 0xa9; std; jmp qword ptr [rsi + 0x66]; 
0x000000000018baa3: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000f9bb0: sub al, 0xb; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000010bb9b: sub al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ea9f3: sub al, 0xc6; or byte ptr [r9], r11b; mov eax, 1; ret; 
0x00000000000d8e97: sub al, 0xd; add byte ptr [rcx + 0x146348c2], cl; xchg eax, edi; add rdx, rdi; jmp rdx; 
0x000000000015e622: sub al, 0xeb; int 0xe8; out 0xb, al; std; jmp qword ptr [rsi + 0xf]; 
0x00000000001022f3: sub al, 0xf3; jmp qword ptr [rsi + 0x2e]; 
0x00000000000826ce: sub al, 0xfa; dec dword ptr [rax - 0x77]; ret; 
0x0000000000082c34: sub al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x000000000009cdb9: sub al, 1; add byte ptr [rax - 0x73], cl; adc eax, 0xf16fd; cmovne rax, rdx; ret; 
0x00000000000bca36: sub al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000affa0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000011e8a1: sub al, 1; add byte ptr [rax], al; syscall; 
0x000000000016618d: sub al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000013cd2f: sub al, 7; add cl, ch; leave; mov edi, gs; jmp qword ptr [rsi + 0xf]; 
0x00000000000a3fd7: sub al, byte ptr [rax]; add bh, dh; ret; 
0x000000000004210a: sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, rcx; ret; 
0x000000000011eb1e: sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000ef281: sub al, byte ptr [rbx - 0x7cb7fe3f]; ret 0x8304; 
0x0000000000166590: sub al, byte ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000d5668: sub al, ch; ret 0xf4fa; 
0x0000000000182a15: sub al, ch; std; xlatb; ret; 
0x000000000013c9fe: sub bh, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000001121a7: sub bh, byte ptr [rax + 0x118]; syscall; 
0x00000000000e278d: sub bh, byte ptr [rax + 0x69]; syscall; 
0x00000000000e281d: sub bh, byte ptr [rax + 0x6a]; syscall; 
0x00000000001139bd: sub bh, byte ptr [rax + 0x71]; syscall; 
0x0000000000113a6d: sub bh, byte ptr [rax + 0x72]; syscall; 
0x00000000000ddabd: sub bh, byte ptr [rax + 0x74]; syscall; 
0x00000000000e2aad: sub bh, byte ptr [rax + 0x75]; syscall; 
0x00000000000e2b4d: sub bh, byte ptr [rax + 0x77]; syscall; 
0x0000000000132812: sub bh, ch; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014c7e7: sub bh, dh; jmp qword ptr [rsi + 0xf]; 
0x0000000000082e5f: sub bh, dl; jmp qword ptr [rsi + 0x2e]; 
0x00000000001376da: sub bl, ah; out dx, al; dec dword ptr [rax - 0x77]; add eax, 0xb2f3b; add rsp, 8; ret; 
0x00000000001514e2: sub bl, ch; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cd996: sub byte ptr [r11], r15b; sub byte ptr [rbp + 0x63], r14b; ret; 
0x000000000008b5bb: sub byte ptr [r13 + 0x4c], r11b; mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000014a5e6: sub byte ptr [r13 + rcx*4 + 0x42], r9b; or byte ptr [rcx - 0x77], al; ret 0x8948; 
0x00000000000b85ed: sub byte ptr [r15], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000155ea1: sub byte ptr [r8 + r15*4], r8b; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000010ed0b: sub byte ptr [r8 - 0x75], cl; jnp 0x10ed29; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x0000000000047e98: sub byte ptr [r8 - 0x7b], cl; sal byte ptr [rcx + rbx + 0x48], 0x8b; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000155c71: sub byte ptr [r9], r15b; sal dword ptr [rbx + 9], 1; xor eax, eax; ret; 
0x0000000000085891: sub byte ptr [rax + 0x3b], cl; xor byte ptr [rbx + 0x10], sil; lea rsi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000010b72f: sub byte ptr [rax + 0x63], cl; ret 0xc283; 
0x00000000000eb170: sub byte ptr [rax + 0x63], cl; ret; 
0x0000000000155eb2: sub byte ptr [rax + 1], bh; ret; 
0x00000000001063a3: sub byte ptr [rax + 5], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000014e81f: sub byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000155ea2: sub byte ptr [rax + rdi*4], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000009d699: sub byte ptr [rax - 0x75], cl; add eax, 0x14ccd7; mov edi, dword ptr [rip + 0x14a07d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f0752: sub byte ptr [rax - 0x75], cl; cmp eax, dword ptr [rcx]; ret 0xc083; 
0x000000000010ed0c: sub byte ptr [rax - 0x75], cl; jnp 0x10ed29; mov rsi, r14; mov edx, dword ptr [rdx + rax]; call qword ptr [rbx + 0x40]; 
0x0000000000152374: sub byte ptr [rax - 0x75], cl; or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 1; call qword ptr [rax + 0x18]; 
0x0000000000152164: sub byte ptr [rax - 0x75], cl; or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 3; call qword ptr [rax + 0x18]; 
0x00000000001521d4: sub byte ptr [rax - 0x75], cl; or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 4; call qword ptr [rax + 0x18]; 
0x0000000000152244: sub byte ptr [rax - 0x75], cl; or byte ptr [r15], r9b; adc dword ptr [rsp + 0x18], eax; mov dword ptr [rsp + 0x30], 5; call qword ptr [rax + 0x18]; 
0x000000000014ff99: sub byte ptr [rax - 0x75], dl; and al, 0x28; push rax; call 0x14fcb0; add rsp, 0x28; ret; 
0x000000000008a206: sub byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000099cd4: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000116bbe: sub byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000010ef3f: sub byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000000818b4: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000004becb: sub byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000047b01: sub byte ptr [rax - 0x77], cl; ret; 
0x000000000008a621: sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x30], al; ret; 
0x000000000008a620: sub byte ptr [rax - 0x78], r8b; cmp byte ptr [rcx + rcx*4 - 0x30], al; ret; 
0x0000000000047e99: sub byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rbx + 0x48], 0x8b; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a2261], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000cec6f: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x58], rax; xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x000000000010c6be: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x98], rax; xor eax, eax; mov eax, 0x14c; syscall; 
0x0000000000087dea: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000014cb23: sub byte ptr [rax], al; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000111d54: sub byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000126225: sub byte ptr [rax], al; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000e1604: sub byte ptr [rax], dl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000008b5bc: sub byte ptr [rbp + 0x4c], bl; mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x00000000000cd99a: sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000cd999: sub byte ptr [rbp + 0x63], r14b; ret; 
0x000000000014a5e7: sub byte ptr [rbp + rcx*4 + 0x42], cl; or byte ptr [rcx - 0x77], al; ret 0x8948; 
0x0000000000085616: sub byte ptr [rbx + 0x17], dh; lea rax, [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x0000000000085615: sub byte ptr [rbx + 0x17], sil; lea rax, [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov eax, edi; mov dword ptr [rcx], edi; ret; 
0x0000000000026a20: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000052907: sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000014805f: sub byte ptr [rbx + 0xb7401f9], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008575f: sub byte ptr [rbx + 0xe], dh; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000008575e: sub byte ptr [rbx + 0xe], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000015e1f3: sub byte ptr [rbx + rcx*4 + 0xa], al; mov rdx, r14; add r9, qword ptr [rsp + 8]; call rax; 
0x000000000015d953: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x000000000015d952: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x000000000008c7ec: sub byte ptr [rbx - 0x3fce0007], cl; pop rbx; ret; 
0x00000000000cd997: sub byte ptr [rbx], bh; sub byte ptr [rbp + 0x63], r14b; ret; 
0x0000000000114149: sub byte ptr [rcx + 0x548b48c5], cl; and al, 0x20; mov rsi, qword ptr [rsp + 0x18]; mov eax, 0x10e; mov edi, dword ptr [rsp + 0x14]; syscall; 
0x00000000000965e4: sub byte ptr [rcx + rcx*4 + 0x54], cl; and al, 0x20; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], r11; call rcx; 
0x0000000000155f76: sub byte ptr [rcx + rcx*4 + 0x63], cl; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000085d4c: sub byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000e36e6: sub byte ptr [rcx + rdx*2 + 0x31], dh; ror byte ptr [rax - 0x7f], 0xfa; push rsp; push rbx; setne al; ret; 
0x00000000000e15e9: sub byte ptr [rcx - 0x17f3dbbc], cl; cmp eax, 0x8b0004a8; and al, 0xc; add rsp, 0x18; ret; 
0x0000000000043c76: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x0000000000118be6: sub byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x000000000013d65b: sub byte ptr [rcx - 0x7d], al; ret; 
0x0000000000056197: sub byte ptr [rcx], al; add byte ptr [rax], al; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000113644: sub byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x0000000000155c72: sub byte ptr [rcx], bh; sal dword ptr [rbx + 9], 1; xor eax, eax; ret; 
0x000000000005fe47: sub byte ptr [rcx], ch; ret 0x8341; 
0x0000000000106395: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000112ade: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, ecx; syscall; 
0x0000000000114376: sub byte ptr [rdi - 0x11e2153], bh; mov eax, 0xa9; syscall; 
0x0000000000148004: sub byte ptr [rdi - 0x17], dh; mov qword ptr [rdx + 0x20], rsi; ret; 
0x0000000000033971: sub byte ptr [rdi], ch; sbb eax, dword ptr [rax]; ret; 
0x00000000000b8596: sub byte ptr [rdi], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000012f417: sub byte ptr [rdi], cl; mov esi, 0xf303c07; test byte ptr [rbp - 0x77000000], ah; ret 0xe283; 
0x00000000001069d3: sub byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x00000000001667aa: sub byte ptr [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000034f54: sub byte ptr [rip - 0x76b7fff2], ah; ret; 
0x000000000007d0e4: sub byte ptr [rsi + 0x16], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010353b: sub byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; add dword ptr [rcx + rcx*4 + 0x78], ecx; and byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000151eb7: sub byte ptr [rsi + rax + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000000b7edc: sub byte ptr [rsi], 0xf; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001016ce: sub byte ptr [rsi], cl; add byte ptr [rbx + 0xe66110d], cl; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x00000000000b860a: sub byte ptr es:[rdi], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001328c7: sub ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012132c: sub cl, byte ptr [rax + rax]; mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000047595: sub cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4901; 
0x00000000000eff5f: sub cl, byte ptr [rax - 0x7d]; ret; 
0x00000000001406a2: sub cl, byte ptr [rcx - 0x11]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e5565: sub cl, byte ptr [rdi]; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xeb02; 
0x00000000000d8e52: sub cl, byte ptr [rip + 0x48ce8900]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; jmp rax; 
0x0000000000074cf4: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000060f4d: sub dh, al; add byte ptr [rip - 0x105617], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000062395: sub dh, al; add byte ptr [rip - 0x30917], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000155d45: sub dh, byte ptr [rcx]; sar byte ptr [rdx - 1], 0x48; mov esi, ebx; mov rdi, rbp; call rcx; 
0x000000000012f3d2: sub dh, byte ptr [rip + 0x4858fff3]; mov eax, ebx; pop rdx; pop rbx; ret; 
0x00000000000e1447: sub dl, byte ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e13e4: sub dl, byte ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000e1446: sub dl, byte ptr es:[rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000145896: sub dword ptr [rax + 0x1000022], 0x48; mov esi, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000011264e: sub dword ptr [rax + 0x101], edi; syscall; 
0x000000000013b3d3: sub dword ptr [rax + 0x63], ecx; ret 0x148; 
0x00000000000c8314: sub dword ptr [rax + 0x63], ecx; ret 0x8d48; 
0x000000000010b79e: sub dword ptr [rax + 0x63], ecx; ret 0xc283; 
0x00000000000e2a43: sub dword ptr [rax + rdx], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000194412: sub dword ptr [rax - 0x77], ecx; add al, 0x24; call 0x194c20; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000013a496: sub dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000011f111: sub dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000003e8fd: sub dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fc07], al; ret 0x29; 
0x00000000000d056f: sub dword ptr [rax], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000d079a: sub dword ptr [rax], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e1524: sub dword ptr [rax], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e14e4: sub dword ptr [rax], edx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000112e43: sub dword ptr [rax], edx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ea43: sub dword ptr [rbp + rcx], edx; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000147036: sub dword ptr [rbx + 0x147401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000011e343: sub dword ptr [rbx + 0xc], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010cb43: sub dword ptr [rbx + 0xd], esi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000175f93: sub dword ptr [rbx], eax; add byte ptr [rax], al; ret; 
0x00000000000fa0bc: sub dword ptr [rbx], ecx; add byte ptr [rax + 0xf], al; mov dh, 0xf6; movsxd rax, dword ptr [rbx + rsi*4]; add rax, rbx; jmp rax; 
0x0000000000083506: sub dword ptr [rcx - 0x75], ecx; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000080164: sub dword ptr [rdi + 0x29], esi; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000ba241: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000080166: sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000bf565: sub dword ptr [rdi], ecx; xchg eax, ebp; ret 0xd284; 
0x0000000000043702: sub dword ptr [rdi], esp; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000018d0f9: sub dword ptr [rdx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000167613: sub dword ptr [rdx], ebx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001666b9: sub dword ptr [rip + 0x14634900], eax; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000151873: sub dword ptr [rip - 0x72b7fff7], esp; adc eax, 0x983c2; mov qword ptr fs:[rax], rdx; ret; 
0x000000000018c286: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x0000000000164853: sub dword ptr [rsi + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000012a398: sub dword ptr [rsi + rcx + 0x31], esi; fild dword ptr [rcx - 0xa]; and al, 0x18; add dword ptr [rdi], ecx; xchg eax, ebp; ret; 
0x00000000001483e3: sub dword ptr [rsi - 2], ebp; jmp qword ptr [rsi + 0xf]; 
0x0000000000147f59: sub dword ptr [rsp + 0x10], eax; call qword ptr [rax + 8]; 
0x00000000001503fd: sub dword ptr [rsp + 0x20], eax; call qword ptr [rax + 0x28]; 
0x000000000011da96: sub dword ptr [rsp + 0x20], eax; mov qword ptr [rsp + 0x30], r8; mov qword ptr [rsp + 0x38], r9; syscall; 
0x00000000001460ba: sub dword ptr [rsp + 0x30], eax; push qword ptr [rip + 0x72164]; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f7a: sub dword ptr [rsp + 0x30], eax; push qword ptr [rip + 0x722a4]; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001516df: sub dword ptr [rsp + 0x30], eax; push r14; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x000000000010baaf: sub dword ptr [rsp + 0x60], eax; movaps xmmword ptr [rsp + 0x70], xmm0; movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bab4: sub dword ptr [rsp + 0x70], eax; movaps xmmword ptr [rsp + 0x80], xmm0; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bab9: sub dword ptr [rsp + 0x80], eax; movaps xmmword ptr [rsp + 0x90], xmm0; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac1: sub dword ptr [rsp + 0x90], eax; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x000000000010bac9: sub dword ptr [rsp + 0xa0], eax; syscall; 
0x0000000000043e7d: sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e85: sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000043e8d: sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000011ba43: sub dword ptr [rsp + rcx + 0xc76400], eax; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000004356b: sub dword ptr [rsp - 0x18], eax; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000009cc69: sub dword ptr [rsp], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000151ac2: sub eax, -0x80; pop rbx; ret; 
0x000000000009a28a: sub eax, 0x10; ret; 
0x000000000015b3f6: sub eax, 0x10c48348; pop rbx; ret; 
0x00000000000d04cb: sub eax, 0x1173c8; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000093287: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x0000000000077634: sub eax, 0x20; cdqe; movzx eax, byte ptr [r8 + rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, r14; jmp rax; 
0x0000000000063267: sub eax, 0x28c48348; pop rbx; pop rbp; ret; 
0x00000000001948ef: sub eax, 0x30c48348; pop rbx; pop rbp; pop r14; ret; 
0x00000000000eaa22: sub eax, 0x47c6e875; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x000000000010842a: sub eax, 0x48000017; lea edx, [rip + 0xa5233]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000009fd7f: sub eax, 0x480000ff; cmove eax, edx; ret; 
0x000000000014d4a4: sub eax, 0x48001f0f; mov eax, dword ptr [rbp + 8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x48]; 
0x000000000012f1ef: sub eax, 0x48ffef60; add esp, 8; ret; 
0x000000000012a5b2: sub eax, 0x507a8b48; mov rsi, rdx; call rax; 
0x00000000000431b9: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000007aa22: sub eax, 0x83000000; ret; 
0x00000000001023e9: sub eax, 0x8348fff2; ret; 
0x00000000001225c7: sub eax, 0x8948fff0; ret 0x8948; 
0x0000000000160a7f: sub eax, 0x89fffabb; ret 0xc085; 
0x00000000000375f7: sub eax, 0x8d48001b; cmp eax, 0x1af35f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003758d: sub eax, 0x8d48001b; cmp eax, 0x1af3c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018243f: sub eax, 0xc5000001; std; xlatb; ret; 
0x000000000013b46a: sub eax, 0xe2c1ca89; add al, 0x83; ret 0x3908; 
0x000000000010c402: sub eax, 0xf631d231; mov rdi, rbx; call rax; 
0x00000000000a3fd6: sub eax, 0xf700002a; ret; 
0x000000000003e8f4: sub eax, 0xf9830a8b; add cl, byte ptr [rdi]; test dh, ah; sub dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fc07], al; ret 0x29; 
0x0000000000060f50: sub eax, 0xffefa9e9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000062398: sub eax, 0xfffcf6e9; jmp qword ptr [rsi - 0x70]; 
0x000000000014ea4b: sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014bdcb: sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014f36a: sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000031504: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000000568cf: sub eax, 1; ret; 
0x00000000001966e5: sub eax, 1; sub rax, rbx; shr rax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000012c3df: sub eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000196a97: sub eax, 5; add byte ptr [rax], al; pop rbx; ret; 
0x000000000011ea4e: sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000014808d: sub eax, dword ptr [rbx + 0x18]; add rsp, 8; add eax, edx; pop rbx; pop rbp; ret; 
0x0000000000151911: sub eax, dword ptr [rbx + 0x39480009]; ret; 
0x0000000000035c5f: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000074c96: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x46; or al, 0x83; ret; 
0x000000000011f4f1: sub eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x0000000000092f9e: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000008c285: sub eax, dword ptr [rdi + 0x20]; ret; 
0x000000000008c175: sub eax, dword ptr [rdi + 0x38]; ret; 
0x0000000000087ae5: sub eax, dword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008c276: sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c166: sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000001664a1: sub eax, dword ptr [rip + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000092693: sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000088a5e: sub eax, dword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x000000000004738a: sub eax, ebx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000001966e9: sub eax, ebx; shr rax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000091c39: sub eax, ecx; lea eax, [r8 - 1]; ret; 
0x0000000000058668: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000058805: sub eax, ecx; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000a89dc: sub eax, ecx; ret; 
0x0000000000087329: sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000000585b7: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000127c22: sub eax, ecx; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x000000000018190f: sub eax, ecx; vzeroupper; ret; 
0x00000000000b0349: sub eax, edi; ret; 
0x00000000000ce17e: sub eax, edi; shr rax, 2; ret; 
0x000000000008ac78: sub eax, edx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000008e9c5: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000047c19: sub eax, edx; ret; 
0x0000000000042a86: sub eax, edx; sar eax, 0x10; ret; 
0x000000000008a07f: sub eax, edx; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000004319f: sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000127beb: sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000042d95: sub eax, edx; shr rax, 0x3f; ret; 
0x000000000018aa20: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000018160e: sub eax, edx; vzeroupper; ret; 
0x000000000015d3c6: sub eax, esi; add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000001226b5: sub eax, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012299a: sub eax, esi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000005885f: sub eax, esi; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000014655b: sub eax, esp; mov qword ptr [rbp + 0x18], rax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000058804: sub eax, r9d; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000127c21: sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x000000000016049a: sub ebp, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000008adf1: sub ebp, dword ptr [rbx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000084f06: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000013b302: sub ebx, dword ptr [rbx + 0x5d]; ret; 
0x0000000000034a31: sub ebx, dword ptr [rcx + 0x1b]; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b1ce4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000475b5: sub ebx, dword ptr [rdx]; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000044874: sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x00000000000f4f07: sub ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b5d01: sub ecx, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000018ad74: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000186404: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x0000000000127bb1: sub ecx, ecx; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000010b810: sub ecx, edi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000044872: sub ecx, edi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000042a3b: sub ecx, edx; not eax; and eax, ecx; ret; 
0x0000000000147fdb: sub ecx, esi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000127b74: sub ecx, esi; shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000127bb0: sub ecx, r9d; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000000cdc8c: sub edi, 0x10; add rax, rdi; ret; 
0x0000000000163dd3: sub edi, 0x20; lea r11, [rip + 0x550a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000121448: sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x00000000001666b2: sub edi, 0x40; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001665f3: sub edi, 0x40; lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce2: sub edi, 0x40; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c23: sub edi, 0x40; lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000115ad4: sub edi, dword ptr [rax + 0x105]; syscall; 
0x00000000000e0181: sub edi, dword ptr [rsp + rax - 0x3b7eb800]; add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 8; ret; 
0x0000000000196585: sub edi, eax; lcall [rbx + 0x48]; mov dword ptr [rip + 0x5048c], 0; ret; 
0x000000000007cdbb: sub edi, ebp; mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000092779: sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000007d397: sub edi, ecx; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000013c8a1: sub edi, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000016d4ef: sub edi, edx; lea r11, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9db: sub edi, edx; lea r11, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000077428: sub edi, edx; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000016d18e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d00e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd0e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca0e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c88e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c70e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c58e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c40e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c28e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c10e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be0e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc8e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb15: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a52e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a22e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f2e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169dae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c2e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169aae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016992e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016962e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016932e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169035: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168de1: sub edx, 0x40; lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168d21: sub edx, 0x40; sfence; lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016625d: sub edx, 0x40; sfence; lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001480f0: sub edx, 4; mov rbp, rax; bswap edx; mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000009a206: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000000926c0: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000926b5: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000e134c: sub edx, dword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000873cb: sub edx, dword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000873e1: sub edx, dword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000028361: sub edx, dword ptr [rsi + 0x13]; add byte ptr [rcx + rcx*4 - 0x19], cl; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000012ef93: sub edx, eax; cmc; jmp qword ptr [rsi + 0xf]; 
0x000000000010195c: sub edx, eax; lea rdi, [r10 + r8]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x00000000001605f3: sub edx, eax; lea rdi, [r9 + r8]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x0000000000148855: sub edx, eax; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x0000000000127c1f: sub edx, eax; sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x0000000000113224: sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000000b8fcc: sub edx, ecx; lea r11, [rip + 0xf1edf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b864c: sub edx, ecx; lea r11, [rip + 0xf27df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70ec: sub edx, ecx; lea r11, [rip + 0xf3beb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b699c: sub edx, ecx; lea r11, [rip + 0xf42af]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a4c: sub edx, ecx; lea r11, [rip + 0xf50ab]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b539c: sub edx, ecx; lea r11, [rip + 0xf56db]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000097f88: sub edx, edi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000881e8: sub edx, esi; call qword ptr [rbp + 0x70]; 
0x0000000000075194: sub edx, esi; call qword ptr [rbx + 0x38]; 
0x0000000000155b9d: sub edx, esi; mov esi, esi; mov dword ptr [rdi + 0x28], edx; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000008870d: sub edx, esi; mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x000000000008e147: sub edx, esi; mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x0000000000148bf1: sub edx, esi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x000000000007af21: sub edx, esi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000001488ea: sub edx, esp; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x00000000001488e9: sub edx, r12d; mov rsi, r15; call qword ptr [rbx + 0x40]; 
0x0000000000127c1e: sub edx, r8d; sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x00000000001665ef: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c1f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000013b08d: sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000132021: sub esi, dword ptr [rax]; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000117ca6: sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000041791: sub esi, dword ptr [rsi + rdx]; add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x0000000000122512: sub esi, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000122777: sub esi, eax; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000014807e: sub esi, eax; pop rbx; pop rbp; mov eax, esi; ret; 
0x0000000000127be9: sub esi, eax; sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000048bb1: sub esi, eax; syscall; 
0x000000000016d191: sub esi, edx; lea r11, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d011: sub esi, edx; lea r11, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce91: sub esi, edx; lea r11, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd11: sub esi, edx; lea r11, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb91: sub esi, edx; lea r11, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca11: sub esi, edx; lea r11, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c891: sub esi, edx; lea r11, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c711: sub esi, edx; lea r11, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c591: sub esi, edx; lea r11, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c411: sub esi, edx; lea r11, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c291: sub esi, edx; lea r11, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c111: sub esi, edx; lea r11, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf91: sub esi, edx; lea r11, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be11: sub esi, edx; lea r11, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc91: sub esi, edx; lea r11, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb18: sub esi, edx; lea r11, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6b1: sub esi, edx; lea r11, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a531: sub esi, edx; lea r11, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3b1: sub esi, edx; lea r11, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a231: sub esi, edx; lea r11, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0b1: sub esi, edx; lea r11, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f31: sub esi, edx; lea r11, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169db1: sub esi, edx; lea r11, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c31: sub esi, edx; lea r11, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ab1: sub esi, edx; lea r11, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169931: sub esi, edx; lea r11, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697b1: sub esi, edx; lea r11, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169631: sub esi, edx; lea r11, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694b1: sub esi, edx; lea r11, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169331: sub esi, edx; lea r11, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691b1: sub esi, edx; lea r11, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169038: sub esi, edx; lea r11, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d4ec: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9d8: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000e24e7: sub esi, esp; dec dword ptr [rax - 0x77]; ret 0x3d48; 
0x00000000000e2550: sub esi, esp; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000127be8: sub esi, r8d; sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x000000000010ca63: sub esp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150780: sub esp, -0x80; pop rbx; ret; 
0x0000000000114234: sub esp, 0x10; call 0x12bdd0; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x000000000010b921: sub esp, 0x10; push 0; call 0x10c120; add rsp, 0x18; ret; 
0x000000000010b931: sub esp, 0x10; push 1; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000160691: sub esp, 0x10; push 2; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000135ee1: sub esp, 0x10; push 2; call 0x135940; add rsp, 0x18; ret; 
0x00000000001606a1: sub esp, 0x10; push 3; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000e15d1: sub esp, 0x18; call 0x12bdd0; mov edi, eax; mov eax, 0x22; syscall; 
0x000000000015c6f4: sub esp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b341: sub esp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2a4: sub esp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b171: sub esp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015aba4: sub esp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x0000000000047f57: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000e00b0: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x000000000012300a: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x000000000012420d: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c32: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3d0: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; ret; 
0x0000000000081474: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x00000000000480ac: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000052f82: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x0000000000063bed: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047113: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000004793e: sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; xor esi, esi; mov rdi, r9; call rdx; 
0x0000000000145d31: sub esp, 8; call 0x113ce0; mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x0000000000116541: sub esp, 8; call 0x116220; mov qword ptr [rip + 0xd19e0], rax; add rsp, 8; ret; 
0x000000000012d45b: sub esp, 8; call 0x12dbd0; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000012e4ea: sub esp, 8; call 0x12dbd0; nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000012e44f: sub esp, 8; call 0x12dbd0; nop word ptr [rax + rax]; ret; 
0x000000000013fc01: sub esp, 8; call 0x13f630; or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x0000000000029b81: sub esp, 8; call 0x295c0; or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x0000000000048611: sub esp, 8; call 0x480d0; add rsp, 8; ret; 
0x0000000000140131: sub esp, 8; call 0xe26e0; add rsp, 8; movzx eax, ax; ret; 
0x000000000011d933: sub esp, 8; call rsi; 
0x00000000001562d1: sub esp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x00000000000824f2: sub esp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000000a74a1: sub esp, 8; mov rdx, rsi; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x00000000000e1523: sub qword ptr [r8], rdx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000475b4: sub r11d, dword ptr [r10]; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e24e6: sub r14d, esp; dec dword ptr [rax - 0x77]; ret 0x3d48; 
0x0000000000077427: sub r15, r10; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000007cdba: sub r15, r13; mov r12, r15; sar r12, 2; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007d396: sub r15, r9; sar r15, 2; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000088a5d: sub r8, qword ptr [rsi - 0x48]; mov qword ptr [rsi], rax; sar r8, 2; call qword ptr [rbp + 0x30]; 
0x0000000000091c38: sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000087328: sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000151ac1: sub rax, -0x80; pop rbx; ret; 
0x000000000009a289: sub rax, 0x10; ret; 
0x0000000000093286: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x151037], rdx; ret; 
0x00000000000b9da3: sub rax, 1; ret; 
0x00000000001966e4: sub rax, 1; sub rax, rbx; shr rax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000014808c: sub rax, qword ptr [rbx + 0x18]; add rsp, 8; add eax, edx; pop rbx; pop rbp; ret; 
0x0000000000092f9d: sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008c284: sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008c174: sub rax, qword ptr [rdi + 0x38]; ret; 
0x0000000000087ae4: sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008c275: sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c165: sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000014655a: sub rax, r12; mov qword ptr [rbp + 0x18], rax; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x28]; 
0x0000000000047389: sub rax, rbx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000001966e8: sub rax, rbx; shr rax, 3; lea rbp, [rbx + rax*8 + 8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000000b0348: sub rax, rdi; ret; 
0x00000000000ce17d: sub rax, rdi; shr rax, 2; ret; 
0x000000000008ac77: sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000008e9c4: sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000047c2d: sub rax, rdx; ret; 
0x000000000008a07e: sub rax, rdx; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000042d94: sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000018aa1f: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001860df: sub rax, rdx; vzeroupper; ret; 
0x000000000015d3c5: sub rax, rsi; add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000010b80f: sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000044871: sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000147fda: sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000cdc8b: sub rdi, 0x10; add rax, rdi; ret; 
0x0000000000163dd2: sub rdi, 0x20; lea r11, [rip + 0x550a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001666b1: sub rdi, 0x40; lea r11, [rip + 0x52984]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001665f2: sub rdi, 0x40; lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163ce1: sub rdi, 0x40; lea r11, [rip + 0x55194]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c22: sub rdi, 0x40; lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d4ee: sub rdi, rdx; lea r11, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9da: sub rdi, rdx; lea r11, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d18d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d00d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c88d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c70d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c58d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c40d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c28d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c10d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc8d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb14: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a52d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a22d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f2d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169dad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c2d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169aad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016992d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016962d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016932d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169034: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168de0: sub rdx, 0x40; lea r11, [rip + 0x50255]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168d20: sub rdx, 0x40; sfence; lea r11, [rip + 0x50312]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016625c: sub rdx, 0x40; sfence; lea r11, [rip + 0x52c16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001480ef: sub rdx, 4; mov rbp, rax; bswap edx; mov dword ptr [rcx], edx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000009a205: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000000873ca: sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000873e0: sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000010195b: sub rdx, r8; lea rdi, [r10 + r8]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x00000000001605f2: sub rdx, r8; lea rdi, [r9 + r8]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x00000000000b8fcb: sub rdx, rcx; lea r11, [rip + 0xf1edf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b864b: sub rdx, rcx; lea r11, [rip + 0xf27df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b70eb: sub rdx, rcx; lea r11, [rip + 0xf3beb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b699b: sub rdx, rcx; lea r11, [rip + 0xf42af]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b5a4b: sub rdx, rcx; lea r11, [rip + 0xf50ab]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b539b: sub rdx, rcx; lea r11, [rip + 0xf56db]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000097f87: sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000000881e7: sub rdx, rsi; call qword ptr [rbp + 0x70]; 
0x0000000000075193: sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000008870c: sub rdx, rsi; mov qword ptr [rsp + 0x10], rcx; mov rdi, r13; call rax; 
0x000000000008e146: sub rdx, rsi; mov qword ptr [rsp], r8; mov rdi, rbx; call rax; 
0x0000000000148bf0: sub rdx, rsi; mov rbp, rdx; call qword ptr [rbx + 0x10]; 
0x000000000007af20: sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000001665ee: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x52a43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163c1e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x55253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000048bb0: sub rsi, r8; syscall; 
0x000000000016d190: sub rsi, rdx; lea r11, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d010: sub rsi, rdx; lea r11, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce90: sub rsi, rdx; lea r11, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd10: sub rsi, rdx; lea r11, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb90: sub rsi, rdx; lea r11, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca10: sub rsi, rdx; lea r11, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c890: sub rsi, rdx; lea r11, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c710: sub rsi, rdx; lea r11, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c590: sub rsi, rdx; lea r11, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c410: sub rsi, rdx; lea r11, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c290: sub rsi, rdx; lea r11, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c110: sub rsi, rdx; lea r11, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf90: sub rsi, rdx; lea r11, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be10: sub rsi, rdx; lea r11, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc90: sub rsi, rdx; lea r11, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb17: sub rsi, rdx; lea r11, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6b0: sub rsi, rdx; lea r11, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a530: sub rsi, rdx; lea r11, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3b0: sub rsi, rdx; lea r11, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a230: sub rsi, rdx; lea r11, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0b0: sub rsi, rdx; lea r11, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f30: sub rsi, rdx; lea r11, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169db0: sub rsi, rdx; lea r11, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c30: sub rsi, rdx; lea r11, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ab0: sub rsi, rdx; lea r11, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169930: sub rsi, rdx; lea r11, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697b0: sub rsi, rdx; lea r11, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169630: sub rsi, rdx; lea r11, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694b0: sub rsi, rdx; lea r11, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169330: sub rsi, rdx; lea r11, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691b0: sub rsi, rdx; lea r11, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169037: sub rsi, rdx; lea r11, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d4eb: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9d7: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000010ca62: sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000015077f: sub rsp, -0x80; pop rbx; ret; 
0x0000000000114233: sub rsp, 0x10; call 0x12bdd0; mov edi, ebx; mov edx, eax; mov eax, 0x4a; syscall; 
0x000000000010b920: sub rsp, 0x10; push 0; call 0x10c120; add rsp, 0x18; ret; 
0x000000000010b930: sub rsp, 0x10; push 1; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000160690: sub rsp, 0x10; push 2; call 0x10c120; add rsp, 0x18; ret; 
0x0000000000135ee0: sub rsp, 0x10; push 2; call 0x135940; add rsp, 0x18; ret; 
0x00000000001606a0: sub rsp, 0x10; push 3; call 0x10c120; add rsp, 0x18; ret; 
0x00000000000e15d0: sub rsp, 0x18; call 0x12bdd0; mov edi, eax; mov eax, 0x22; syscall; 
0x000000000015c6f3: sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x88e43]; call qword ptr [rax + 0x28]; 
0x000000000015b340: sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a1f6]; call qword ptr [rax + 0x28]; 
0x000000000015b2a3: sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a293]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015b170: sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a3c6]; call qword ptr [rax]; 
0x000000000015aba3: sub rsp, 0x80; call 0x12bd80; add rsp, 0x80; mov rax, qword ptr [rip + 0x8a993]; call qword ptr [rax]; 
0x0000000000047f56: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x00000000000e00af: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x0000000000123009: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov dword ptr fs:[rdx], esi; add rsp, 8; ret; 
0x000000000012420c: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; add rsp, 8; ret; 
0x0000000000061c31: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000008a3cf: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, edx; ret; 
0x0000000000081473: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov eax, esi; pop rbx; ret; 
0x00000000000480ab: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; mov rax, rbx; pop rbx; ret; 
0x0000000000052f81: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; pop rbx; ret; 
0x0000000000063bec: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000047112: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; xor eax, eax; pop rbx; ret; 
0x000000000004793d: sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; xor esi, esi; mov rdi, r9; call rdx; 
0x0000000000145d30: sub rsp, 8; call 0x113ce0; mov dword ptr [rip + 0xa3c3d], eax; add rsp, 8; ret; 
0x0000000000116540: sub rsp, 8; call 0x116220; mov qword ptr [rip + 0xd19e0], rax; add rsp, 8; ret; 
0x000000000012d45a: sub rsp, 8; call 0x12dbd0; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000012e4e9: sub rsp, 8; call 0x12dbd0; nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000012e44e: sub rsp, 8; call 0x12dbd0; nop word ptr [rax + rax]; ret; 
0x000000000013fc00: sub rsp, 8; call 0x13f630; or dword ptr [rip + 0xa99b4], 2; add rsp, 8; ret; 
0x0000000000029b80: sub rsp, 8; call 0x295c0; or dword ptr [rip + 0x1bcb64], 2; add rsp, 8; ret; 
0x0000000000048610: sub rsp, 8; call 0x480d0; add rsp, 8; ret; 
0x0000000000140130: sub rsp, 8; call 0xe26e0; add rsp, 8; movzx eax, ax; ret; 
0x000000000011d932: sub rsp, 8; call rsi; 
0x00000000001562d0: sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x82af0; add rsp, 8; ret; 
0x00000000000824f1: sub rsp, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000000a74a0: sub rsp, 8; mov rdx, rsi; xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x0000000000042e9e: subps xmm0, xmm1; ret; 
0x0000000000042e9d: subsd xmm0, xmm1; ret; 
0x0000000000043242: subss xmm0, xmm1; ret; 
0x0000000000026bd4: syscall; 
0x00000000000dbacc: syscall; cmp eax, 0xfffff000; pop rbx; setbe al; movzx eax, al; ret; 
0x000000000011db27: syscall; mov rcx, qword ptr [rip + 0xc6340]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c28c: syscall; neg eax; ret; 
0x000000000012bdc7: syscall; pop rdx; pop rsi; ret; 
0x00000000000cf6c5: syscall; ret; 
0x0000000000031f05: sysenter; 
0x00000000000a5a77: test ah, al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d41; 
0x00000000000c5bcf: test ah, bh; add al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e1d0e: test ah, ch; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000194aac: test ah, dh; add byte ptr [rax], al; add byte ptr [rbp + 0x484c75ff], al; add esp, 0x30; pop rbx; ret; 
0x00000000000296be: test al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000014bf01: test al, 0; add byte ptr [rax], al; bswap r12d; mov r12d, r12d; call qword ptr [rax + 0x18]; 
0x000000000014bdd3: test al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000001090bc: test al, 0; add byte ptr [rax], al; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008dd3f: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000151c83: test al, 0; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000339f0: test al, 0; add byte ptr [rax], al; ret; 
0x0000000000109118: test al, 0; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001146d1: test al, 0; add byte ptr [rax], al; syscall; 
0x000000000014ecaa: test al, 0x49; mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000e7058: test al, 0x51; or al, 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000e20ae: test al, 0x85; ror byte ptr [rdi], 0x84; add dword ptr [rax], 0x83480000; ret 0x480f; 
0x0000000000151f75: test al, 0xe8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000ba774: test al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x00000000001549d1: test al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x000000000006bc22: test al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000e15f0: test al, 4; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x18; ret; 
0x0000000000069d24: test al, al; ret 0xffff; 
0x00000000000bad28: test al, bh; or al, 0; lea rax, [rip + 0x12ded]; cmove rax, rdx; ret; 
0x000000000009ba93: test al, ch; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call rax; 
0x0000000000153383: test bh, 0x43; adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000000f0004: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000193284: test bh, dh; add eax, dword ptr [rax]; add byte ptr [rbp - 0x77], cl; mov dword ptr [rcx - 0x7d], 0x894c07e7; ret 0x8d4f; 
0x000000000009e206: test bl, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xf05cf; cmovne rax, rdx; ret; 
0x000000000014f5f3: test bl, ah; add eax, 0xc0310000; mov rsi, qword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x0000000000095fee: test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000048488: test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret 0; 
0x0000000000160ea8: test byte ptr [rax + 0x1f0ffff2], bh; add byte ptr [rax - 0x75], cl; add eax, 0x82fb9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000035296: test byte ptr [rax + 0x200], bh; ret; 
0x000000000009bc3b: test byte ptr [rax + 0x48000000], bl; mov esi, ebx; mov rdi, r12; call rax; 
0x0000000000188fcb: test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000014f06b: test byte ptr [rax + 0x49000001], ah; mov eax, dword ptr [rsi + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000014bf2b: test byte ptr [rax + 0x49000001], al; mov edi, dword ptr [rdi]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000fca5d: test byte ptr [rax + 0x63], 4; mov bh, 0x48; add eax, edi; jmp rax; 
0x00000000000fa0c2: test byte ptr [rax + 0x63], 4; mov bl, 0x48; add eax, ebx; jmp rax; 
0x00000000000e2ffa: test byte ptr [rax + 0x63], 4; mov dl, 0x48; add eax, edx; jmp rax; 
0x00000000000bad8e: test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12d57]; cmovne rax, rdx; ret; 
0x000000000009d72e: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c7e7]; cmovne rax, rdx; ret; 
0x000000000009d48e: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c9e7]; cmovne rax, rdx; ret; 
0x000000000009ceae: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1cf27]; cmovne rax, rdx; ret; 
0x000000000010c38e: test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xa9]; cmove rax, rdx; ret; 
0x000000000009e0de: test byte ptr [rax + 0xcc], 0x10; lea rax, [rip + 0x1b854]; cmove rax, rdx; ret; 
0x000000000007c5c1: test byte ptr [rax + 0xf], 0x44; ret 0x36e9; 
0x000000000005abef: test byte ptr [rax + 0xf], 0x45; ret 0x8948; 
0x000000000009c2e3: test byte ptr [rax + 1], bh; add byte ptr [rax], al; mov rdi, qword ptr [rdi + 0x48]; mov rsi, rbp; call rax; 
0x00000000000822bf: test byte ptr [rax + rax - 0x76b80000], ah; ret; 
0x000000000015d6af: test byte ptr [rax + rax - 0x7cb70000], dl; ret; 
0x00000000000c5bbc: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000054908: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b44; 
0x00000000000547aa: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b4c; 
0x000000000010baba: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x90], eax; movaps xmmword ptr [rsp + 0xa0], xmm0; syscall; 
0x00000000000bb0f9: test byte ptr [rax + rax], 0x48; lea eax, [rip + 0x12bad]; cmove rax, rdx; ret; 
0x000000000011ace4: test byte ptr [rax + rax], 0x48; lea esi, [rsp + 0xc]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114774: test byte ptr [rax + rax], 0x64; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011ba44: test byte ptr [rax + rax], cl; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011b987: test byte ptr [rax + rax], cl; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008bacf: test byte ptr [rax + rbp*4], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x5e; 
0x0000000000083509: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000013eda1: test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000013f657: test byte ptr [rax + rdi], ah; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 5; ret 0xa47; 
0x000000000010bac2: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xa0], eax; syscall; 
0x0000000000043e7e: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000009cb89: test byte ptr [rax - 0x39], 0x47; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000052d7e: test byte ptr [rax - 0x3f], 0xc8; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000001478f0: test byte ptr [rax - 0x73], 0xab; mov al, 0x23; add byte ptr [rax], al; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000031d89: test byte ptr [rax - 0x76b80000], bl; ret 0x294c; 
0x00000000000a009a: test byte ptr [rax - 0x77], 0xd0; cmovne rax, rdi; ret; 
0x0000000000146582: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x28]; 
0x000000000010c406: test byte ptr [rax - 0x77], 0xdf; call rax; 
0x000000000010c433: test byte ptr [rax - 0x77], 0xdf; mov eax, 0x135; syscall; 
0x0000000000145879: test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f3: test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000155167: test byte ptr [rax - 0x77], 0xef; xor eax, eax; call rcx; 
0x000000000012df31: test byte ptr [rax - 0x77], 0xf0; ret; 
0x00000000000636ae: test byte ptr [rax - 0x77], cl; ret; 
0x0000000000115473: test byte ptr [rax - 0x77fffffd], ah; add cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000038b54: test byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret 0xf177; 
0x0000000000043e86: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x00000000000f6e4b: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xe2c1; 
0x0000000000134c9f: test byte ptr [rax], ah; add dword ptr [rax], eax; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000155e9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000063baa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000ce48a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000009925a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000004324a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x80000000; mov dword ptr [rdi], edx; ret; 
0x00000000000aa7ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000aac7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000018e78a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000018e79a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000018e7aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000018e7ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000018e7ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000018e71a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000018e72a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000018e73a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000018e74a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000018e75a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000018e76a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000018e77a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000cdf7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cdf9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cdf8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x0000000000026c5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x188824]; ret; 
0x0000000000026c6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x18a6ae]; ret; 
0x00000000000eaa9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b6a2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b542a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000017618a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000017617a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000017615a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x000000000010b90a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000a71da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rax - 1]; ret; 
0x00000000000b644a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000001470aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x00000000001470ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x00000000001470ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 8; ret; 
0x00000000000b610a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000ba6da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; pop rbx; ret; 
0x0000000000063b9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; ret; 
0x000000000011340a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x000000000012c7ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000012c41a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x000000000012c41a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x18; syscall; ret; 
0x00000000000ba6fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x20; pop rbx; ret; 
0x00000000001126ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x22; syscall; 
0x00000000000ba6ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x30; pop rbx; ret; 
0x00000000000e194a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x3b; syscall; 
0x00000000000ba71a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x40; pop rbx; ret; 
0x0000000000115b0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x4c; syscall; 
0x0000000000063a0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x52; syscall; 
0x000000000010cafa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5a; syscall; 
0x00000000000ba70a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x60; pop rbx; ret; 
0x00000000000cf77a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x60; syscall; 
0x00000000000e26fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000000e26fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x00000000000e271a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000000e271a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000000e270a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000000e270a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000000e272a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000000e272a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000e26ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6e; syscall; 
0x00000000000e26ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6e; syscall; ret; 
0x00000000000e273a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x73; syscall; 
0x00000000000e356a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7e; ret; 
0x000000000013b86a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x000000000004475a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x83; syscall; 
0x000000000011320a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8c; syscall; 
0x000000000010179a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8e; syscall; 
0x00000000000cf85a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa4; syscall; 
0x000000000011db4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa6; syscall; 
0x0000000000113e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xaa; syscall; 
0x000000000012c68a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000000e357a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfffa; ret; 
0x000000000008749a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009c4fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000014780a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x00000000000ba6ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 8; pop rbx; ret; 
0x000000000008c1aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000044dda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x19f3c2]; ret; 
0x000000000012422a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; ret; 
0x00000000000e190a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x00000000001761ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x00000000001761da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x00000000001761ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x00000000001761fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000017620a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000017621a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001761ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000017619a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x00000000000b645a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b649a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b64aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b64ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b64ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b648a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b646a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x000000000011e2fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x000000000007eeda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r9, rsi; jmp rax; 
0x00000000000928ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x00000000000ce4ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000ce4ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000ce4da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000ce4ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000ce4fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000ce50a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x00000000001524ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000009c28a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x147cb9]; call qword ptr [rax]; 
0x000000000009c1aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x147d99]; call qword ptr [rax]; 
0x0000000000030cea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b5a11]; ret; 
0x0000000000026eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1bcfa9]; add rax, qword ptr fs:[0]; ret; 
0x00000000000287fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c17b1]; ret; 
0x000000000014db4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000018648a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000009297a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000188fda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000001526da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r15; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000000a700a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018802a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a70da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x00000000000b64da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b64ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000010cc15: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x102; syscall; 
0x000000000010eae5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x107; syscall; 
0x000000000010ea25: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x10a; syscall; 
0x000000000011e7a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x110; syscall; 
0x000000000011e805: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x11b; syscall; 
0x000000000011e475: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x000000000010d735: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x000000000010d795: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x000000000011e595: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x000000000011e895: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x000000000011e3b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x000000000011e9b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x14a; syscall; 
0x000000000011e9e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x14b; syscall; 
0x000000000010d765: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x0000000000101855: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x0000000000117685: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x000000000010d705: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000d29a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x000000000011f105: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x000000000011ebd5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x000000000010d885: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x000000000010eb15: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x000000000010ea55: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x59; syscall; 
0x000000000010cb25: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x000000000010e175: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x000000000010e1a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000e1265: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x64; syscall; 
0x000000000011e5f5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000e2965: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000e2995: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000e29f5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000e2a25: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000e2a55: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x000000000011dbd5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x000000000011e355: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x000000000011e385: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x000000000011e7d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x000000000010c9d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000001017c5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000001017f5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x0000000000101825: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x0000000000101885: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000001018b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000001018e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x0000000000117715: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x0000000000117745: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x0000000000117775: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x000000000011e2b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x000000000011e6b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000001141d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x0000000000114695: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000001146c5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x0000000000117585: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000011da05: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x000000000011d9d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xad; syscall; 
0x000000000011e3e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x000000000011e415: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x000000000011db75: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x000000000011b935: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x000000000011b815: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000011e445: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x000000000011e2e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x000000000011e565: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x000000000011e5c5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000001560e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000176126: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b63f6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000011dd06: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x122; syscall; 
0x00000000000441a6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x3e; syscall; 
0x000000000011f8e6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x40; syscall; 
0x000000000011f8b6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x41; syscall; 
0x000000000011f886: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x47; syscall; 
0x0000000000115b36: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x4d; syscall; 
0x0000000000112e56: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x62; syscall; 
0x0000000000113246: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x8d; syscall; 
0x0000000000091137: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000144fd6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 1; ret; 
0x0000000000152a46: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 2; ret; 
0x0000000000043f56: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000092946: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x152d09]; ret; 
0x00000000000b4da6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000008c2b6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000aad17: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001126e6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; syscall; 
0x000000000018e709: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000018e6f9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000000b6419: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b6429: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x000000000011e868: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x11f; syscall; 
0x000000000011e8f8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x134; syscall; 
0x000000000011e988: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x13f; syscall; 
0x000000000010d0d8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x15; syscall; 
0x0000000000117659: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1c; syscall; 
0x00000000000e1509: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x25; syscall; 
0x000000000011f0d8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x30; syscall; 
0x000000000011ead9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x31; syscall; 
0x000000000011ec38: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x32; syscall; 
0x000000000011eba9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x34; syscall; 
0x000000000011fa18: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x43; syscall; 
0x000000000010d859: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x50; syscall; 
0x000000000010cbe8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x53; syscall; 
0x000000000010eab8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x57; syscall; 
0x000000000010e9f8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x58; syscall; 
0x000000000010e149: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x5c; syscall; 
0x000000000011e778: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x00000000000e2938: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x79; syscall; 
0x000000000011dba8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x7a; syscall; 
0x000000000011ddb8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x87; syscall; 
0x000000000010c9a8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x89; syscall; 
0x00000000001176e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x95; syscall; 
0x0000000000114668: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x99; syscall; 
0x000000000011e328: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x9f; syscall; 
0x000000000011e4d8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb1; syscall; 
0x000000000011e688: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb4; syscall; 
0x000000000011b8a8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc2; syscall; 
0x000000000011b908: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc3; syscall; 
0x000000000011b7e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc4; syscall; 
0x000000000011b998: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc5; syscall; 
0x00000000000dc9b9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xd9; syscall; 
0x000000000011e538: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xfe; syscall; 
0x0000000000092928: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xffffffff; ret; 
0x00000000001477f8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 2; ret; 
0x00000000001123e9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 3; syscall; 
0x00000000000dc9e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; ret; 
0x00000000000ce4a9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x0000000000092968: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000176138: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b6408: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x000000000009be89: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x0000000000155ec9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x00000000000cdc98: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000088dda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000008a2fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001875aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000001825ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x000000000009291a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000012dfca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000026bca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x000000000008d6ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov rax, rdi; ret; 
0x00000000000cdfaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000014fe28: test byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000010c4e1: test byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000147acc: test byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x000000000002b4ab: test byte ptr [rax], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x0000000000193b7e: test byte ptr [rax], dh; add eax, 0x89480000; ret 0xc148; 
0x00000000000636a9: test byte ptr [rax], dl; or byte ptr [rcx], spl; test byte ptr [rax - 0x77], cl; ret; 
0x00000000001045ec: test byte ptr [rbp + 0x31000004], bh; fild dword ptr [rbx - 0x6bf0fb08]; ret; 
0x0000000000176476: test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000000e4036: test byte ptr [rbp + 0xf66fffb], 0x1f; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x00000000000e7ffb: test byte ptr [rbp + rsi*8 - 0x7cb70001], bh; ret; 
0x0000000000043b6e: test byte ptr [rbp - 0x6bf0bf40], 0xc6; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000012f41e: test byte ptr [rbp - 0x77000000], ah; ret 0xe283; 
0x0000000000146c86: test byte ptr [rbx + 0x48fffffe], dl; mov edi, ebx; call rax; 
0x00000000000ecbe3: test byte ptr [rbx + 0x5bffffff], al; ret; 
0x000000000007b8f3: test byte ptr [rbx + rax - 0x7cbf0000], al; out dx, al; add dword ptr [rax - 0x90f43], eax; jmp qword ptr [rax]; 
0x00000000001656c7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000007c478: test byte ptr [rbx - 0x7c00001a], dh; ret; 
0x0000000000127118: test byte ptr [rbx - 0x7d000000], ch; ret 0x8801; 
0x0000000000193428: test byte ptr [rbx], al; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000f0ef8: test byte ptr [rbx], bh; add dword ptr [rax], eax; add byte ptr [rbx - 0x7af7db84], cl; push qword ptr [rbx - 0xa]; ret; 
0x0000000000104b90: test byte ptr [rbx], bh; add dword ptr [rax], eax; add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x000000000018fb62: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000031f28: test byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b47ee; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ef350: test byte ptr [rbx], bl; add eax, dword ptr [rax]; add byte ptr [rbx - 0x72bed3af], cl; add dword ptr [rcx], edi; ret 0x8e0f; 
0x00000000000a2d21: test byte ptr [rbx], bl; cmp eax, 0xf7410000; ret 0; 
0x000000000005566d: test byte ptr [rbx], dh; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000155ba0: test byte ptr [rcx + 0x1482857], 0xc6; mov qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000f648b: test byte ptr [rcx + 0x442c244c], 0x29; ret 0x8944; 
0x000000000009e4de: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x16b07]; lea rdx, [rip + 0xd8900]; cmovne rax, rdx; ret; 
0x000000000009ce7e: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x18087]; lea rdx, [rip + 0xd5c30]; cmovne rax, rdx; ret; 
0x000000000009cd5e: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1b197]; lea rdx, [rip + 0x13800]; cmovne rax, rdx; ret; 
0x000000000009e53e: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x8fc7]; lea rdx, [rip + 0xda0b0]; cmovne rax, rdx; ret; 
0x000000000009d41e: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0xa147]; lea rdx, [rip + 0xd6e40]; cmovne rax, rdx; ret; 
0x000000000009d35e: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0xa157]; lea rdx, [rip + 0x14e20]; cmovne rax, rdx; ret; 
0x000000000009ce0e: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0xa7a7]; lea rdx, [rip + 0xc40b0]; cmovne rax, rdx; ret; 
0x00000000000bc67e: test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11b57]; lea rdx, [rip + 0x11930]; cmovne rax, rdx; ret; 
0x000000000009cdae: test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12cd4]; lea rdx, [rip + 0xf16fd]; cmovne rax, rdx; ret; 
0x0000000000192d6f: test byte ptr [rcx + 0xf], 0x44; ret 0xfe83; 
0x0000000000032726: test byte ptr [rcx + 1], cl; ret; 
0x000000000018fb59: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000f0eef: test byte ptr [rcx + rax], ah; add dh, dh; ret; 
0x00000000000aff9f: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000001605f1: test byte ptr [rcx + rbp - 0x3e], 0x4b; lea edi, [rcx + rax]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x000000000010195a: test byte ptr [rcx + rbp - 0x3e], 0x4b; lea edi, [rdx + rax]; call 0x25220; xor eax, eax; add rsp, 8; ret; 
0x0000000000190b58: test byte ptr [rcx + rcx*4 - 0x13], 0x31; jmp qword ptr [rsi - 0x70]; 
0x000000000008355d: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call qword ptr [rbp + 0x38]; 
0x000000000005af25: test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000013a51a: test byte ptr [rcx - 0x7b000000], bl; fisttp dword ptr [rdi]; test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000014de78: test byte ptr [rcx - 0x7b], ah; in eax, dx; dec dword ptr [rax - 0x75]; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000017bc26: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000015cd2a: test byte ptr [rcx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001366c9: test byte ptr [rcx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000146b7a: test byte ptr [rcx], bl; add dword ptr [rax], eax; add byte ptr [rbp - 0x7ed28a40], al; ret; 
0x00000000001666b8: test byte ptr [rcx], ch; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000140c4e: test byte ptr [rcx], dh; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; xchg dword ptr [rax + 0x31000000], eax; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000019262a: test byte ptr [rcx], dl; add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0x8166; 
0x0000000000151b9c: test byte ptr [rdi + 0x48000000], ah; add eax, 0xa0; pop rbx; ret; 
0x0000000000151abc: test byte ptr [rdi + 0x48000000], ah; sub eax, -0x80; pop rbx; ret; 
0x0000000000145864: test byte ptr [rdi + 0x48000000], al; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000001519fc: test byte ptr [rdi + 0x5b000000], cl; ret; 
0x00000000000b5b86: test byte ptr [rdi + 0xf], 0; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000001080ff: test byte ptr [rdi + rax - 0x7fbf0000], bh; jmp qword ptr [rdx]; 
0x00000000000f8fec: test byte ptr [rdi - 0x7cfffff7], dh; ret; 
0x000000000010bd2a: test byte ptr [rdi - 0x9fffffd], bl; ret 0xf20; 
0x000000000009c205: test byte ptr [rdi], 0x16; add al, 0x24; or byte ptr [rbx + 0x50], 1; movups xmmword ptr [rbx + 0x38], xmm0; mov qword ptr [rbx], rsi; call rcx; 
0x000000000004848f: test byte ptr [rdi], 0x84; ret 0; 
0x0000000000087b56: test byte ptr [rdi], 0x84; ret; 
0x00000000000ece5e: test byte ptr [rdi], 0x85; ret; 
0x00000000000549ad: test byte ptr [rdi], 0x8e; ret; 
0x00000000000e19a7: test byte ptr [rdi], 0x94; ret 0x854d; 
0x000000000009a24a: test byte ptr [rdi], 0x94; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000044e42: test byte ptr [rdi], 0x95; ret; 
0x0000000000069a96: test byte ptr [rdi], 0x9f; ret 0xd629; 
0x000000000007af98: test byte ptr [rdi], 0x9f; ret; 
0x000000000008c1c2: test byte ptr [rdi], 4; sete al; ret; 
0x000000000008c1d2: test byte ptr [rdi], 8; sete al; ret; 
0x00000000000b5da8: test byte ptr [rdi], al; add byte ptr [rax], al; ret; 
0x000000000006f2a1: test byte ptr [rdi], bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000eff34: test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000071ce1: test byte ptr [rdi], ch; ret; 
0x000000000008367c: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000e8b6c: test byte ptr [rdi], dh; or al, 0; movsxd rax, dword ptr [rdx + r15*4]; add rax, rdx; jmp rax; 
0x000000000006f810: test byte ptr [rdi], dl; adc byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x0000000000035224: test byte ptr [rdx + 0x200], al; ret; 
0x00000000000ce061: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000aff11: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x00000000000e3661: test byte ptr [rdx + 0x48ffffff], al; cmp edx, 0x52654973; mov eax, 0x40; mov edx, 0x20; cmovne rax, rdx; ret; 
0x00000000000ced09: test byte ptr [rdx + 0x4c000000], bl; mov dword ptr [rsp + 0x50], esp; mov rsi, r13; mov rdi, rbp; call rbx; 
0x000000000009bdb1: test byte ptr [rdx + 0x4c000000], ch; mov edi, edi; mov rdx, rbx; mov rsi, r12; call rax; 
0x000000000009e790: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b915]; lea rdx, [rip + 0x1b84e]; cmove rax, rdx; ret; 
0x000000000009e440: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bc45]; lea rdx, [rip + 0x1bb7e]; cmove rax, rdx; ret; 
0x000000000009e2e0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1bdc5]; lea rdx, [rip + 0x1bcfe]; cmove rax, rdx; ret; 
0x000000000012d285: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5bdc0]; lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1c5: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5bea0]; lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d105: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5bf60]; lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000012d2d4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ac1]; lea rdx, [rip + 0x60a4a]; cmove rax, rdx; ret; 
0x000000000012d214: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60ba1]; lea rdx, [rip + 0x60b2a]; cmove rax, rdx; ret; 
0x000000000012d154: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60c61]; lea rdx, [rip + 0x60bea]; cmove rax, rdx; ret; 
0x000000000012d394: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x60fb1]; lea rdx, [rip + 0x60f3a]; cmove rax, rdx; ret; 
0x000000000009e725: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xea950]; lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3d5: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeac80]; lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e275: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeae00]; lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000009e774: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef651]; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x000000000009e424: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xef981]; lea rdx, [rip + 0xef90a]; cmove rax, rdx; ret; 
0x000000000009e2c4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefb01]; lea rdx, [rip + 0xefa8a]; cmove rax, rdx; ret; 
0x000000000009e384: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeffd1]; lea rdx, [rip + 0xeff5a]; cmove rax, rdx; ret; 
0x000000000012d170: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x730db]; lea rdx, [rip - 0x731a2]; cmove rax, rdx; ret; 
0x000000000012d230: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7319b]; lea rdx, [rip - 0x73262]; cmove rax, rdx; ret; 
0x000000000012d2f0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7327b]; lea rdx, [rip - 0x73342]; cmove rax, rdx; ret; 
0x00000000000b695a: test byte ptr [rdx + 0xf], 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000009b831: test byte ptr [rdx + 1], bl; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r14; mov rdi, r13; call rax; 
0x000000000009b199: test byte ptr [rdx + 1], dh; add byte ptr [rax], al; mov rdx, r15; mov rdi, r13; call rax; 
0x0000000000146d1c: test byte ptr [rdx + rdx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x0000000000129649: test byte ptr [rdx - 0x17ffffff], ch; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000076411: test byte ptr [rdx - 0x7c000017], dh; ret; 
0x0000000000100b21: test byte ptr [rdx], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010b9c0: test byte ptr [rip + 0x528b4800], cl; sbb byte ptr [rax - 0x73], cl; pushfq; ret 0x8207; 
0x00000000000aadde: test byte ptr [rip + 0xfffffff], bh; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x000000000005de06: test byte ptr [rip - 0x17000004], dh; add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x0000000000106676: test byte ptr [rip - 0x76fffffd], dh; ret 0xc085; 
0x000000000006f61e: test byte ptr [rip - 0x7cfffffb], ah; ret 0x3901; 
0x00000000000a3fd5: test byte ptr [rip - 0x8ffffd6], ch; ret; 
0x00000000000a3fe1: test byte ptr [rip - 0x8ffffd6], cl; ret; 
0x00000000000b03ed: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000000a8c6a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000014eb8d: test byte ptr [rsi + 1], bh; add byte ptr [rax], al; mov rdi, qword ptr [r15]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000001102cf: test byte ptr [rsi + rdi*8 - 1], cl; jmp qword ptr [rsi + 0x41]; 
0x00000000000a42d5: test byte ptr [rsi - 0x8ffffdb], al; ret; 
0x000000000009e77c: test byte ptr [rsi], 0; lea rdx, [rip + 0xef5da]; cmove rax, rdx; ret; 
0x0000000000108a95: test byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rcx - 0x80], al; jmp qword ptr [rdi]; 
0x00000000000b022d: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000047603: test byte ptr [rsi], dl; add byte ptr [rax - 0x73], cl; cmp eax, 0x168493; call 0x34fd0; xor eax, eax; ret; 
0x0000000000147ade: test ch, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000002c471: test ch, dh; add al, 0; add bh, dh; ret 0; 
0x0000000000104bc6: test ch, dl; add dword ptr [rax], eax; add byte ptr [rcx], dh; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x0000000000136629: test cl, al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x000000000009d5af: test cl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000009d5ae: test cl, r15b; jmp qword ptr [rsi + 0xf]; 
0x000000000003e8fb: test dh, ah; sub dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fc07], al; ret 0x29; 
0x00000000000a0675: test dh, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000103e23: test dh, bl; add eax, 0xf9830000; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000004b972: test dh, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x0000000000069d16: test dh, cl; ret 0xffff; 
0x0000000000029e35: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000001457d5: test dl, dl; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000003a7dc: test dl, dl; and byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fe07], al; jmp qword ptr [rax]; 
0x00000000000a0999: test dl, dl; cmovne rax, rdi; ret; 
0x0000000000169cf9: test dword ptr [r8 + r8], 0x93146349; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000013f350: test dword ptr [rax + 0x3c000001], esi; and ecx, dword ptr [rdi]; xchg eax, ebp; ret 0x2c3c; 
0x00000000001504e6: test dword ptr [rax + 0x48000000], eax; add esp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000001863cb: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x000000000017d62f: test dword ptr [rax + 0xf], 0x2949d2bc; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000187e53: test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000188b63: test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b60db: test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x000000000017a0a3: test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b75fb: test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b74fb: test dword ptr [rax + 8], edx; add byte ptr [rax], al; ret; 
0x0000000000169ab6: test dword ptr [rax + r8], 0x93146349; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001820c7: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x0000000000169ab7: test dword ptr [rax + rax], 0x93146349; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000011b897: test dword ptr [rax + rax], ecx; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007bd79: test dword ptr [rax - 0x1400000a], edi; add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0x8348; 
0x0000000000065723: test dword ptr [rax - 0x16000005], edx; ret 0xfffd; 
0x0000000000076910: test dword ptr [rax - 0x16000015], ebx; scasb al, byte ptr [rdi]; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000009d1d7: test dword ptr [rax - 0x76b70008], eax; ret 0x394d; 
0x0000000000028e40: test dword ptr [rax - 0x77], 0x3abe9845; add byte ptr [rax], al; add al, ch; int1; ret 0xffff; 
0x00000000001172d5: test dword ptr [rax - 0x77], 0xca8948d6; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000000454fa: test dword ptr [rax - 0x77], 0xfe894cea; mov rdi, r12; call rbx; 
0x000000000006090b: test dword ptr [rax - 0x7d000000], esp; ret; 
0x00000000000a5f08: test dword ptr [rax - 0x7d], 0x840f06ef; ret; 
0x0000000000140f8c: test dword ptr [rax - 0x7f000005], esp; mov edi, 0x80; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000017a55b: test dword ptr [rax - 0x7fffffff], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000115ce9: test dword ptr [rax - 0xe89fe07], 0x7420fa80; in al, dx; mov byte ptr [r8 - 1], 0; ret; 
0x00000000000f0005: test dword ptr [rax], 0x89480000; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000007a2d6: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000010c8a7: test dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000010bd99: test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x000000000007b2f0: test dword ptr [rax], eax; idiv edi; inc esi; test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x0000000000075839: test dword ptr [rax], ebp; idiv edi; call qword ptr [rax]; 
0x000000000007b739: test dword ptr [rax], ebx; idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000c5af3: test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7e53: test dword ptr [rax], ecx; add eax, 0x83480000; ret 0x4801; 
0x000000000007af91: test dword ptr [rax], ecx; idiv edi; inc dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x9f; ret; 
0x000000000017a4fb: test dword ptr [rax], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000e9e9c: test dword ptr [rax], esi; add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000075b78: test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000010bd98: test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000010d473: test dword ptr [rbp + 0x48000000], ecx; add esp, 0x68; ret; 
0x0000000000112f03: test dword ptr [rbp + 0x48000000], edi; add esp, 0x70; pop rbx; ret; 
0x000000000009b3a5: test dword ptr [rbp + 0x48000000], esp; add esp, 0x10; pop rbx; ret; 
0x000000000018ad3e: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x00000000000863ef: test dword ptr [rbp - 0x3dbaf037], 0x48744389; add esp, 0x20; pop rbx; ret; 
0x000000000008a637: test dword ptr [rbp], esp; add byte ptr [rcx - 0x77], al; ret 0x7ce9; 
0x00000000000aa768: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x00000000001117e1: test dword ptr [rbx + 0x48000000], eax; add esp, 0x40; pop rbx; ret; 
0x000000000010cce9: test dword ptr [rbx + 0x48000000], edi; add esp, 0x68; ret; 
0x000000000015553f: test dword ptr [rbx + 0x48000000], edx; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013cc4c: test dword ptr [rbx + 0x48000000], edx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x000000000009baf0: test dword ptr [rbx + 0x48000000], esp; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000cd8b0: test dword ptr [rbx + 1], ecx; add byte ptr [rax], al; ret; 
0x00000000000cde18: test dword ptr [rbx + 1], esp; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x0000000000176078: test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x0000000000176058: test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x0000000000175f70: test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x00000000000b76f0: test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000018bd87: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000017a407: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018c1d6: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000017a3a7: test dword ptr [rbx + rax], esp; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000e5301: test dword ptr [rbx + rdi*8 - 1], ecx; call qword ptr [rax]; 
0x0000000000075eae: test dword ptr [rbx + rdi*8 - 1], esi; inc dword ptr [rbp - 0x71f025]; or eax, 0x634c0000; ret; 
0x00000000000be977: test dword ptr [rbx + rsi*8 - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000182a08: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x0000000000165503: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000016adf3: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000101d4f: test dword ptr [rbx - 0x7efffffc], ebx; ret 0xffe0; 
0x0000000000193285: test dword ptr [rbx], 0x894d0000; mov dword ptr [rcx - 0x7d], 0x894c07e7; ret 0x8d4f; 
0x0000000000031de6: test dword ptr [rbx], ebx; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4930; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bd3c: test dword ptr [rbx], esp; add eax, dword ptr [rax]; add dh, dh; ret 0xf02; 
0x0000000000146038: test dword ptr [rcx + 0x48000000], ebp; add esp, 0x68; pop rbx; pop rbp; ret; 
0x00000000001512f8: test dword ptr [rcx + 0x48000000], edi; add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000009b4bc: test dword ptr [rcx + 0x48000000], esi; add esp, 0x18; ret; 
0x0000000000175d7a: test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000018bd5d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b5cc2: test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000018bc6d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018bb99: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018bb7d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cd8f7: test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000190437: test dword ptr [rcx + rax], edx; add byte ptr [rax], al; ret; 
0x00000000000cd8c7: test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x000000000005697b: test dword ptr [rcx + rbp - 0x38], 0x244c894c; or byte ptr [rbp + rcx*4 + 0x2c], cl; ret 0x894c; 
0x0000000000077420: test dword ptr [rcx + rcx*4 - 0x2a], 0x4ddf8948; sub edi, edx; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000006857d: test dword ptr [rcx + rdi*8 + 0x1e9ffff], esi; ret; 
0x0000000000068559: test dword ptr [rcx + rdi*8 + 0x25e9ffff], esi; ret; 
0x000000000005440f: test dword ptr [rcx - 0x7c000007], esi; ret 0x3901; 
0x00000000001914df: test dword ptr [rcx], 0x40003d; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8441; 
0x0000000000191203: test dword ptr [rcx], 0xfff8f6e9; jmp qword ptr [rsi + 0xf]; 
0x000000000013a522: test dword ptr [rcx], edi; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000e9adf: test dword ptr [rcx], edi; or dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xdd75; 
0x000000000018244a: test dword ptr [rcx], edx; add dword ptr [rax], eax; add ch, al; std; xlatb; ret 0xc085; 
0x0000000000088ec1: test dword ptr [rdi + 0x48000000], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000141115: test dword ptr [rdi + 0x48000000], ecx; add esp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000009050a: test dword ptr [rdi + 0x48000000], edx; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000152506: test dword ptr [rdi + 1], ecx; add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000163e85: test dword ptr [rdi + 5], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000015e763: test dword ptr [rdi + rax*8], edx; setne al; movzx eax, al; ret; 
0x00000000000b5e27: test dword ptr [rdi + rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b5e07: test dword ptr [rdi + rax], esp; add byte ptr [rax], al; ret; 
0x00000000000f1dd9: test dword ptr [rdi + rdi*8 - 1], ecx; inc dword ptr [rbp - 0x517bf040]; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f0985: test dword ptr [rdi + rdi*8 - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000005def1: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000017c64a: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000001195e8: test dword ptr [rdi], eax; add eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 2; 
0x0000000000044986: test dword ptr [rdi], eax; setne al; movzx eax, al; ret; 
0x00000000000e9efc: test dword ptr [rdi], ebp; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000069c37: test dword ptr [rdi], ecx; ret; 
0x000000000014718c: test dword ptr [rdi], edi; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000006d65a: test dword ptr [rdi], esi; sbb dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000113709: test dword ptr [rdx + 0x45000000], ebx; mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000000113869: test dword ptr [rdx + 0x45000000], ebx; mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall; 
0x0000000000030e40: test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000187f31: test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017a4c9: test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017a499: test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000188999: test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b5fc1: test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000018bd9b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018bc99: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000b73d9: test dword ptr [rdx + 9], esi; add byte ptr [rax], al; ret; 
0x000000000018d0d2: test dword ptr [rdx + rax], edi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018baa2: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000017aa79: test dword ptr [rdx - 0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000501a5: test dword ptr [rdx - 0x43000000], ebp; add byte ptr [rax + rax], cl; add cl, ch; ret 0xfffd; 
0x0000000000068dff: test dword ptr [rdx - 0x7a380001], edi; cmp cl, 0xff; jmp qword ptr [rbp]; 
0x000000000017a381: test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017a359: test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017a469: test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000193d57: test dword ptr [rdx], 0x894c0000; ret 0x8341; 
0x0000000000176037: test dword ptr [rdx], eax; add byte ptr [rax], al; ret; 
0x000000000002f189: test dword ptr [rdx], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000017a3d9: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000720d1: test dword ptr [rip + 0x31000018], eax; rol byte ptr [rbp - 0x3f60f025], 0x29; ret; 
0x00000000000e3cec: test dword ptr [rip + 0x48000002], edx; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000005f8e1: test dword ptr [rip + 0x6f0f6600], edx; ret 0xc3e8; 
0x000000000018243e: test dword ptr [rip - 0x3affffff], ebp; std; xlatb; ret; 
0x000000000015fc15: test dword ptr [rip - 0x4d17fffb], edx; push rbx; in eax, dx; jmp qword ptr [rsi - 0x70]; 
0x0000000000185f13: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x00000000000bbc9e: test dword ptr [rsi + 0x48000000], ebx; add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010ce6e: test dword ptr [rsi + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000015c955: test dword ptr [rsi + 0x48000000], edi; add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000cdebd: test dword ptr [rsi + 0x48000000], edi; lea eax, [rdi - 0x10]; ret; 
0x0000000000089cdc: test dword ptr [rsi + 0x48000001], ebx; add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x000000000018fdc2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000188c65: test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b5de5: test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000b5dc5: test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b5cdd: test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x000000000009c46c: test dword ptr [rsi + rdi*8 - 0x74b70001], ecx; add eax, 0x147ad8; call qword ptr [rax]; 
0x0000000000062216: test dword ptr [rsi + rdi*8 - 1], eax; inc dword ptr [rcx + 0xf]; mov dh, 0x56; or al, 0xf6; ret 0x7440; 
0x000000000007ca63: test dword ptr [rsi - 0x16000006], edx; ret; 
0x00000000000e5b15: test dword ptr [rsi - 0x4d17fff4], esi; hlt; hlt; jmp qword ptr [rsi - 0x70]; 
0x00000000000d94c5: test dword ptr [rsi], esi; sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000018bfa8: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x00000000000e5523: test dword ptr [rsp + rdi*8 - 0x49f00001], edx; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000146039: test eax, 0x48000000; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000166b93: test eax, 0x49000524; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001203b3: test eax, 0x5b000c3f; ret; 
0x0000000000026ec3: test eax, 0x64001bcf; add rax, qword ptr [0]; ret; 
0x0000000000094e43: test eax, 0x76001527; xchg eax, edx; add rsp, 8; ret; 
0x0000000000168fa6: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000000437a3: test eax, 0x81000000; sti; push rax; ret; 
0x000000000005526e: test eax, 0x89480015; ret; 
0x0000000000035066: test eax, 0x89480017; ret; 
0x000000000015abc3: test eax, 0x8d480008; push rsp; and al, 8; mov rdi, rbp; lea rsi, [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000009e72d: test eax, 0x8d48000e; adc eax, 0xea8e9; cmove rax, rdx; ret; 
0x00000000000604d5: test eax, 0x950f7ff0; ret 0xc166; 
0x0000000000183282: test eax, 0xe3c4c9eb; jns 0x1832ec; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000183a62: test eax, 0xe3c4c9eb; jns 0x183acc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000082c2e: test eax, 0xe9c68948; sub al, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x000000000011efc3: test eax, 0xf7000c4e; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000011edc3: test eax, 0xf7000c50; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000011ebc3: test eax, 0xf7000c52; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011e7c3: test eax, 0xf7000c56; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011dbc3: test eax, 0xf7000c62; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011b8c3: test eax, 0xf7000c85; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001141c3: test eax, 0xf7000cfc; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001123c3: test eax, 0xf7000d1a; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001121c3: test eax, 0xf7000d1c; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000010e1c3: test eax, 0xf7000d5c; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010d0c3: test eax, 0xf7000d6d; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000010c9c3: test eax, 0xf7000d74; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010c8c3: test eax, 0xf7000d75; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000d29c3: test eax, 0xf7001114; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000441c3: test eax, 0xf70019fc; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000b9db8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x00000000000c63a3: test eax, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000011b7af: test eax, eax; cmove eax, edx; ret; 
0x00000000000cf74e: test eax, eax; cmove rax, rdx; add rsp, 0x28; ret; 
0x0000000000113226: test eax, eax; cmovns eax, edx; ret; 
0x0000000000047cc5: test eax, eax; cmovs eax, edx; ret; 
0x0000000000114712: test eax, eax; jns 0x114719; mov byte ptr [rbx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000009e360: test eax, eax; lea rdx, [rip + 0x1c117]; lea rax, [rip + 0x1c090]; cmovne rax, rdx; ret; 
0x000000000012d351: test eax, eax; lea rdx, [rip + 0x5c136]; lea rax, [rip + 0x5c18f]; cmove rax, rdx; ret; 
0x00000000000bb573: test eax, eax; mov dword ptr [rdi + 8], eax; cmove rbx, rdx; mov rax, rbx; pop rbx; ret; 
0x00000000001183a9: test eax, eax; mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a0dd3: test eax, eax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x00000000000639c0: test eax, eax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x0000000000052ff0: test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x00000000001446f6: test eax, eax; sete al; add rsp, 8; ret; 
0x0000000000043b6f: test eax, eax; sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000014caad: test eax, eax; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x0000000000149cb9: test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000000639f2: test eax, eax; setne al; movzx eax, al; neg eax; pop rbx; ret; 
0x0000000000027401: test eax, eax; setne dil; add rsp, 8; mov eax, edi; neg eax; ret; 
0x00000000001821dc: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000000c5d1b: test eax, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000091207: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000140f70: test eax, ebx; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000017a333: test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000e0f47: test eax, edi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000c8043: test eax, edx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000011fea4: test eax, edx; idiv edi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000011fe98: test eax, edx; idiv edi; inc dword ptr [rcx + rcx*4 - 0x10]; syscall; 
0x000000000007b2f6: test eax, esi; idiv bh; jmp qword ptr [rax]; 
0x000000000011fb62: test eax, esi; idiv edi; jmp qword ptr [rdi + 0x6d]; 
0x000000000017a52b: test eax, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000007b139: test eax, esp; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014de7a: test ebp, ebp; dec dword ptr [rax - 0x75]; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000017a94e: test ebp, ebp; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000d977b: test ebp, ebx; adc eax, 0x89480000; ret 0x894c; 
0x000000000012d2f7: test ebp, ecx; clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ccbe; cmove rax, rdx; ret; 
0x000000000018bc2e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000090ce8: test ebx, ebp; add byte ptr [rax], al; add al, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000aa6d0: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000038fd1: test ebx, edi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000017a310: test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000012c9c5: test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000090ec8: test ebx, esi; add byte ptr [rax], al; add al, ch; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000000aaba8: test ebx, esi; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000009724f: test ecx, eax; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000018e572: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000000a3f62: test ecx, ebx; and byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7c72: test ecx, ecx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000863f0: test ecx, ecx; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000c720a: test ecx, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008cda5: test ecx, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000049c19: test ecx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000010246b: test edi, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rdx; fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x000000000013a74c: test edi, ecx; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x000000000017a971: test edx, ecx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000017a439: test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000044b27: test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x00000000000ff602: test edx, edx; sete al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000bb91e: test edx, edx; sete al; ret; 
0x0000000000154c87: test edx, edx; setne al; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010b8e6: test esi, 0x575ff00; mov word ptr [rdi], si; xor eax, eax; ret; 
0x0000000000049739: test esi, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000018e565: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000000a0099: test esi, esi; mov rax, rdx; cmovne rax, rdi; ret; 
0x00000000000d99bb: test esi, esp; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000018e57f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000011b923: test qword ptr [r8 + rax], rcx; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115ce8: test qword ptr [rax - 0xe89fe07], 0x7420fa80; in al, dx; mov byte ptr [r8 - 1], 0; ret; 
0x0000000000165502: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000015e762: test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000044985: test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000cf74d: test rax, rax; cmove rax, rdx; add rsp, 0x28; ret; 
0x00000000001183a8: test rax, rax; mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a0dd2: test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x00000000000639bf: test rax, rax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000001446f5: test rax, rax; sete al; add rsp, 8; ret; 
0x00000000000a0098: test rsi, rsi; mov rax, rdx; cmovne rax, rdi; ret; 
0x0000000000029e34: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000001861a0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821a0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001861c0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821b0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018620c: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001821de: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000185d43: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000001860d5: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000182235: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000018aad0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000186190: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000182190: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000182a40: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a60: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000182a26: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000001827b0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000181783: tzcnt ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000001817e8: tzcnt ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000001817ac: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001817cc: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181620: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000181640: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000181660: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000181602: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000181852: tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000ba071: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000168e58: ud2; lea r11, [rip + 0x5039f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000077d81: unpckhps xmm0, xmmword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0x3145; 
0x00000000000ba770: verw ax; pop rcx; test al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x00000000000bfa07: verw ax; ret 0xf755; 
0x00000000000e99b3: verw cx; cld; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000018d48d: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000001890ee: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018d491: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000001890f2: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000187fc0: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x0000000000186b70: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000188cf4: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000187414: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fc4: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x0000000000188624: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b74: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018d49a: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000188074: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x0000000000188cff: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018741f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fcf: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x00000000001895db: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x00000000001890fc: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018862e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b7e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018d496: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000188070: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x00000000001890f8: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018db75: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000001895e1: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x0000000000188cfb: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018741b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fcb: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018862a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b7a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018db79: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000018d479: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000189037: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018d47d: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018903b: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000187fe0: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x0000000000186b90: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018d459: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000188d14: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000187434: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fe4: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x0000000000188644: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b94: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000189288: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018932f: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018d486: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018d46d: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018d467: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000189279: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018927e: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000189283: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000189540: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018d462: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000001891c8: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000188d40: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000187460: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x0000000000188010: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000189320: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000189325: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000188ee6: vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000001874b6: vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018932a: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000001881b6: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x0000000000188d1f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018743f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187fef: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018864e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b9e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000189545: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000001894bc: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000189045: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000001891cd: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000189193: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018954b: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000001891d3: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000189199: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018919f: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x00000000001891a5: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018d482: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018953c: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018d45e: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000001891c4: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000189041: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000001894c2: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000188d3c: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018745c: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018800c: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000188d1b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018743b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000187feb: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018864a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000186b9a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018db6b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000018db6f: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000018dd7a: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000018dd80: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000018e052: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000018e118: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000018e04b: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000018e3af: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000018df6a: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000018e103: vmovdqu64 zmmword ptr [rdi + 0x40], zmm5; vmovdqu64 zmmword ptr [rdi + 0x80], zmm6; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000018e10a: vmovdqu64 zmmword ptr [rdi + 0x80], zmm6; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000018e111: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000018df3b: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018e3b6: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000018e319: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000018dd8e: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000018df71: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000018df23: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm4; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm5; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm6; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018e3be: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000018df79: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000018df2b: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm5; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm6; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018df33: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm6; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018e3a9: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000018df64: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000018dd88: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000018e321: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000018db84: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000018db88: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000018d423: vmovups zmm3, zmmword ptr [rcx - 0x40]; vmovups zmmword ptr [rdi], zmm0; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018d78e: vmovups zmmword ptr [r9 + 0x100], zmm12; vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d795: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d79c: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d7a3: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d787: vmovups zmmword ptr [r9 + 0xc0], zmm11; vmovups zmmword ptr [r9 + 0x100], zmm12; vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018d627: vmovups zmmword ptr [r9 - 0x100], zmm12; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3ed: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d63c: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d43e: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018d402: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d635: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d437: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018d3fb: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d62e: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018d3f4: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d430: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018db3d: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db0e: vmovups zmmword ptr [rdi + 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x100], zmm2; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018d3e6: vmovups zmmword ptr [rdi + 0xc0], zmm3; vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018d8f0: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d8f7: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d8fe: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d905: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018d42a: vmovups zmmword ptr [rdi], zmm0; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018db37: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db58: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018dd13: vmovups zmmword ptr [rsi + 0x100], zmm2; vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd1a: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd21: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dd28: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018dc7d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dc84: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dc8b: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000018dd0c: vmovups zmmword ptr [rsi + 0xc0], zmm2; vmovups zmmword ptr [rsi + 0x100], zmm2; vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000018db15: vmovups zmmword ptr [rsi - 0x100], zmm2; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db2a: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db23: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018db1c: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018dc77: vmovups zmmword ptr [rsi], zmm2; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000012d281: vpcmpeqb xmm11, xmm15, xmmword ptr [rbx]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5bdc0]; lea rdx, [rip + 0x5bd59]; cmove rax, rdx; ret; 
0x000000000012d1c1: vpcmpeqb xmm11, xmm15, xmmword ptr [rbx]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5bea0]; lea rdx, [rip + 0x5be39]; cmove rax, rdx; ret; 
0x000000000012d101: vpcmpeqb xmm11, xmm15, xmmword ptr [rbx]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5bf60]; lea rdx, [rip + 0x5bef9]; cmove rax, rdx; ret; 
0x000000000009e721: vpcmpeqb xmm11, xmm15, xmmword ptr [rbx]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xea950]; lea rdx, [rip + 0xea8e9]; cmove rax, rdx; ret; 
0x000000000009e3d1: vpcmpeqb xmm11, xmm15, xmmword ptr [rbx]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeac80]; lea rdx, [rip + 0xeac19]; cmove rax, rdx; ret; 
0x000000000009e271: vpcmpeqb xmm11, xmm15, xmmword ptr [rbx]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeae00]; lea rdx, [rip + 0xead99]; cmove rax, rdx; ret; 
0x000000000018245b: vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000005eeaf: vpmulhuw xmm8, xmm15, xmmword ptr [r8]; add al, byte ptr [rax]; add cl, ch; stosd dword ptr [rdi], eax; in al, 0xff; jmp qword ptr [rsi + 0x44]; 
0x0000000000181610: vzeroupper; ret; 
0x0000000000182180: vzeroupper; xor eax, eax; ret; 
0x0000000000080a3e: wait; adc al, byte ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000080b20: wait; adc al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000773d1: wait; adc eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0xbe01; 
0x00000000000aa581: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000191086: wait; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000116191: wait; idiv r15; mov eax, 1; add rsp, 8; ret; 
0x000000000011b3d4: wait; int1; jmp qword ptr [rsi + 0xf]; 
0x0000000000097f21: wait; out 0xff, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000009e401: wait; push rsp; or al, 0; lea rdx, [rip + 0xcaa04]; cmovne rax, rdx; ret; 
0x0000000000116641: wait; ret 0xffff; 
0x000000000012c8e1: wait; ret; 
0x00000000000b8595: wait; sub byte ptr [rdi], cl; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000000b966d: wrmsr; in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b96ef: wrmsr; in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b97f1: wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x0000000000103cee: xabort -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000169936: xabort 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000017c43f: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017cc63: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e5af: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c02f: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017cd53: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017cb73: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017bb3b: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000867a2: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000000920cb: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000017c34b: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000014c663: xchg al, dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x00000000000914db: xchg al, dl; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012ece6: xchg al, dl; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000015a906: xchg ax, bp; or byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d6a6: xchg bh, ah; add dword ptr [rax], eax; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000183a6c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000018328c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000018367c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182e9c: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018599d: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000145a86: xchg bh, dh; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000018a208: xchg bl, al; add al, byte ptr [rax]; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000001844a1: xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x00000000001856a1: xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000184da1: xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001850a1: xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000184799: xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000120b98: xchg bl, dl; add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x000000000015b0ed: xchg byte ptr [r8], r9b; add byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000f6485: xchg byte ptr [rax + 0x31000000], cl; test byte ptr [rcx + 0x442c244c], 0x29; ret 0x8944; 
0x00000000000ba5f2: xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x000000000017d5bb: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000017f10f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011b7a4: xchg byte ptr [rax + rax], cl; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000011b7d7: xchg byte ptr [rax + rax], cl; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017e8ef: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017bdbf: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e0cf: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000017c0ff: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017d113: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000003e28e: xchg byte ptr [rax - 2], dh; jmp qword ptr [rsi + 0xf]; 
0x000000000017c41b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000011e7e1: xchg byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000015b0ee: xchg byte ptr [rax], cl; add byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000018303b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c4eb: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000011e8e6: xchg byte ptr [rbp + 0xc], dl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000017ec2f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c8a3: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017e40f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000010e9e6: xchg byte ptr [rbp + rcx], dl; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017dbef: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x0000000000148486: xchg byte ptr [rbp - 2], ch; jmp qword ptr [rsi + 0xf]; 
0x00000000000a02a6: xchg byte ptr [rbp - 8], cl; dec dword ptr [rax + 0x29]; ret; 
0x00000000000aa580: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000017edcf: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000017c29f: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017d2f3: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017ca83: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017ba8f: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x0000000000121a43: xchg byte ptr [rbx - 0x172ceffc], cl; and eax, 1; ret; 
0x0000000000031d0e: xchg byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4a08; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031c8c: xchg byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b4a8a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007718d: xchg byte ptr [rcx + rax - 0x10], cl; mov dword ptr [rbp - 0x4f0], 1; mov r10, rdx; xor esi, esi; jmp rax; 
0x000000000007776d: xchg byte ptr [rcx + rax - 0x10], cl; mov r10, rdx; mov esi, 1; mov dword ptr [rbp - 0x4f0], 1; jmp rax; 
0x000000000002a6e5: xchg byte ptr [rcx + rax], bl; add byte ptr [rcx - 0xa], al; ret; 
0x000000000017d4d3: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000a1162: xchg byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x0000000000075be0: xchg byte ptr [rdi + 0x4800000b], al; mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x0000000000078934: xchg byte ptr [rdi + 0x4cfffff7], dl; mov edx, dword ptr [rbp - 0x518]; jmp rax; 
0x000000000017be8f: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000018352c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d4c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000077d80: xchg byte ptr [rdi], cl; adc eax, 0x89490000; ret 0x3145; 
0x0000000000183e5c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182639: xchg byte ptr [rdi], cl; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000867b1: xchg byte ptr [rdx + 0x44000001], bl; mov esi, esp; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000017c36f: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017d3e3: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017bb5f: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017df2f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000e3bd8: xchg byte ptr [rdx], al; add byte ptr [rax - 0x77], cl; ret 0x3de9; 
0x000000000017bc01: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017cd25: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ce15: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017cc35: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000075356: xchg byte ptr [rip + 0x4c000015], dl; mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000007570c: xchg byte ptr [rsi + 0x4c00000e], dh; mov edx, ebp; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rcx + 0x38]; 
0x000000000017bf5f: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000184a46: xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e065: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ed65: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185946: xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185046: xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000184d46: xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000017e885: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000002c45d: xchg byte ptr [rsi], bh; add al, 0; add byte ptr [rbp + 0x36880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x000000000018342d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000005563e: xchg byte ptr [rsi], bl; sbb dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018473e: xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183d5d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017c1cf: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000011b9e6: xchg byte ptr [rsp + rcx + 0x64d8f700], al; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017c993: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000008e74e: xchg ch, bl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000001808bf: xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001806df: xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001810b7: xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017ffd7: xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180ed7: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000075ae1: xchg cl, bh; or al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x8f8]; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rbx + 0x38]; 
0x0000000000086f72: xchg cl, cl; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x0000000000091d62: xchg cl, cl; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000017f0a5: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e3a5: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000017dec5: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ebc5: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000018357d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182d9d: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000ef8dd: xchg dh, cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000017bc25: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000007cc78: xchg dl, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000017cb45: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017c965: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017ca55: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000150786: xchg dl, ch; std; jmp qword ptr [rsi + 0xf]; 
0x000000000017c875: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000011ff21: xchg dl, dh; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x3a], cl; mov edi, ebx; mov eax, r14d; syscall; 
0x0000000000140c55: xchg dword ptr [rax + 0x31000000], eax; fisttp dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000080a44: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x000000000009ce85: xchg dword ptr [rax - 0x72b7ffff], eax; adc eax, 0xd5c30; cmovne rax, rdx; ret; 
0x000000000006e333: xchg dword ptr [rax - 0x76ffffe9], esp; ret 0xc083; 
0x0000000000077ecb: xchg dword ptr [rax - 0x76fffff0], esp; ret 0xc083; 
0x00000000000791c0: xchg dword ptr [rax - 0x76fffffa], edx; ret 0xc083; 
0x00000000000ba423: xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000088ec2: xchg dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000145865: xchg dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000011ddc1: xchg dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000018e315: xchg dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000005a50f: xchg dword ptr [rax], eax; add eax, 0x63480000; ret 0x8d48; 
0x00000000001874bc: xchg dword ptr [rax], eax; vzeroupper; ret; 
0x000000000015afd2: xchg dword ptr [rax], ecx; add byte ptr [rax - 0x77], cl; adc eax, 0x8a574; add rsp, 8; ret; 
0x000000000015afc7: xchg dword ptr [rax], ecx; add byte ptr [rbp + 0x480e74c0], al; lea edx, [rip + 0x8874b]; mov qword ptr [rip + 0x8a574], rdx; add rsp, 8; ret; 
0x000000000006a5e6: xchg dword ptr [rbp - 0x76ffffec], esi; ret 0xc083; 
0x000000000007f7f1: xchg dword ptr [rbp - 0x76fffffd], edx; ret 0xc083; 
0x000000000009a858: xchg dword ptr [rbx + 1], esi; add byte ptr [rax], al; lea rdx, [rip + 0x10ff3c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000075be1: xchg dword ptr [rbx], ecx; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8b0]; call qword ptr [rax + 0x38]; 
0x00000000000fe227: xchg dword ptr [rcx + 0xffff27f], edi; mov dh, 0x4a; or byte ptr [rax + 0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx; 
0x0000000000164cf5: xchg dword ptr [rcx + 5], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000077641: xchg dword ptr [rcx + rax - 0x10], ecx; jmp rax; 
0x00000000000777fd: xchg dword ptr [rcx + rax - 0x10], ecx; mov dword ptr [rbp - 0x548], 0; mov r10, rdx; mov dword ptr [rbp - 0x560], 1; jmp rax; 
0x0000000000077725: xchg dword ptr [rcx + rax - 0x10], ecx; mov r10, rdx; mov byte ptr [rbp - 0x510], 0x20; mov dword ptr [rbp - 0x500], 1; jmp rax; 
0x000000000010c1c1: xchg dword ptr [rcx + rax], ecx; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000775d4: xchg dword ptr [rcx - 0x76ffffe5], esi; ret 0xc083; 
0x000000000007e5e2: xchg dword ptr [rcx - 0x76fffff7], ebx; ret 0xc083; 
0x000000000002707d: xchg dword ptr [rcx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f6ef3: xchg dword ptr [rdi + 0xa], edi; add byte ptr [rax], al; lea rdi, [rip + 0xb58ad]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000a70ad: xchg dword ptr [rdi], esi; adc byte ptr [rax], al; movsxd rdx, dword ptr [rax + rdx*4]; add rdx, rax; jmp rdx; 
0x0000000000032c71: xchg dword ptr [rdx + 0x4b000000], ebp; movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x00000000000e39f7: xchg dword ptr [rdx + rax], esp; add byte ptr [rax - 0x73], cl; adc eax, 0xc8351; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000080989: xchg dword ptr [rdx], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; add al, 0x86; add rax, rsi; jmp rax; 
0x0000000000108429: xchg dword ptr [rip + 0x48000017], ebp; lea edx, [rip + 0xa5233]; mov r10, qword ptr [rsp + 0x30]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000167ab5: xchg dword ptr [rip + 0x63490005], edx; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000188fc5: xchg dword ptr [rsi + 0xffffffc], esi; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x00000000000e9c66: xchg dword ptr [rsi + rdi*8 - 0x7cb70001], esi; ret 0xf01; 
0x000000000007f7bf: xchg dword ptr [rsi - 0x76fffffd], esi; ret 0xc083; 
0x000000000013b22d: xchg dword ptr [rsi - 0x7d000000], ecx; clc; add dword ptr [rcx + rcx - 0x7b], esi; sal byte ptr [rbp + 0x15], 0x44; mov eax, eax; ret; 
0x000000000017fc18: xchg eax, ebp; adc eax, 0x83480000; ret 0xe910; 
0x00000000000dd492: xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000182527: xchg eax, ebp; add byte ptr [rax], al; add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x00000000000293ec: xchg eax, ebp; mov byte ptr [rcx + 0xf], 0x95; ret; 
0x00000000000a0834: xchg eax, ebp; mov dword ptr [rbp + 0x38], 0x940f41d0; ret; 
0x00000000000339b3: xchg eax, ebp; mov edi, 0x7a390017; cmp byte ptr [rsi + 0x13], dh; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000012d5a8: xchg eax, ebp; mov rax, rdi; ret; 
0x000000000015a8d4: xchg eax, ebp; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160dea: xchg eax, ebp; or byte ptr [rax], al; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015a907: xchg eax, ebp; or byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000160cde: xchg eax, ebp; or byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bd8f3: xchg eax, ebp; ret 0x10eb; 
0x0000000000194613: xchg eax, ebp; ret 0x145; 
0x000000000010e845: xchg eax, ebp; ret 0x2141; 
0x000000000013f358: xchg eax, ebp; ret 0x2c3c; 
0x00000000001909f0: xchg eax, ebp; ret 0x3145; 
0x00000000000a0c32: xchg eax, ebp; ret 0x3841; 
0x00000000000a6e48: xchg eax, ebp; ret 0x3941; 
0x00000000000a10f3: xchg eax, ebp; ret 0x3948; 
0x0000000000143d0c: xchg eax, ebp; ret 0x8041; 
0x000000000004ab70: xchg eax, ebp; ret 0x8445; 
0x0000000000046271: xchg eax, ebp; ret 0x8548; 
0x00000000000446f9: xchg eax, ebp; ret 0x8948; 
0x000000000015076b: xchg eax, ebp; ret 0x8b48; 
0x0000000000058fb0: xchg eax, ebp; ret 0x941; 
0x0000000000058f6c: xchg eax, ebp; ret 0xb60f; 
0x0000000000116424: xchg eax, ebp; ret 0xc084; 
0x00000000000604d9: xchg eax, ebp; ret 0xc166; 
0x0000000000089994: xchg eax, ebp; ret 0xc283; 
0x0000000000193cd6: xchg eax, ebp; ret 0xc931; 
0x00000000000c0277: xchg eax, ebp; ret 0xceb; 
0x00000000000994a1: xchg eax, ebp; ret 0xd020; 
0x000000000011634b: xchg eax, ebp; ret 0xd189; 
0x00000000000899c5: xchg eax, ebp; ret 0xd201; 
0x00000000000bf567: xchg eax, ebp; ret 0xd284; 
0x0000000000044e6a: xchg eax, ebp; ret 0xd321; 
0x0000000000190e8f: xchg eax, ebp; ret 0xd348; 
0x000000000005380f: xchg eax, ebp; ret 0xdaf7; 
0x0000000000194876: xchg eax, ebp; ret 0xdb31; 
0x000000000013f774: xchg eax, ebp; ret 0xfb80; 
0x00000000000c2ad4: xchg eax, ebp; ret 0xfeb; 
0x00000000000293f0: xchg eax, ebp; ret; 
0x0000000000154c8a: xchg eax, ebp; ror byte ptr [rax - 0x77], 4; and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000014cab0: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x000000000011dd53: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000116210: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000011dd7d: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000148f3e: xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000639f5: xchg eax, ebp; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; ret; 
0x00000000001019ee: xchg eax, ebp; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000087646: xchg eax, ebp; sal bh, 0xd8; ret; 
0x0000000000159f1e: xchg eax, ebp; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000086f63: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000018aef0: xchg eax, ebx; add rcx, r11; jmp rcx; 
0x0000000000086a71: xchg eax, ebx; call 0xffffffff89516a70; ret; 
0x000000000009bfeb: xchg eax, ebx; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000008bc41: xchg eax, ebx; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000000600b3: xchg eax, ebx; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000b52ec: xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000163a12: xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000929d7: xchg eax, ebx; or dword ptr [rax], eax; add rsp, 0x80; mov qword ptr [rip + 0x154b80], rdx; add dword ptr [rip + 0x154b75], 1; ret; 
0x0000000000092a30: xchg eax, ebx; or dword ptr [rax], eax; add rsp, 0x80; ret; 
0x000000000005752c: xchg eax, ebx; ret 0x3948; 
0x0000000000045601: xchg eax, ebx; ret 0x3949; 
0x0000000000087083: xchg eax, ebx; ret 0x394c; 
0x000000000014ac84: xchg eax, ebx; ret 0x841; 
0x00000000000c6bbf: xchg eax, ebx; ret 0x844; 
0x00000000000a2ae5: xchg eax, ebx; ret 0x845; 
0x0000000000045d60: xchg eax, ebx; ret 0x854d; 
0x00000000000c69d7: xchg eax, ebx; ret 0xd008; 
0x0000000000156544: xchg eax, ebx; ret 0xd108; 
0x0000000000108e19: xchg eax, ebx; ret 0xfff1; 
0x00000000000a234b: xchg eax, ebx; ret; 
0x00000000001667a9: xchg eax, ebx; sub byte ptr [rip + 0x14634900], al; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000000c742b: xchg eax, ecx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000112c53: xchg eax, ecx; add dword ptr [rax], eax; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000000448db: xchg eax, ecx; cmc; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e35d2: xchg eax, ecx; cmp rdx, rax; mov edx, 0x20; mov eax, 0xff; cmovne rax, rdx; ret; 
0x000000000012b472: xchg eax, ecx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000015be6e: xchg eax, ecx; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x000000000017f1b1: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000058f44: xchg eax, ecx; mov edi, 0x8c0fffff; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000011f9db: xchg eax, ecx; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000c7e50: xchg eax, ecx; or byte ptr [rdi], cl; test dword ptr [rax], ecx; add eax, 0x83480000; ret 0x4801; 
0x00000000000c63a0: xchg eax, ecx; or byte ptr [rdi], cl; test eax, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7207: xchg eax, ecx; or byte ptr [rdi], cl; test ecx, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000028eab: xchg eax, ecx; ret 0xffff; 
0x000000000012c8d3: xchg eax, ecx; ret; 
0x000000000018da36: xchg eax, ecx; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x00000000001560de: xchg eax, ecx; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000017d8df: xchg eax, ecx; sub eax, edx; ret; 
0x00000000001669a5: xchg eax, edi; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000041798: xchg eax, edi; add rdx, rdi; jmp rdx; 
0x000000000008b82e: xchg eax, edi; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000003166d: xchg eax, edi; cmp al, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x0000000000101bec: xchg eax, edi; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x00000000001650e5: xchg eax, edi; cmp eax, 0x63490005; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000008228a: xchg eax, edi; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0x130], rcx; ret; 
0x000000000008c146: xchg eax, edi; lahf; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000063b85: xchg eax, edi; mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000eaac4: xchg eax, edi; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000009cd65: xchg eax, edi; mov cl, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x13800; cmovne rax, rdx; ret; 
0x0000000000146523: xchg eax, edi; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000082291: xchg eax, edi; movabs al, byte ptr [0x1308a8948000000]; add byte ptr [rax], al; ret; 
0x000000000008c26c: xchg eax, edi; movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008c15c: xchg eax, edi; movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000b52e5: xchg eax, edi; push rdi; str word ptr [rcx + 0x63]; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000007e105: xchg eax, edi; rcl byte ptr [rdx], 0; mov dword ptr [rbp - 0x528], 1; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdx; jmp rax; 
0x0000000000102b90: xchg eax, edi; rcr byte ptr [rax + rax], 0x31; ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg eax, esp; ret 0x1589; 
0x000000000011bc3c: xchg eax, edi; rcr byte ptr [rax + rax], 0x84; ror byte ptr [rdi], 0x84; ret 0xc; 
0x000000000015b879: xchg eax, edi; rcr byte ptr [rax + rax], 0x84; ror byte ptr [rdi], 0x84; ret; 
0x00000000000c6aaa: xchg eax, edi; ret 0x1489; 
0x00000000000546d3: xchg eax, edi; ret 0x8545; 
0x000000000014a51d: xchg eax, edi; ret 0xc75; 
0x000000000014a52b: xchg eax, edi; ret 0xd284; 
0x000000000011b44a: xchg eax, edi; ret 0xda80; 
0x0000000000098b89: xchg eax, edi; ret 0xe2e9; 
0x000000000013c7c3: xchg eax, edi; ret 0xf631; 
0x0000000000145585: xchg eax, edi; ret; 
0x0000000000120856: xchg eax, edi; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000155a7f: xchg eax, edi; std; jmp qword ptr [rsi + 0x66]; 
0x000000000012576d: xchg eax, edi; sti; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x00000000001597e1: xchg eax, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000055f4a: xchg eax, edx; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000146d1e: xchg eax, edx; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; call rax; 
0x000000000006f4d5: xchg eax, edx; add qword ptr [rax], rax; add byte ptr [rcx + 1], cl; ret 0x3b45; 
0x0000000000094e48: xchg eax, edx; add rsp, 8; ret; 
0x00000000000dbf4a: xchg eax, edx; hlt; dec dword ptr [rax - 0x77]; ret; 
0x000000000012da34: xchg eax, edx; hlt; jmp qword ptr [rsi + 0xf]; 
0x0000000000185a2c: xchg eax, edx; lea rcx, [rip + 0x13aac]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018116c: xchg eax, edx; lea rcx, [rip + 0x1836c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017f1a7: xchg eax, edx; lea rcx, [rip + 0x1a331]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000055e78: xchg eax, edx; mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001812a4: xchg eax, edx; mov byte ptr [rcx + 0xf], 0x94; rol byte ptr [rbp + 0x48d274f6], 0x63; ror dword ptr [rax + 1], 0xd0; sub rax, rdi; ret; 
0x000000000012c074: xchg eax, edx; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000009b382: xchg eax, edx; ret 0x14; 
0x00000000000c18c3: xchg eax, edx; ret 0x2040; 
0x0000000000192a55: xchg eax, edx; ret 0x3145; 
0x0000000000039a68: xchg eax, edx; ret 0x854d; 
0x0000000000057319: xchg eax, edx; ret 0x8949; 
0x000000000014a9a0: xchg eax, edx; ret 0x8b48; 
0x0000000000192a2e: xchg eax, edx; ret 0xb60f; 
0x000000000014a992: xchg eax, edx; ret 0xc75; 
0x000000000009cb63: xchg eax, edx; ret 0xf083; 
0x0000000000181409: xchg eax, edx; ret 0xf40; 
0x0000000000051eed: xchg eax, edx; ror byte ptr [rax - 0x7d], 0xfa; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x2041; 
0x00000000001813db: xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000008b361: xchg eax, edx; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000017c637: xchg eax, edx; sub eax, edx; ret; 
0x000000000008fbf4: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000018b1f0: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016a7a3: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000008ebc6: xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000c8a4f: xchg eax, esi; add eax, 0x74db8500; sbb bh, byte ptr [rcx]; ret; 
0x00000000000ba684: xchg eax, esi; add rax, rsi; jmp rax; 
0x0000000000055f7d: xchg eax, esi; add rdx, rsi; cmp ecx, 0x2f; jmp rdx; 
0x0000000000145f86: xchg eax, esi; and al, byte ptr [rdi]; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x2c; call qword ptr [rax]; 
0x0000000000143032: xchg eax, esi; hlt; jmp qword ptr [rsi + 0x66]; 
0x000000000019137e: xchg eax, esi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000018b2ad: xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000129ac2: xchg eax, esi; mov cl, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000f8a51: xchg eax, esi; mov r11, rdi; add rax, rsi; jmp rax; 
0x000000000018b20b: xchg eax, esi; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160cae: xchg eax, esi; or byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000c5af0: xchg eax, esi; or byte ptr [rdi], cl; test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c5d18: xchg eax, esi; or byte ptr [rdi], cl; test eax, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c8040: xchg eax, esi; or byte ptr [rdi], cl; test eax, edx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c7c6f: xchg eax, esi; or byte ptr [rdi], cl; test ecx, ecx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000401c1: xchg eax, esi; or eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe07], al; ret; 
0x000000000009f406: xchg eax, esi; pop rsi; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000009cf37: xchg eax, esi; ret 0x3145; 
0x000000000013b0b7: xchg eax, esi; ret 0x8341; 
0x0000000000133ac0: xchg eax, esi; ret 0x8b41; 
0x00000000000c91f1: xchg eax, esi; ret 0xc085; 
0x00000000000c9247: xchg eax, esi; ret 0xd284; 
0x000000000009cee1: xchg eax, esi; ret 0xf631; 
0x000000000018b25c: xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014ac7e: xchg eax, esi; ror byte ptr [rcx + rdi - 0xd], 0xf; xchg eax, ebx; ret 0x841; 
0x0000000000155b0f: xchg eax, esi; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000000b5be6: xchg eax, esi; str word ptr [r11 + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000011b7d6: xchg eax, esi; xchg byte ptr [rax + rax], cl; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f7058: xchg eax, esp; adc byte ptr [rax], al; add byte ptr [rbp - 0x76df8b40], al; ret 0xe283; 
0x000000000015d6b0: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000008e922: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x88; ret; 
0x000000000013e5f1: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x1f0f; 
0x000000000013efb5: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x33e9; 
0x000000000013e4ed: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xf41; 
0x000000000013f0f3: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0xfee9; 
0x000000000013ee8b: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8944; 
0x000000000013f089: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x93e9; 
0x000000000013f00d: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x43e9; 
0x000000000005b01e: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret 0x4840; 
0x0000000000096d57: xchg eax, esp; and al, 0x88; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x4e72; 
0x00000000000a1c86: xchg eax, esp; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8348; 
0x00000000000a197a: xchg eax, esp; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x00000000000cf14d: xchg eax, esp; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000dbf01: xchg eax, esp; hlt; dec dword ptr [rax - 0x77]; sbb byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x000000000018140d: xchg eax, esp; mov byte ptr [rbp + 0x48dd74d2], 0x63; ror dword ptr [rax + 1], 0xf8; ret; 
0x00000000001935e4: xchg eax, esp; mov dword ptr [rbx + 0x1f0f02c7], 0x80; add byte ptr [rax - 0x77], cl; ret 0xc149; 
0x0000000000153d90: xchg eax, esp; nop dword ptr [rax]; ret; 
0x000000000015a974: xchg eax, esp; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000163ce8: xchg eax, esp; push rcx; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000015e81e: xchg eax, esp; ret 0x1389; 
0x00000000001929a5: xchg eax, esp; ret 0x1484; 
0x0000000000102b9c: xchg eax, esp; ret 0x1589; 
0x0000000000051ef4: xchg eax, esp; ret 0x2041; 
0x000000000010daef: xchg eax, esp; ret 0x2044; 
0x000000000010e3c3: xchg eax, esp; ret 0x2141; 
0x0000000000126329: xchg eax, esp; ret 0x2144; 
0x000000000004a96f: xchg eax, esp; ret 0x2948; 
0x00000000000cf329: xchg eax, esp; ret 0x3840; 
0x00000000000a6efe: xchg eax, esp; ret 0x3941; 
0x0000000000150606: xchg eax, esp; ret 0x3d83; 
0x0000000000054e3d: xchg eax, esp; ret 0x4e9; 
0x0000000000054646: xchg eax, esp; ret 0x7c8b; 
0x00000000000379e7: xchg eax, esp; ret 0x8040; 
0x0000000000054972: xchg eax, esp; ret 0x8341; 
0x000000000013e97f: xchg eax, esp; ret 0x841; 
0x00000000001914e7: xchg eax, esp; ret 0x8441; 
0x00000000000a08fb: xchg eax, esp; ret 0x8445; 
0x00000000000e19a9: xchg eax, esp; ret 0x854d; 
0x0000000000103081: xchg eax, esp; ret 0x8944; 
0x00000000000e4b00: xchg eax, esp; ret 0x894c; 
0x00000000000d5e8d: xchg eax, esp; ret 0x8d48; 
0x000000000013e9b3: xchg eax, esp; ret 0xa3c; 
0x000000000006ae37: xchg eax, esp; ret 0xb60f; 
0x00000000000f3c2e: xchg eax, esp; ret 0xc083; 
0x00000000001813de: xchg eax, esp; ret 0xc085; 
0x00000000000ee80e: xchg eax, esp; ret 0xd009; 
0x00000000000fdf21: xchg eax, esp; ret 0xd020; 
0x00000000000cef93: xchg eax, esp; ret 0xd029; 
0x000000000009cb6c: xchg eax, esp; ret 0xd084; 
0x00000000001153f6: xchg eax, esp; ret 0xd108; 
0x0000000000026bbc: xchg eax, esp; ret 0xd284; 
0x00000000000a6d1f: xchg eax, esp; ret 0xd308; 
0x00000000000844ed: xchg eax, esp; ret 0xdaf7; 
0x00000000000f6e52: xchg eax, esp; ret 0xe2c1; 
0x000000000005dc6b: xchg eax, esp; ret 0xeb83; 
0x0000000000028b37: xchg eax, esp; ret 0xf4e9; 
0x00000000000e7bf7: xchg eax, esp; ret 0xf883; 
0x000000000002a29b: xchg eax, esp; ret; 
0x0000000000089238: xchg eax, esp; rol byte ptr [rax + rax*8 - 0x7cb7e38c], 0xc4; sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000001812a8: xchg eax, esp; rol byte ptr [rbp + 0x48d274f6], 0x63; ror dword ptr [rax + 1], 0xd0; sub rax, rdi; ret; 
0x0000000000103c10: xchg eax, esp; rol byte ptr [rbx - 0x19743], 0xff; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xd009; 
0x000000000012c3dd: xchg eax, esp; rol byte ptr [rbx - 0x7cb7fd18], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000009a24c: xchg eax, esp; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000052ff3: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000639c3: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000ff605: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e374c: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x00000000001154b6: xchg eax, esp; sar dword ptr [rax], 0xf; xchg eax, esp; ret 0xd108; 
0x00000000001153f1: xchg eax, esp; sar dword ptr [rsp + rbx*2], 0xf; xchg eax, esp; ret 0xd108; 
0x0000000000036d08: xchg eax, esp; sti; sbb al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cdbbe: xchg ebp, ebx; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000012bb1d: xchg edi, esp; or eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000007a889: xchg edx, esp; and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004ab48: xchg esi, edi; sbb eax, 0x894c0000; ret 0x8948; 
0x000000000015afd1: xchg qword ptr [r8], rcx; add byte ptr [rax - 0x77], cl; adc eax, 0x8a574; add rsp, 8; ret; 
0x000000000015a923: xchg rax, r13; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160d9d: xchg rax, r13; or byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000002835e: xchg rax, r8; call 0x15d990; mov rdi, r12; mov rcx, qword ptr [rbp - 0x70]; call rcx; 
0x000000000002836a: xchg rax, r8; call rcx; 
0x00000000000c7e4f: xchg rax, rcx; or byte ptr [rdi], cl; test dword ptr [rax], ecx; add eax, 0x83480000; ret 0x4801; 
0x00000000000c5d17: xchg rax, rsi; or byte ptr [rdi], cl; test eax, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c803f: xchg rax, rsi; or byte ptr [rdi], cl; test eax, edx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000016bf97: xlatb; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018b43b: xlatb; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000032f8d: xlatb; add byte ptr [rax], al; add dh, dh; ret 0xf04; 
0x0000000000164ba5: xlatb; add eax, 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d0d2: xlatb; add rsi, rdx; lea r11, [rip + 0x4c863]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cf52: xlatb; add rsi, rdx; lea r11, [rip + 0x4c9e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cdd2: xlatb; add rsi, rdx; lea r11, [rip + 0x4cb63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cc53: xlatb; add rsi, rdx; lea r11, [rip + 0x4cce2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cad2: xlatb; add rsi, rdx; lea r11, [rip + 0x4ce63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c952: xlatb; add rsi, rdx; lea r11, [rip + 0x4cfe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c7d2: xlatb; add rsi, rdx; lea r11, [rip + 0x4d163]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c652: xlatb; add rsi, rdx; lea r11, [rip + 0x4d2e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c4d2: xlatb; add rsi, rdx; lea r11, [rip + 0x4d463]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c352: xlatb; add rsi, rdx; lea r11, [rip + 0x4d5e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c1d2: xlatb; add rsi, rdx; lea r11, [rip + 0x4d763]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c052: xlatb; add rsi, rdx; lea r11, [rip + 0x4d8e3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bed2: xlatb; add rsi, rdx; lea r11, [rip + 0x4da63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bd52: xlatb; add rsi, rdx; lea r11, [rip + 0x4dbe3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bbd2: xlatb; add rsi, rdx; lea r11, [rip + 0x4dd63]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a5f2: xlatb; add rsi, rdx; lea r11, [rip + 0x4ee43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a472: xlatb; add rsi, rdx; lea r11, [rip + 0x4efc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a2f2: xlatb; add rsi, rdx; lea r11, [rip + 0x4f143]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a173: xlatb; add rsi, rdx; lea r11, [rip + 0x4f2c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169ff2: xlatb; add rsi, rdx; lea r11, [rip + 0x4f443]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169e72: xlatb; add rsi, rdx; lea r11, [rip + 0x4f5c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169cf2: xlatb; add rsi, rdx; lea r11, [rip + 0x4f743]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169b72: xlatb; add rsi, rdx; lea r11, [rip + 0x4f8c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001699f2: xlatb; add rsi, rdx; lea r11, [rip + 0x4fa43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169872: xlatb; add rsi, rdx; lea r11, [rip + 0x4fbc3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001696f2: xlatb; add rsi, rdx; lea r11, [rip + 0x4fd43]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169572: xlatb; add rsi, rdx; lea r11, [rip + 0x4fec3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001693f2: xlatb; add rsi, rdx; lea r11, [rip + 0x50043]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169272: xlatb; add rsi, rdx; lea r11, [rip + 0x501c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001690f2: xlatb; add rsi, rdx; lea r11, [rip + 0x50343]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166588: xlatb; add rsi, rdx; lea r11, [rip + 0x52aad]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163bb8: xlatb; add rsi, rdx; lea r11, [rip + 0x552bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000152f2d: xlatb; and ebp, ebp; dec dword ptr [rax - 0x77]; ret; 
0x00000000001466b1: xlatb; call qword ptr [rax + 0x20]; 
0x000000000018b325: xlatb; fadd dword ptr [rdx]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000e1235: xlatb; fild word ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x3f; syscall; 
0x0000000000190f32: xlatb; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000147a1c: xlatb; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000012bea0: xlatb; jmp rax; 
0x00000000000418a6: xlatb; jmp rdi; 
0x000000000016adcb: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000018cf72: xlatb; lea r11, [rip + 0x2bdc6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cef8: xlatb; lea r11, [rip + 0x2be40]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ce69: xlatb; lea r11, [rip + 0x2becf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cc5e: xlatb; lea r11, [rip + 0x2c0da]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cb2c: xlatb; lea r11, [rip + 0x2c20c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca66: xlatb; lea r11, [rip + 0x2c2d2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c9e8: xlatb; lea r11, [rip + 0x2c350]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c951: xlatb; lea r11, [rip + 0x2c3e7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c755: xlatb; lea r11, [rip + 0x2c5e3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c624: xlatb; lea r11, [rip + 0x2c714]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c523: xlatb; lea r11, [rip + 0x2c815]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b942: xlatb; lea r11, [rip + 0x2d2b6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b8c8: xlatb; lea r11, [rip + 0x2d330]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b839: xlatb; lea r11, [rip + 0x2d3bf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b62e: xlatb; lea r11, [rip + 0x2d5ca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b4fc: xlatb; lea r11, [rip + 0x2d6fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b436: xlatb; lea r11, [rip + 0x2d7c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b3b8: xlatb; lea r11, [rip + 0x2d840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b321: xlatb; lea r11, [rip + 0x2d8d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018b125: xlatb; lea r11, [rip + 0x2dad3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aff4: xlatb; lea r11, [rip + 0x2dc04]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018aee5: xlatb; lea r11, [rip + 0x2dd13]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016d4f0: xlatb; lea r11, [rip + 0x4c208]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d33d: xlatb; lea r11, [rip + 0x4c5fb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ba98: xlatb; lea r11, [rip + 0x4dea0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016b93c: xlatb; lea r11, [rip + 0x4dffc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a9dc: xlatb; lea r11, [rip + 0x4e81c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a849: xlatb; lea r11, [rip + 0x4ebef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168c3b: xlatb; lea r11, [rip + 0x503fd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168fb8: xlatb; lea r11, [rip + 0x50480]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000168e46: xlatb; lea r11, [rip + 0x505f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016649c: xlatb; lea r11, [rip + 0x52b9c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001663d7: xlatb; lea r11, [rip + 0x52c61]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163acc: xlatb; lea r11, [rip + 0x553ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000163a07: xlatb; lea r11, [rip + 0x55471]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000010bfd0: xlatb; mov eax, 0x75; syscall; 
0x000000000010bff8: xlatb; mov eax, 0x77; syscall; 
0x00000000000e1911: xlatb; mov eax, esi; syscall; 
0x00000000000e1920: xlatb; mov eax, r8d; syscall; 
0x000000000013b3ee: xlatb; mov qword ptr [r9], rdi; ret; 
0x0000000000077429: xlatb; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000011dafe: xlatb; mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x000000000015b222: xlatb; mov rsi, r8; call qword ptr [rax + 8]; 
0x0000000000167181: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x51eb2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001647b1: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x546c2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000015db4a: xlatb; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x8c431]; call qword ptr [rax]; 
0x00000000000b0087: xlatb; ret 0x94c; 
0x00000000000aa5cf: xlatb; ret 0xc085; 
0x00000000000a8a90: xlatb; ret 0xc148; 
0x00000000001826b4: xlatb; ret 0xe883; 
0x00000000000aadbb: xlatb; ret 0xf188; 
0x00000000000b0204: xlatb; ret 0xf66; 
0x0000000000182878: xlatb; ret 0xff2d; 
0x00000000000aa5e4: xlatb; ret; 
0x00000000000aa9b1: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000185f45: xlatb; rol ch, cl; std; xlatb; ret; 
0x00000000001820ff: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000aa793: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000aac36: xlatb; rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x00000000000aac65: xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x000000000018e52e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x00000000001821c2: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000185c92: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000000aa763: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001863c6: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000001820c2: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000172c92: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000b0b3f: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x0000000000172cce: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000b575e: xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x0000000000186ee7: xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x000000000018e526: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000aabd4: xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000018245d: xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000160def: xlatb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a8976: xlatb; sal bh, 1; ret 0x8000; 
0x00000000000a8836: xlatb; sal bh, 1; ret 0xc000; 
0x00000000000a86f6: xlatb; sal bh, 1; ret 0xe000; 
0x00000000000a85b6: xlatb; sal bh, 1; ret 0xf000; 
0x00000000000a8476: xlatb; sal bh, 1; ret 0xf800; 
0x00000000000a8336: xlatb; sal bh, 1; ret 0xfc00; 
0x00000000000a81f6: xlatb; sal bh, 1; ret 0xfe00; 
0x00000000000a80b6: xlatb; sal bh, 1; ret 0xff00; 
0x00000000000a7f76: xlatb; sal bh, 1; ret 0xff80; 
0x00000000000a7e36: xlatb; sal bh, 1; ret 0xffc0; 
0x00000000000a7cf6: xlatb; sal bh, 1; ret 0xffe0; 
0x00000000000a7bb6: xlatb; sal bh, 1; ret 0xfff0; 
0x00000000000a7a76: xlatb; sal bh, 1; ret 0xfff8; 
0x00000000000a7936: xlatb; sal bh, 1; ret 0xfffc; 
0x00000000000a77f6: xlatb; sal bh, 1; ret 0xfffe; 
0x00000000000d2a8e: xlatb; sete al; add eax, 0x16d; ret; 
0x0000000000168b6d: xlatb; sfence; lea r11, [rip + 0x504c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000166185: xlatb; sfence; lea r11, [rip + 0x52cf0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000018e522: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000b0036: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000b0025: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000011d8c6: xlatb; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x0000000000047afc: xlatb; std; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x000000000016d18f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4c566]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016d00f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4c6e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ce8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4c866]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cd0f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4c9e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016cb8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4cb66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016ca0f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4cce6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c88f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4ce66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c70f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4cfe6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c58f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4d166]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c40f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4d2e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c28f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4d466]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016c10f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4d5e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bf8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4d766]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016be0f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4d8e6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bc8f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4da66]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016bb16: xlatb; sub rsi, rdx; lea r11, [rip + 0x4dbdf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a6af: xlatb; sub rsi, rdx; lea r11, [rip + 0x4eb46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a52f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4ecc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a3af: xlatb; sub rsi, rdx; lea r11, [rip + 0x4ee46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a22f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4efc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016a0af: xlatb; sub rsi, rdx; lea r11, [rip + 0x4f146]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169f2f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4f2c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169daf: xlatb; sub rsi, rdx; lea r11, [rip + 0x4f446]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169c2f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4f5c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169aaf: xlatb; sub rsi, rdx; lea r11, [rip + 0x4f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016992f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4f8c6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001697af: xlatb; sub rsi, rdx; lea r11, [rip + 0x4fa46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016962f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4fbc6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001694af: xlatb; sub rsi, rdx; lea r11, [rip + 0x4fd46]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000016932f: xlatb; sub rsi, rdx; lea r11, [rip + 0x4fec6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000001691af: xlatb; sub rsi, rdx; lea r11, [rip + 0x50046]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000169036: xlatb; sub rsi, rdx; lea r11, [rip + 0x501bf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000113b34: xlatb; syscall; 
0x000000000015e7a8: xlatb; xor eax, eax; ret; 
0x0000000000142085: xlatb; xor esi, ebp; jmp qword ptr [rsi + 0xf]; 
0x00000000000b4d98: xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b1fc0: xor ah, ah; mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b1fd0: xor ah, ah; mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000b2000: xor ah, ah; mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000b4d2e: xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b2070: xor ah, ah; mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000080839: xor al, 0; add al, 0; add cl, ch; ret 0xfffc; 
0x000000000011ebb1: xor al, 0; add byte ptr [rax], al; syscall; 
0x0000000000041792: xor al, 0x16; add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x0000000000146c68: xor al, 0x24; mov rdi, rbx; xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x00000000000eae5c: xor al, 0x31; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000042f16: xor al, 0x48; and edx, eax; or rdx, rdi; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000aaceb: xor al, 0x48; lea eax, [rdi + rax + 0x20]; ret; 
0x00000000000866ab: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000091b2b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000034928: xor al, 0x5a; sbb eax, dword ptr [rax]; lea rdi, [rip + 0x1b1ded]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000113b78: xor al, 0x68; or eax, 0x4c894800; and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012bef4: xor al, 0x75; loope 0x12bf40; lea eax, [rip + 0xbe4d2]; pop rbx; mov dword ptr [rip + 0xbe4b7], 1; ret; 
0x000000000018258b: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000032c78: xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000015a549: xor al, 0x8c; add eax, 0xaa7ee800; in eax, dx; jmp qword ptr [rsi + 0x66]; 
0x00000000000f238b: xor al, 0x8d; dec dword ptr [rcx - 0x7c25d636]; ret 0x7401; 
0x00000000000585e4: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000f93d6: xor al, 0xb; add byte ptr [rax + 0x63], cl; add al, 0x83; add rax, rbx; jmp rax; 
0x00000000000807af: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; lea rcx, [rbx + 0x40]; mov rdi, rbx; call rax; 
0x00000000000e6dd0: xor al, 0xe5; dec dword ptr [rax - 0x77]; ret; 
0x0000000000041ec1: xor al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x00000000000cd8c8: xor al, 1; add byte ptr [rax], al; ret; 
0x000000000011e901: xor al, 1; add byte ptr [rax], al; syscall; 
0x000000000011d8cb: xor al, al; or eax, edx; ret; 
0x000000000011ec41: xor al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000063b7e: xor al, byte ptr [rbp + 0x481d75c0]; mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000017a3da: xor al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000114341: xor al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000000dc4f0: xor al, ch; adc cl, byte ptr [rsi - 0x76b7000c]; ret; 
0x0000000000110245: xor al, ch; in eax, 0x4e; int1; dec dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000147a04: xor al, ch; mul dl; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000000dc7b0: xor al, ch; push rdx; mov esi, esp; dec dword ptr [rax - 0x77]; ret; 
0x0000000000133517: xor al, ch; ret; 
0x0000000000111578: xor ax, ax; ret; 
0x00000000001460bd: xor bh, bh; xor eax, 0x72164; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f7d: xor bh, bh; xor eax, 0x722a4; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000000837ea: xor bh, byte ptr [rip + 0x1a740016]; lea rdi, [rip + 0x163d29]; sub rsp, 0x80; call 0x12bdb0; add rsp, 0x80; ret; 
0x0000000000132022: xor bh, ch; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000004321a: xor bl, 0xf; adc dword ptr [rdi], eax; mov dword ptr [rsp - 4], edx; movd xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000370ce: xor bl, byte ptr [rbx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af648; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003709c: xor bl, byte ptr [rbx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af7fa; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018b8cc: xor bl, dl; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000014edb8: xor byte ptr [r10], al; add byte ptr [rax], al; add bl, ch; mov al, 0xe8; add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x0000000000037321: xor byte ptr [r11], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af5f4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cd9bc: xor byte ptr [r11], r15b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000aa6ed: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x00000000000aa75f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000448c5: xor byte ptr [r15], r9b; adc dword ptr [rdi + 0x40], eax; movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b4c3: xor byte ptr [r15], r9b; adc dword ptr [rdi + 0x40], eax; ret; 
0x0000000000125e0b: xor byte ptr [r8 + 1], dil; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001368ab: xor byte ptr [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000090b4e: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001480d2: xor byte ptr [r8 - 0x77], cl; ret 0x8b48; 
0x00000000000fdaeb: xor byte ptr [r9 + 0x63], r9b; cmp byte ptr [r8 + 0x127710f9], r8b; movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000112909: xor byte ptr [rax + 0x10], bh; syscall; 
0x000000000011e1d7: xor byte ptr [rax + 0x149], bh; syscall; 
0x000000000008b8f0: xor byte ptr [rax + 0x29], cl; ret 0x3949; 
0x000000000009b235: xor byte ptr [rax + 0x31], cl; ret 0x8948; 
0x000000000008c76f: xor byte ptr [rax + 0x39], cl; adc byte ptr [r10 + 0x2a], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000127dd1: xor byte ptr [rax + 0x39], cl; ret 0xe975; 
0x0000000000102183: xor byte ptr [rax + 0x39], cl; ror dword ptr [rdi], 0x84; ret 0xfffc; 
0x000000000010cb87: xor byte ptr [rax + 0x437501e5], al; mov eax, 0x10c; syscall; 
0x0000000000108439: xor byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000125e0c: xor byte ptr [rax + 1], bh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001368ac: xor byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014f2cd: xor byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000000aacc6: xor byte ptr [rax + 1], cl; ret 0x547c; 
0x000000000014f2cc: xor byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000094514: xor byte ptr [rax + 8], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000005bd18: xor byte ptr [rax + 9], cl; ret 0xb848; 
0x000000000014bce7: xor byte ptr [rax + rax + 0x1b80000], 0; add byte ptr [rax], al; ret; 
0x00000000001521e1: xor byte ptr [rax + rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x0000000000098a33: xor byte ptr [rax - 0x75], cl; add eax, 0x14b4a5; mov qword ptr [rax], rdi; ret; 
0x0000000000093899: xor byte ptr [rax - 0x75], cl; add eax, 0x15063f; mov qword ptr [rax], rdx; ret; 
0x000000000002a071: xor byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000145c19: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; mov rsi, qword ptr [rsp + 0x20]; call qword ptr [rax]; 
0x0000000000055e75: xor byte ptr [rax - 0x75], cl; xchg eax, edx; mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b4f9f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000090b4f: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005c215: xor byte ptr [rax - 0x77], cl; fucomip st(0); ret 0xfc90; 
0x0000000000058824: xor byte ptr [rax - 0x77], cl; or byte ptr [r8 + 2], r15b; ret; 
0x000000000014bf4b: xor byte ptr [rax - 0x77], cl; out dx, eax; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000008b61c: xor byte ptr [rax - 0x77], cl; push rbx; sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001480d3: xor byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000109f7e: xor byte ptr [rax - 0x77], cl; ret 0xc5e9; 
0x000000000013f71b: xor byte ptr [rax - 0x77], cl; ret; 
0x00000000001424a1: xor byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x8b4c; 
0x000000000011549a: xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000045aed: xor byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000f8f96: xor byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000000fd484: xor byte ptr [rax - 0x7d], cl; ret 0x4908; 
0x00000000000f863f: xor byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x00000000000f4acb: xor byte ptr [rax - 0x7d], cl; ret; 
0x000000000015d9b1: xor byte ptr [rax - 0xffffff], 0xe0; nop dword ptr [rax + rax]; ret; 
0x00000000000869d0: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000086b07: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000088dcb: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000084346: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000152106: xor byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rsp; and al, 0x38; call qword ptr [rax + 0x18]; 
0x0000000000026ead: xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; jmp rax; 
0x0000000000026b9e: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000014510c: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; lea rax, [rip + 0xa47e7]; add rsp, 8; ret; 
0x00000000000472e3: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000029b68: xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000052e5a: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055997: xor byte ptr [rax], al; add byte ptr [rax], al; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba32: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp], 0; call rax; 
0x0000000000047bd0: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000472a2: xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000835e9: xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call rax; 
0x00000000000dbb76: xor byte ptr [rax], al; add byte ptr [rax], al; pop r13; pop r14; jmp rax; 
0x00000000000ba6f1: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000026413: xor byte ptr [rax], al; add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x000000000011f0e1: xor byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000b9887: xor byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000cd9c0: xor byte ptr [rbp + 0x3d], dh; ret; 
0x00000000000cd9bf: xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000ba2d5: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x00000000000b68e1: xor byte ptr [rbp + rcx*4 + 0x1d], cl; imul eax, dword ptr [rbx + 0xf], 0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000009ce8c: xor byte ptr [rbp + rcx], bl; cmovne rax, rdx; ret; 
0x000000000009e62f: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xcbd4; lea rdx, [rip + 0xcfddd]; cmovne rax, rdx; ret; 
0x000000000009e58f: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xcc64; lea rdx, [rip + 0xcfe6d]; cmovne rax, rdx; ret; 
0x000000000009e67f: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xedc4; lea rdx, [rip + 0xd1edd]; cmovne rax, rdx; ret; 
0x000000000009e5df: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xee54; lea rdx, [rip + 0xd1f6d]; cmovne rax, rdx; ret; 
0x000000000009d3c6: xor byte ptr [rbp + rdx - 0x80], 0xe6; add cl, byte ptr [rax - 0x73]; add eax, 0xb8dd; lea rdx, [rip + 0xc4d56]; cmovne rax, rdx; ret; 
0x00000000000808a5: xor byte ptr [rbp - 0x77], al; call 0x2949c8ae; rol byte ptr [rcx], 1; ret 0x3944; 
0x00000000000dd506: xor byte ptr [rbp - 0x7b], cl; div byte ptr [rsp + rbx*4 + 0x4c]; mov edi, esi; call 0x15d990; mov rax, r14; call rax; 
0x0000000000085895: xor byte ptr [rbx + 0x10], dh; lea rsi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x0000000000085894: xor byte ptr [rbx + 0x10], sil; lea rsi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000008a617: xor byte ptr [rbx + 0x2e], dh; lea rcx, [rax + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x000000000008a616: xor byte ptr [rbx + 0x2e], r14b; lea rcx, [rax + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rax], dil; mov eax, r10d; ret; 
0x000000000008f1e9: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000009baf8: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001946c9: xor byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x000000000008d31e: xor byte ptr [rbx + 0xf], dh; lea rsi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000008d31d: xor byte ptr [rbx + 0xf], r14b; lea rsi, [rcx + 1]; mov qword ptr [rdx + 0x28], rsi; mov byte ptr [rcx], dil; ret; 
0x000000000009cfaf: xor byte ptr [rbx - 0x1c89f607], al; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x0000000000091bcd: xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001496e8: xor byte ptr [rbx - 0x76b6c31b], al; ror byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000008c7e4: xor byte ptr [rbx - 0x76b70007], cl; fucomip st(0); sub byte ptr [rbx - 0x3fce0007], cl; pop rbx; ret; 
0x000000000015b21c: xor byte ptr [rbx - 0x76b7fff8], ah; xlatb; mov rsi, r8; call qword ptr [rax + 8]; 
0x000000000005a50a: xor byte ptr [rbx - 0x78f0f606], al; add byte ptr [rip + 0x63480000], al; ret 0x8d48; 
0x00000000000cd9bd: xor byte ptr [rbx], bh; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x0000000000037322: xor byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af5f4; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000372cb: xor byte ptr [rbx], bl; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af64b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000033750: xor byte ptr [rbx], bl; add byte ptr [rcx + rcx*4 + 0x25], al; ret 0x1b30; 
0x00000000001125af: xor byte ptr [rcx + 0x101b8f2], cl; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000001516e2: xor byte ptr [rcx + 0x56], al; push r13; lea r9, [rsp + 0x3a]; call qword ptr [rax]; 
0x00000000000fdaec: xor byte ptr [rcx + 0x63], cl; cmp byte ptr [r8 + 0x127710f9], r8b; movzx edx, cl; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000009cf3d: xor byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xb60f; 
0x000000000011da9e: xor byte ptr [rcx + rcx*4 + 0x4c], cl; and al, 0x38; syscall; 
0x000000000012b23d: xor byte ptr [rcx - 0x72b77fab], cl; push rcx; jo 0x12b255; adc dword ptr [rbp - 0x78], edi; call rax; 
0x000000000012b431: xor byte ptr [rcx - 0x72b77fab], cl; push rcx; jo 0x12b449; adc dword ptr [rbp - 0x78], edi; call rax; 
0x00000000000d7cdb: xor byte ptr [rcx - 0x77], al; ret 0xc781; 
0x00000000000869d1: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000086b08: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000088dcc: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000084347: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000008d987: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000082299: xor byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000011e0be: xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000005c912: xor byte ptr [rcx], bh; ret 0xef72; 
0x00000000000bc68c: xor byte ptr [rcx], bl; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x000000000012144a: xor byte ptr [rcx], dh; rol byte ptr [rbx - 0x69f0f601], 0xc0; ret; 
0x0000000000083b9b: xor byte ptr [rcx], dh; ror byte ptr [rax - 0x73], cl; xor eax, 0xfffffc1b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000115793: xor byte ptr [rcx], dh; xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x0000000000115753: xor byte ptr [rcx], dh; xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x00000000000448c6: xor byte ptr [rdi], cl; adc dword ptr [rdi + 0x40], eax; movups xmmword ptr [rdi + 0x50], xmm0; movups xmmword ptr [rdi + 0x60], xmm0; movups xmmword ptr [rdi + 0x70], xmm0; ret; 
0x000000000010b4c4: xor byte ptr [rdi], cl; adc dword ptr [rdi + 0x40], eax; ret; 
0x00000000000ba186: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000014e8f8: xor byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000b7dbe: xor byte ptr [rdi], cl; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000012f41c: xor byte ptr [rdi], cl; test byte ptr [rbp - 0x77000000], ah; ret 0xe283; 
0x000000000009f53a: xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x000000000013e8e4: xor byte ptr [rdx - 0x12], ch; jmp qword ptr [rsi + 0xf]; 
0x000000000013417a: xor byte ptr [rdx], ah; out dx, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000014edb9: xor byte ptr [rdx], al; add byte ptr [rax], al; add bl, ch; mov al, 0xe8; add al, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x00000000001523f6: xor byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rsp; and al, 0x40; call qword ptr [rax + 0x18]; 
0x0000000000193b7f: xor byte ptr [rip - 0x76b80000], al; ret 0xc148; 
0x000000000018af9f: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018af9a: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000affec: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000aa6ee: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000aa760: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000010bd24: xor byte ptr [rsi - 0x7d], ah; clc; adc byte ptr [rdi], cl; test byte ptr [rdi - 0x9fffffd], bl; ret 0xf20; 
0x0000000000153c46: xor byte ptr [rsi], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001320d7: xor ch, bh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000015c1a0: xor ch, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000095d65: xor ch, byte ptr [rbp + 0x12e80011]; fdivr st(7); jmp qword ptr [rsi - 0x70]; 
0x000000000015208b: xor ch, ch; inc dword ptr [rbp - 0x7b]; in al, 0x75; or eax, 0x5c415d5b; ret; 
0x00000000000b9618: xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000b962e: xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b9650: xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b966e: xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b968e: xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b96b4: xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b96d0: xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b96f0: xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b9710: xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9736: xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b9758: xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b9776: xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b9796: xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b97b2: xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b97d2: xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b97f2: xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b9812: xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b9838: xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b9888: xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000b955e: xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b957c: xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b959c: xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b95be: xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b95de: xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b95fe: xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000b9494: xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000b94a6: xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000b94bc: xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b94d4: xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b94ea: xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b94fc: xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b951a: xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b9526: xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b953c: xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b9480: xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000e910c: xor cl, byte ptr [rax + rax]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000017b84d: xor cl, byte ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000048d22: xor cl, byte ptr [rax - 0x77]; ret 0x35e8; 
0x00000000000491d7: xor cl, byte ptr [rax - 0x77]; ret 0x80e8; 
0x0000000000058995: xor cl, byte ptr [rax - 0x77]; ret 0xc2e8; 
0x0000000000048f7a: xor cl, byte ptr [rax - 0x77]; ret 0xdde8; 
0x000000000005c7de: xor cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000115795: xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x00000000000bb04b: xor cl, byte ptr [rbx + 0x47890846]; or al, 0x48; mov eax, ebx; pop rbx; ret; 
0x000000000002b1ab: xor cl, byte ptr [rcx - 0x73]; add cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000114ba3: xor cl, byte ptr [rip + 0x15894800]; xor cl, byte ptr [rip + 0x5894800]; xor r9b, byte ptr [rip + 0x58d4800]; sbb eax, 0x48000d32; add esp, 8; ret; 
0x0000000000114b04: xor cl, byte ptr [rip + 0x1b800]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000114baa: xor cl, byte ptr [rip + 0x5894800]; xor r9b, byte ptr [rip + 0x58d4800]; sbb eax, 0x48000d32; add esp, 8; ret; 
0x0000000000114bb1: xor cl, byte ptr [rip + 0x58d4800]; sbb eax, 0x48000d32; add esp, 8; ret; 
0x000000000015c19a: xor cl, byte ptr [rsi + 0x6de8ffed]; xor ch, bh; jmp qword ptr [rsi + 0x66]; 
0x00000000000e910b: xor cl, byte ptr gs:[rax + rax]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000012b70e: xor cl, ch; pop rsp; out 0xff, eax; jmp qword ptr [rsi + 0x66]; 
0x00000000000b4c10: xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000014c180: xor dh, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000041f91: xor dh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000012e2e3: xor dh, dh; dec dword ptr [rax + 0x39]; ret; 
0x000000000002a33d: xor dh, dh; ret 0x7501; 
0x00000000001475cf: xor dh, dh; ret 0xf04; 
0x0000000000042e22: xor dl, 0xf; adc dword ptr [rdi], eax; and rdx, rax; mov qword ptr [rsp - 8], rdx; movq xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000c94c7: xor dl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000094348: xor dl, byte ptr [rip - 0x3b7cb800]; sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000081052: xor dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x00000000001478f9: xor dword ptr [rax + 0x23], 0; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000034c8f: xor dword ptr [rax + 0x39], ecx; ror byte ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000011ad76: xor dword ptr [rax + 0x88], edi; syscall; 
0x000000000004a5de: xor dword ptr [rax - 0x39], ecx; ret; 
0x000000000015d80e: xor dword ptr [rax - 0x75], ecx; adc ecx, dword ptr [rax + 1]; ret 0x3949; 
0x000000000005f40d: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0x47e9; 
0x000000000010055f: xor dword ptr [rax - 0x78], eax; xor esi, esi; ret 0x7402; 
0x00000000000a6c0b: xor dword ptr [rax - 0x7c], eax; div byte ptr [rbp - 0x11]; mov qword ptr [rdx], rcx; ret; 
0x0000000000061b28: xor dword ptr [rax - 0x7d], ecx; ret 0x4404; 
0x0000000000196d8e: xor dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000081053: xor dword ptr [rax - 0x7d], ecx; ret 0x8908; 
0x0000000000115755: xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x000000000011eae1: xor dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000008104c: xor dword ptr [rbp + 0xf48ff46], ecx; xor dword ptr [r8 - 0x7d], ecx; ret 0x8908; 
0x000000000017f1ab: xor dword ptr [rbx + 0x148b0001], esp; xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000011333b: xor dword ptr [rbx], ecx; or eax, 0xc76400; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000003556b: xor dword ptr [rbx], edx; sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010c606: xor dword ptr [rcx - 0x2976b739], ecx; mov eax, 5; syscall; 
0x00000000001140ee: xor dword ptr [rcx - 0x77], ecx; fdivr dword ptr [rax + 0x10e]; syscall; 
0x000000000010f15b: xor dword ptr [rcx - 0xf], esp; dec dword ptr [rax + 0x39]; ret; 
0x000000000011e3c1: xor dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000a6dd6: xor dword ptr [rcx], edi; ret 0x2d74; 
0x00000000000334c8: xor dword ptr [rcx], edi; ret 0x820f; 
0x000000000013fac2: xor dword ptr [rdi], eax; add al, ch; out 0x6e, al; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdx + 0x48], 0x89; ret 0x1be; 
0x000000000011273b: xor dword ptr [rdi], edx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113b26: xor dword ptr [rdx - 1], edi; mov esi, edi; mov eax, 0x75; mov edi, edx; syscall; 
0x0000000000113bf6: xor dword ptr [rdx - 1], edi; mov esi, edi; mov eax, 0x77; mov edi, edx; syscall; 
0x000000000014844f: xor eax, 0x10c48348; pop rbx; ret; 
0x0000000000080210: xor eax, 0x12a10f; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000007ef0a: xor eax, 0x12b291; mov dword ptr [rbp - 0x4c8], 1; movsxd rax, dword ptr [rsi + rax*4]; add rax, rdx; jmp rax; 
0x000000000006d953: xor eax, 0x13c004; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000065ce5: xor eax, 0x143866; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000080099: xor eax, 0x163eca; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007d0e3: xor eax, 0x166e80; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000047601: xor eax, 0x16848d; lea rdi, [rip + 0x168493]; call 0x34fd0; xor eax, eax; ret; 
0x0000000000079f81: xor eax, 0x169fe2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000077133: xor eax, 0x16ce30; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006c95b: xor eax, 0x177608; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064973: xor eax, 0x17f5f0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000835db: xor eax, 0x1e0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x00000000001122a7: xor eax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000030f69: xor eax, 0x20c48348; pop rbx; pop rbp; pop r12; ret; 
0x000000000018de23: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001413df: xor eax, 0x48000a84; sub esp, 0x80; call 0x12bdb0; add rsp, 0x80; add rsp, 8; ret; 
0x000000000009d567: xor eax, 0x480014a1; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036a1f: xor eax, 0x48001b39; lea edi, [rip + 0x1afcf6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012f3d3: xor eax, 0x4858fff3; mov eax, ebx; pop rdx; pop rbx; ret; 
0x000000000009c490: xor eax, 0x487b8b48; mov rsi, r13; call rax; 
0x0000000000150af1: xor eax, 0x48c48348; pop rbx; pop rbp; ret; 
0x00000000001543c2: xor eax, 0x5b05d; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001446eb: xor eax, 0x6c5a3; call 0x25150; test rax, rax; sete al; add rsp, 8; ret; 
0x00000000001460c5: xor eax, 0x72156; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x00000000001460bf: xor eax, 0x72164; push qword ptr [rip + 0x72156]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f85: xor eax, 0x72296; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x0000000000145f7f: xor eax, 0x722a4; push qword ptr [rip + 0x72296]; lea r9, [rsp + 0x2c]; call qword ptr [rax]; 
0x000000000018e465: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000052e60: xor eax, 0x7b; call rax; 
0x000000000015e955: xor eax, 0x88c96; ret; 
0x0000000000106677: xor eax, 0x89000003; ret 0xc085; 
0x0000000000030d47: xor eax, 0x89000e18; ret; 
0x000000000004447a: xor eax, 0x98c48148; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000f8a46: xor eax, 0xb3d75; movzx edx, cl; movsxd rax, dword ptr [rsi + rdx*4]; mov r11, rdi; add rax, rsi; jmp rax; 
0x000000000010c8a2: xor eax, 0xb8c7894c; test dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000152a3d: xor eax, 0xc2ebffff; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 2; ret; 
0x00000000000e19cd: xor eax, 0xcdf7a; mov eax, 0x142; syscall; 
0x00000000000d6af0: xor eax, 0xd4c47; movzx eax, cl; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d4afb: xor eax, 0xd6b60; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d429d: xor eax, 0xd72de; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000d36b5: xor eax, 0xd7d6e; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000000cf847: xor eax, 0xe5d94; lea rdi, [rip + 0xe3a35]; call 0x34fd0; nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000e2dba: xor eax, 0xe8000ce3; lodsd eax, dword ptr [rsi]; and al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000005de07: xor eax, 0xe8fffffc; add al, 0x76; cld; jmp qword ptr [rsi - 0x7b]; 
0x00000000000ba5e4: xor eax, 0xf0a1b; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000ba5b4: xor eax, 0xf0a27; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000000418d4: xor eax, 0xf440016; mov dh, 0x3c; or cl, ch; ret 0xfffc; 
0x00000000000bb2e4: xor eax, 0xffff77e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000105135: xor eax, 0xffffd426; lea rdi, [rip + 0xe2be3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000922fc: xor eax, 0xffffdf0f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f99: xor eax, 0xffffe272; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091c93: xor eax, 0xffffe578; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009080e: xor eax, 0xfffff9fd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013fbd3: xor eax, 0xfffffa58; lea rdi, [rip + 0xa99e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000029b53: xor eax, 0xfffffa68; lea rdi, [rip + 0x1bcb95]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000151cd1: xor eax, 0xfffffb9a; lea rdi, [rip + 0x97f43]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000055636: xor eax, 0xfffffc05; lea rdi, [rip + 0x191e86]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083ba0: xor eax, 0xfffffc1b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151bf1: xor eax, 0xfffffc7a; lea rdi, [rip + 0x98023]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151b11: xor eax, 0xfffffd5a; lea rdi, [rip + 0x98103]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151a49: xor eax, 0xfffffe22; lea rdi, [rip + 0x981cb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c9d9: xor eax, 0xfffffec2; lea rdi, [rip + 0xbc27b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000151991: xor eax, 0xfffffeda; lea rdi, [rip + 0x98283]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001450f7: xor eax, 0xffffff04; lea rdi, [rip + 0xa47dd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902f5: xor eax, 0xffffff16; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009d55f: xor eax, 0xffffff3c; lea rdi, [rip + 0x14a135]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000137710: xor eax, 0xffffffbb; lea rdi, [rip + 0xb1b20]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114f17: xor eax, 0xffffffc4; lea rdi, [rip + 0xd2f25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000026eaa: xor eax, dword ptr [0x30]; add rsp, 0x28; jmp rax; 
0x0000000000026b9b: xor eax, dword ptr [0x30]; call rax; 
0x0000000000029b65: xor eax, dword ptr [0x30]; jmp rax; 
0x0000000000052e57: xor eax, dword ptr [0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055994: xor eax, dword ptr [0x30]; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba2f: xor eax, dword ptr [0x30]; mov qword ptr [rsp], 0; call rax; 
0x0000000000047bcd: xor eax, dword ptr [0x30]; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000835e6: xor eax, dword ptr [0x30]; mov rdi, rbp; call rax; 
0x00000000000dbb73: xor eax, dword ptr [0x30]; pop r13; pop r14; jmp rax; 
0x0000000000026410: xor eax, dword ptr [0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x000000000011ebe1: xor eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011f5a1: xor eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x0000000000094509: xor eax, dword ptr [rdi]; adc eax, 0x6c0f6600; rol byte ptr [rcx + 0xf], 0x11; xor byte ptr [rax + 8], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000005633f: xor eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000476dd: xor eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r14; ret; 
0x000000000008d8a0: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004896d: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cea9e: xor eax, eax; add rsp, 8; ret; 
0x00000000000352d0: xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000015a8b9: xor eax, eax; call 0x10d420; add rsp, 8; sar eax, 0x1f; ret; 
0x00000000000ff2dc: xor eax, eax; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000146538: xor eax, eax; call qword ptr [rbp + 0x28]; 
0x0000000000146476: xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000027a4b: xor eax, eax; call rbx; 
0x000000000015516b: xor eax, eax; call rcx; 
0x0000000000101c10: xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000012144b: xor eax, eax; cmp edi, 9; setbe al; ret; 
0x0000000000087640: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000008c191: xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne al; ret; 
0x000000000010eb6d: xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x000000000012c3a0: xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000e3728: xor eax, eax; cmp rdx, 0x2f; setne al; ret; 
0x00000000000e36d3: xor eax, eax; cmp rdx, 0x414a53; setne al; ret; 
0x00000000000e36e9: xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000e3716: xor eax, eax; cmp rdx, 0x7275; setne al; ret; 
0x000000000012b7cb: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000000bc156: xor eax, eax; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000112903: xor eax, eax; lea rdx, [rsp + 0x30]; mov eax, 0x10; syscall; 
0x000000000013b4c6: xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000010b487: xor eax, eax; mov dword ptr [rbp], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000043b75: xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000010b7b6: xor eax, eax; mov dword ptr [rbx + 4], edx; add rsp, 0x10; pop rbx; ret; 
0x000000000010b748: xor eax, eax; mov dword ptr [rbx + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010b6a5: xor eax, eax; mov dword ptr [rbx + 4], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086b4b: xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000013a491: xor eax, eax; mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x0000000000112819: xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000489e9: xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000113591: xor eax, eax; mov eax, 0x127; syscall; 
0x0000000000113641: xor eax, eax; mov eax, 0x128; syscall; 
0x0000000000113715: xor eax, eax; mov eax, 0x147; syscall; 
0x0000000000113875: xor eax, eax; mov eax, 0x148; syscall; 
0x000000000010c6ca: xor eax, eax; mov eax, 0x14c; syscall; 
0x000000000011eea4: xor eax, eax; mov eax, 0x2c; syscall; 
0x000000000011ec84: xor eax, eax; mov eax, 0x2d; syscall; 
0x00000000000e1471: xor eax, eax; mov eax, 0xf7; syscall; 
0x0000000000155d46: xor eax, eax; mov edx, 0xffffffff; mov rsi, rbx; mov rdi, rbp; call rcx; 
0x000000000009cb92: xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x00000000000a6c2b: xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000015e951: xor eax, eax; mov qword ptr [rip + 0x88c96], rsi; ret; 
0x00000000000cec78: xor eax, eax; mov qword ptr [rsp + 0x50], r15; call rbx; 
0x00000000000485c3: xor eax, eax; mov qword ptr [rsp - 0x10], r8; movhps xmm0, qword ptr [rsp - 0x10]; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000014e311: xor eax, eax; mov rax, qword ptr [rdi + 8]; lea rsi, [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x0000000000146c6d: xor eax, eax; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x0000000000089a59: xor eax, eax; mov rdi, r12; lea r9, [rsp + 0x20]; call rbx; 
0x000000000008995f: xor eax, eax; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000087df3: xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000000bbe59: xor eax, eax; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000154415: xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call rdx; 
0x0000000000112adf: xor eax, eax; mov rdx, rsp; mov eax, ecx; syscall; 
0x000000000014bf45: xor eax, eax; mov rsi, qword ptr [rsp + 0x30]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x28]; call rcx; 
0x000000000014c154: xor eax, eax; mov rsi, qword ptr [rsp + 0x40]; mov rdi, rbp; mov rdx, qword ptr [rsp + 0x20]; call rdx; 
0x000000000014f5f8: xor eax, eax; mov rsi, qword ptr [rsp + 0x68]; mov rdi, r15; mov rcx, qword ptr [rsp + 0x30]; call rcx; 
0x000000000014c807: xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000014c827: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000014f257: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000014e917: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x000000000014bc37: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x000000000012c887: xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000146eb0: xor eax, eax; pop rbp; jmp rdx; 
0x0000000000133e76: xor eax, eax; pop rbp; mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x00000000000a0012: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000039c5f: xor eax, eax; pop rbp; pop r12; ret; 
0x00000000001478a7: xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx; 
0x00000000001456f2: xor eax, eax; pop rbx; pop rbp; jmp rcx; 
0x0000000000047b64: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000ce815: xor eax, eax; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000047487: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047619: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000042146: xor eax, eax; pop rbx; ret; 
0x000000000008dc6b: xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000044910: xor eax, eax; ret; 
0x00000000000a8c9e: xor eax, eax; sub eax, ecx; ret; 
0x000000000010cf7d: xor eax, eax; syscall; 
0x000000000008c1c0: xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008c1d0: xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000bb91c: xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000181de0: xor eax, eax; vzeroupper; ret; 
0x00000000001016e8: xor eax, eax; xor ecx, ecx; push 0; call 0x101680; add rsp, 0x18; ret; 
0x0000000000101708: xor eax, eax; xor ecx, ecx; push 1; call 0x101680; add rsp, 0x18; ret; 
0x0000000000048668: xor eax, ecx; ret; 
0x00000000001493e1: xor eax, edx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000001493da: xor eax, edx; shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000047c17: xor eax, edx; sub eax, edx; ret; 
0x0000000000047c2b: xor eax, edx; sub rax, rdx; ret; 
0x000000000009d680: xor ebp, ebp; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000011db19: xor ebp, ebp; pop rax; pop rdi; call rax; 
0x0000000000035aa3: xor ebp, ebp; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000082664: xor ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000036f95: xor ebx, dword ptr [rbx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af781; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036f67: xor ebx, dword ptr [rbx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x1af92f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008a210: xor ebx, ebx; add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000dc040: xor ebx, ebx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000ce9a7: xor ebx, ebx; mov dword ptr fs:[rax], 0x4b; mov rax, rbx; pop rbx; ret; 
0x00000000001580be: xor ebx, ebx; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000316c6: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000632e0: xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x0000000000159e4f: xor ebx, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000f20ce: xor ebx, esi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000044b3b: xor ebx, esi; sbb dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000194382: xor ecx, dword ptr [rax + 0x21]; ret 0x8548; 
0x000000000019436e: xor ecx, dword ptr [rax + 0x21]; ret 0xbde9; 
0x000000000010b5fc: xor ecx, dword ptr [rax + 0x63]; ret 0xc283; 
0x00000000000a0335: xor ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000005771e: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000010c904: xor ecx, dword ptr [rcx - 0x3076bb36]; mov eax, 0x103; syscall; 
0x000000000009be81: xor ecx, dword ptr [rcx]; add byte ptr [rsi + 0x66], ah; nop dword ptr cs:[rax + rax]; nop; ret; 
0x00000000000c5009: xor ecx, dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x0000000000101749: xor ecx, ecx; call 0x101090; add rsp, 0x18; ret; 
0x0000000000146232: xor ecx, ecx; lea rdx, [rip + 0xe205]; lea r9, [rsp + 0x20]; call qword ptr [rax]; 
0x000000000012dfd0: xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000092f7e: xor ecx, ecx; movsxd rdx, edx; call 0x92e90; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000001016ea: xor ecx, ecx; push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000010170a: xor ecx, ecx; push 1; call 0x101680; add rsp, 0x18; ret; 
0x0000000000027ab6: xor ecx, ecx; xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x000000000011eea1: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec81: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000000a1e2b: xor ecx, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000014263d: xor edi, dword ptr [0x30]; call rax; 
0x0000000000096527: xor edi, edi; call qword ptr [rax]; 
0x00000000000dbab0: xor edi, edi; call rax; 
0x000000000012f10d: xor edi, edi; lea rsi, [rsp - 0x18]; mov eax, 0x83; syscall; 
0x00000000000dbac5: xor edi, edi; mov eax, 0xe4; syscall; 
0x0000000000026bd0: xor edi, edi; mov eax, edx; syscall; 
0x0000000000055dd2: xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000084f30: xor edi, edi; mov rax, rdi; ret; 
0x000000000011751d: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000112dec: xor edi, edi; syscall; 
0x00000000000472e0: xor edx, dword ptr [0x30]; call rdx; 
0x000000000004729f: xor edx, dword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000015e5b9: xor edx, dword ptr [rbp - 0x12]; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000108431: xor edx, dword ptr [rdx + 0xa]; add byte ptr [rbx + rcx*4 + 0x54], cl; and al, 0x30; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000941e3: xor edx, dword ptr [rip - 0x177cb800]; add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x000000000004189a: xor edx, dword ptr [rsi]; add byte ptr [rdi], cl; mov dh, 0xf8; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000000354b3: xor edx, ebp; sbb al, byte ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x000000000015e2b3: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000012be6f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000010b58c: xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000d3341: xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000ba732: xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000359ba: xor edx, edx; call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001562ba: xor edx, edx; call 0x8a930; add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x000000000010c495: xor edx, edx; call rax; 
0x000000000015e818: xor edx, edx; cmp eax, -1; sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x000000000005f463: xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000018a764: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c54: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a784: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185c74: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a7c2: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185cb2: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018a62a: xor edx, edx; lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000185b1a: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000835d7: xor edx, edx; lea rsi, [rip + 0x1e0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x0000000000091c8f: xor edx, edx; lea rsi, [rip - 0x1a88]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000091f95: xor edx, edx; lea rsi, [rip - 0x1d8e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000922f8: xor edx, edx; lea rsi, [rip - 0x20f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000083b9c: xor edx, edx; lea rsi, [rip - 0x3e5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009080a: xor edx, edx; lea rsi, [rip - 0x603]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000902f1: xor edx, edx; lea rsi, [rip - 0xea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011fa51: xor edx, edx; mov eax, 0x1d; syscall; 
0x00000000000e137e: xor edx, edx; mov eax, 0x3d; syscall; 
0x00000000000e12e3: xor edx, edx; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x0000000000055e08: xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000112de3: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000000a6cdd: xor edx, edx; mov qword ptr [rdi], rdx; ret; 
0x0000000000082240: xor edx, edx; mov rax, rdx; ret; 
0x0000000000048ba8: xor edx, edx; mov rdi, r8; mov eax, r10d; sub rsi, r8; syscall; 
0x000000000010bb27: xor edx, edx; mov rsi, r12; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000043ec6: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000010c4c5: xor edx, edx; mov rsi, rbp; mov rdi, rbx; mov eax, ecx; syscall; 
0x00000000000e1310: xor edx, edx; mov rsi, rbx; mov r8d, eax; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x0000000000027ab8: xor edx, edx; movzx eax, al; add eax, 1; push rax; call rbx; 
0x00000000000b9f13: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000091832: xor edx, edx; pop rbx; jmp rax; 
0x00000000000a6d70: xor edx, edx; pop rbx; mov qword ptr [rdi], rdx; ret; 
0x0000000000098fb0: xor edx, edx; pop rbx; pop rbp; mov rax, rdx; pop r12; ret; 
0x00000000000840e4: xor edx, edx; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x00000000000bbcc9: xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x00000000000e12e1: xor edx, edx; xor edx, edx; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x00000000001121f8: xor edx, edx; xor esi, esi; mov eax, 0x118; syscall; 
0x00000000000e16fe: xor edx, edx; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x00000000000920df: xor edx, edx; xor esi, esi; mov rdi, r14; call qword ptr [rax + 0x58]; 
0x000000000010c403: xor edx, edx; xor esi, esi; mov rdi, rbx; call rax; 
0x000000000010c430: xor edx, edx; xor esi, esi; mov rdi, rbx; mov eax, 0x135; syscall; 
0x000000000010a0e1: xor esi, dword ptr [rdx - 0x7cb7000f]; ret; 
0x0000000000142086: xor esi, ebp; jmp qword ptr [rsi + 0xf]; 
0x000000000009d520: xor esi, esi; add rsp, 8; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000a74a7: xor esi, esi; call 0x25220; add rsp, 8; ret; 
0x00000000000bb00b: xor esi, esi; call 0x25220; mov rax, rbx; pop rbx; ret; 
0x00000000000359ea: xor esi, esi; call 0x35540; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000452c9: xor esi, esi; call 0x49340; add rsp, 8; ret; 
0x000000000012e1e3: xor esi, esi; dec dword ptr [rax - 0x77]; ret 0xf741; 
0x000000000007719e: xor esi, esi; jmp rax; 
0x000000000012c65a: xor esi, esi; lea edx, [rdi*8 + 2]; mov edi, edx; syscall; 
0x00000000001478ef: xor esi, esi; lea rbp, [rbx + 0x23b0]; mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000153382: xor esi, esi; mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x0000000000097997: xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x00000000001121fa: xor esi, esi; mov eax, 0x118; syscall; 
0x00000000000e1700: xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x0000000000126408: xor esi, esi; mov edi, 0x2000004; call rcx; 
0x0000000000034e8c: xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010bb49: xor esi, esi; mov edi, dword ptr [rsp + 0x2c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000109113: xor esi, esi; mov edi, dword ptr [rsp + 0xa8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ab0f: xor esi, esi; mov edi, dword ptr [rsp + 0xc]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000009cb88: xor esi, esi; mov qword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000012df30: xor esi, esi; mov rax, rsi; ret; 
0x00000000000920e1: xor esi, esi; mov rdi, r14; call qword ptr [rax + 0x58]; 
0x0000000000047950: xor esi, esi; mov rdi, r9; call rdx; 
0x0000000000145878: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x00000000001457f2: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000010c405: xor esi, esi; mov rdi, rbx; call rax; 
0x000000000010c432: xor esi, esi; mov rdi, rbx; mov eax, 0x135; syscall; 
0x0000000000100562: xor esi, esi; ret 0x7402; 
0x0000000000052d7d: xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000111ab2: xor esi, esi; syscall; 
0x0000000000055dd0: xor esi, esi; xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000015db53: xor esp, eax; or byte ptr [rax], al; call qword ptr [rax]; 
0x000000000010c369: xor esp, esp; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000009feb1: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000012be6e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000015e2b2: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000011fa50: xor r10d, r10d; mov eax, 0x1d; syscall; 
0x00000000000e137d: xor r10d, r10d; mov eax, 0x3d; syscall; 
0x0000000000112e23: xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000000e12e0: xor r10d, r10d; xor edx, edx; mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x00000000001121f7: xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall; 
0x000000000010c368: xor r12d, r12d; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000009feb0: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000012668a: xor r15d, r15d; call rax; 
0x00000000001493d9: xor r8, rdx; shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000147a03: xor r8b, bpl; mul dl; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000000ff2db: xor r8d, r8d; call 0xfe830; add rsp, 0x18; ret; 
0x0000000000027a4a: xor r8d, r8d; call rbx; 
0x00000000000bc155: xor r8d, r8d; lea r9, [rsp + 0x28]; call rbx; 
0x0000000000113590: xor r8d, r8d; mov eax, 0x127; syscall; 
0x0000000000113640: xor r8d, r8d; mov eax, 0x128; syscall; 
0x0000000000113714: xor r8d, r8d; mov eax, 0x147; syscall; 
0x0000000000113874: xor r8d, r8d; mov eax, 0x148; syscall; 
0x000000000011eea3: xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec83: xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000000e1470: xor r8d, r8d; mov eax, 0xf7; syscall; 
0x0000000000089a58: xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x20]; call rbx; 
0x000000000008995e: xor r8d, r8d; mov rdi, r12; lea r9, [rsp + 0x28]; call rbx; 
0x00000000000bbe58: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x00000000001016e7: xor r8d, r8d; xor ecx, ecx; push 0; call 0x101680; add rsp, 0x18; ret; 
0x0000000000101707: xor r8d, r8d; xor ecx, ecx; push 1; call 0x101680; add rsp, 0x18; ret; 
0x0000000000114bb0: xor r9b, byte ptr [rip + 0x58d4800]; sbb eax, 0x48000d32; add esp, 8; ret; 
0x0000000000101748: xor r9d, r9d; call 0x101090; add rsp, 0x18; ret; 
0x0000000000101724: xor r9d, r9d; push 0; call 0x101680; add rsp, 0x18; ret; 
0x000000000011eea0: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall; 
0x000000000011ec80: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall; 
0x00000000001122a6: xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000026ea9: xor rax, qword ptr [0x30]; add rsp, 0x28; jmp rax; 
0x0000000000026b9a: xor rax, qword ptr [0x30]; call rax; 
0x0000000000029b64: xor rax, qword ptr [0x30]; jmp rax; 
0x0000000000052e56: xor rax, qword ptr [0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055993: xor rax, qword ptr [0x30]; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba2e: xor rax, qword ptr [0x30]; mov qword ptr [rsp], 0; call rax; 
0x0000000000047bcc: xor rax, qword ptr [0x30]; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000835e5: xor rax, qword ptr [0x30]; mov rdi, rbp; call rax; 
0x00000000000dbb72: xor rax, qword ptr [0x30]; pop r13; pop r14; jmp rax; 
0x000000000002640f: xor rax, qword ptr [0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x0000000000026ea8: xor rax, qword ptr fs:[0x30]; add rsp, 0x28; jmp rax; 
0x0000000000026b99: xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000029b63: xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000052e55: xor rax, qword ptr fs:[0x30]; lea rsi, [rip + 0x7b]; call rax; 
0x0000000000055992: xor rax, qword ptr fs:[0x30]; mov edi, dword ptr [rsp + 0x24]; call rax; 
0x000000000013ba2d: xor rax, qword ptr fs:[0x30]; mov qword ptr [rsp], 0; call rax; 
0x0000000000047bcb: xor rax, qword ptr fs:[0x30]; mov qword ptr fs:[rbp], rdx; mov rdi, qword ptr [rbx + 8]; call rax; 
0x00000000000835e4: xor rax, qword ptr fs:[0x30]; mov rdi, rbp; call rax; 
0x00000000000dbb71: xor rax, qword ptr fs:[0x30]; pop r13; pop r14; jmp rax; 
0x000000000002640e: xor rax, qword ptr fs:[0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1c3d26], rax; ret; 
0x00000000000b0355: xor rax, rax; ret; 
0x00000000001493e0: xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000047c2a: xor rax, rdx; sub rax, rdx; ret; 
0x000000000014263c: xor rdi, qword ptr [0x30]; call rax; 
0x000000000014263b: xor rdi, qword ptr fs:[0x30]; call rax; 
0x00000000000472df: xor rdx, qword ptr [0x30]; call rdx; 
0x000000000004729e: xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000000472de: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000004729d: xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 

36201 gadgets found
